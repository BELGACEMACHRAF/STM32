
couple_metre.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a7c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08003c4c  08003c4c  00013c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cdc  08003cdc  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08003cdc  08003cdc  00013cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ce4  08003ce4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ce4  08003ce4  00013ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ce8  08003ce8  00013ce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003cec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004018  20000010  08003cfc  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004028  08003cfc  00024028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b738  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000234f  00000000  00000000  0002b7bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ac0  00000000  00000000  0002db10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000810  00000000  00000000  0002e5d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025bd9  00000000  00000000  0002ede0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d8d2  00000000  00000000  000549b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ee01e  00000000  00000000  0006228b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002a80  00000000  00000000  001502ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00152d2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003c34 	.word	0x08003c34

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	08003c34 	.word	0x08003c34

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b970 	b.w	8000508 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	460d      	mov	r5, r1
 8000248:	4604      	mov	r4, r0
 800024a:	460f      	mov	r7, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4694      	mov	ip, r2
 8000254:	d965      	bls.n	8000322 <__udivmoddi4+0xe2>
 8000256:	fab2 f382 	clz	r3, r2
 800025a:	b143      	cbz	r3, 800026e <__udivmoddi4+0x2e>
 800025c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000260:	f1c3 0220 	rsb	r2, r3, #32
 8000264:	409f      	lsls	r7, r3
 8000266:	fa20 f202 	lsr.w	r2, r0, r2
 800026a:	4317      	orrs	r7, r2
 800026c:	409c      	lsls	r4, r3
 800026e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000272:	fa1f f58c 	uxth.w	r5, ip
 8000276:	fbb7 f1fe 	udiv	r1, r7, lr
 800027a:	0c22      	lsrs	r2, r4, #16
 800027c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000280:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000284:	fb01 f005 	mul.w	r0, r1, r5
 8000288:	4290      	cmp	r0, r2
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028c:	eb1c 0202 	adds.w	r2, ip, r2
 8000290:	f101 37ff 	add.w	r7, r1, #4294967295
 8000294:	f080 811c 	bcs.w	80004d0 <__udivmoddi4+0x290>
 8000298:	4290      	cmp	r0, r2
 800029a:	f240 8119 	bls.w	80004d0 <__udivmoddi4+0x290>
 800029e:	3902      	subs	r1, #2
 80002a0:	4462      	add	r2, ip
 80002a2:	1a12      	subs	r2, r2, r0
 80002a4:	b2a4      	uxth	r4, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002b2:	fb00 f505 	mul.w	r5, r0, r5
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	d90a      	bls.n	80002d0 <__udivmoddi4+0x90>
 80002ba:	eb1c 0404 	adds.w	r4, ip, r4
 80002be:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c2:	f080 8107 	bcs.w	80004d4 <__udivmoddi4+0x294>
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	f240 8104 	bls.w	80004d4 <__udivmoddi4+0x294>
 80002cc:	4464      	add	r4, ip
 80002ce:	3802      	subs	r0, #2
 80002d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d4:	1b64      	subs	r4, r4, r5
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11e      	cbz	r6, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40dc      	lsrs	r4, r3
 80002dc:	2300      	movs	r3, #0
 80002de:	e9c6 4300 	strd	r4, r3, [r6]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0xbc>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80ed 	beq.w	80004ca <__udivmoddi4+0x28a>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e9c6 0500 	strd	r0, r5, [r6]
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	d149      	bne.n	8000398 <__udivmoddi4+0x158>
 8000304:	42ab      	cmp	r3, r5
 8000306:	d302      	bcc.n	800030e <__udivmoddi4+0xce>
 8000308:	4282      	cmp	r2, r0
 800030a:	f200 80f8 	bhi.w	80004fe <__udivmoddi4+0x2be>
 800030e:	1a84      	subs	r4, r0, r2
 8000310:	eb65 0203 	sbc.w	r2, r5, r3
 8000314:	2001      	movs	r0, #1
 8000316:	4617      	mov	r7, r2
 8000318:	2e00      	cmp	r6, #0
 800031a:	d0e2      	beq.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	e9c6 4700 	strd	r4, r7, [r6]
 8000320:	e7df      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000322:	b902      	cbnz	r2, 8000326 <__udivmoddi4+0xe6>
 8000324:	deff      	udf	#255	; 0xff
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8090 	bne.w	8000450 <__udivmoddi4+0x210>
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2101      	movs	r1, #1
 800033c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000340:	fb07 2015 	mls	r0, r7, r5, r2
 8000344:	0c22      	lsrs	r2, r4, #16
 8000346:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800034a:	fb0e f005 	mul.w	r0, lr, r5
 800034e:	4290      	cmp	r0, r2
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x124>
 8000352:	eb1c 0202 	adds.w	r2, ip, r2
 8000356:	f105 38ff 	add.w	r8, r5, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4290      	cmp	r0, r2
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2b8>
 8000362:	4645      	mov	r5, r8
 8000364:	1a12      	subs	r2, r2, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb2 f0f7 	udiv	r0, r2, r7
 800036c:	fb07 2210 	mls	r2, r7, r0, r2
 8000370:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x14e>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 32ff 	add.w	r2, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x14c>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2c2>
 800038c:	4610      	mov	r0, r2
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000396:	e79f      	b.n	80002d8 <__udivmoddi4+0x98>
 8000398:	f1c1 0720 	rsb	r7, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa05 f401 	lsl.w	r4, r5, r1
 80003aa:	fa20 f307 	lsr.w	r3, r0, r7
 80003ae:	40fd      	lsrs	r5, r7
 80003b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b4:	4323      	orrs	r3, r4
 80003b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ba:	fa1f fe8c 	uxth.w	lr, ip
 80003be:	fb09 5518 	mls	r5, r9, r8, r5
 80003c2:	0c1c      	lsrs	r4, r3, #16
 80003c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c8:	fb08 f50e 	mul.w	r5, r8, lr
 80003cc:	42a5      	cmp	r5, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	fa00 f001 	lsl.w	r0, r0, r1
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2b4>
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2b4>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4464      	add	r4, ip
 80003f0:	1b64      	subs	r4, r4, r5
 80003f2:	b29d      	uxth	r5, r3
 80003f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f8:	fb09 4413 	mls	r4, r9, r3, r4
 80003fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000400:	fb03 fe0e 	mul.w	lr, r3, lr
 8000404:	45a6      	cmp	lr, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2ac>
 8000412:	45a6      	cmp	lr, r4
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2ac>
 8000416:	3b02      	subs	r3, #2
 8000418:	4464      	add	r4, ip
 800041a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800041e:	fba3 9502 	umull	r9, r5, r3, r2
 8000422:	eba4 040e 	sub.w	r4, r4, lr
 8000426:	42ac      	cmp	r4, r5
 8000428:	46c8      	mov	r8, r9
 800042a:	46ae      	mov	lr, r5
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x29c>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x298>
 8000430:	b156      	cbz	r6, 8000448 <__udivmoddi4+0x208>
 8000432:	ebb0 0208 	subs.w	r2, r0, r8
 8000436:	eb64 040e 	sbc.w	r4, r4, lr
 800043a:	fa04 f707 	lsl.w	r7, r4, r7
 800043e:	40ca      	lsrs	r2, r1
 8000440:	40cc      	lsrs	r4, r1
 8000442:	4317      	orrs	r7, r2
 8000444:	e9c6 7400 	strd	r7, r4, [r6]
 8000448:	4618      	mov	r0, r3
 800044a:	2100      	movs	r1, #0
 800044c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000450:	f1c3 0120 	rsb	r1, r3, #32
 8000454:	fa02 fc03 	lsl.w	ip, r2, r3
 8000458:	fa20 f201 	lsr.w	r2, r0, r1
 800045c:	fa25 f101 	lsr.w	r1, r5, r1
 8000460:	409d      	lsls	r5, r3
 8000462:	432a      	orrs	r2, r5
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000470:	fb07 1510 	mls	r5, r7, r0, r1
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047a:	fb00 f50e 	mul.w	r5, r0, lr
 800047e:	428d      	cmp	r5, r1
 8000480:	fa04 f403 	lsl.w	r4, r4, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x258>
 8000486:	eb1c 0101 	adds.w	r1, ip, r1
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 8000490:	428d      	cmp	r5, r1
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 8000494:	3802      	subs	r0, #2
 8000496:	4461      	add	r1, ip
 8000498:	1b49      	subs	r1, r1, r5
 800049a:	b292      	uxth	r2, r2
 800049c:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a0:	fb07 1115 	mls	r1, r7, r5, r1
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	fb05 f10e 	mul.w	r1, r5, lr
 80004ac:	4291      	cmp	r1, r2
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x282>
 80004b0:	eb1c 0202 	adds.w	r2, ip, r2
 80004b4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 80004be:	3d02      	subs	r5, #2
 80004c0:	4462      	add	r2, ip
 80004c2:	1a52      	subs	r2, r2, r1
 80004c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0xfc>
 80004ca:	4631      	mov	r1, r6
 80004cc:	4630      	mov	r0, r6
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xa2>
 80004d0:	4639      	mov	r1, r7
 80004d2:	e6e6      	b.n	80002a2 <__udivmoddi4+0x62>
 80004d4:	4610      	mov	r0, r2
 80004d6:	e6fb      	b.n	80002d0 <__udivmoddi4+0x90>
 80004d8:	4548      	cmp	r0, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004e4:	3b01      	subs	r3, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e8:	4645      	mov	r5, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x282>
 80004ec:	462b      	mov	r3, r5
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1da>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x258>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f8:	3d02      	subs	r5, #2
 80004fa:	4462      	add	r2, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x124>
 80004fe:	4608      	mov	r0, r1
 8000500:	e70a      	b.n	8000318 <__udivmoddi4+0xd8>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x14e>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	60f8      	str	r0, [r7, #12]
 8000514:	60b9      	str	r1, [r7, #8]
 8000516:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	4a07      	ldr	r2, [pc, #28]	; (8000538 <vApplicationGetIdleTaskMemory+0x2c>)
 800051c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	4a06      	ldr	r2, [pc, #24]	; (800053c <vApplicationGetIdleTaskMemory+0x30>)
 8000522:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2280      	movs	r2, #128	; 0x80
 8000528:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800052a:	bf00      	nop
 800052c:	3714      	adds	r7, #20
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	2000002c 	.word	0x2000002c
 800053c:	20000080 	.word	0x20000080

08000540 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000540:	b5b0      	push	{r4, r5, r7, lr}
 8000542:	b098      	sub	sp, #96	; 0x60
 8000544:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000546:	f000 fa06 	bl	8000956 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054a:	f000 f859 	bl	8000600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054e:	f000 f905 	bl	800075c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000552:	f000 f8b1 	bl	80006b8 <MX_ADC1_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of myBinarySem01 */
  osSemaphoreDef(myBinarySem01);
 8000556:	2300      	movs	r3, #0
 8000558:	65bb      	str	r3, [r7, #88]	; 0x58
 800055a:	2300      	movs	r3, #0
 800055c:	65fb      	str	r3, [r7, #92]	; 0x5c
  myBinarySem01Handle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
 800055e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000562:	2101      	movs	r1, #1
 8000564:	4618      	mov	r0, r3
 8000566:	f001 fc4e 	bl	8001e06 <osSemaphoreCreate>
 800056a:	4603      	mov	r3, r0
 800056c:	4a1d      	ldr	r2, [pc, #116]	; (80005e4 <main+0xa4>)
 800056e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000570:	4b1d      	ldr	r3, [pc, #116]	; (80005e8 <main+0xa8>)
 8000572:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000576:	461d      	mov	r5, r3
 8000578:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800057a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800057c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000580:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000584:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f001 fbdb 	bl	8001d46 <osThreadCreate>
 8000590:	4603      	mov	r3, r0
 8000592:	4a16      	ldr	r2, [pc, #88]	; (80005ec <main+0xac>)
 8000594:	6013      	str	r3, [r2, #0]

  /* definition and creation of ReadSensor */
  osThreadDef(ReadSensor, StartTask02, osPriorityNormal, 0, 128);
 8000596:	4b16      	ldr	r3, [pc, #88]	; (80005f0 <main+0xb0>)
 8000598:	f107 0420 	add.w	r4, r7, #32
 800059c:	461d      	mov	r5, r3
 800059e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005a2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ReadSensorHandle = osThreadCreate(osThread(ReadSensor), NULL);
 80005aa:	f107 0320 	add.w	r3, r7, #32
 80005ae:	2100      	movs	r1, #0
 80005b0:	4618      	mov	r0, r3
 80005b2:	f001 fbc8 	bl	8001d46 <osThreadCreate>
 80005b6:	4603      	mov	r3, r0
 80005b8:	4a0e      	ldr	r2, [pc, #56]	; (80005f4 <main+0xb4>)
 80005ba:	6013      	str	r3, [r2, #0]

  /* definition and creation of vTaskmain */
  osThreadDef(vTaskmain, StartTask03, osPriorityNormal, 0, 128);
 80005bc:	4b0e      	ldr	r3, [pc, #56]	; (80005f8 <main+0xb8>)
 80005be:	1d3c      	adds	r4, r7, #4
 80005c0:	461d      	mov	r5, r3
 80005c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  vTaskmainHandle = osThreadCreate(osThread(vTaskmain), NULL);
 80005ce:	1d3b      	adds	r3, r7, #4
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f001 fbb7 	bl	8001d46 <osThreadCreate>
 80005d8:	4603      	mov	r3, r0
 80005da:	4a08      	ldr	r2, [pc, #32]	; (80005fc <main+0xbc>)
 80005dc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005de:	f001 fbab 	bl	8001d38 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005e2:	e7fe      	b.n	80005e2 <main+0xa2>
 80005e4:	200002d4 	.word	0x200002d4
 80005e8:	08003c58 	.word	0x08003c58
 80005ec:	200002c8 	.word	0x200002c8
 80005f0:	08003c80 	.word	0x08003c80
 80005f4:	200002cc 	.word	0x200002cc
 80005f8:	08003ca8 	.word	0x08003ca8
 80005fc:	200002d0 	.word	0x200002d0

08000600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b094      	sub	sp, #80	; 0x50
 8000604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000606:	f107 0320 	add.w	r3, r7, #32
 800060a:	2230      	movs	r2, #48	; 0x30
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f003 fad6 	bl	8003bc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000614:	f107 030c 	add.w	r3, r7, #12
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000624:	4b22      	ldr	r3, [pc, #136]	; (80006b0 <SystemClock_Config+0xb0>)
 8000626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000628:	4a21      	ldr	r2, [pc, #132]	; (80006b0 <SystemClock_Config+0xb0>)
 800062a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800062e:	6413      	str	r3, [r2, #64]	; 0x40
 8000630:	4b1f      	ldr	r3, [pc, #124]	; (80006b0 <SystemClock_Config+0xb0>)
 8000632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000638:	60bb      	str	r3, [r7, #8]
 800063a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800063c:	4b1d      	ldr	r3, [pc, #116]	; (80006b4 <SystemClock_Config+0xb4>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000644:	4a1b      	ldr	r2, [pc, #108]	; (80006b4 <SystemClock_Config+0xb4>)
 8000646:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800064a:	6013      	str	r3, [r2, #0]
 800064c:	4b19      	ldr	r3, [pc, #100]	; (80006b4 <SystemClock_Config+0xb4>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000658:	2302      	movs	r3, #2
 800065a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800065c:	2301      	movs	r3, #1
 800065e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000660:	2310      	movs	r3, #16
 8000662:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000664:	2300      	movs	r3, #0
 8000666:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000668:	f107 0320 	add.w	r3, r7, #32
 800066c:	4618      	mov	r0, r3
 800066e:	f000 fef5 	bl	800145c <HAL_RCC_OscConfig>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000678:	f000 f8a0 	bl	80007bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067c:	230f      	movs	r3, #15
 800067e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000680:	2300      	movs	r3, #0
 8000682:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000690:	f107 030c 	add.w	r3, r7, #12
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f001 f984 	bl	80019a4 <HAL_RCC_ClockConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006a2:	f000 f88b 	bl	80007bc <Error_Handler>
  }
}
 80006a6:	bf00      	nop
 80006a8:	3750      	adds	r7, #80	; 0x50
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40023800 	.word	0x40023800
 80006b4:	40007000 	.word	0x40007000

080006b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006be:	463b      	mov	r3, r7
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006ca:	4b21      	ldr	r3, [pc, #132]	; (8000750 <MX_ADC1_Init+0x98>)
 80006cc:	4a21      	ldr	r2, [pc, #132]	; (8000754 <MX_ADC1_Init+0x9c>)
 80006ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80006d0:	4b1f      	ldr	r3, [pc, #124]	; (8000750 <MX_ADC1_Init+0x98>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006d6:	4b1e      	ldr	r3, [pc, #120]	; (8000750 <MX_ADC1_Init+0x98>)
 80006d8:	2200      	movs	r2, #0
 80006da:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006dc:	4b1c      	ldr	r3, [pc, #112]	; (8000750 <MX_ADC1_Init+0x98>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80006e2:	4b1b      	ldr	r3, [pc, #108]	; (8000750 <MX_ADC1_Init+0x98>)
 80006e4:	2201      	movs	r2, #1
 80006e6:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006e8:	4b19      	ldr	r3, [pc, #100]	; (8000750 <MX_ADC1_Init+0x98>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006f0:	4b17      	ldr	r3, [pc, #92]	; (8000750 <MX_ADC1_Init+0x98>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006f6:	4b16      	ldr	r3, [pc, #88]	; (8000750 <MX_ADC1_Init+0x98>)
 80006f8:	4a17      	ldr	r2, [pc, #92]	; (8000758 <MX_ADC1_Init+0xa0>)
 80006fa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006fc:	4b14      	ldr	r3, [pc, #80]	; (8000750 <MX_ADC1_Init+0x98>)
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000702:	4b13      	ldr	r3, [pc, #76]	; (8000750 <MX_ADC1_Init+0x98>)
 8000704:	2201      	movs	r2, #1
 8000706:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000708:	4b11      	ldr	r3, [pc, #68]	; (8000750 <MX_ADC1_Init+0x98>)
 800070a:	2200      	movs	r2, #0
 800070c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000710:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <MX_ADC1_Init+0x98>)
 8000712:	2201      	movs	r2, #1
 8000714:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000716:	480e      	ldr	r0, [pc, #56]	; (8000750 <MX_ADC1_Init+0x98>)
 8000718:	f000 f97a 	bl	8000a10 <HAL_ADC_Init>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000722:	f000 f84b 	bl	80007bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000726:	2300      	movs	r3, #0
 8000728:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800072a:	2301      	movs	r3, #1
 800072c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800072e:	2300      	movs	r3, #0
 8000730:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000732:	463b      	mov	r3, r7
 8000734:	4619      	mov	r1, r3
 8000736:	4806      	ldr	r0, [pc, #24]	; (8000750 <MX_ADC1_Init+0x98>)
 8000738:	f000 f9ae 	bl	8000a98 <HAL_ADC_ConfigChannel>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000742:	f000 f83b 	bl	80007bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000746:	bf00      	nop
 8000748:	3710      	adds	r7, #16
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000280 	.word	0x20000280
 8000754:	40012000 	.word	0x40012000
 8000758:	0f000001 	.word	0x0f000001

0800075c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000762:	4b09      	ldr	r3, [pc, #36]	; (8000788 <MX_GPIO_Init+0x2c>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a08      	ldr	r2, [pc, #32]	; (8000788 <MX_GPIO_Init+0x2c>)
 8000768:	f043 0301 	orr.w	r3, r3, #1
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b06      	ldr	r3, [pc, #24]	; (8000788 <MX_GPIO_Init+0x2c>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0301 	and.w	r3, r3, #1
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800077a:	bf00      	nop
 800077c:	370c      	adds	r7, #12
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	40023800 	.word	0x40023800

0800078c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000794:	2001      	movs	r0, #1
 8000796:	f001 fb22 	bl	8001dde <osDelay>
 800079a:	e7fb      	b.n	8000794 <StartDefaultTask+0x8>

0800079c <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80007a4:	2001      	movs	r0, #1
 80007a6:	f001 fb1a 	bl	8001dde <osDelay>
 80007aa:	e7fb      	b.n	80007a4 <StartTask02+0x8>

080007ac <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80007b4:	2001      	movs	r0, #1
 80007b6:	f001 fb12 	bl	8001dde <osDelay>
 80007ba:	e7fb      	b.n	80007b4 <StartTask03+0x8>

080007bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c0:	b672      	cpsid	i
}
 80007c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c4:	e7fe      	b.n	80007c4 <Error_Handler+0x8>
	...

080007c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80007ce:	4b11      	ldr	r3, [pc, #68]	; (8000814 <HAL_MspInit+0x4c>)
 80007d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d2:	4a10      	ldr	r2, [pc, #64]	; (8000814 <HAL_MspInit+0x4c>)
 80007d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d8:	6413      	str	r3, [r2, #64]	; 0x40
 80007da:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <HAL_MspInit+0x4c>)
 80007dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007e6:	4b0b      	ldr	r3, [pc, #44]	; (8000814 <HAL_MspInit+0x4c>)
 80007e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ea:	4a0a      	ldr	r2, [pc, #40]	; (8000814 <HAL_MspInit+0x4c>)
 80007ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007f0:	6453      	str	r3, [r2, #68]	; 0x44
 80007f2:	4b08      	ldr	r3, [pc, #32]	; (8000814 <HAL_MspInit+0x4c>)
 80007f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007fa:	603b      	str	r3, [r7, #0]
 80007fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007fe:	2200      	movs	r2, #0
 8000800:	210f      	movs	r1, #15
 8000802:	f06f 0001 	mvn.w	r0, #1
 8000806:	f000 fc54 	bl	80010b2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800080a:	bf00      	nop
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40023800 	.word	0x40023800

08000818 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08a      	sub	sp, #40	; 0x28
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000820:	f107 0314 	add.w	r3, r7, #20
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	609a      	str	r2, [r3, #8]
 800082c:	60da      	str	r2, [r3, #12]
 800082e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a15      	ldr	r2, [pc, #84]	; (800088c <HAL_ADC_MspInit+0x74>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d123      	bne.n	8000882 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800083a:	4b15      	ldr	r3, [pc, #84]	; (8000890 <HAL_ADC_MspInit+0x78>)
 800083c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800083e:	4a14      	ldr	r2, [pc, #80]	; (8000890 <HAL_ADC_MspInit+0x78>)
 8000840:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000844:	6453      	str	r3, [r2, #68]	; 0x44
 8000846:	4b12      	ldr	r3, [pc, #72]	; (8000890 <HAL_ADC_MspInit+0x78>)
 8000848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800084a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800084e:	613b      	str	r3, [r7, #16]
 8000850:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000852:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <HAL_ADC_MspInit+0x78>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a0e      	ldr	r2, [pc, #56]	; (8000890 <HAL_ADC_MspInit+0x78>)
 8000858:	f043 0301 	orr.w	r3, r3, #1
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <HAL_ADC_MspInit+0x78>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800086a:	2301      	movs	r3, #1
 800086c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800086e:	2303      	movs	r3, #3
 8000870:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000876:	f107 0314 	add.w	r3, r7, #20
 800087a:	4619      	mov	r1, r3
 800087c:	4805      	ldr	r0, [pc, #20]	; (8000894 <HAL_ADC_MspInit+0x7c>)
 800087e:	f000 fc41 	bl	8001104 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000882:	bf00      	nop
 8000884:	3728      	adds	r7, #40	; 0x28
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40012000 	.word	0x40012000
 8000890:	40023800 	.word	0x40023800
 8000894:	40020000 	.word	0x40020000

08000898 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800089c:	e7fe      	b.n	800089c <NMI_Handler+0x4>

0800089e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800089e:	b480      	push	{r7}
 80008a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008a2:	e7fe      	b.n	80008a2 <HardFault_Handler+0x4>

080008a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008a8:	e7fe      	b.n	80008a8 <MemManage_Handler+0x4>

080008aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008aa:	b480      	push	{r7}
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ae:	e7fe      	b.n	80008ae <BusFault_Handler+0x4>

080008b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008b4:	e7fe      	b.n	80008b4 <UsageFault_Handler+0x4>

080008b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008b6:	b480      	push	{r7}
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ba:	bf00      	nop
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr

080008c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008c8:	f000 f882 	bl	80009d0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80008cc:	f003 f86a 	bl	80039a4 <xTaskGetSchedulerState>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b01      	cmp	r3, #1
 80008d4:	d001      	beq.n	80008da <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80008d6:	f001 ff07 	bl	80026e8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
	...

080008e0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008e4:	4b06      	ldr	r3, [pc, #24]	; (8000900 <SystemInit+0x20>)
 80008e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008ea:	4a05      	ldr	r2, [pc, #20]	; (8000900 <SystemInit+0x20>)
 80008ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008f4:	bf00      	nop
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	e000ed00 	.word	0xe000ed00

08000904 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000904:	f8df d034 	ldr.w	sp, [pc, #52]	; 800093c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000908:	480d      	ldr	r0, [pc, #52]	; (8000940 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800090a:	490e      	ldr	r1, [pc, #56]	; (8000944 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800090c:	4a0e      	ldr	r2, [pc, #56]	; (8000948 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800090e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000910:	e002      	b.n	8000918 <LoopCopyDataInit>

08000912 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000912:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000914:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000916:	3304      	adds	r3, #4

08000918 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000918:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800091a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800091c:	d3f9      	bcc.n	8000912 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800091e:	4a0b      	ldr	r2, [pc, #44]	; (800094c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000920:	4c0b      	ldr	r4, [pc, #44]	; (8000950 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000922:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000924:	e001      	b.n	800092a <LoopFillZerobss>

08000926 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000926:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000928:	3204      	adds	r2, #4

0800092a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800092a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800092c:	d3fb      	bcc.n	8000926 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800092e:	f7ff ffd7 	bl	80008e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000932:	f003 f94d 	bl	8003bd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000936:	f7ff fe03 	bl	8000540 <main>
  bx  lr    
 800093a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800093c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000940:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000944:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000948:	08003cec 	.word	0x08003cec
  ldr r2, =_sbss
 800094c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000950:	20004028 	.word	0x20004028

08000954 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000954:	e7fe      	b.n	8000954 <ADC_IRQHandler>

08000956 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000956:	b580      	push	{r7, lr}
 8000958:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800095a:	2003      	movs	r0, #3
 800095c:	f000 fb9e 	bl	800109c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000960:	200f      	movs	r0, #15
 8000962:	f000 f805 	bl	8000970 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000966:	f7ff ff2f 	bl	80007c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800096a:	2300      	movs	r3, #0
}
 800096c:	4618      	mov	r0, r3
 800096e:	bd80      	pop	{r7, pc}

08000970 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000978:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <HAL_InitTick+0x54>)
 800097a:	681a      	ldr	r2, [r3, #0]
 800097c:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <HAL_InitTick+0x58>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	4619      	mov	r1, r3
 8000982:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000986:	fbb3 f3f1 	udiv	r3, r3, r1
 800098a:	fbb2 f3f3 	udiv	r3, r2, r3
 800098e:	4618      	mov	r0, r3
 8000990:	f000 fbab 	bl	80010ea <HAL_SYSTICK_Config>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800099a:	2301      	movs	r3, #1
 800099c:	e00e      	b.n	80009bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	2b0f      	cmp	r3, #15
 80009a2:	d80a      	bhi.n	80009ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009a4:	2200      	movs	r2, #0
 80009a6:	6879      	ldr	r1, [r7, #4]
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ac:	f000 fb81 	bl	80010b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009b0:	4a06      	ldr	r2, [pc, #24]	; (80009cc <HAL_InitTick+0x5c>)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009b6:	2300      	movs	r3, #0
 80009b8:	e000      	b.n	80009bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009ba:	2301      	movs	r3, #1
}
 80009bc:	4618      	mov	r0, r3
 80009be:	3708      	adds	r7, #8
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	20000000 	.word	0x20000000
 80009c8:	20000008 	.word	0x20000008
 80009cc:	20000004 	.word	0x20000004

080009d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009d4:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <HAL_IncTick+0x20>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	461a      	mov	r2, r3
 80009da:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <HAL_IncTick+0x24>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4413      	add	r3, r2
 80009e0:	4a04      	ldr	r2, [pc, #16]	; (80009f4 <HAL_IncTick+0x24>)
 80009e2:	6013      	str	r3, [r2, #0]
}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	20000008 	.word	0x20000008
 80009f4:	200002d8 	.word	0x200002d8

080009f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  return uwTick;
 80009fc:	4b03      	ldr	r3, [pc, #12]	; (8000a0c <HAL_GetTick+0x14>)
 80009fe:	681b      	ldr	r3, [r3, #0]
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	200002d8 	.word	0x200002d8

08000a10 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b084      	sub	sp, #16
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d101      	bne.n	8000a26 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000a22:	2301      	movs	r3, #1
 8000a24:	e031      	b.n	8000a8a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d109      	bne.n	8000a42 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a2e:	6878      	ldr	r0, [r7, #4]
 8000a30:	f7ff fef2 	bl	8000818 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	2200      	movs	r2, #0
 8000a38:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a46:	f003 0310 	and.w	r3, r3, #16
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d116      	bne.n	8000a7c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a52:	4b10      	ldr	r3, [pc, #64]	; (8000a94 <HAL_ADC_Init+0x84>)
 8000a54:	4013      	ands	r3, r2
 8000a56:	f043 0202 	orr.w	r2, r3, #2
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000a5e:	6878      	ldr	r0, [r7, #4]
 8000a60:	f000 f970 	bl	8000d44 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2200      	movs	r2, #0
 8000a68:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6e:	f023 0303 	bic.w	r3, r3, #3
 8000a72:	f043 0201 	orr.w	r2, r3, #1
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	641a      	str	r2, [r3, #64]	; 0x40
 8000a7a:	e001      	b.n	8000a80 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	2200      	movs	r2, #0
 8000a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	3710      	adds	r7, #16
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	ffffeefd 	.word	0xffffeefd

08000a98 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b085      	sub	sp, #20
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
 8000aa0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d101      	bne.n	8000ab4 <HAL_ADC_ConfigChannel+0x1c>
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	e136      	b.n	8000d22 <HAL_ADC_ConfigChannel+0x28a>
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	2b09      	cmp	r3, #9
 8000ac2:	d93a      	bls.n	8000b3a <HAL_ADC_ConfigChannel+0xa2>
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000acc:	d035      	beq.n	8000b3a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	68d9      	ldr	r1, [r3, #12]
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	b29b      	uxth	r3, r3
 8000ada:	461a      	mov	r2, r3
 8000adc:	4613      	mov	r3, r2
 8000ade:	005b      	lsls	r3, r3, #1
 8000ae0:	4413      	add	r3, r2
 8000ae2:	3b1e      	subs	r3, #30
 8000ae4:	2207      	movs	r2, #7
 8000ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aea:	43da      	mvns	r2, r3
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	400a      	ands	r2, r1
 8000af2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a8d      	ldr	r2, [pc, #564]	; (8000d30 <HAL_ADC_ConfigChannel+0x298>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d10a      	bne.n	8000b14 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	68d9      	ldr	r1, [r3, #12]
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	689b      	ldr	r3, [r3, #8]
 8000b08:	061a      	lsls	r2, r3, #24
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	430a      	orrs	r2, r1
 8000b10:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000b12:	e035      	b.n	8000b80 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	68d9      	ldr	r1, [r3, #12]
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	689a      	ldr	r2, [r3, #8]
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	b29b      	uxth	r3, r3
 8000b24:	4618      	mov	r0, r3
 8000b26:	4603      	mov	r3, r0
 8000b28:	005b      	lsls	r3, r3, #1
 8000b2a:	4403      	add	r3, r0
 8000b2c:	3b1e      	subs	r3, #30
 8000b2e:	409a      	lsls	r2, r3
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	430a      	orrs	r2, r1
 8000b36:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000b38:	e022      	b.n	8000b80 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	6919      	ldr	r1, [r3, #16]
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	b29b      	uxth	r3, r3
 8000b46:	461a      	mov	r2, r3
 8000b48:	4613      	mov	r3, r2
 8000b4a:	005b      	lsls	r3, r3, #1
 8000b4c:	4413      	add	r3, r2
 8000b4e:	2207      	movs	r2, #7
 8000b50:	fa02 f303 	lsl.w	r3, r2, r3
 8000b54:	43da      	mvns	r2, r3
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	400a      	ands	r2, r1
 8000b5c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	6919      	ldr	r1, [r3, #16]
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	689a      	ldr	r2, [r3, #8]
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	b29b      	uxth	r3, r3
 8000b6e:	4618      	mov	r0, r3
 8000b70:	4603      	mov	r3, r0
 8000b72:	005b      	lsls	r3, r3, #1
 8000b74:	4403      	add	r3, r0
 8000b76:	409a      	lsls	r2, r3
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	430a      	orrs	r2, r1
 8000b7e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	2b06      	cmp	r3, #6
 8000b86:	d824      	bhi.n	8000bd2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	685a      	ldr	r2, [r3, #4]
 8000b92:	4613      	mov	r3, r2
 8000b94:	009b      	lsls	r3, r3, #2
 8000b96:	4413      	add	r3, r2
 8000b98:	3b05      	subs	r3, #5
 8000b9a:	221f      	movs	r2, #31
 8000b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba0:	43da      	mvns	r2, r3
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	400a      	ands	r2, r1
 8000ba8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	b29b      	uxth	r3, r3
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	685a      	ldr	r2, [r3, #4]
 8000bbc:	4613      	mov	r3, r2
 8000bbe:	009b      	lsls	r3, r3, #2
 8000bc0:	4413      	add	r3, r2
 8000bc2:	3b05      	subs	r3, #5
 8000bc4:	fa00 f203 	lsl.w	r2, r0, r3
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	430a      	orrs	r2, r1
 8000bce:	635a      	str	r2, [r3, #52]	; 0x34
 8000bd0:	e04c      	b.n	8000c6c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	2b0c      	cmp	r3, #12
 8000bd8:	d824      	bhi.n	8000c24 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	685a      	ldr	r2, [r3, #4]
 8000be4:	4613      	mov	r3, r2
 8000be6:	009b      	lsls	r3, r3, #2
 8000be8:	4413      	add	r3, r2
 8000bea:	3b23      	subs	r3, #35	; 0x23
 8000bec:	221f      	movs	r2, #31
 8000bee:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf2:	43da      	mvns	r2, r3
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	400a      	ands	r2, r1
 8000bfa:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	b29b      	uxth	r3, r3
 8000c08:	4618      	mov	r0, r3
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	685a      	ldr	r2, [r3, #4]
 8000c0e:	4613      	mov	r3, r2
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	4413      	add	r3, r2
 8000c14:	3b23      	subs	r3, #35	; 0x23
 8000c16:	fa00 f203 	lsl.w	r2, r0, r3
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	430a      	orrs	r2, r1
 8000c20:	631a      	str	r2, [r3, #48]	; 0x30
 8000c22:	e023      	b.n	8000c6c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	685a      	ldr	r2, [r3, #4]
 8000c2e:	4613      	mov	r3, r2
 8000c30:	009b      	lsls	r3, r3, #2
 8000c32:	4413      	add	r3, r2
 8000c34:	3b41      	subs	r3, #65	; 0x41
 8000c36:	221f      	movs	r2, #31
 8000c38:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3c:	43da      	mvns	r2, r3
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	400a      	ands	r2, r1
 8000c44:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	b29b      	uxth	r3, r3
 8000c52:	4618      	mov	r0, r3
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	685a      	ldr	r2, [r3, #4]
 8000c58:	4613      	mov	r3, r2
 8000c5a:	009b      	lsls	r3, r3, #2
 8000c5c:	4413      	add	r3, r2
 8000c5e:	3b41      	subs	r3, #65	; 0x41
 8000c60:	fa00 f203 	lsl.w	r2, r0, r3
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	430a      	orrs	r2, r1
 8000c6a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a30      	ldr	r2, [pc, #192]	; (8000d34 <HAL_ADC_ConfigChannel+0x29c>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d10a      	bne.n	8000c8c <HAL_ADC_ConfigChannel+0x1f4>
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c7e:	d105      	bne.n	8000c8c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8000c80:	4b2d      	ldr	r3, [pc, #180]	; (8000d38 <HAL_ADC_ConfigChannel+0x2a0>)
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	4a2c      	ldr	r2, [pc, #176]	; (8000d38 <HAL_ADC_ConfigChannel+0x2a0>)
 8000c86:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000c8a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a28      	ldr	r2, [pc, #160]	; (8000d34 <HAL_ADC_ConfigChannel+0x29c>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d10f      	bne.n	8000cb6 <HAL_ADC_ConfigChannel+0x21e>
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	2b12      	cmp	r3, #18
 8000c9c:	d10b      	bne.n	8000cb6 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8000c9e:	4b26      	ldr	r3, [pc, #152]	; (8000d38 <HAL_ADC_ConfigChannel+0x2a0>)
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	4a25      	ldr	r2, [pc, #148]	; (8000d38 <HAL_ADC_ConfigChannel+0x2a0>)
 8000ca4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000ca8:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8000caa:	4b23      	ldr	r3, [pc, #140]	; (8000d38 <HAL_ADC_ConfigChannel+0x2a0>)
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	4a22      	ldr	r2, [pc, #136]	; (8000d38 <HAL_ADC_ConfigChannel+0x2a0>)
 8000cb0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000cb4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a1e      	ldr	r2, [pc, #120]	; (8000d34 <HAL_ADC_ConfigChannel+0x29c>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d12b      	bne.n	8000d18 <HAL_ADC_ConfigChannel+0x280>
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a1a      	ldr	r2, [pc, #104]	; (8000d30 <HAL_ADC_ConfigChannel+0x298>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d003      	beq.n	8000cd2 <HAL_ADC_ConfigChannel+0x23a>
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	2b11      	cmp	r3, #17
 8000cd0:	d122      	bne.n	8000d18 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8000cd2:	4b19      	ldr	r3, [pc, #100]	; (8000d38 <HAL_ADC_ConfigChannel+0x2a0>)
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	4a18      	ldr	r2, [pc, #96]	; (8000d38 <HAL_ADC_ConfigChannel+0x2a0>)
 8000cd8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000cdc:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8000cde:	4b16      	ldr	r3, [pc, #88]	; (8000d38 <HAL_ADC_ConfigChannel+0x2a0>)
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	4a15      	ldr	r2, [pc, #84]	; (8000d38 <HAL_ADC_ConfigChannel+0x2a0>)
 8000ce4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000ce8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4a10      	ldr	r2, [pc, #64]	; (8000d30 <HAL_ADC_ConfigChannel+0x298>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d111      	bne.n	8000d18 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8000cf4:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <HAL_ADC_ConfigChannel+0x2a4>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a11      	ldr	r2, [pc, #68]	; (8000d40 <HAL_ADC_ConfigChannel+0x2a8>)
 8000cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8000cfe:	0c9a      	lsrs	r2, r3, #18
 8000d00:	4613      	mov	r3, r2
 8000d02:	009b      	lsls	r3, r3, #2
 8000d04:	4413      	add	r3, r2
 8000d06:	005b      	lsls	r3, r3, #1
 8000d08:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8000d0a:	e002      	b.n	8000d12 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	3b01      	subs	r3, #1
 8000d10:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d1f9      	bne.n	8000d0c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000d20:	2300      	movs	r3, #0
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3714      	adds	r7, #20
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	10000012 	.word	0x10000012
 8000d34:	40012000 	.word	0x40012000
 8000d38:	40012300 	.word	0x40012300
 8000d3c:	20000000 	.word	0x20000000
 8000d40:	431bde83 	.word	0x431bde83

08000d44 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8000d4c:	4b78      	ldr	r3, [pc, #480]	; (8000f30 <ADC_Init+0x1ec>)
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	4a77      	ldr	r2, [pc, #476]	; (8000f30 <ADC_Init+0x1ec>)
 8000d52:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000d56:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8000d58:	4b75      	ldr	r3, [pc, #468]	; (8000f30 <ADC_Init+0x1ec>)
 8000d5a:	685a      	ldr	r2, [r3, #4]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	4973      	ldr	r1, [pc, #460]	; (8000f30 <ADC_Init+0x1ec>)
 8000d62:	4313      	orrs	r3, r2
 8000d64:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	685a      	ldr	r2, [r3, #4]
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000d74:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	6859      	ldr	r1, [r3, #4]
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	691b      	ldr	r3, [r3, #16]
 8000d80:	021a      	lsls	r2, r3, #8
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	430a      	orrs	r2, r1
 8000d88:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	685a      	ldr	r2, [r3, #4]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000d98:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	6859      	ldr	r1, [r3, #4]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	689a      	ldr	r2, [r3, #8]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	430a      	orrs	r2, r1
 8000daa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	689a      	ldr	r2, [r3, #8]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000dba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	6899      	ldr	r1, [r3, #8]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	68da      	ldr	r2, [r3, #12]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	430a      	orrs	r2, r1
 8000dcc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dd2:	4a58      	ldr	r2, [pc, #352]	; (8000f34 <ADC_Init+0x1f0>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d022      	beq.n	8000e1e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	689a      	ldr	r2, [r3, #8]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000de6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	6899      	ldr	r1, [r3, #8]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	430a      	orrs	r2, r1
 8000df8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	689a      	ldr	r2, [r3, #8]
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000e08:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	6899      	ldr	r1, [r3, #8]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	430a      	orrs	r2, r1
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	e00f      	b.n	8000e3e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	689a      	ldr	r2, [r3, #8]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000e2c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	689a      	ldr	r2, [r3, #8]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000e3c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	689a      	ldr	r2, [r3, #8]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f022 0202 	bic.w	r2, r2, #2
 8000e4c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	6899      	ldr	r1, [r3, #8]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	699b      	ldr	r3, [r3, #24]
 8000e58:	005a      	lsls	r2, r3, #1
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	430a      	orrs	r2, r1
 8000e60:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d01b      	beq.n	8000ea4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	685a      	ldr	r2, [r3, #4]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000e7a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	685a      	ldr	r2, [r3, #4]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000e8a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	6859      	ldr	r1, [r3, #4]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e96:	3b01      	subs	r3, #1
 8000e98:	035a      	lsls	r2, r3, #13
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	430a      	orrs	r2, r1
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	e007      	b.n	8000eb4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	685a      	ldr	r2, [r3, #4]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000eb2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000ec2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	69db      	ldr	r3, [r3, #28]
 8000ece:	3b01      	subs	r3, #1
 8000ed0:	051a      	lsls	r2, r3, #20
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	430a      	orrs	r2, r1
 8000ed8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	689a      	ldr	r2, [r3, #8]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000ee8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	6899      	ldr	r1, [r3, #8]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000ef6:	025a      	lsls	r2, r3, #9
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	430a      	orrs	r2, r1
 8000efe:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	689a      	ldr	r2, [r3, #8]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f0e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	6899      	ldr	r1, [r3, #8]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	695b      	ldr	r3, [r3, #20]
 8000f1a:	029a      	lsls	r2, r3, #10
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	430a      	orrs	r2, r1
 8000f22:	609a      	str	r2, [r3, #8]
}
 8000f24:	bf00      	nop
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	40012300 	.word	0x40012300
 8000f34:	0f000001 	.word	0x0f000001

08000f38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	f003 0307 	and.w	r3, r3, #7
 8000f46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f48:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <__NVIC_SetPriorityGrouping+0x40>)
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f4e:	68ba      	ldr	r2, [r7, #8]
 8000f50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f54:	4013      	ands	r3, r2
 8000f56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f60:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <__NVIC_SetPriorityGrouping+0x44>)
 8000f62:	4313      	orrs	r3, r2
 8000f64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f66:	4a04      	ldr	r2, [pc, #16]	; (8000f78 <__NVIC_SetPriorityGrouping+0x40>)
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	60d3      	str	r3, [r2, #12]
}
 8000f6c:	bf00      	nop
 8000f6e:	3714      	adds	r7, #20
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	e000ed00 	.word	0xe000ed00
 8000f7c:	05fa0000 	.word	0x05fa0000

08000f80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f84:	4b04      	ldr	r3, [pc, #16]	; (8000f98 <__NVIC_GetPriorityGrouping+0x18>)
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	0a1b      	lsrs	r3, r3, #8
 8000f8a:	f003 0307 	and.w	r3, r3, #7
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	e000ed00 	.word	0xe000ed00

08000f9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	6039      	str	r1, [r7, #0]
 8000fa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	db0a      	blt.n	8000fc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	b2da      	uxtb	r2, r3
 8000fb4:	490c      	ldr	r1, [pc, #48]	; (8000fe8 <__NVIC_SetPriority+0x4c>)
 8000fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fba:	0112      	lsls	r2, r2, #4
 8000fbc:	b2d2      	uxtb	r2, r2
 8000fbe:	440b      	add	r3, r1
 8000fc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fc4:	e00a      	b.n	8000fdc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	b2da      	uxtb	r2, r3
 8000fca:	4908      	ldr	r1, [pc, #32]	; (8000fec <__NVIC_SetPriority+0x50>)
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	f003 030f 	and.w	r3, r3, #15
 8000fd2:	3b04      	subs	r3, #4
 8000fd4:	0112      	lsls	r2, r2, #4
 8000fd6:	b2d2      	uxtb	r2, r2
 8000fd8:	440b      	add	r3, r1
 8000fda:	761a      	strb	r2, [r3, #24]
}
 8000fdc:	bf00      	nop
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	e000e100 	.word	0xe000e100
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b089      	sub	sp, #36	; 0x24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	f003 0307 	and.w	r3, r3, #7
 8001002:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	f1c3 0307 	rsb	r3, r3, #7
 800100a:	2b04      	cmp	r3, #4
 800100c:	bf28      	it	cs
 800100e:	2304      	movcs	r3, #4
 8001010:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	3304      	adds	r3, #4
 8001016:	2b06      	cmp	r3, #6
 8001018:	d902      	bls.n	8001020 <NVIC_EncodePriority+0x30>
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	3b03      	subs	r3, #3
 800101e:	e000      	b.n	8001022 <NVIC_EncodePriority+0x32>
 8001020:	2300      	movs	r3, #0
 8001022:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001024:	f04f 32ff 	mov.w	r2, #4294967295
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	43da      	mvns	r2, r3
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	401a      	ands	r2, r3
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001038:	f04f 31ff 	mov.w	r1, #4294967295
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	fa01 f303 	lsl.w	r3, r1, r3
 8001042:	43d9      	mvns	r1, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001048:	4313      	orrs	r3, r2
         );
}
 800104a:	4618      	mov	r0, r3
 800104c:	3724      	adds	r7, #36	; 0x24
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
	...

08001058 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	3b01      	subs	r3, #1
 8001064:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001068:	d301      	bcc.n	800106e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800106a:	2301      	movs	r3, #1
 800106c:	e00f      	b.n	800108e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800106e:	4a0a      	ldr	r2, [pc, #40]	; (8001098 <SysTick_Config+0x40>)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	3b01      	subs	r3, #1
 8001074:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001076:	210f      	movs	r1, #15
 8001078:	f04f 30ff 	mov.w	r0, #4294967295
 800107c:	f7ff ff8e 	bl	8000f9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001080:	4b05      	ldr	r3, [pc, #20]	; (8001098 <SysTick_Config+0x40>)
 8001082:	2200      	movs	r2, #0
 8001084:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001086:	4b04      	ldr	r3, [pc, #16]	; (8001098 <SysTick_Config+0x40>)
 8001088:	2207      	movs	r2, #7
 800108a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800108c:	2300      	movs	r3, #0
}
 800108e:	4618      	mov	r0, r3
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	e000e010 	.word	0xe000e010

0800109c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f7ff ff47 	bl	8000f38 <__NVIC_SetPriorityGrouping>
}
 80010aa:	bf00      	nop
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b086      	sub	sp, #24
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	4603      	mov	r3, r0
 80010ba:	60b9      	str	r1, [r7, #8]
 80010bc:	607a      	str	r2, [r7, #4]
 80010be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010c0:	2300      	movs	r3, #0
 80010c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010c4:	f7ff ff5c 	bl	8000f80 <__NVIC_GetPriorityGrouping>
 80010c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	68b9      	ldr	r1, [r7, #8]
 80010ce:	6978      	ldr	r0, [r7, #20]
 80010d0:	f7ff ff8e 	bl	8000ff0 <NVIC_EncodePriority>
 80010d4:	4602      	mov	r2, r0
 80010d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010da:	4611      	mov	r1, r2
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff5d 	bl	8000f9c <__NVIC_SetPriority>
}
 80010e2:	bf00      	nop
 80010e4:	3718      	adds	r7, #24
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f7ff ffb0 	bl	8001058 <SysTick_Config>
 80010f8:	4603      	mov	r3, r0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
	...

08001104 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001104:	b480      	push	{r7}
 8001106:	b089      	sub	sp, #36	; 0x24
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800110e:	2300      	movs	r3, #0
 8001110:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001112:	2300      	movs	r3, #0
 8001114:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001116:	2300      	movs	r3, #0
 8001118:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800111a:	2300      	movs	r3, #0
 800111c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800111e:	2300      	movs	r3, #0
 8001120:	61fb      	str	r3, [r7, #28]
 8001122:	e175      	b.n	8001410 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001124:	2201      	movs	r2, #1
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	697a      	ldr	r2, [r7, #20]
 8001134:	4013      	ands	r3, r2
 8001136:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001138:	693a      	ldr	r2, [r7, #16]
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	429a      	cmp	r2, r3
 800113e:	f040 8164 	bne.w	800140a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f003 0303 	and.w	r3, r3, #3
 800114a:	2b01      	cmp	r3, #1
 800114c:	d005      	beq.n	800115a <HAL_GPIO_Init+0x56>
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f003 0303 	and.w	r3, r3, #3
 8001156:	2b02      	cmp	r3, #2
 8001158:	d130      	bne.n	80011bc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	2203      	movs	r2, #3
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	43db      	mvns	r3, r3
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	4013      	ands	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	68da      	ldr	r2, [r3, #12]
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	4313      	orrs	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001190:	2201      	movs	r2, #1
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	43db      	mvns	r3, r3
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	4013      	ands	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	091b      	lsrs	r3, r3, #4
 80011a6:	f003 0201 	and.w	r2, r3, #1
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f003 0303 	and.w	r3, r3, #3
 80011c4:	2b03      	cmp	r3, #3
 80011c6:	d017      	beq.n	80011f8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	2203      	movs	r2, #3
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	43db      	mvns	r3, r3
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	4013      	ands	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	689a      	ldr	r2, [r3, #8]
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f003 0303 	and.w	r3, r3, #3
 8001200:	2b02      	cmp	r3, #2
 8001202:	d123      	bne.n	800124c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	08da      	lsrs	r2, r3, #3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3208      	adds	r2, #8
 800120c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001210:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	f003 0307 	and.w	r3, r3, #7
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	220f      	movs	r2, #15
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	43db      	mvns	r3, r3
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	4013      	ands	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	691a      	ldr	r2, [r3, #16]
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	f003 0307 	and.w	r3, r3, #7
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	4313      	orrs	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	08da      	lsrs	r2, r3, #3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	3208      	adds	r2, #8
 8001246:	69b9      	ldr	r1, [r7, #24]
 8001248:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	2203      	movs	r2, #3
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	43db      	mvns	r3, r3
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	4013      	ands	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f003 0203 	and.w	r2, r3, #3
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	4313      	orrs	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001288:	2b00      	cmp	r3, #0
 800128a:	f000 80be 	beq.w	800140a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800128e:	4b66      	ldr	r3, [pc, #408]	; (8001428 <HAL_GPIO_Init+0x324>)
 8001290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001292:	4a65      	ldr	r2, [pc, #404]	; (8001428 <HAL_GPIO_Init+0x324>)
 8001294:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001298:	6453      	str	r3, [r2, #68]	; 0x44
 800129a:	4b63      	ldr	r3, [pc, #396]	; (8001428 <HAL_GPIO_Init+0x324>)
 800129c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80012a6:	4a61      	ldr	r2, [pc, #388]	; (800142c <HAL_GPIO_Init+0x328>)
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	089b      	lsrs	r3, r3, #2
 80012ac:	3302      	adds	r3, #2
 80012ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	f003 0303 	and.w	r3, r3, #3
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	220f      	movs	r2, #15
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	43db      	mvns	r3, r3
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	4013      	ands	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a58      	ldr	r2, [pc, #352]	; (8001430 <HAL_GPIO_Init+0x32c>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d037      	beq.n	8001342 <HAL_GPIO_Init+0x23e>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a57      	ldr	r2, [pc, #348]	; (8001434 <HAL_GPIO_Init+0x330>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d031      	beq.n	800133e <HAL_GPIO_Init+0x23a>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a56      	ldr	r2, [pc, #344]	; (8001438 <HAL_GPIO_Init+0x334>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d02b      	beq.n	800133a <HAL_GPIO_Init+0x236>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a55      	ldr	r2, [pc, #340]	; (800143c <HAL_GPIO_Init+0x338>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d025      	beq.n	8001336 <HAL_GPIO_Init+0x232>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a54      	ldr	r2, [pc, #336]	; (8001440 <HAL_GPIO_Init+0x33c>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d01f      	beq.n	8001332 <HAL_GPIO_Init+0x22e>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a53      	ldr	r2, [pc, #332]	; (8001444 <HAL_GPIO_Init+0x340>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d019      	beq.n	800132e <HAL_GPIO_Init+0x22a>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a52      	ldr	r2, [pc, #328]	; (8001448 <HAL_GPIO_Init+0x344>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d013      	beq.n	800132a <HAL_GPIO_Init+0x226>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a51      	ldr	r2, [pc, #324]	; (800144c <HAL_GPIO_Init+0x348>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d00d      	beq.n	8001326 <HAL_GPIO_Init+0x222>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a50      	ldr	r2, [pc, #320]	; (8001450 <HAL_GPIO_Init+0x34c>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d007      	beq.n	8001322 <HAL_GPIO_Init+0x21e>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a4f      	ldr	r2, [pc, #316]	; (8001454 <HAL_GPIO_Init+0x350>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d101      	bne.n	800131e <HAL_GPIO_Init+0x21a>
 800131a:	2309      	movs	r3, #9
 800131c:	e012      	b.n	8001344 <HAL_GPIO_Init+0x240>
 800131e:	230a      	movs	r3, #10
 8001320:	e010      	b.n	8001344 <HAL_GPIO_Init+0x240>
 8001322:	2308      	movs	r3, #8
 8001324:	e00e      	b.n	8001344 <HAL_GPIO_Init+0x240>
 8001326:	2307      	movs	r3, #7
 8001328:	e00c      	b.n	8001344 <HAL_GPIO_Init+0x240>
 800132a:	2306      	movs	r3, #6
 800132c:	e00a      	b.n	8001344 <HAL_GPIO_Init+0x240>
 800132e:	2305      	movs	r3, #5
 8001330:	e008      	b.n	8001344 <HAL_GPIO_Init+0x240>
 8001332:	2304      	movs	r3, #4
 8001334:	e006      	b.n	8001344 <HAL_GPIO_Init+0x240>
 8001336:	2303      	movs	r3, #3
 8001338:	e004      	b.n	8001344 <HAL_GPIO_Init+0x240>
 800133a:	2302      	movs	r3, #2
 800133c:	e002      	b.n	8001344 <HAL_GPIO_Init+0x240>
 800133e:	2301      	movs	r3, #1
 8001340:	e000      	b.n	8001344 <HAL_GPIO_Init+0x240>
 8001342:	2300      	movs	r3, #0
 8001344:	69fa      	ldr	r2, [r7, #28]
 8001346:	f002 0203 	and.w	r2, r2, #3
 800134a:	0092      	lsls	r2, r2, #2
 800134c:	4093      	lsls	r3, r2
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	4313      	orrs	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001354:	4935      	ldr	r1, [pc, #212]	; (800142c <HAL_GPIO_Init+0x328>)
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	089b      	lsrs	r3, r3, #2
 800135a:	3302      	adds	r3, #2
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001362:	4b3d      	ldr	r3, [pc, #244]	; (8001458 <HAL_GPIO_Init+0x354>)
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	43db      	mvns	r3, r3
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	4013      	ands	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d003      	beq.n	8001386 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	4313      	orrs	r3, r2
 8001384:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001386:	4a34      	ldr	r2, [pc, #208]	; (8001458 <HAL_GPIO_Init+0x354>)
 8001388:	69bb      	ldr	r3, [r7, #24]
 800138a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800138c:	4b32      	ldr	r3, [pc, #200]	; (8001458 <HAL_GPIO_Init+0x354>)
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	43db      	mvns	r3, r3
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	4013      	ands	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d003      	beq.n	80013b0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013b0:	4a29      	ldr	r2, [pc, #164]	; (8001458 <HAL_GPIO_Init+0x354>)
 80013b2:	69bb      	ldr	r3, [r7, #24]
 80013b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013b6:	4b28      	ldr	r3, [pc, #160]	; (8001458 <HAL_GPIO_Init+0x354>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	43db      	mvns	r3, r3
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	4013      	ands	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d003      	beq.n	80013da <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013da:	4a1f      	ldr	r2, [pc, #124]	; (8001458 <HAL_GPIO_Init+0x354>)
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013e0:	4b1d      	ldr	r3, [pc, #116]	; (8001458 <HAL_GPIO_Init+0x354>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	43db      	mvns	r3, r3
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	4013      	ands	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d003      	beq.n	8001404 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	4313      	orrs	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001404:	4a14      	ldr	r2, [pc, #80]	; (8001458 <HAL_GPIO_Init+0x354>)
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	3301      	adds	r3, #1
 800140e:	61fb      	str	r3, [r7, #28]
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	2b0f      	cmp	r3, #15
 8001414:	f67f ae86 	bls.w	8001124 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001418:	bf00      	nop
 800141a:	bf00      	nop
 800141c:	3724      	adds	r7, #36	; 0x24
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	40023800 	.word	0x40023800
 800142c:	40013800 	.word	0x40013800
 8001430:	40020000 	.word	0x40020000
 8001434:	40020400 	.word	0x40020400
 8001438:	40020800 	.word	0x40020800
 800143c:	40020c00 	.word	0x40020c00
 8001440:	40021000 	.word	0x40021000
 8001444:	40021400 	.word	0x40021400
 8001448:	40021800 	.word	0x40021800
 800144c:	40021c00 	.word	0x40021c00
 8001450:	40022000 	.word	0x40022000
 8001454:	40022400 	.word	0x40022400
 8001458:	40013c00 	.word	0x40013c00

0800145c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001464:	2300      	movs	r3, #0
 8001466:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d101      	bne.n	8001472 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e291      	b.n	8001996 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	2b00      	cmp	r3, #0
 800147c:	f000 8087 	beq.w	800158e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001480:	4b96      	ldr	r3, [pc, #600]	; (80016dc <HAL_RCC_OscConfig+0x280>)
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	f003 030c 	and.w	r3, r3, #12
 8001488:	2b04      	cmp	r3, #4
 800148a:	d00c      	beq.n	80014a6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800148c:	4b93      	ldr	r3, [pc, #588]	; (80016dc <HAL_RCC_OscConfig+0x280>)
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	f003 030c 	and.w	r3, r3, #12
 8001494:	2b08      	cmp	r3, #8
 8001496:	d112      	bne.n	80014be <HAL_RCC_OscConfig+0x62>
 8001498:	4b90      	ldr	r3, [pc, #576]	; (80016dc <HAL_RCC_OscConfig+0x280>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014a4:	d10b      	bne.n	80014be <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014a6:	4b8d      	ldr	r3, [pc, #564]	; (80016dc <HAL_RCC_OscConfig+0x280>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d06c      	beq.n	800158c <HAL_RCC_OscConfig+0x130>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d168      	bne.n	800158c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e26b      	b.n	8001996 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014c6:	d106      	bne.n	80014d6 <HAL_RCC_OscConfig+0x7a>
 80014c8:	4b84      	ldr	r3, [pc, #528]	; (80016dc <HAL_RCC_OscConfig+0x280>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a83      	ldr	r2, [pc, #524]	; (80016dc <HAL_RCC_OscConfig+0x280>)
 80014ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014d2:	6013      	str	r3, [r2, #0]
 80014d4:	e02e      	b.n	8001534 <HAL_RCC_OscConfig+0xd8>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d10c      	bne.n	80014f8 <HAL_RCC_OscConfig+0x9c>
 80014de:	4b7f      	ldr	r3, [pc, #508]	; (80016dc <HAL_RCC_OscConfig+0x280>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a7e      	ldr	r2, [pc, #504]	; (80016dc <HAL_RCC_OscConfig+0x280>)
 80014e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014e8:	6013      	str	r3, [r2, #0]
 80014ea:	4b7c      	ldr	r3, [pc, #496]	; (80016dc <HAL_RCC_OscConfig+0x280>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a7b      	ldr	r2, [pc, #492]	; (80016dc <HAL_RCC_OscConfig+0x280>)
 80014f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014f4:	6013      	str	r3, [r2, #0]
 80014f6:	e01d      	b.n	8001534 <HAL_RCC_OscConfig+0xd8>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001500:	d10c      	bne.n	800151c <HAL_RCC_OscConfig+0xc0>
 8001502:	4b76      	ldr	r3, [pc, #472]	; (80016dc <HAL_RCC_OscConfig+0x280>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a75      	ldr	r2, [pc, #468]	; (80016dc <HAL_RCC_OscConfig+0x280>)
 8001508:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800150c:	6013      	str	r3, [r2, #0]
 800150e:	4b73      	ldr	r3, [pc, #460]	; (80016dc <HAL_RCC_OscConfig+0x280>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a72      	ldr	r2, [pc, #456]	; (80016dc <HAL_RCC_OscConfig+0x280>)
 8001514:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001518:	6013      	str	r3, [r2, #0]
 800151a:	e00b      	b.n	8001534 <HAL_RCC_OscConfig+0xd8>
 800151c:	4b6f      	ldr	r3, [pc, #444]	; (80016dc <HAL_RCC_OscConfig+0x280>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a6e      	ldr	r2, [pc, #440]	; (80016dc <HAL_RCC_OscConfig+0x280>)
 8001522:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001526:	6013      	str	r3, [r2, #0]
 8001528:	4b6c      	ldr	r3, [pc, #432]	; (80016dc <HAL_RCC_OscConfig+0x280>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a6b      	ldr	r2, [pc, #428]	; (80016dc <HAL_RCC_OscConfig+0x280>)
 800152e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001532:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d013      	beq.n	8001564 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800153c:	f7ff fa5c 	bl	80009f8 <HAL_GetTick>
 8001540:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001542:	e008      	b.n	8001556 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001544:	f7ff fa58 	bl	80009f8 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b64      	cmp	r3, #100	; 0x64
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e21f      	b.n	8001996 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001556:	4b61      	ldr	r3, [pc, #388]	; (80016dc <HAL_RCC_OscConfig+0x280>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d0f0      	beq.n	8001544 <HAL_RCC_OscConfig+0xe8>
 8001562:	e014      	b.n	800158e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001564:	f7ff fa48 	bl	80009f8 <HAL_GetTick>
 8001568:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800156a:	e008      	b.n	800157e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800156c:	f7ff fa44 	bl	80009f8 <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	2b64      	cmp	r3, #100	; 0x64
 8001578:	d901      	bls.n	800157e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e20b      	b.n	8001996 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800157e:	4b57      	ldr	r3, [pc, #348]	; (80016dc <HAL_RCC_OscConfig+0x280>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d1f0      	bne.n	800156c <HAL_RCC_OscConfig+0x110>
 800158a:	e000      	b.n	800158e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800158c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	2b00      	cmp	r3, #0
 8001598:	d069      	beq.n	800166e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800159a:	4b50      	ldr	r3, [pc, #320]	; (80016dc <HAL_RCC_OscConfig+0x280>)
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	f003 030c 	and.w	r3, r3, #12
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d00b      	beq.n	80015be <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015a6:	4b4d      	ldr	r3, [pc, #308]	; (80016dc <HAL_RCC_OscConfig+0x280>)
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	f003 030c 	and.w	r3, r3, #12
 80015ae:	2b08      	cmp	r3, #8
 80015b0:	d11c      	bne.n	80015ec <HAL_RCC_OscConfig+0x190>
 80015b2:	4b4a      	ldr	r3, [pc, #296]	; (80016dc <HAL_RCC_OscConfig+0x280>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d116      	bne.n	80015ec <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015be:	4b47      	ldr	r3, [pc, #284]	; (80016dc <HAL_RCC_OscConfig+0x280>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d005      	beq.n	80015d6 <HAL_RCC_OscConfig+0x17a>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	68db      	ldr	r3, [r3, #12]
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d001      	beq.n	80015d6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e1df      	b.n	8001996 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015d6:	4b41      	ldr	r3, [pc, #260]	; (80016dc <HAL_RCC_OscConfig+0x280>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	691b      	ldr	r3, [r3, #16]
 80015e2:	00db      	lsls	r3, r3, #3
 80015e4:	493d      	ldr	r1, [pc, #244]	; (80016dc <HAL_RCC_OscConfig+0x280>)
 80015e6:	4313      	orrs	r3, r2
 80015e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ea:	e040      	b.n	800166e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d023      	beq.n	800163c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015f4:	4b39      	ldr	r3, [pc, #228]	; (80016dc <HAL_RCC_OscConfig+0x280>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a38      	ldr	r2, [pc, #224]	; (80016dc <HAL_RCC_OscConfig+0x280>)
 80015fa:	f043 0301 	orr.w	r3, r3, #1
 80015fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001600:	f7ff f9fa 	bl	80009f8 <HAL_GetTick>
 8001604:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001606:	e008      	b.n	800161a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001608:	f7ff f9f6 	bl	80009f8 <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	2b02      	cmp	r3, #2
 8001614:	d901      	bls.n	800161a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e1bd      	b.n	8001996 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800161a:	4b30      	ldr	r3, [pc, #192]	; (80016dc <HAL_RCC_OscConfig+0x280>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	2b00      	cmp	r3, #0
 8001624:	d0f0      	beq.n	8001608 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001626:	4b2d      	ldr	r3, [pc, #180]	; (80016dc <HAL_RCC_OscConfig+0x280>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	691b      	ldr	r3, [r3, #16]
 8001632:	00db      	lsls	r3, r3, #3
 8001634:	4929      	ldr	r1, [pc, #164]	; (80016dc <HAL_RCC_OscConfig+0x280>)
 8001636:	4313      	orrs	r3, r2
 8001638:	600b      	str	r3, [r1, #0]
 800163a:	e018      	b.n	800166e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800163c:	4b27      	ldr	r3, [pc, #156]	; (80016dc <HAL_RCC_OscConfig+0x280>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a26      	ldr	r2, [pc, #152]	; (80016dc <HAL_RCC_OscConfig+0x280>)
 8001642:	f023 0301 	bic.w	r3, r3, #1
 8001646:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001648:	f7ff f9d6 	bl	80009f8 <HAL_GetTick>
 800164c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800164e:	e008      	b.n	8001662 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001650:	f7ff f9d2 	bl	80009f8 <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	2b02      	cmp	r3, #2
 800165c:	d901      	bls.n	8001662 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e199      	b.n	8001996 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001662:	4b1e      	ldr	r3, [pc, #120]	; (80016dc <HAL_RCC_OscConfig+0x280>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d1f0      	bne.n	8001650 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0308 	and.w	r3, r3, #8
 8001676:	2b00      	cmp	r3, #0
 8001678:	d038      	beq.n	80016ec <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	695b      	ldr	r3, [r3, #20]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d019      	beq.n	80016b6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001682:	4b16      	ldr	r3, [pc, #88]	; (80016dc <HAL_RCC_OscConfig+0x280>)
 8001684:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001686:	4a15      	ldr	r2, [pc, #84]	; (80016dc <HAL_RCC_OscConfig+0x280>)
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800168e:	f7ff f9b3 	bl	80009f8 <HAL_GetTick>
 8001692:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001694:	e008      	b.n	80016a8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001696:	f7ff f9af 	bl	80009f8 <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d901      	bls.n	80016a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016a4:	2303      	movs	r3, #3
 80016a6:	e176      	b.n	8001996 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016a8:	4b0c      	ldr	r3, [pc, #48]	; (80016dc <HAL_RCC_OscConfig+0x280>)
 80016aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016ac:	f003 0302 	and.w	r3, r3, #2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d0f0      	beq.n	8001696 <HAL_RCC_OscConfig+0x23a>
 80016b4:	e01a      	b.n	80016ec <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016b6:	4b09      	ldr	r3, [pc, #36]	; (80016dc <HAL_RCC_OscConfig+0x280>)
 80016b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016ba:	4a08      	ldr	r2, [pc, #32]	; (80016dc <HAL_RCC_OscConfig+0x280>)
 80016bc:	f023 0301 	bic.w	r3, r3, #1
 80016c0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016c2:	f7ff f999 	bl	80009f8 <HAL_GetTick>
 80016c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016c8:	e00a      	b.n	80016e0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016ca:	f7ff f995 	bl	80009f8 <HAL_GetTick>
 80016ce:	4602      	mov	r2, r0
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d903      	bls.n	80016e0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80016d8:	2303      	movs	r3, #3
 80016da:	e15c      	b.n	8001996 <HAL_RCC_OscConfig+0x53a>
 80016dc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016e0:	4b91      	ldr	r3, [pc, #580]	; (8001928 <HAL_RCC_OscConfig+0x4cc>)
 80016e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016e4:	f003 0302 	and.w	r3, r3, #2
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d1ee      	bne.n	80016ca <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0304 	and.w	r3, r3, #4
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	f000 80a4 	beq.w	8001842 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016fa:	4b8b      	ldr	r3, [pc, #556]	; (8001928 <HAL_RCC_OscConfig+0x4cc>)
 80016fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d10d      	bne.n	8001722 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001706:	4b88      	ldr	r3, [pc, #544]	; (8001928 <HAL_RCC_OscConfig+0x4cc>)
 8001708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170a:	4a87      	ldr	r2, [pc, #540]	; (8001928 <HAL_RCC_OscConfig+0x4cc>)
 800170c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001710:	6413      	str	r3, [r2, #64]	; 0x40
 8001712:	4b85      	ldr	r3, [pc, #532]	; (8001928 <HAL_RCC_OscConfig+0x4cc>)
 8001714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800171a:	60bb      	str	r3, [r7, #8]
 800171c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800171e:	2301      	movs	r3, #1
 8001720:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001722:	4b82      	ldr	r3, [pc, #520]	; (800192c <HAL_RCC_OscConfig+0x4d0>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800172a:	2b00      	cmp	r3, #0
 800172c:	d118      	bne.n	8001760 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800172e:	4b7f      	ldr	r3, [pc, #508]	; (800192c <HAL_RCC_OscConfig+0x4d0>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a7e      	ldr	r2, [pc, #504]	; (800192c <HAL_RCC_OscConfig+0x4d0>)
 8001734:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001738:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800173a:	f7ff f95d 	bl	80009f8 <HAL_GetTick>
 800173e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001740:	e008      	b.n	8001754 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001742:	f7ff f959 	bl	80009f8 <HAL_GetTick>
 8001746:	4602      	mov	r2, r0
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	2b64      	cmp	r3, #100	; 0x64
 800174e:	d901      	bls.n	8001754 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001750:	2303      	movs	r3, #3
 8001752:	e120      	b.n	8001996 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001754:	4b75      	ldr	r3, [pc, #468]	; (800192c <HAL_RCC_OscConfig+0x4d0>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800175c:	2b00      	cmp	r3, #0
 800175e:	d0f0      	beq.n	8001742 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	2b01      	cmp	r3, #1
 8001766:	d106      	bne.n	8001776 <HAL_RCC_OscConfig+0x31a>
 8001768:	4b6f      	ldr	r3, [pc, #444]	; (8001928 <HAL_RCC_OscConfig+0x4cc>)
 800176a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800176c:	4a6e      	ldr	r2, [pc, #440]	; (8001928 <HAL_RCC_OscConfig+0x4cc>)
 800176e:	f043 0301 	orr.w	r3, r3, #1
 8001772:	6713      	str	r3, [r2, #112]	; 0x70
 8001774:	e02d      	b.n	80017d2 <HAL_RCC_OscConfig+0x376>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d10c      	bne.n	8001798 <HAL_RCC_OscConfig+0x33c>
 800177e:	4b6a      	ldr	r3, [pc, #424]	; (8001928 <HAL_RCC_OscConfig+0x4cc>)
 8001780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001782:	4a69      	ldr	r2, [pc, #420]	; (8001928 <HAL_RCC_OscConfig+0x4cc>)
 8001784:	f023 0301 	bic.w	r3, r3, #1
 8001788:	6713      	str	r3, [r2, #112]	; 0x70
 800178a:	4b67      	ldr	r3, [pc, #412]	; (8001928 <HAL_RCC_OscConfig+0x4cc>)
 800178c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800178e:	4a66      	ldr	r2, [pc, #408]	; (8001928 <HAL_RCC_OscConfig+0x4cc>)
 8001790:	f023 0304 	bic.w	r3, r3, #4
 8001794:	6713      	str	r3, [r2, #112]	; 0x70
 8001796:	e01c      	b.n	80017d2 <HAL_RCC_OscConfig+0x376>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	2b05      	cmp	r3, #5
 800179e:	d10c      	bne.n	80017ba <HAL_RCC_OscConfig+0x35e>
 80017a0:	4b61      	ldr	r3, [pc, #388]	; (8001928 <HAL_RCC_OscConfig+0x4cc>)
 80017a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017a4:	4a60      	ldr	r2, [pc, #384]	; (8001928 <HAL_RCC_OscConfig+0x4cc>)
 80017a6:	f043 0304 	orr.w	r3, r3, #4
 80017aa:	6713      	str	r3, [r2, #112]	; 0x70
 80017ac:	4b5e      	ldr	r3, [pc, #376]	; (8001928 <HAL_RCC_OscConfig+0x4cc>)
 80017ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017b0:	4a5d      	ldr	r2, [pc, #372]	; (8001928 <HAL_RCC_OscConfig+0x4cc>)
 80017b2:	f043 0301 	orr.w	r3, r3, #1
 80017b6:	6713      	str	r3, [r2, #112]	; 0x70
 80017b8:	e00b      	b.n	80017d2 <HAL_RCC_OscConfig+0x376>
 80017ba:	4b5b      	ldr	r3, [pc, #364]	; (8001928 <HAL_RCC_OscConfig+0x4cc>)
 80017bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017be:	4a5a      	ldr	r2, [pc, #360]	; (8001928 <HAL_RCC_OscConfig+0x4cc>)
 80017c0:	f023 0301 	bic.w	r3, r3, #1
 80017c4:	6713      	str	r3, [r2, #112]	; 0x70
 80017c6:	4b58      	ldr	r3, [pc, #352]	; (8001928 <HAL_RCC_OscConfig+0x4cc>)
 80017c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ca:	4a57      	ldr	r2, [pc, #348]	; (8001928 <HAL_RCC_OscConfig+0x4cc>)
 80017cc:	f023 0304 	bic.w	r3, r3, #4
 80017d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d015      	beq.n	8001806 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017da:	f7ff f90d 	bl	80009f8 <HAL_GetTick>
 80017de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017e0:	e00a      	b.n	80017f8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017e2:	f7ff f909 	bl	80009f8 <HAL_GetTick>
 80017e6:	4602      	mov	r2, r0
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d901      	bls.n	80017f8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e0ce      	b.n	8001996 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017f8:	4b4b      	ldr	r3, [pc, #300]	; (8001928 <HAL_RCC_OscConfig+0x4cc>)
 80017fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017fc:	f003 0302 	and.w	r3, r3, #2
 8001800:	2b00      	cmp	r3, #0
 8001802:	d0ee      	beq.n	80017e2 <HAL_RCC_OscConfig+0x386>
 8001804:	e014      	b.n	8001830 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001806:	f7ff f8f7 	bl	80009f8 <HAL_GetTick>
 800180a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800180c:	e00a      	b.n	8001824 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800180e:	f7ff f8f3 	bl	80009f8 <HAL_GetTick>
 8001812:	4602      	mov	r2, r0
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	f241 3288 	movw	r2, #5000	; 0x1388
 800181c:	4293      	cmp	r3, r2
 800181e:	d901      	bls.n	8001824 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001820:	2303      	movs	r3, #3
 8001822:	e0b8      	b.n	8001996 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001824:	4b40      	ldr	r3, [pc, #256]	; (8001928 <HAL_RCC_OscConfig+0x4cc>)
 8001826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001828:	f003 0302 	and.w	r3, r3, #2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d1ee      	bne.n	800180e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001830:	7dfb      	ldrb	r3, [r7, #23]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d105      	bne.n	8001842 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001836:	4b3c      	ldr	r3, [pc, #240]	; (8001928 <HAL_RCC_OscConfig+0x4cc>)
 8001838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183a:	4a3b      	ldr	r2, [pc, #236]	; (8001928 <HAL_RCC_OscConfig+0x4cc>)
 800183c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001840:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	699b      	ldr	r3, [r3, #24]
 8001846:	2b00      	cmp	r3, #0
 8001848:	f000 80a4 	beq.w	8001994 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800184c:	4b36      	ldr	r3, [pc, #216]	; (8001928 <HAL_RCC_OscConfig+0x4cc>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f003 030c 	and.w	r3, r3, #12
 8001854:	2b08      	cmp	r3, #8
 8001856:	d06b      	beq.n	8001930 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	699b      	ldr	r3, [r3, #24]
 800185c:	2b02      	cmp	r3, #2
 800185e:	d149      	bne.n	80018f4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001860:	4b31      	ldr	r3, [pc, #196]	; (8001928 <HAL_RCC_OscConfig+0x4cc>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a30      	ldr	r2, [pc, #192]	; (8001928 <HAL_RCC_OscConfig+0x4cc>)
 8001866:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800186a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800186c:	f7ff f8c4 	bl	80009f8 <HAL_GetTick>
 8001870:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001872:	e008      	b.n	8001886 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001874:	f7ff f8c0 	bl	80009f8 <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b02      	cmp	r3, #2
 8001880:	d901      	bls.n	8001886 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e087      	b.n	8001996 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001886:	4b28      	ldr	r3, [pc, #160]	; (8001928 <HAL_RCC_OscConfig+0x4cc>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d1f0      	bne.n	8001874 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	69da      	ldr	r2, [r3, #28]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a1b      	ldr	r3, [r3, #32]
 800189a:	431a      	orrs	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a0:	019b      	lsls	r3, r3, #6
 80018a2:	431a      	orrs	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a8:	085b      	lsrs	r3, r3, #1
 80018aa:	3b01      	subs	r3, #1
 80018ac:	041b      	lsls	r3, r3, #16
 80018ae:	431a      	orrs	r2, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b4:	061b      	lsls	r3, r3, #24
 80018b6:	4313      	orrs	r3, r2
 80018b8:	4a1b      	ldr	r2, [pc, #108]	; (8001928 <HAL_RCC_OscConfig+0x4cc>)
 80018ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80018be:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018c0:	4b19      	ldr	r3, [pc, #100]	; (8001928 <HAL_RCC_OscConfig+0x4cc>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a18      	ldr	r2, [pc, #96]	; (8001928 <HAL_RCC_OscConfig+0x4cc>)
 80018c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018cc:	f7ff f894 	bl	80009f8 <HAL_GetTick>
 80018d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018d2:	e008      	b.n	80018e6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018d4:	f7ff f890 	bl	80009f8 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e057      	b.n	8001996 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018e6:	4b10      	ldr	r3, [pc, #64]	; (8001928 <HAL_RCC_OscConfig+0x4cc>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d0f0      	beq.n	80018d4 <HAL_RCC_OscConfig+0x478>
 80018f2:	e04f      	b.n	8001994 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018f4:	4b0c      	ldr	r3, [pc, #48]	; (8001928 <HAL_RCC_OscConfig+0x4cc>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a0b      	ldr	r2, [pc, #44]	; (8001928 <HAL_RCC_OscConfig+0x4cc>)
 80018fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001900:	f7ff f87a 	bl	80009f8 <HAL_GetTick>
 8001904:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001906:	e008      	b.n	800191a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001908:	f7ff f876 	bl	80009f8 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b02      	cmp	r3, #2
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e03d      	b.n	8001996 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800191a:	4b03      	ldr	r3, [pc, #12]	; (8001928 <HAL_RCC_OscConfig+0x4cc>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d1f0      	bne.n	8001908 <HAL_RCC_OscConfig+0x4ac>
 8001926:	e035      	b.n	8001994 <HAL_RCC_OscConfig+0x538>
 8001928:	40023800 	.word	0x40023800
 800192c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001930:	4b1b      	ldr	r3, [pc, #108]	; (80019a0 <HAL_RCC_OscConfig+0x544>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	699b      	ldr	r3, [r3, #24]
 800193a:	2b01      	cmp	r3, #1
 800193c:	d028      	beq.n	8001990 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001948:	429a      	cmp	r2, r3
 800194a:	d121      	bne.n	8001990 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001956:	429a      	cmp	r2, r3
 8001958:	d11a      	bne.n	8001990 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800195a:	68fa      	ldr	r2, [r7, #12]
 800195c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001960:	4013      	ands	r3, r2
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001966:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001968:	4293      	cmp	r3, r2
 800196a:	d111      	bne.n	8001990 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001976:	085b      	lsrs	r3, r3, #1
 8001978:	3b01      	subs	r3, #1
 800197a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800197c:	429a      	cmp	r2, r3
 800197e:	d107      	bne.n	8001990 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800198a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800198c:	429a      	cmp	r2, r3
 800198e:	d001      	beq.n	8001994 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e000      	b.n	8001996 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	3718      	adds	r7, #24
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40023800 	.word	0x40023800

080019a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80019ae:	2300      	movs	r3, #0
 80019b0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d101      	bne.n	80019bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e0d0      	b.n	8001b5e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019bc:	4b6a      	ldr	r3, [pc, #424]	; (8001b68 <HAL_RCC_ClockConfig+0x1c4>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 030f 	and.w	r3, r3, #15
 80019c4:	683a      	ldr	r2, [r7, #0]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d910      	bls.n	80019ec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ca:	4b67      	ldr	r3, [pc, #412]	; (8001b68 <HAL_RCC_ClockConfig+0x1c4>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f023 020f 	bic.w	r2, r3, #15
 80019d2:	4965      	ldr	r1, [pc, #404]	; (8001b68 <HAL_RCC_ClockConfig+0x1c4>)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019da:	4b63      	ldr	r3, [pc, #396]	; (8001b68 <HAL_RCC_ClockConfig+0x1c4>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 030f 	and.w	r3, r3, #15
 80019e2:	683a      	ldr	r2, [r7, #0]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d001      	beq.n	80019ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e0b8      	b.n	8001b5e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0302 	and.w	r3, r3, #2
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d020      	beq.n	8001a3a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0304 	and.w	r3, r3, #4
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d005      	beq.n	8001a10 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a04:	4b59      	ldr	r3, [pc, #356]	; (8001b6c <HAL_RCC_ClockConfig+0x1c8>)
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	4a58      	ldr	r2, [pc, #352]	; (8001b6c <HAL_RCC_ClockConfig+0x1c8>)
 8001a0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a0e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0308 	and.w	r3, r3, #8
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d005      	beq.n	8001a28 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a1c:	4b53      	ldr	r3, [pc, #332]	; (8001b6c <HAL_RCC_ClockConfig+0x1c8>)
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	4a52      	ldr	r2, [pc, #328]	; (8001b6c <HAL_RCC_ClockConfig+0x1c8>)
 8001a22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a26:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a28:	4b50      	ldr	r3, [pc, #320]	; (8001b6c <HAL_RCC_ClockConfig+0x1c8>)
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	494d      	ldr	r1, [pc, #308]	; (8001b6c <HAL_RCC_ClockConfig+0x1c8>)
 8001a36:	4313      	orrs	r3, r2
 8001a38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d040      	beq.n	8001ac8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d107      	bne.n	8001a5e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a4e:	4b47      	ldr	r3, [pc, #284]	; (8001b6c <HAL_RCC_ClockConfig+0x1c8>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d115      	bne.n	8001a86 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e07f      	b.n	8001b5e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d107      	bne.n	8001a76 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a66:	4b41      	ldr	r3, [pc, #260]	; (8001b6c <HAL_RCC_ClockConfig+0x1c8>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d109      	bne.n	8001a86 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e073      	b.n	8001b5e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a76:	4b3d      	ldr	r3, [pc, #244]	; (8001b6c <HAL_RCC_ClockConfig+0x1c8>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d101      	bne.n	8001a86 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e06b      	b.n	8001b5e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a86:	4b39      	ldr	r3, [pc, #228]	; (8001b6c <HAL_RCC_ClockConfig+0x1c8>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f023 0203 	bic.w	r2, r3, #3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	4936      	ldr	r1, [pc, #216]	; (8001b6c <HAL_RCC_ClockConfig+0x1c8>)
 8001a94:	4313      	orrs	r3, r2
 8001a96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a98:	f7fe ffae 	bl	80009f8 <HAL_GetTick>
 8001a9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a9e:	e00a      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aa0:	f7fe ffaa 	bl	80009f8 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e053      	b.n	8001b5e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ab6:	4b2d      	ldr	r3, [pc, #180]	; (8001b6c <HAL_RCC_ClockConfig+0x1c8>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f003 020c 	and.w	r2, r3, #12
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d1eb      	bne.n	8001aa0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ac8:	4b27      	ldr	r3, [pc, #156]	; (8001b68 <HAL_RCC_ClockConfig+0x1c4>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 030f 	and.w	r3, r3, #15
 8001ad0:	683a      	ldr	r2, [r7, #0]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d210      	bcs.n	8001af8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ad6:	4b24      	ldr	r3, [pc, #144]	; (8001b68 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f023 020f 	bic.w	r2, r3, #15
 8001ade:	4922      	ldr	r1, [pc, #136]	; (8001b68 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ae6:	4b20      	ldr	r3, [pc, #128]	; (8001b68 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 030f 	and.w	r3, r3, #15
 8001aee:	683a      	ldr	r2, [r7, #0]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d001      	beq.n	8001af8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e032      	b.n	8001b5e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0304 	and.w	r3, r3, #4
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d008      	beq.n	8001b16 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b04:	4b19      	ldr	r3, [pc, #100]	; (8001b6c <HAL_RCC_ClockConfig+0x1c8>)
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	4916      	ldr	r1, [pc, #88]	; (8001b6c <HAL_RCC_ClockConfig+0x1c8>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0308 	and.w	r3, r3, #8
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d009      	beq.n	8001b36 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b22:	4b12      	ldr	r3, [pc, #72]	; (8001b6c <HAL_RCC_ClockConfig+0x1c8>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	691b      	ldr	r3, [r3, #16]
 8001b2e:	00db      	lsls	r3, r3, #3
 8001b30:	490e      	ldr	r1, [pc, #56]	; (8001b6c <HAL_RCC_ClockConfig+0x1c8>)
 8001b32:	4313      	orrs	r3, r2
 8001b34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b36:	f000 f821 	bl	8001b7c <HAL_RCC_GetSysClockFreq>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	4b0b      	ldr	r3, [pc, #44]	; (8001b6c <HAL_RCC_ClockConfig+0x1c8>)
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	091b      	lsrs	r3, r3, #4
 8001b42:	f003 030f 	and.w	r3, r3, #15
 8001b46:	490a      	ldr	r1, [pc, #40]	; (8001b70 <HAL_RCC_ClockConfig+0x1cc>)
 8001b48:	5ccb      	ldrb	r3, [r1, r3]
 8001b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b4e:	4a09      	ldr	r2, [pc, #36]	; (8001b74 <HAL_RCC_ClockConfig+0x1d0>)
 8001b50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b52:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <HAL_RCC_ClockConfig+0x1d4>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7fe ff0a 	bl	8000970 <HAL_InitTick>

  return HAL_OK;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	40023c00 	.word	0x40023c00
 8001b6c:	40023800 	.word	0x40023800
 8001b70:	08003ccc 	.word	0x08003ccc
 8001b74:	20000000 	.word	0x20000000
 8001b78:	20000004 	.word	0x20000004

08001b7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b80:	b090      	sub	sp, #64	; 0x40
 8001b82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001b84:	2300      	movs	r3, #0
 8001b86:	637b      	str	r3, [r7, #52]	; 0x34
 8001b88:	2300      	movs	r3, #0
 8001b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8001b90:	2300      	movs	r3, #0
 8001b92:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b94:	4b59      	ldr	r3, [pc, #356]	; (8001cfc <HAL_RCC_GetSysClockFreq+0x180>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f003 030c 	and.w	r3, r3, #12
 8001b9c:	2b08      	cmp	r3, #8
 8001b9e:	d00d      	beq.n	8001bbc <HAL_RCC_GetSysClockFreq+0x40>
 8001ba0:	2b08      	cmp	r3, #8
 8001ba2:	f200 80a1 	bhi.w	8001ce8 <HAL_RCC_GetSysClockFreq+0x16c>
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d002      	beq.n	8001bb0 <HAL_RCC_GetSysClockFreq+0x34>
 8001baa:	2b04      	cmp	r3, #4
 8001bac:	d003      	beq.n	8001bb6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001bae:	e09b      	b.n	8001ce8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bb0:	4b53      	ldr	r3, [pc, #332]	; (8001d00 <HAL_RCC_GetSysClockFreq+0x184>)
 8001bb2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001bb4:	e09b      	b.n	8001cee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001bb6:	4b53      	ldr	r3, [pc, #332]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x188>)
 8001bb8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001bba:	e098      	b.n	8001cee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bbc:	4b4f      	ldr	r3, [pc, #316]	; (8001cfc <HAL_RCC_GetSysClockFreq+0x180>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bc4:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001bc6:	4b4d      	ldr	r3, [pc, #308]	; (8001cfc <HAL_RCC_GetSysClockFreq+0x180>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d028      	beq.n	8001c24 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bd2:	4b4a      	ldr	r3, [pc, #296]	; (8001cfc <HAL_RCC_GetSysClockFreq+0x180>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	099b      	lsrs	r3, r3, #6
 8001bd8:	2200      	movs	r2, #0
 8001bda:	623b      	str	r3, [r7, #32]
 8001bdc:	627a      	str	r2, [r7, #36]	; 0x24
 8001bde:	6a3b      	ldr	r3, [r7, #32]
 8001be0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001be4:	2100      	movs	r1, #0
 8001be6:	4b47      	ldr	r3, [pc, #284]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x188>)
 8001be8:	fb03 f201 	mul.w	r2, r3, r1
 8001bec:	2300      	movs	r3, #0
 8001bee:	fb00 f303 	mul.w	r3, r0, r3
 8001bf2:	4413      	add	r3, r2
 8001bf4:	4a43      	ldr	r2, [pc, #268]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x188>)
 8001bf6:	fba0 1202 	umull	r1, r2, r0, r2
 8001bfa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001bfc:	460a      	mov	r2, r1
 8001bfe:	62ba      	str	r2, [r7, #40]	; 0x28
 8001c00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c02:	4413      	add	r3, r2
 8001c04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c08:	2200      	movs	r2, #0
 8001c0a:	61bb      	str	r3, [r7, #24]
 8001c0c:	61fa      	str	r2, [r7, #28]
 8001c0e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c12:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001c16:	f7fe fafb 	bl	8000210 <__aeabi_uldivmod>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	4613      	mov	r3, r2
 8001c20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c22:	e053      	b.n	8001ccc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c24:	4b35      	ldr	r3, [pc, #212]	; (8001cfc <HAL_RCC_GetSysClockFreq+0x180>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	099b      	lsrs	r3, r3, #6
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	613b      	str	r3, [r7, #16]
 8001c2e:	617a      	str	r2, [r7, #20]
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001c36:	f04f 0b00 	mov.w	fp, #0
 8001c3a:	4652      	mov	r2, sl
 8001c3c:	465b      	mov	r3, fp
 8001c3e:	f04f 0000 	mov.w	r0, #0
 8001c42:	f04f 0100 	mov.w	r1, #0
 8001c46:	0159      	lsls	r1, r3, #5
 8001c48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c4c:	0150      	lsls	r0, r2, #5
 8001c4e:	4602      	mov	r2, r0
 8001c50:	460b      	mov	r3, r1
 8001c52:	ebb2 080a 	subs.w	r8, r2, sl
 8001c56:	eb63 090b 	sbc.w	r9, r3, fp
 8001c5a:	f04f 0200 	mov.w	r2, #0
 8001c5e:	f04f 0300 	mov.w	r3, #0
 8001c62:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001c66:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001c6a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001c6e:	ebb2 0408 	subs.w	r4, r2, r8
 8001c72:	eb63 0509 	sbc.w	r5, r3, r9
 8001c76:	f04f 0200 	mov.w	r2, #0
 8001c7a:	f04f 0300 	mov.w	r3, #0
 8001c7e:	00eb      	lsls	r3, r5, #3
 8001c80:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c84:	00e2      	lsls	r2, r4, #3
 8001c86:	4614      	mov	r4, r2
 8001c88:	461d      	mov	r5, r3
 8001c8a:	eb14 030a 	adds.w	r3, r4, sl
 8001c8e:	603b      	str	r3, [r7, #0]
 8001c90:	eb45 030b 	adc.w	r3, r5, fp
 8001c94:	607b      	str	r3, [r7, #4]
 8001c96:	f04f 0200 	mov.w	r2, #0
 8001c9a:	f04f 0300 	mov.w	r3, #0
 8001c9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ca2:	4629      	mov	r1, r5
 8001ca4:	028b      	lsls	r3, r1, #10
 8001ca6:	4621      	mov	r1, r4
 8001ca8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001cac:	4621      	mov	r1, r4
 8001cae:	028a      	lsls	r2, r1, #10
 8001cb0:	4610      	mov	r0, r2
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	60bb      	str	r3, [r7, #8]
 8001cba:	60fa      	str	r2, [r7, #12]
 8001cbc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001cc0:	f7fe faa6 	bl	8000210 <__aeabi_uldivmod>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	4613      	mov	r3, r2
 8001cca:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001ccc:	4b0b      	ldr	r3, [pc, #44]	; (8001cfc <HAL_RCC_GetSysClockFreq+0x180>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	0c1b      	lsrs	r3, r3, #16
 8001cd2:	f003 0303 	and.w	r3, r3, #3
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8001cdc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ce4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001ce6:	e002      	b.n	8001cee <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ce8:	4b05      	ldr	r3, [pc, #20]	; (8001d00 <HAL_RCC_GetSysClockFreq+0x184>)
 8001cea:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001cec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3740      	adds	r7, #64	; 0x40
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cfa:	bf00      	nop
 8001cfc:	40023800 	.word	0x40023800
 8001d00:	00f42400 	.word	0x00f42400
 8001d04:	017d7840 	.word	0x017d7840

08001d08 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	4603      	mov	r3, r0
 8001d10:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001d12:	2300      	movs	r3, #0
 8001d14:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001d16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d1a:	2b84      	cmp	r3, #132	; 0x84
 8001d1c:	d005      	beq.n	8001d2a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001d1e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	4413      	add	r3, r2
 8001d26:	3303      	adds	r3, #3
 8001d28:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3714      	adds	r7, #20
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001d3c:	f001 fa20 	bl	8003180 <vTaskStartScheduler>
  
  return osOK;
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001d46:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d48:	b089      	sub	sp, #36	; 0x24
 8001d4a:	af04      	add	r7, sp, #16
 8001d4c:	6078      	str	r0, [r7, #4]
 8001d4e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	695b      	ldr	r3, [r3, #20]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d020      	beq.n	8001d9a <osThreadCreate+0x54>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	699b      	ldr	r3, [r3, #24]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d01c      	beq.n	8001d9a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685c      	ldr	r4, [r3, #4]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	691e      	ldr	r6, [r3, #16]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7ff ffc8 	bl	8001d08 <makeFreeRtosPriority>
 8001d78:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	695b      	ldr	r3, [r3, #20]
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001d82:	9202      	str	r2, [sp, #8]
 8001d84:	9301      	str	r3, [sp, #4]
 8001d86:	9100      	str	r1, [sp, #0]
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	4632      	mov	r2, r6
 8001d8c:	4629      	mov	r1, r5
 8001d8e:	4620      	mov	r0, r4
 8001d90:	f001 f824 	bl	8002ddc <xTaskCreateStatic>
 8001d94:	4603      	mov	r3, r0
 8001d96:	60fb      	str	r3, [r7, #12]
 8001d98:	e01c      	b.n	8001dd4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685c      	ldr	r4, [r3, #4]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001da6:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7ff ffaa 	bl	8001d08 <makeFreeRtosPriority>
 8001db4:	4602      	mov	r2, r0
 8001db6:	f107 030c 	add.w	r3, r7, #12
 8001dba:	9301      	str	r3, [sp, #4]
 8001dbc:	9200      	str	r2, [sp, #0]
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	4632      	mov	r2, r6
 8001dc2:	4629      	mov	r1, r5
 8001dc4:	4620      	mov	r0, r4
 8001dc6:	f001 f86c 	bl	8002ea2 <xTaskCreate>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d001      	beq.n	8001dd4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	e000      	b.n	8001dd6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3714      	adds	r7, #20
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001dde <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b084      	sub	sp, #16
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <osDelay+0x16>
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	e000      	b.n	8001df6 <osDelay+0x18>
 8001df4:	2301      	movs	r3, #1
 8001df6:	4618      	mov	r0, r3
 8001df8:	f001 f98c 	bl	8003114 <vTaskDelay>
  
  return osOK;
 8001dfc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3710      	adds	r7, #16
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b086      	sub	sp, #24
 8001e0a:	af02      	add	r7, sp, #8
 8001e0c:	6078      	str	r0, [r7, #4]
 8001e0e:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d00f      	beq.n	8001e38 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d10a      	bne.n	8001e34 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	2203      	movs	r2, #3
 8001e24:	9200      	str	r2, [sp, #0]
 8001e26:	2200      	movs	r2, #0
 8001e28:	2100      	movs	r1, #0
 8001e2a:	2001      	movs	r0, #1
 8001e2c:	f000 fd18 	bl	8002860 <xQueueGenericCreateStatic>
 8001e30:	4603      	mov	r3, r0
 8001e32:	e016      	b.n	8001e62 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8001e34:	2300      	movs	r3, #0
 8001e36:	e014      	b.n	8001e62 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d110      	bne.n	8001e60 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8001e3e:	2203      	movs	r2, #3
 8001e40:	2100      	movs	r1, #0
 8001e42:	2001      	movs	r0, #1
 8001e44:	f000 fd8e 	bl	8002964 <xQueueGenericCreate>
 8001e48:	60f8      	str	r0, [r7, #12]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d005      	beq.n	8001e5c <osSemaphoreCreate+0x56>
 8001e50:	2300      	movs	r3, #0
 8001e52:	2200      	movs	r2, #0
 8001e54:	2100      	movs	r1, #0
 8001e56:	68f8      	ldr	r0, [r7, #12]
 8001e58:	f000 fde6 	bl	8002a28 <xQueueGenericSend>
      return sema;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	e000      	b.n	8001e62 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8001e60:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3710      	adds	r7, #16
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
	...

08001e6c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b08a      	sub	sp, #40	; 0x28
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8001e74:	2300      	movs	r3, #0
 8001e76:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8001e78:	f001 f9e6 	bl	8003248 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001e7c:	4b5b      	ldr	r3, [pc, #364]	; (8001fec <pvPortMalloc+0x180>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d101      	bne.n	8001e88 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8001e84:	f000 f91a 	bl	80020bc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001e88:	4b59      	ldr	r3, [pc, #356]	; (8001ff0 <pvPortMalloc+0x184>)
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	f040 8092 	bne.w	8001fba <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d01f      	beq.n	8001edc <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8001e9c:	2208      	movs	r2, #8
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f003 0307 	and.w	r3, r3, #7
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d016      	beq.n	8001edc <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f023 0307 	bic.w	r3, r3, #7
 8001eb4:	3308      	adds	r3, #8
 8001eb6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f003 0307 	and.w	r3, r3, #7
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d00c      	beq.n	8001edc <pvPortMalloc+0x70>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ec6:	b672      	cpsid	i
 8001ec8:	f383 8811 	msr	BASEPRI, r3
 8001ecc:	f3bf 8f6f 	isb	sy
 8001ed0:	f3bf 8f4f 	dsb	sy
 8001ed4:	b662      	cpsie	i
 8001ed6:	617b      	str	r3, [r7, #20]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001ed8:	bf00      	nop
 8001eda:	e7fe      	b.n	8001eda <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d06b      	beq.n	8001fba <pvPortMalloc+0x14e>
 8001ee2:	4b44      	ldr	r3, [pc, #272]	; (8001ff4 <pvPortMalloc+0x188>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d866      	bhi.n	8001fba <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001eec:	4b42      	ldr	r3, [pc, #264]	; (8001ff8 <pvPortMalloc+0x18c>)
 8001eee:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8001ef0:	4b41      	ldr	r3, [pc, #260]	; (8001ff8 <pvPortMalloc+0x18c>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001ef6:	e004      	b.n	8001f02 <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8001ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efa:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d903      	bls.n	8001f14 <pvPortMalloc+0xa8>
 8001f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d1f1      	bne.n	8001ef8 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001f14:	4b35      	ldr	r3, [pc, #212]	; (8001fec <pvPortMalloc+0x180>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d04d      	beq.n	8001fba <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001f1e:	6a3b      	ldr	r3, [r7, #32]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2208      	movs	r2, #8
 8001f24:	4413      	add	r3, r2
 8001f26:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	6a3b      	ldr	r3, [r7, #32]
 8001f2e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f32:	685a      	ldr	r2, [r3, #4]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	1ad2      	subs	r2, r2, r3
 8001f38:	2308      	movs	r3, #8
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d921      	bls.n	8001f84 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001f40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4413      	add	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	f003 0307 	and.w	r3, r3, #7
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d00c      	beq.n	8001f6c <pvPortMalloc+0x100>
	__asm volatile
 8001f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f56:	b672      	cpsid	i
 8001f58:	f383 8811 	msr	BASEPRI, r3
 8001f5c:	f3bf 8f6f 	isb	sy
 8001f60:	f3bf 8f4f 	dsb	sy
 8001f64:	b662      	cpsie	i
 8001f66:	613b      	str	r3, [r7, #16]
}
 8001f68:	bf00      	nop
 8001f6a:	e7fe      	b.n	8001f6a <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6e:	685a      	ldr	r2, [r3, #4]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	1ad2      	subs	r2, r2, r3
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001f7e:	69b8      	ldr	r0, [r7, #24]
 8001f80:	f000 f8fe 	bl	8002180 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001f84:	4b1b      	ldr	r3, [pc, #108]	; (8001ff4 <pvPortMalloc+0x188>)
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	4a19      	ldr	r2, [pc, #100]	; (8001ff4 <pvPortMalloc+0x188>)
 8001f90:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001f92:	4b18      	ldr	r3, [pc, #96]	; (8001ff4 <pvPortMalloc+0x188>)
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	4b19      	ldr	r3, [pc, #100]	; (8001ffc <pvPortMalloc+0x190>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d203      	bcs.n	8001fa6 <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001f9e:	4b15      	ldr	r3, [pc, #84]	; (8001ff4 <pvPortMalloc+0x188>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a16      	ldr	r2, [pc, #88]	; (8001ffc <pvPortMalloc+0x190>)
 8001fa4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa8:	685a      	ldr	r2, [r3, #4]
 8001faa:	4b11      	ldr	r3, [pc, #68]	; (8001ff0 <pvPortMalloc+0x184>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	431a      	orrs	r2, r3
 8001fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001fba:	f001 f953 	bl	8003264 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	f003 0307 	and.w	r3, r3, #7
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d00c      	beq.n	8001fe2 <pvPortMalloc+0x176>
	__asm volatile
 8001fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fcc:	b672      	cpsid	i
 8001fce:	f383 8811 	msr	BASEPRI, r3
 8001fd2:	f3bf 8f6f 	isb	sy
 8001fd6:	f3bf 8f4f 	dsb	sy
 8001fda:	b662      	cpsie	i
 8001fdc:	60fb      	str	r3, [r7, #12]
}
 8001fde:	bf00      	nop
 8001fe0:	e7fe      	b.n	8001fe0 <pvPortMalloc+0x174>
	return pvReturn;
 8001fe2:	69fb      	ldr	r3, [r7, #28]
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3728      	adds	r7, #40	; 0x28
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	20003ee4 	.word	0x20003ee4
 8001ff0:	20003ef0 	.word	0x20003ef0
 8001ff4:	20003ee8 	.word	0x20003ee8
 8001ff8:	20003edc 	.word	0x20003edc
 8001ffc:	20003eec 	.word	0x20003eec

08002000 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b086      	sub	sp, #24
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d04c      	beq.n	80020ac <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002012:	2308      	movs	r3, #8
 8002014:	425b      	negs	r3, r3
 8002016:	697a      	ldr	r2, [r7, #20]
 8002018:	4413      	add	r3, r2
 800201a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	685a      	ldr	r2, [r3, #4]
 8002024:	4b23      	ldr	r3, [pc, #140]	; (80020b4 <vPortFree+0xb4>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4013      	ands	r3, r2
 800202a:	2b00      	cmp	r3, #0
 800202c:	d10c      	bne.n	8002048 <vPortFree+0x48>
	__asm volatile
 800202e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002032:	b672      	cpsid	i
 8002034:	f383 8811 	msr	BASEPRI, r3
 8002038:	f3bf 8f6f 	isb	sy
 800203c:	f3bf 8f4f 	dsb	sy
 8002040:	b662      	cpsie	i
 8002042:	60fb      	str	r3, [r7, #12]
}
 8002044:	bf00      	nop
 8002046:	e7fe      	b.n	8002046 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d00c      	beq.n	800206a <vPortFree+0x6a>
	__asm volatile
 8002050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002054:	b672      	cpsid	i
 8002056:	f383 8811 	msr	BASEPRI, r3
 800205a:	f3bf 8f6f 	isb	sy
 800205e:	f3bf 8f4f 	dsb	sy
 8002062:	b662      	cpsie	i
 8002064:	60bb      	str	r3, [r7, #8]
}
 8002066:	bf00      	nop
 8002068:	e7fe      	b.n	8002068 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	685a      	ldr	r2, [r3, #4]
 800206e:	4b11      	ldr	r3, [pc, #68]	; (80020b4 <vPortFree+0xb4>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4013      	ands	r3, r2
 8002074:	2b00      	cmp	r3, #0
 8002076:	d019      	beq.n	80020ac <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d115      	bne.n	80020ac <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	685a      	ldr	r2, [r3, #4]
 8002084:	4b0b      	ldr	r3, [pc, #44]	; (80020b4 <vPortFree+0xb4>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	43db      	mvns	r3, r3
 800208a:	401a      	ands	r2, r3
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002090:	f001 f8da 	bl	8003248 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	685a      	ldr	r2, [r3, #4]
 8002098:	4b07      	ldr	r3, [pc, #28]	; (80020b8 <vPortFree+0xb8>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4413      	add	r3, r2
 800209e:	4a06      	ldr	r2, [pc, #24]	; (80020b8 <vPortFree+0xb8>)
 80020a0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80020a2:	6938      	ldr	r0, [r7, #16]
 80020a4:	f000 f86c 	bl	8002180 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80020a8:	f001 f8dc 	bl	8003264 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80020ac:	bf00      	nop
 80020ae:	3718      	adds	r7, #24
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	20003ef0 	.word	0x20003ef0
 80020b8:	20003ee8 	.word	0x20003ee8

080020bc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80020c2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80020c6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80020c8:	4b27      	ldr	r3, [pc, #156]	; (8002168 <prvHeapInit+0xac>)
 80020ca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f003 0307 	and.w	r3, r3, #7
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d00c      	beq.n	80020f0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	3307      	adds	r3, #7
 80020da:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f023 0307 	bic.w	r3, r3, #7
 80020e2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80020e4:	68ba      	ldr	r2, [r7, #8]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	4a1f      	ldr	r2, [pc, #124]	; (8002168 <prvHeapInit+0xac>)
 80020ec:	4413      	add	r3, r2
 80020ee:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80020f4:	4a1d      	ldr	r2, [pc, #116]	; (800216c <prvHeapInit+0xb0>)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80020fa:	4b1c      	ldr	r3, [pc, #112]	; (800216c <prvHeapInit+0xb0>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	68ba      	ldr	r2, [r7, #8]
 8002104:	4413      	add	r3, r2
 8002106:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002108:	2208      	movs	r2, #8
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	1a9b      	subs	r3, r3, r2
 800210e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f023 0307 	bic.w	r3, r3, #7
 8002116:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	4a15      	ldr	r2, [pc, #84]	; (8002170 <prvHeapInit+0xb4>)
 800211c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800211e:	4b14      	ldr	r3, [pc, #80]	; (8002170 <prvHeapInit+0xb4>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2200      	movs	r2, #0
 8002124:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002126:	4b12      	ldr	r3, [pc, #72]	; (8002170 <prvHeapInit+0xb4>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2200      	movs	r2, #0
 800212c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	68fa      	ldr	r2, [r7, #12]
 8002136:	1ad2      	subs	r2, r2, r3
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800213c:	4b0c      	ldr	r3, [pc, #48]	; (8002170 <prvHeapInit+0xb4>)
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	4a0a      	ldr	r2, [pc, #40]	; (8002174 <prvHeapInit+0xb8>)
 800214a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	4a09      	ldr	r2, [pc, #36]	; (8002178 <prvHeapInit+0xbc>)
 8002152:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002154:	4b09      	ldr	r3, [pc, #36]	; (800217c <prvHeapInit+0xc0>)
 8002156:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800215a:	601a      	str	r2, [r3, #0]
}
 800215c:	bf00      	nop
 800215e:	3714      	adds	r7, #20
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr
 8002168:	200002dc 	.word	0x200002dc
 800216c:	20003edc 	.word	0x20003edc
 8002170:	20003ee4 	.word	0x20003ee4
 8002174:	20003eec 	.word	0x20003eec
 8002178:	20003ee8 	.word	0x20003ee8
 800217c:	20003ef0 	.word	0x20003ef0

08002180 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002180:	b480      	push	{r7}
 8002182:	b085      	sub	sp, #20
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002188:	4b28      	ldr	r3, [pc, #160]	; (800222c <prvInsertBlockIntoFreeList+0xac>)
 800218a:	60fb      	str	r3, [r7, #12]
 800218c:	e002      	b.n	8002194 <prvInsertBlockIntoFreeList+0x14>
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	60fb      	str	r3, [r7, #12]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	429a      	cmp	r2, r3
 800219c:	d8f7      	bhi.n	800218e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	68ba      	ldr	r2, [r7, #8]
 80021a8:	4413      	add	r3, r2
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d108      	bne.n	80021c2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	685a      	ldr	r2, [r3, #4]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	441a      	add	r2, r3
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	68ba      	ldr	r2, [r7, #8]
 80021cc:	441a      	add	r2, r3
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d118      	bne.n	8002208 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	4b15      	ldr	r3, [pc, #84]	; (8002230 <prvInsertBlockIntoFreeList+0xb0>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	429a      	cmp	r2, r3
 80021e0:	d00d      	beq.n	80021fe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685a      	ldr	r2, [r3, #4]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	441a      	add	r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	601a      	str	r2, [r3, #0]
 80021fc:	e008      	b.n	8002210 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80021fe:	4b0c      	ldr	r3, [pc, #48]	; (8002230 <prvInsertBlockIntoFreeList+0xb0>)
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	601a      	str	r2, [r3, #0]
 8002206:	e003      	b.n	8002210 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002210:	68fa      	ldr	r2, [r7, #12]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	429a      	cmp	r2, r3
 8002216:	d002      	beq.n	800221e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800221e:	bf00      	nop
 8002220:	3714      	adds	r7, #20
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	20003edc 	.word	0x20003edc
 8002230:	20003ee4 	.word	0x20003ee4

08002234 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f103 0208 	add.w	r2, r3, #8
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f04f 32ff 	mov.w	r2, #4294967295
 800224c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f103 0208 	add.w	r2, r3, #8
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f103 0208 	add.w	r2, r3, #8
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002268:	bf00      	nop
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002282:	bf00      	nop
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr

0800228e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800228e:	b480      	push	{r7}
 8002290:	b085      	sub	sp, #20
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
 8002296:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	68fa      	ldr	r2, [r7, #12]
 80022a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	689a      	ldr	r2, [r3, #8]
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	683a      	ldr	r2, [r7, #0]
 80022b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	683a      	ldr	r2, [r7, #0]
 80022b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	1c5a      	adds	r2, r3, #1
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	601a      	str	r2, [r3, #0]
}
 80022ca:	bf00      	nop
 80022cc:	3714      	adds	r7, #20
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr

080022d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80022d6:	b480      	push	{r7}
 80022d8:	b085      	sub	sp, #20
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
 80022de:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ec:	d103      	bne.n	80022f6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	60fb      	str	r3, [r7, #12]
 80022f4:	e00c      	b.n	8002310 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	3308      	adds	r3, #8
 80022fa:	60fb      	str	r3, [r7, #12]
 80022fc:	e002      	b.n	8002304 <vListInsert+0x2e>
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	60fb      	str	r3, [r7, #12]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68ba      	ldr	r2, [r7, #8]
 800230c:	429a      	cmp	r2, r3
 800230e:	d2f6      	bcs.n	80022fe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	685a      	ldr	r2, [r3, #4]
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	683a      	ldr	r2, [r7, #0]
 800232a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	1c5a      	adds	r2, r3, #1
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	601a      	str	r2, [r3, #0]
}
 800233c:	bf00      	nop
 800233e:	3714      	adds	r7, #20
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002348:	b480      	push	{r7}
 800234a:	b085      	sub	sp, #20
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	691b      	ldr	r3, [r3, #16]
 8002354:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	6892      	ldr	r2, [r2, #8]
 800235e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	6852      	ldr	r2, [r2, #4]
 8002368:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	429a      	cmp	r2, r3
 8002372:	d103      	bne.n	800237c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	689a      	ldr	r2, [r3, #8]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	1e5a      	subs	r2, r3, #1
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
}
 8002390:	4618      	mov	r0, r3
 8002392:	3714      	adds	r7, #20
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800239c:	b480      	push	{r7}
 800239e:	b085      	sub	sp, #20
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	3b04      	subs	r3, #4
 80023ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80023b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	3b04      	subs	r3, #4
 80023ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	f023 0201 	bic.w	r2, r3, #1
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	3b04      	subs	r3, #4
 80023ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80023cc:	4a0c      	ldr	r2, [pc, #48]	; (8002400 <pxPortInitialiseStack+0x64>)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	3b14      	subs	r3, #20
 80023d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	3b04      	subs	r3, #4
 80023e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f06f 0202 	mvn.w	r2, #2
 80023ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	3b20      	subs	r3, #32
 80023f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80023f2:	68fb      	ldr	r3, [r7, #12]
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3714      	adds	r7, #20
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr
 8002400:	08002405 	.word	0x08002405

08002404 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002404:	b480      	push	{r7}
 8002406:	b085      	sub	sp, #20
 8002408:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800240a:	2300      	movs	r3, #0
 800240c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800240e:	4b14      	ldr	r3, [pc, #80]	; (8002460 <prvTaskExitError+0x5c>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002416:	d00c      	beq.n	8002432 <prvTaskExitError+0x2e>
	__asm volatile
 8002418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800241c:	b672      	cpsid	i
 800241e:	f383 8811 	msr	BASEPRI, r3
 8002422:	f3bf 8f6f 	isb	sy
 8002426:	f3bf 8f4f 	dsb	sy
 800242a:	b662      	cpsie	i
 800242c:	60fb      	str	r3, [r7, #12]
}
 800242e:	bf00      	nop
 8002430:	e7fe      	b.n	8002430 <prvTaskExitError+0x2c>
	__asm volatile
 8002432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002436:	b672      	cpsid	i
 8002438:	f383 8811 	msr	BASEPRI, r3
 800243c:	f3bf 8f6f 	isb	sy
 8002440:	f3bf 8f4f 	dsb	sy
 8002444:	b662      	cpsie	i
 8002446:	60bb      	str	r3, [r7, #8]
}
 8002448:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800244a:	bf00      	nop
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d0fc      	beq.n	800244c <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002452:	bf00      	nop
 8002454:	bf00      	nop
 8002456:	3714      	adds	r7, #20
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr
 8002460:	2000000c 	.word	0x2000000c
	...

08002470 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002470:	4b07      	ldr	r3, [pc, #28]	; (8002490 <pxCurrentTCBConst2>)
 8002472:	6819      	ldr	r1, [r3, #0]
 8002474:	6808      	ldr	r0, [r1, #0]
 8002476:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800247a:	f380 8809 	msr	PSP, r0
 800247e:	f3bf 8f6f 	isb	sy
 8002482:	f04f 0000 	mov.w	r0, #0
 8002486:	f380 8811 	msr	BASEPRI, r0
 800248a:	4770      	bx	lr
 800248c:	f3af 8000 	nop.w

08002490 <pxCurrentTCBConst2>:
 8002490:	20003efc 	.word	0x20003efc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002494:	bf00      	nop
 8002496:	bf00      	nop

08002498 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002498:	4808      	ldr	r0, [pc, #32]	; (80024bc <prvPortStartFirstTask+0x24>)
 800249a:	6800      	ldr	r0, [r0, #0]
 800249c:	6800      	ldr	r0, [r0, #0]
 800249e:	f380 8808 	msr	MSP, r0
 80024a2:	f04f 0000 	mov.w	r0, #0
 80024a6:	f380 8814 	msr	CONTROL, r0
 80024aa:	b662      	cpsie	i
 80024ac:	b661      	cpsie	f
 80024ae:	f3bf 8f4f 	dsb	sy
 80024b2:	f3bf 8f6f 	isb	sy
 80024b6:	df00      	svc	0
 80024b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80024ba:	bf00      	nop
 80024bc:	e000ed08 	.word	0xe000ed08

080024c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80024c6:	4b37      	ldr	r3, [pc, #220]	; (80025a4 <xPortStartScheduler+0xe4>)
 80024c8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	22ff      	movs	r2, #255	; 0xff
 80024d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80024e0:	78fb      	ldrb	r3, [r7, #3]
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80024e8:	b2da      	uxtb	r2, r3
 80024ea:	4b2f      	ldr	r3, [pc, #188]	; (80025a8 <xPortStartScheduler+0xe8>)
 80024ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80024ee:	4b2f      	ldr	r3, [pc, #188]	; (80025ac <xPortStartScheduler+0xec>)
 80024f0:	2207      	movs	r2, #7
 80024f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80024f4:	e009      	b.n	800250a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80024f6:	4b2d      	ldr	r3, [pc, #180]	; (80025ac <xPortStartScheduler+0xec>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	3b01      	subs	r3, #1
 80024fc:	4a2b      	ldr	r2, [pc, #172]	; (80025ac <xPortStartScheduler+0xec>)
 80024fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002500:	78fb      	ldrb	r3, [r7, #3]
 8002502:	b2db      	uxtb	r3, r3
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	b2db      	uxtb	r3, r3
 8002508:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800250a:	78fb      	ldrb	r3, [r7, #3]
 800250c:	b2db      	uxtb	r3, r3
 800250e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002512:	2b80      	cmp	r3, #128	; 0x80
 8002514:	d0ef      	beq.n	80024f6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002516:	4b25      	ldr	r3, [pc, #148]	; (80025ac <xPortStartScheduler+0xec>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f1c3 0307 	rsb	r3, r3, #7
 800251e:	2b04      	cmp	r3, #4
 8002520:	d00c      	beq.n	800253c <xPortStartScheduler+0x7c>
	__asm volatile
 8002522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002526:	b672      	cpsid	i
 8002528:	f383 8811 	msr	BASEPRI, r3
 800252c:	f3bf 8f6f 	isb	sy
 8002530:	f3bf 8f4f 	dsb	sy
 8002534:	b662      	cpsie	i
 8002536:	60bb      	str	r3, [r7, #8]
}
 8002538:	bf00      	nop
 800253a:	e7fe      	b.n	800253a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800253c:	4b1b      	ldr	r3, [pc, #108]	; (80025ac <xPortStartScheduler+0xec>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	021b      	lsls	r3, r3, #8
 8002542:	4a1a      	ldr	r2, [pc, #104]	; (80025ac <xPortStartScheduler+0xec>)
 8002544:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002546:	4b19      	ldr	r3, [pc, #100]	; (80025ac <xPortStartScheduler+0xec>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800254e:	4a17      	ldr	r2, [pc, #92]	; (80025ac <xPortStartScheduler+0xec>)
 8002550:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	b2da      	uxtb	r2, r3
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800255a:	4b15      	ldr	r3, [pc, #84]	; (80025b0 <xPortStartScheduler+0xf0>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a14      	ldr	r2, [pc, #80]	; (80025b0 <xPortStartScheduler+0xf0>)
 8002560:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002564:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002566:	4b12      	ldr	r3, [pc, #72]	; (80025b0 <xPortStartScheduler+0xf0>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a11      	ldr	r2, [pc, #68]	; (80025b0 <xPortStartScheduler+0xf0>)
 800256c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002570:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002572:	f000 f8dd 	bl	8002730 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002576:	4b0f      	ldr	r3, [pc, #60]	; (80025b4 <xPortStartScheduler+0xf4>)
 8002578:	2200      	movs	r2, #0
 800257a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800257c:	f000 f8fc 	bl	8002778 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002580:	4b0d      	ldr	r3, [pc, #52]	; (80025b8 <xPortStartScheduler+0xf8>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a0c      	ldr	r2, [pc, #48]	; (80025b8 <xPortStartScheduler+0xf8>)
 8002586:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800258a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800258c:	f7ff ff84 	bl	8002498 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002590:	f000 ffc0 	bl	8003514 <vTaskSwitchContext>
	prvTaskExitError();
 8002594:	f7ff ff36 	bl	8002404 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	e000e400 	.word	0xe000e400
 80025a8:	20003ef4 	.word	0x20003ef4
 80025ac:	20003ef8 	.word	0x20003ef8
 80025b0:	e000ed20 	.word	0xe000ed20
 80025b4:	2000000c 	.word	0x2000000c
 80025b8:	e000ef34 	.word	0xe000ef34

080025bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
	__asm volatile
 80025c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025c6:	b672      	cpsid	i
 80025c8:	f383 8811 	msr	BASEPRI, r3
 80025cc:	f3bf 8f6f 	isb	sy
 80025d0:	f3bf 8f4f 	dsb	sy
 80025d4:	b662      	cpsie	i
 80025d6:	607b      	str	r3, [r7, #4]
}
 80025d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80025da:	4b10      	ldr	r3, [pc, #64]	; (800261c <vPortEnterCritical+0x60>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	3301      	adds	r3, #1
 80025e0:	4a0e      	ldr	r2, [pc, #56]	; (800261c <vPortEnterCritical+0x60>)
 80025e2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80025e4:	4b0d      	ldr	r3, [pc, #52]	; (800261c <vPortEnterCritical+0x60>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d111      	bne.n	8002610 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80025ec:	4b0c      	ldr	r3, [pc, #48]	; (8002620 <vPortEnterCritical+0x64>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d00c      	beq.n	8002610 <vPortEnterCritical+0x54>
	__asm volatile
 80025f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025fa:	b672      	cpsid	i
 80025fc:	f383 8811 	msr	BASEPRI, r3
 8002600:	f3bf 8f6f 	isb	sy
 8002604:	f3bf 8f4f 	dsb	sy
 8002608:	b662      	cpsie	i
 800260a:	603b      	str	r3, [r7, #0]
}
 800260c:	bf00      	nop
 800260e:	e7fe      	b.n	800260e <vPortEnterCritical+0x52>
	}
}
 8002610:	bf00      	nop
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr
 800261c:	2000000c 	.word	0x2000000c
 8002620:	e000ed04 	.word	0xe000ed04

08002624 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800262a:	4b13      	ldr	r3, [pc, #76]	; (8002678 <vPortExitCritical+0x54>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d10c      	bne.n	800264c <vPortExitCritical+0x28>
	__asm volatile
 8002632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002636:	b672      	cpsid	i
 8002638:	f383 8811 	msr	BASEPRI, r3
 800263c:	f3bf 8f6f 	isb	sy
 8002640:	f3bf 8f4f 	dsb	sy
 8002644:	b662      	cpsie	i
 8002646:	607b      	str	r3, [r7, #4]
}
 8002648:	bf00      	nop
 800264a:	e7fe      	b.n	800264a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800264c:	4b0a      	ldr	r3, [pc, #40]	; (8002678 <vPortExitCritical+0x54>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	3b01      	subs	r3, #1
 8002652:	4a09      	ldr	r2, [pc, #36]	; (8002678 <vPortExitCritical+0x54>)
 8002654:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002656:	4b08      	ldr	r3, [pc, #32]	; (8002678 <vPortExitCritical+0x54>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d105      	bne.n	800266a <vPortExitCritical+0x46>
 800265e:	2300      	movs	r3, #0
 8002660:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002668:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800266a:	bf00      	nop
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	2000000c 	.word	0x2000000c
 800267c:	00000000 	.word	0x00000000

08002680 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002680:	f3ef 8009 	mrs	r0, PSP
 8002684:	f3bf 8f6f 	isb	sy
 8002688:	4b15      	ldr	r3, [pc, #84]	; (80026e0 <pxCurrentTCBConst>)
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	f01e 0f10 	tst.w	lr, #16
 8002690:	bf08      	it	eq
 8002692:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002696:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800269a:	6010      	str	r0, [r2, #0]
 800269c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80026a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80026a4:	b672      	cpsid	i
 80026a6:	f380 8811 	msr	BASEPRI, r0
 80026aa:	f3bf 8f4f 	dsb	sy
 80026ae:	f3bf 8f6f 	isb	sy
 80026b2:	b662      	cpsie	i
 80026b4:	f000 ff2e 	bl	8003514 <vTaskSwitchContext>
 80026b8:	f04f 0000 	mov.w	r0, #0
 80026bc:	f380 8811 	msr	BASEPRI, r0
 80026c0:	bc09      	pop	{r0, r3}
 80026c2:	6819      	ldr	r1, [r3, #0]
 80026c4:	6808      	ldr	r0, [r1, #0]
 80026c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026ca:	f01e 0f10 	tst.w	lr, #16
 80026ce:	bf08      	it	eq
 80026d0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80026d4:	f380 8809 	msr	PSP, r0
 80026d8:	f3bf 8f6f 	isb	sy
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop

080026e0 <pxCurrentTCBConst>:
 80026e0:	20003efc 	.word	0x20003efc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80026e4:	bf00      	nop
 80026e6:	bf00      	nop

080026e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
	__asm volatile
 80026ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026f2:	b672      	cpsid	i
 80026f4:	f383 8811 	msr	BASEPRI, r3
 80026f8:	f3bf 8f6f 	isb	sy
 80026fc:	f3bf 8f4f 	dsb	sy
 8002700:	b662      	cpsie	i
 8002702:	607b      	str	r3, [r7, #4]
}
 8002704:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002706:	f000 fe4b 	bl	80033a0 <xTaskIncrementTick>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d003      	beq.n	8002718 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002710:	4b06      	ldr	r3, [pc, #24]	; (800272c <xPortSysTickHandler+0x44>)
 8002712:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002716:	601a      	str	r2, [r3, #0]
 8002718:	2300      	movs	r3, #0
 800271a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	f383 8811 	msr	BASEPRI, r3
}
 8002722:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8002724:	bf00      	nop
 8002726:	3708      	adds	r7, #8
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	e000ed04 	.word	0xe000ed04

08002730 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002734:	4b0b      	ldr	r3, [pc, #44]	; (8002764 <vPortSetupTimerInterrupt+0x34>)
 8002736:	2200      	movs	r2, #0
 8002738:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800273a:	4b0b      	ldr	r3, [pc, #44]	; (8002768 <vPortSetupTimerInterrupt+0x38>)
 800273c:	2200      	movs	r2, #0
 800273e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002740:	4b0a      	ldr	r3, [pc, #40]	; (800276c <vPortSetupTimerInterrupt+0x3c>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a0a      	ldr	r2, [pc, #40]	; (8002770 <vPortSetupTimerInterrupt+0x40>)
 8002746:	fba2 2303 	umull	r2, r3, r2, r3
 800274a:	099b      	lsrs	r3, r3, #6
 800274c:	4a09      	ldr	r2, [pc, #36]	; (8002774 <vPortSetupTimerInterrupt+0x44>)
 800274e:	3b01      	subs	r3, #1
 8002750:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002752:	4b04      	ldr	r3, [pc, #16]	; (8002764 <vPortSetupTimerInterrupt+0x34>)
 8002754:	2207      	movs	r2, #7
 8002756:	601a      	str	r2, [r3, #0]
}
 8002758:	bf00      	nop
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	e000e010 	.word	0xe000e010
 8002768:	e000e018 	.word	0xe000e018
 800276c:	20000000 	.word	0x20000000
 8002770:	10624dd3 	.word	0x10624dd3
 8002774:	e000e014 	.word	0xe000e014

08002778 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002778:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002788 <vPortEnableVFP+0x10>
 800277c:	6801      	ldr	r1, [r0, #0]
 800277e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002782:	6001      	str	r1, [r0, #0]
 8002784:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8002786:	bf00      	nop
 8002788:	e000ed88 	.word	0xe000ed88

0800278c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d10c      	bne.n	80027ba <xQueueGenericReset+0x2e>
	__asm volatile
 80027a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027a4:	b672      	cpsid	i
 80027a6:	f383 8811 	msr	BASEPRI, r3
 80027aa:	f3bf 8f6f 	isb	sy
 80027ae:	f3bf 8f4f 	dsb	sy
 80027b2:	b662      	cpsie	i
 80027b4:	60bb      	str	r3, [r7, #8]
}
 80027b6:	bf00      	nop
 80027b8:	e7fe      	b.n	80027b8 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80027ba:	f7ff feff 	bl	80025bc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027c6:	68f9      	ldr	r1, [r7, #12]
 80027c8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80027ca:	fb01 f303 	mul.w	r3, r1, r3
 80027ce:	441a      	add	r2, r3
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2200      	movs	r2, #0
 80027d8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ea:	3b01      	subs	r3, #1
 80027ec:	68f9      	ldr	r1, [r7, #12]
 80027ee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80027f0:	fb01 f303 	mul.w	r3, r1, r3
 80027f4:	441a      	add	r2, r3
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	22ff      	movs	r2, #255	; 0xff
 80027fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	22ff      	movs	r2, #255	; 0xff
 8002806:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d114      	bne.n	800283a <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	691b      	ldr	r3, [r3, #16]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d01a      	beq.n	800284e <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	3310      	adds	r3, #16
 800281c:	4618      	mov	r0, r3
 800281e:	f000 fefd 	bl	800361c <xTaskRemoveFromEventList>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d012      	beq.n	800284e <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002828:	4b0c      	ldr	r3, [pc, #48]	; (800285c <xQueueGenericReset+0xd0>)
 800282a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800282e:	601a      	str	r2, [r3, #0]
 8002830:	f3bf 8f4f 	dsb	sy
 8002834:	f3bf 8f6f 	isb	sy
 8002838:	e009      	b.n	800284e <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	3310      	adds	r3, #16
 800283e:	4618      	mov	r0, r3
 8002840:	f7ff fcf8 	bl	8002234 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	3324      	adds	r3, #36	; 0x24
 8002848:	4618      	mov	r0, r3
 800284a:	f7ff fcf3 	bl	8002234 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800284e:	f7ff fee9 	bl	8002624 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002852:	2301      	movs	r3, #1
}
 8002854:	4618      	mov	r0, r3
 8002856:	3710      	adds	r7, #16
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	e000ed04 	.word	0xe000ed04

08002860 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002860:	b580      	push	{r7, lr}
 8002862:	b08e      	sub	sp, #56	; 0x38
 8002864:	af02      	add	r7, sp, #8
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	60b9      	str	r1, [r7, #8]
 800286a:	607a      	str	r2, [r7, #4]
 800286c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d10c      	bne.n	800288e <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8002874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002878:	b672      	cpsid	i
 800287a:	f383 8811 	msr	BASEPRI, r3
 800287e:	f3bf 8f6f 	isb	sy
 8002882:	f3bf 8f4f 	dsb	sy
 8002886:	b662      	cpsie	i
 8002888:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800288a:	bf00      	nop
 800288c:	e7fe      	b.n	800288c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d10c      	bne.n	80028ae <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8002894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002898:	b672      	cpsid	i
 800289a:	f383 8811 	msr	BASEPRI, r3
 800289e:	f3bf 8f6f 	isb	sy
 80028a2:	f3bf 8f4f 	dsb	sy
 80028a6:	b662      	cpsie	i
 80028a8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80028aa:	bf00      	nop
 80028ac:	e7fe      	b.n	80028ac <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d002      	beq.n	80028ba <xQueueGenericCreateStatic+0x5a>
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <xQueueGenericCreateStatic+0x5e>
 80028ba:	2301      	movs	r3, #1
 80028bc:	e000      	b.n	80028c0 <xQueueGenericCreateStatic+0x60>
 80028be:	2300      	movs	r3, #0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d10c      	bne.n	80028de <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 80028c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028c8:	b672      	cpsid	i
 80028ca:	f383 8811 	msr	BASEPRI, r3
 80028ce:	f3bf 8f6f 	isb	sy
 80028d2:	f3bf 8f4f 	dsb	sy
 80028d6:	b662      	cpsie	i
 80028d8:	623b      	str	r3, [r7, #32]
}
 80028da:	bf00      	nop
 80028dc:	e7fe      	b.n	80028dc <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d102      	bne.n	80028ea <xQueueGenericCreateStatic+0x8a>
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d101      	bne.n	80028ee <xQueueGenericCreateStatic+0x8e>
 80028ea:	2301      	movs	r3, #1
 80028ec:	e000      	b.n	80028f0 <xQueueGenericCreateStatic+0x90>
 80028ee:	2300      	movs	r3, #0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d10c      	bne.n	800290e <xQueueGenericCreateStatic+0xae>
	__asm volatile
 80028f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028f8:	b672      	cpsid	i
 80028fa:	f383 8811 	msr	BASEPRI, r3
 80028fe:	f3bf 8f6f 	isb	sy
 8002902:	f3bf 8f4f 	dsb	sy
 8002906:	b662      	cpsie	i
 8002908:	61fb      	str	r3, [r7, #28]
}
 800290a:	bf00      	nop
 800290c:	e7fe      	b.n	800290c <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800290e:	2348      	movs	r3, #72	; 0x48
 8002910:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	2b48      	cmp	r3, #72	; 0x48
 8002916:	d00c      	beq.n	8002932 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8002918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800291c:	b672      	cpsid	i
 800291e:	f383 8811 	msr	BASEPRI, r3
 8002922:	f3bf 8f6f 	isb	sy
 8002926:	f3bf 8f4f 	dsb	sy
 800292a:	b662      	cpsie	i
 800292c:	61bb      	str	r3, [r7, #24]
}
 800292e:	bf00      	nop
 8002930:	e7fe      	b.n	8002930 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002932:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800293a:	2b00      	cmp	r3, #0
 800293c:	d00d      	beq.n	800295a <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800293e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002940:	2201      	movs	r2, #1
 8002942:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002946:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800294a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800294c:	9300      	str	r3, [sp, #0]
 800294e:	4613      	mov	r3, r2
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	68b9      	ldr	r1, [r7, #8]
 8002954:	68f8      	ldr	r0, [r7, #12]
 8002956:	f000 f847 	bl	80029e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800295a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800295c:	4618      	mov	r0, r3
 800295e:	3730      	adds	r7, #48	; 0x30
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}

08002964 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002964:	b580      	push	{r7, lr}
 8002966:	b08a      	sub	sp, #40	; 0x28
 8002968:	af02      	add	r7, sp, #8
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	4613      	mov	r3, r2
 8002970:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d10c      	bne.n	8002992 <xQueueGenericCreate+0x2e>
	__asm volatile
 8002978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800297c:	b672      	cpsid	i
 800297e:	f383 8811 	msr	BASEPRI, r3
 8002982:	f3bf 8f6f 	isb	sy
 8002986:	f3bf 8f4f 	dsb	sy
 800298a:	b662      	cpsie	i
 800298c:	613b      	str	r3, [r7, #16]
}
 800298e:	bf00      	nop
 8002990:	e7fe      	b.n	8002990 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d102      	bne.n	800299e <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002998:	2300      	movs	r3, #0
 800299a:	61fb      	str	r3, [r7, #28]
 800299c:	e004      	b.n	80029a8 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	68ba      	ldr	r2, [r7, #8]
 80029a2:	fb02 f303 	mul.w	r3, r2, r3
 80029a6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	3348      	adds	r3, #72	; 0x48
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7ff fa5d 	bl	8001e6c <pvPortMalloc>
 80029b2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d011      	beq.n	80029de <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	3348      	adds	r3, #72	; 0x48
 80029c2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80029cc:	79fa      	ldrb	r2, [r7, #7]
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	9300      	str	r3, [sp, #0]
 80029d2:	4613      	mov	r3, r2
 80029d4:	697a      	ldr	r2, [r7, #20]
 80029d6:	68b9      	ldr	r1, [r7, #8]
 80029d8:	68f8      	ldr	r0, [r7, #12]
 80029da:	f000 f805 	bl	80029e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80029de:	69bb      	ldr	r3, [r7, #24]
	}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3720      	adds	r7, #32
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
 80029f4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d103      	bne.n	8002a04 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	601a      	str	r2, [r3, #0]
 8002a02:	e002      	b.n	8002a0a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	68fa      	ldr	r2, [r7, #12]
 8002a0e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	68ba      	ldr	r2, [r7, #8]
 8002a14:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002a16:	2101      	movs	r1, #1
 8002a18:	69b8      	ldr	r0, [r7, #24]
 8002a1a:	f7ff feb7 	bl	800278c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002a1e:	bf00      	nop
 8002a20:	3710      	adds	r7, #16
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
	...

08002a28 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b08e      	sub	sp, #56	; 0x38
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
 8002a34:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002a36:	2300      	movs	r3, #0
 8002a38:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d10c      	bne.n	8002a5e <xQueueGenericSend+0x36>
	__asm volatile
 8002a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a48:	b672      	cpsid	i
 8002a4a:	f383 8811 	msr	BASEPRI, r3
 8002a4e:	f3bf 8f6f 	isb	sy
 8002a52:	f3bf 8f4f 	dsb	sy
 8002a56:	b662      	cpsie	i
 8002a58:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002a5a:	bf00      	nop
 8002a5c:	e7fe      	b.n	8002a5c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d103      	bne.n	8002a6c <xQueueGenericSend+0x44>
 8002a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d101      	bne.n	8002a70 <xQueueGenericSend+0x48>
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e000      	b.n	8002a72 <xQueueGenericSend+0x4a>
 8002a70:	2300      	movs	r3, #0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d10c      	bne.n	8002a90 <xQueueGenericSend+0x68>
	__asm volatile
 8002a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a7a:	b672      	cpsid	i
 8002a7c:	f383 8811 	msr	BASEPRI, r3
 8002a80:	f3bf 8f6f 	isb	sy
 8002a84:	f3bf 8f4f 	dsb	sy
 8002a88:	b662      	cpsie	i
 8002a8a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002a8c:	bf00      	nop
 8002a8e:	e7fe      	b.n	8002a8e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d103      	bne.n	8002a9e <xQueueGenericSend+0x76>
 8002a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d101      	bne.n	8002aa2 <xQueueGenericSend+0x7a>
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e000      	b.n	8002aa4 <xQueueGenericSend+0x7c>
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d10c      	bne.n	8002ac2 <xQueueGenericSend+0x9a>
	__asm volatile
 8002aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aac:	b672      	cpsid	i
 8002aae:	f383 8811 	msr	BASEPRI, r3
 8002ab2:	f3bf 8f6f 	isb	sy
 8002ab6:	f3bf 8f4f 	dsb	sy
 8002aba:	b662      	cpsie	i
 8002abc:	623b      	str	r3, [r7, #32]
}
 8002abe:	bf00      	nop
 8002ac0:	e7fe      	b.n	8002ac0 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ac2:	f000 ff6f 	bl	80039a4 <xTaskGetSchedulerState>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d102      	bne.n	8002ad2 <xQueueGenericSend+0xaa>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d101      	bne.n	8002ad6 <xQueueGenericSend+0xae>
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e000      	b.n	8002ad8 <xQueueGenericSend+0xb0>
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d10c      	bne.n	8002af6 <xQueueGenericSend+0xce>
	__asm volatile
 8002adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ae0:	b672      	cpsid	i
 8002ae2:	f383 8811 	msr	BASEPRI, r3
 8002ae6:	f3bf 8f6f 	isb	sy
 8002aea:	f3bf 8f4f 	dsb	sy
 8002aee:	b662      	cpsie	i
 8002af0:	61fb      	str	r3, [r7, #28]
}
 8002af2:	bf00      	nop
 8002af4:	e7fe      	b.n	8002af4 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002af6:	f7ff fd61 	bl	80025bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002afc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d302      	bcc.n	8002b0c <xQueueGenericSend+0xe4>
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d129      	bne.n	8002b60 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002b0c:	683a      	ldr	r2, [r7, #0]
 8002b0e:	68b9      	ldr	r1, [r7, #8]
 8002b10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b12:	f000 f88f 	bl	8002c34 <prvCopyDataToQueue>
 8002b16:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d010      	beq.n	8002b42 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b22:	3324      	adds	r3, #36	; 0x24
 8002b24:	4618      	mov	r0, r3
 8002b26:	f000 fd79 	bl	800361c <xTaskRemoveFromEventList>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d013      	beq.n	8002b58 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002b30:	4b3f      	ldr	r3, [pc, #252]	; (8002c30 <xQueueGenericSend+0x208>)
 8002b32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b36:	601a      	str	r2, [r3, #0]
 8002b38:	f3bf 8f4f 	dsb	sy
 8002b3c:	f3bf 8f6f 	isb	sy
 8002b40:	e00a      	b.n	8002b58 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d007      	beq.n	8002b58 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002b48:	4b39      	ldr	r3, [pc, #228]	; (8002c30 <xQueueGenericSend+0x208>)
 8002b4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b4e:	601a      	str	r2, [r3, #0]
 8002b50:	f3bf 8f4f 	dsb	sy
 8002b54:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002b58:	f7ff fd64 	bl	8002624 <vPortExitCritical>
				return pdPASS;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e063      	b.n	8002c28 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d103      	bne.n	8002b6e <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002b66:	f7ff fd5d 	bl	8002624 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	e05c      	b.n	8002c28 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002b6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d106      	bne.n	8002b82 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002b74:	f107 0314 	add.w	r3, r7, #20
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f000 fdb3 	bl	80036e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002b82:	f7ff fd4f 	bl	8002624 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002b86:	f000 fb5f 	bl	8003248 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002b8a:	f7ff fd17 	bl	80025bc <vPortEnterCritical>
 8002b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b94:	b25b      	sxtb	r3, r3
 8002b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b9a:	d103      	bne.n	8002ba4 <xQueueGenericSend+0x17c>
 8002b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002baa:	b25b      	sxtb	r3, r3
 8002bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb0:	d103      	bne.n	8002bba <xQueueGenericSend+0x192>
 8002bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002bba:	f7ff fd33 	bl	8002624 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002bbe:	1d3a      	adds	r2, r7, #4
 8002bc0:	f107 0314 	add.w	r3, r7, #20
 8002bc4:	4611      	mov	r1, r2
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f000 fda2 	bl	8003710 <xTaskCheckForTimeOut>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d124      	bne.n	8002c1c <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002bd2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002bd4:	f000 f8ea 	bl	8002dac <prvIsQueueFull>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d018      	beq.n	8002c10 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be0:	3310      	adds	r3, #16
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	4611      	mov	r1, r2
 8002be6:	4618      	mov	r0, r3
 8002be8:	f000 fcf2 	bl	80035d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002bec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002bee:	f000 f88b 	bl	8002d08 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002bf2:	f000 fb37 	bl	8003264 <xTaskResumeAll>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	f47f af7c 	bne.w	8002af6 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8002bfe:	4b0c      	ldr	r3, [pc, #48]	; (8002c30 <xQueueGenericSend+0x208>)
 8002c00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c04:	601a      	str	r2, [r3, #0]
 8002c06:	f3bf 8f4f 	dsb	sy
 8002c0a:	f3bf 8f6f 	isb	sy
 8002c0e:	e772      	b.n	8002af6 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002c10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c12:	f000 f879 	bl	8002d08 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002c16:	f000 fb25 	bl	8003264 <xTaskResumeAll>
 8002c1a:	e76c      	b.n	8002af6 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002c1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c1e:	f000 f873 	bl	8002d08 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002c22:	f000 fb1f 	bl	8003264 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002c26:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3738      	adds	r7, #56	; 0x38
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	e000ed04 	.word	0xe000ed04

08002c34 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b086      	sub	sp, #24
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002c40:	2300      	movs	r3, #0
 8002c42:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c48:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d10d      	bne.n	8002c6e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d14d      	bne.n	8002cf6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f000 febe 	bl	80039e0 <xTaskPriorityDisinherit>
 8002c64:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	609a      	str	r2, [r3, #8]
 8002c6c:	e043      	b.n	8002cf6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d119      	bne.n	8002ca8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6858      	ldr	r0, [r3, #4]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	68b9      	ldr	r1, [r7, #8]
 8002c80:	f000 ffca 	bl	8003c18 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	685a      	ldr	r2, [r3, #4]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8c:	441a      	add	r2, r3
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	685a      	ldr	r2, [r3, #4]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d32b      	bcc.n	8002cf6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	605a      	str	r2, [r3, #4]
 8002ca6:	e026      	b.n	8002cf6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	68d8      	ldr	r0, [r3, #12]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	68b9      	ldr	r1, [r7, #8]
 8002cb4:	f000 ffb0 	bl	8003c18 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	68da      	ldr	r2, [r3, #12]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc0:	425b      	negs	r3, r3
 8002cc2:	441a      	add	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	68da      	ldr	r2, [r3, #12]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d207      	bcs.n	8002ce4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	689a      	ldr	r2, [r3, #8]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cdc:	425b      	negs	r3, r3
 8002cde:	441a      	add	r2, r3
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d105      	bne.n	8002cf6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d002      	beq.n	8002cf6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	1c5a      	adds	r2, r3, #1
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002cfe:	697b      	ldr	r3, [r7, #20]
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3718      	adds	r7, #24
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002d10:	f7ff fc54 	bl	80025bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d1a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d1c:	e011      	b.n	8002d42 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d012      	beq.n	8002d4c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	3324      	adds	r3, #36	; 0x24
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f000 fc76 	bl	800361c <xTaskRemoveFromEventList>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002d36:	f000 fd51 	bl	80037dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002d3a:	7bfb      	ldrb	r3, [r7, #15]
 8002d3c:	3b01      	subs	r3, #1
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	dce9      	bgt.n	8002d1e <prvUnlockQueue+0x16>
 8002d4a:	e000      	b.n	8002d4e <prvUnlockQueue+0x46>
					break;
 8002d4c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	22ff      	movs	r2, #255	; 0xff
 8002d52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002d56:	f7ff fc65 	bl	8002624 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002d5a:	f7ff fc2f 	bl	80025bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d64:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002d66:	e011      	b.n	8002d8c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	691b      	ldr	r3, [r3, #16]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d012      	beq.n	8002d96 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	3310      	adds	r3, #16
 8002d74:	4618      	mov	r0, r3
 8002d76:	f000 fc51 	bl	800361c <xTaskRemoveFromEventList>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d001      	beq.n	8002d84 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002d80:	f000 fd2c 	bl	80037dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002d84:	7bbb      	ldrb	r3, [r7, #14]
 8002d86:	3b01      	subs	r3, #1
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002d8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	dce9      	bgt.n	8002d68 <prvUnlockQueue+0x60>
 8002d94:	e000      	b.n	8002d98 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002d96:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	22ff      	movs	r2, #255	; 0xff
 8002d9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002da0:	f7ff fc40 	bl	8002624 <vPortExitCritical>
}
 8002da4:	bf00      	nop
 8002da6:	3710      	adds	r7, #16
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002db4:	f7ff fc02 	bl	80025bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d102      	bne.n	8002dca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	60fb      	str	r3, [r7, #12]
 8002dc8:	e001      	b.n	8002dce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002dce:	f7ff fc29 	bl	8002624 <vPortExitCritical>

	return xReturn;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3710      	adds	r7, #16
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b08e      	sub	sp, #56	; 0x38
 8002de0:	af04      	add	r7, sp, #16
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	607a      	str	r2, [r7, #4]
 8002de8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d10c      	bne.n	8002e0a <xTaskCreateStatic+0x2e>
	__asm volatile
 8002df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002df4:	b672      	cpsid	i
 8002df6:	f383 8811 	msr	BASEPRI, r3
 8002dfa:	f3bf 8f6f 	isb	sy
 8002dfe:	f3bf 8f4f 	dsb	sy
 8002e02:	b662      	cpsie	i
 8002e04:	623b      	str	r3, [r7, #32]
}
 8002e06:	bf00      	nop
 8002e08:	e7fe      	b.n	8002e08 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8002e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d10c      	bne.n	8002e2a <xTaskCreateStatic+0x4e>
	__asm volatile
 8002e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e14:	b672      	cpsid	i
 8002e16:	f383 8811 	msr	BASEPRI, r3
 8002e1a:	f3bf 8f6f 	isb	sy
 8002e1e:	f3bf 8f4f 	dsb	sy
 8002e22:	b662      	cpsie	i
 8002e24:	61fb      	str	r3, [r7, #28]
}
 8002e26:	bf00      	nop
 8002e28:	e7fe      	b.n	8002e28 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002e2a:	2354      	movs	r3, #84	; 0x54
 8002e2c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	2b54      	cmp	r3, #84	; 0x54
 8002e32:	d00c      	beq.n	8002e4e <xTaskCreateStatic+0x72>
	__asm volatile
 8002e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e38:	b672      	cpsid	i
 8002e3a:	f383 8811 	msr	BASEPRI, r3
 8002e3e:	f3bf 8f6f 	isb	sy
 8002e42:	f3bf 8f4f 	dsb	sy
 8002e46:	b662      	cpsie	i
 8002e48:	61bb      	str	r3, [r7, #24]
}
 8002e4a:	bf00      	nop
 8002e4c:	e7fe      	b.n	8002e4c <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002e4e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d01e      	beq.n	8002e94 <xTaskCreateStatic+0xb8>
 8002e56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d01b      	beq.n	8002e94 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e5e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e64:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e68:	2202      	movs	r2, #2
 8002e6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002e6e:	2300      	movs	r3, #0
 8002e70:	9303      	str	r3, [sp, #12]
 8002e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e74:	9302      	str	r3, [sp, #8]
 8002e76:	f107 0314 	add.w	r3, r7, #20
 8002e7a:	9301      	str	r3, [sp, #4]
 8002e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e7e:	9300      	str	r3, [sp, #0]
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	68b9      	ldr	r1, [r7, #8]
 8002e86:	68f8      	ldr	r0, [r7, #12]
 8002e88:	f000 f850 	bl	8002f2c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002e8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002e8e:	f000 f8d7 	bl	8003040 <prvAddNewTaskToReadyList>
 8002e92:	e001      	b.n	8002e98 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8002e94:	2300      	movs	r3, #0
 8002e96:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002e98:	697b      	ldr	r3, [r7, #20]
	}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3728      	adds	r7, #40	; 0x28
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002ea2:	b580      	push	{r7, lr}
 8002ea4:	b08c      	sub	sp, #48	; 0x30
 8002ea6:	af04      	add	r7, sp, #16
 8002ea8:	60f8      	str	r0, [r7, #12]
 8002eaa:	60b9      	str	r1, [r7, #8]
 8002eac:	603b      	str	r3, [r7, #0]
 8002eae:	4613      	mov	r3, r2
 8002eb0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002eb2:	88fb      	ldrh	r3, [r7, #6]
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7fe ffd8 	bl	8001e6c <pvPortMalloc>
 8002ebc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d00e      	beq.n	8002ee2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002ec4:	2054      	movs	r0, #84	; 0x54
 8002ec6:	f7fe ffd1 	bl	8001e6c <pvPortMalloc>
 8002eca:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d003      	beq.n	8002eda <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	697a      	ldr	r2, [r7, #20]
 8002ed6:	631a      	str	r2, [r3, #48]	; 0x30
 8002ed8:	e005      	b.n	8002ee6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002eda:	6978      	ldr	r0, [r7, #20]
 8002edc:	f7ff f890 	bl	8002000 <vPortFree>
 8002ee0:	e001      	b.n	8002ee6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d017      	beq.n	8002f1c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002ef4:	88fa      	ldrh	r2, [r7, #6]
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	9303      	str	r3, [sp, #12]
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	9302      	str	r3, [sp, #8]
 8002efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f00:	9301      	str	r3, [sp, #4]
 8002f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f04:	9300      	str	r3, [sp, #0]
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	68b9      	ldr	r1, [r7, #8]
 8002f0a:	68f8      	ldr	r0, [r7, #12]
 8002f0c:	f000 f80e 	bl	8002f2c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002f10:	69f8      	ldr	r0, [r7, #28]
 8002f12:	f000 f895 	bl	8003040 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002f16:	2301      	movs	r3, #1
 8002f18:	61bb      	str	r3, [r7, #24]
 8002f1a:	e002      	b.n	8002f22 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002f1c:	f04f 33ff 	mov.w	r3, #4294967295
 8002f20:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002f22:	69bb      	ldr	r3, [r7, #24]
	}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3720      	adds	r7, #32
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b088      	sub	sp, #32
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	607a      	str	r2, [r7, #4]
 8002f38:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f3e:	6879      	ldr	r1, [r7, #4]
 8002f40:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8002f44:	440b      	add	r3, r1
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	4413      	add	r3, r2
 8002f4a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	f023 0307 	bic.w	r3, r3, #7
 8002f52:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	f003 0307 	and.w	r3, r3, #7
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d00c      	beq.n	8002f78 <prvInitialiseNewTask+0x4c>
	__asm volatile
 8002f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f62:	b672      	cpsid	i
 8002f64:	f383 8811 	msr	BASEPRI, r3
 8002f68:	f3bf 8f6f 	isb	sy
 8002f6c:	f3bf 8f4f 	dsb	sy
 8002f70:	b662      	cpsie	i
 8002f72:	617b      	str	r3, [r7, #20]
}
 8002f74:	bf00      	nop
 8002f76:	e7fe      	b.n	8002f76 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d01f      	beq.n	8002fbe <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f7e:	2300      	movs	r3, #0
 8002f80:	61fb      	str	r3, [r7, #28]
 8002f82:	e012      	b.n	8002faa <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002f84:	68ba      	ldr	r2, [r7, #8]
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	4413      	add	r3, r2
 8002f8a:	7819      	ldrb	r1, [r3, #0]
 8002f8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	4413      	add	r3, r2
 8002f92:	3334      	adds	r3, #52	; 0x34
 8002f94:	460a      	mov	r2, r1
 8002f96:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002f98:	68ba      	ldr	r2, [r7, #8]
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	4413      	add	r3, r2
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d006      	beq.n	8002fb2 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	61fb      	str	r3, [r7, #28]
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	2b0f      	cmp	r3, #15
 8002fae:	d9e9      	bls.n	8002f84 <prvInitialiseNewTask+0x58>
 8002fb0:	e000      	b.n	8002fb4 <prvInitialiseNewTask+0x88>
			{
				break;
 8002fb2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002fbc:	e003      	b.n	8002fc6 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fc8:	2b06      	cmp	r3, #6
 8002fca:	d901      	bls.n	8002fd0 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002fcc:	2306      	movs	r3, #6
 8002fce:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fd4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fda:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fde:	2200      	movs	r2, #0
 8002fe0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe4:	3304      	adds	r3, #4
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f7ff f944 	bl	8002274 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fee:	3318      	adds	r3, #24
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7ff f93f 	bl	8002274 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ffa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ffe:	f1c3 0207 	rsb	r2, r3, #7
 8003002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003004:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003008:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800300a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800300c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800300e:	2200      	movs	r2, #0
 8003010:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003014:	2200      	movs	r2, #0
 8003016:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800301a:	683a      	ldr	r2, [r7, #0]
 800301c:	68f9      	ldr	r1, [r7, #12]
 800301e:	69b8      	ldr	r0, [r7, #24]
 8003020:	f7ff f9bc 	bl	800239c <pxPortInitialiseStack>
 8003024:	4602      	mov	r2, r0
 8003026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003028:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800302a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800302c:	2b00      	cmp	r3, #0
 800302e:	d002      	beq.n	8003036 <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003032:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003034:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003036:	bf00      	nop
 8003038:	3720      	adds	r7, #32
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
	...

08003040 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003048:	f7ff fab8 	bl	80025bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800304c:	4b2a      	ldr	r3, [pc, #168]	; (80030f8 <prvAddNewTaskToReadyList+0xb8>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	3301      	adds	r3, #1
 8003052:	4a29      	ldr	r2, [pc, #164]	; (80030f8 <prvAddNewTaskToReadyList+0xb8>)
 8003054:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003056:	4b29      	ldr	r3, [pc, #164]	; (80030fc <prvAddNewTaskToReadyList+0xbc>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d109      	bne.n	8003072 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800305e:	4a27      	ldr	r2, [pc, #156]	; (80030fc <prvAddNewTaskToReadyList+0xbc>)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003064:	4b24      	ldr	r3, [pc, #144]	; (80030f8 <prvAddNewTaskToReadyList+0xb8>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2b01      	cmp	r3, #1
 800306a:	d110      	bne.n	800308e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800306c:	f000 fbda 	bl	8003824 <prvInitialiseTaskLists>
 8003070:	e00d      	b.n	800308e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003072:	4b23      	ldr	r3, [pc, #140]	; (8003100 <prvAddNewTaskToReadyList+0xc0>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d109      	bne.n	800308e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800307a:	4b20      	ldr	r3, [pc, #128]	; (80030fc <prvAddNewTaskToReadyList+0xbc>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003084:	429a      	cmp	r2, r3
 8003086:	d802      	bhi.n	800308e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003088:	4a1c      	ldr	r2, [pc, #112]	; (80030fc <prvAddNewTaskToReadyList+0xbc>)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800308e:	4b1d      	ldr	r3, [pc, #116]	; (8003104 <prvAddNewTaskToReadyList+0xc4>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	3301      	adds	r3, #1
 8003094:	4a1b      	ldr	r2, [pc, #108]	; (8003104 <prvAddNewTaskToReadyList+0xc4>)
 8003096:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800309c:	2201      	movs	r2, #1
 800309e:	409a      	lsls	r2, r3
 80030a0:	4b19      	ldr	r3, [pc, #100]	; (8003108 <prvAddNewTaskToReadyList+0xc8>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	4a18      	ldr	r2, [pc, #96]	; (8003108 <prvAddNewTaskToReadyList+0xc8>)
 80030a8:	6013      	str	r3, [r2, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030ae:	4613      	mov	r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	4413      	add	r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	4a15      	ldr	r2, [pc, #84]	; (800310c <prvAddNewTaskToReadyList+0xcc>)
 80030b8:	441a      	add	r2, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	3304      	adds	r3, #4
 80030be:	4619      	mov	r1, r3
 80030c0:	4610      	mov	r0, r2
 80030c2:	f7ff f8e4 	bl	800228e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80030c6:	f7ff faad 	bl	8002624 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80030ca:	4b0d      	ldr	r3, [pc, #52]	; (8003100 <prvAddNewTaskToReadyList+0xc0>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d00e      	beq.n	80030f0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80030d2:	4b0a      	ldr	r3, [pc, #40]	; (80030fc <prvAddNewTaskToReadyList+0xbc>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030dc:	429a      	cmp	r2, r3
 80030de:	d207      	bcs.n	80030f0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80030e0:	4b0b      	ldr	r3, [pc, #44]	; (8003110 <prvAddNewTaskToReadyList+0xd0>)
 80030e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030e6:	601a      	str	r2, [r3, #0]
 80030e8:	f3bf 8f4f 	dsb	sy
 80030ec:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80030f0:	bf00      	nop
 80030f2:	3708      	adds	r7, #8
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	20003ffc 	.word	0x20003ffc
 80030fc:	20003efc 	.word	0x20003efc
 8003100:	20004008 	.word	0x20004008
 8003104:	20004018 	.word	0x20004018
 8003108:	20004004 	.word	0x20004004
 800310c:	20003f00 	.word	0x20003f00
 8003110:	e000ed04 	.word	0xe000ed04

08003114 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800311c:	2300      	movs	r3, #0
 800311e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d019      	beq.n	800315a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003126:	4b14      	ldr	r3, [pc, #80]	; (8003178 <vTaskDelay+0x64>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00c      	beq.n	8003148 <vTaskDelay+0x34>
	__asm volatile
 800312e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003132:	b672      	cpsid	i
 8003134:	f383 8811 	msr	BASEPRI, r3
 8003138:	f3bf 8f6f 	isb	sy
 800313c:	f3bf 8f4f 	dsb	sy
 8003140:	b662      	cpsie	i
 8003142:	60bb      	str	r3, [r7, #8]
}
 8003144:	bf00      	nop
 8003146:	e7fe      	b.n	8003146 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8003148:	f000 f87e 	bl	8003248 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800314c:	2100      	movs	r1, #0
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 fcd0 	bl	8003af4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003154:	f000 f886 	bl	8003264 <xTaskResumeAll>
 8003158:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d107      	bne.n	8003170 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8003160:	4b06      	ldr	r3, [pc, #24]	; (800317c <vTaskDelay+0x68>)
 8003162:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003166:	601a      	str	r2, [r3, #0]
 8003168:	f3bf 8f4f 	dsb	sy
 800316c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003170:	bf00      	nop
 8003172:	3710      	adds	r7, #16
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	20004024 	.word	0x20004024
 800317c:	e000ed04 	.word	0xe000ed04

08003180 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b08a      	sub	sp, #40	; 0x28
 8003184:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003186:	2300      	movs	r3, #0
 8003188:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800318a:	2300      	movs	r3, #0
 800318c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800318e:	463a      	mov	r2, r7
 8003190:	1d39      	adds	r1, r7, #4
 8003192:	f107 0308 	add.w	r3, r7, #8
 8003196:	4618      	mov	r0, r3
 8003198:	f7fd f9b8 	bl	800050c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800319c:	6839      	ldr	r1, [r7, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	68ba      	ldr	r2, [r7, #8]
 80031a2:	9202      	str	r2, [sp, #8]
 80031a4:	9301      	str	r3, [sp, #4]
 80031a6:	2300      	movs	r3, #0
 80031a8:	9300      	str	r3, [sp, #0]
 80031aa:	2300      	movs	r3, #0
 80031ac:	460a      	mov	r2, r1
 80031ae:	4920      	ldr	r1, [pc, #128]	; (8003230 <vTaskStartScheduler+0xb0>)
 80031b0:	4820      	ldr	r0, [pc, #128]	; (8003234 <vTaskStartScheduler+0xb4>)
 80031b2:	f7ff fe13 	bl	8002ddc <xTaskCreateStatic>
 80031b6:	4603      	mov	r3, r0
 80031b8:	4a1f      	ldr	r2, [pc, #124]	; (8003238 <vTaskStartScheduler+0xb8>)
 80031ba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80031bc:	4b1e      	ldr	r3, [pc, #120]	; (8003238 <vTaskStartScheduler+0xb8>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d002      	beq.n	80031ca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80031c4:	2301      	movs	r3, #1
 80031c6:	617b      	str	r3, [r7, #20]
 80031c8:	e001      	b.n	80031ce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80031ca:	2300      	movs	r3, #0
 80031cc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d118      	bne.n	8003206 <vTaskStartScheduler+0x86>
	__asm volatile
 80031d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d8:	b672      	cpsid	i
 80031da:	f383 8811 	msr	BASEPRI, r3
 80031de:	f3bf 8f6f 	isb	sy
 80031e2:	f3bf 8f4f 	dsb	sy
 80031e6:	b662      	cpsie	i
 80031e8:	613b      	str	r3, [r7, #16]
}
 80031ea:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80031ec:	4b13      	ldr	r3, [pc, #76]	; (800323c <vTaskStartScheduler+0xbc>)
 80031ee:	f04f 32ff 	mov.w	r2, #4294967295
 80031f2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80031f4:	4b12      	ldr	r3, [pc, #72]	; (8003240 <vTaskStartScheduler+0xc0>)
 80031f6:	2201      	movs	r2, #1
 80031f8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80031fa:	4b12      	ldr	r3, [pc, #72]	; (8003244 <vTaskStartScheduler+0xc4>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003200:	f7ff f95e 	bl	80024c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003204:	e010      	b.n	8003228 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800320c:	d10c      	bne.n	8003228 <vTaskStartScheduler+0xa8>
	__asm volatile
 800320e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003212:	b672      	cpsid	i
 8003214:	f383 8811 	msr	BASEPRI, r3
 8003218:	f3bf 8f6f 	isb	sy
 800321c:	f3bf 8f4f 	dsb	sy
 8003220:	b662      	cpsie	i
 8003222:	60fb      	str	r3, [r7, #12]
}
 8003224:	bf00      	nop
 8003226:	e7fe      	b.n	8003226 <vTaskStartScheduler+0xa6>
}
 8003228:	bf00      	nop
 800322a:	3718      	adds	r7, #24
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}
 8003230:	08003cc4 	.word	0x08003cc4
 8003234:	080037f5 	.word	0x080037f5
 8003238:	20004020 	.word	0x20004020
 800323c:	2000401c 	.word	0x2000401c
 8003240:	20004008 	.word	0x20004008
 8003244:	20004000 	.word	0x20004000

08003248 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003248:	b480      	push	{r7}
 800324a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800324c:	4b04      	ldr	r3, [pc, #16]	; (8003260 <vTaskSuspendAll+0x18>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	3301      	adds	r3, #1
 8003252:	4a03      	ldr	r2, [pc, #12]	; (8003260 <vTaskSuspendAll+0x18>)
 8003254:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8003256:	bf00      	nop
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr
 8003260:	20004024 	.word	0x20004024

08003264 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800326a:	2300      	movs	r3, #0
 800326c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800326e:	2300      	movs	r3, #0
 8003270:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003272:	4b42      	ldr	r3, [pc, #264]	; (800337c <xTaskResumeAll+0x118>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d10c      	bne.n	8003294 <xTaskResumeAll+0x30>
	__asm volatile
 800327a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800327e:	b672      	cpsid	i
 8003280:	f383 8811 	msr	BASEPRI, r3
 8003284:	f3bf 8f6f 	isb	sy
 8003288:	f3bf 8f4f 	dsb	sy
 800328c:	b662      	cpsie	i
 800328e:	603b      	str	r3, [r7, #0]
}
 8003290:	bf00      	nop
 8003292:	e7fe      	b.n	8003292 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003294:	f7ff f992 	bl	80025bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003298:	4b38      	ldr	r3, [pc, #224]	; (800337c <xTaskResumeAll+0x118>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	3b01      	subs	r3, #1
 800329e:	4a37      	ldr	r2, [pc, #220]	; (800337c <xTaskResumeAll+0x118>)
 80032a0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032a2:	4b36      	ldr	r3, [pc, #216]	; (800337c <xTaskResumeAll+0x118>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d161      	bne.n	800336e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80032aa:	4b35      	ldr	r3, [pc, #212]	; (8003380 <xTaskResumeAll+0x11c>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d05d      	beq.n	800336e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80032b2:	e02e      	b.n	8003312 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032b4:	4b33      	ldr	r3, [pc, #204]	; (8003384 <xTaskResumeAll+0x120>)
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	3318      	adds	r3, #24
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7ff f841 	bl	8002348 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	3304      	adds	r3, #4
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7ff f83c 	bl	8002348 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d4:	2201      	movs	r2, #1
 80032d6:	409a      	lsls	r2, r3
 80032d8:	4b2b      	ldr	r3, [pc, #172]	; (8003388 <xTaskResumeAll+0x124>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4313      	orrs	r3, r2
 80032de:	4a2a      	ldr	r2, [pc, #168]	; (8003388 <xTaskResumeAll+0x124>)
 80032e0:	6013      	str	r3, [r2, #0]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032e6:	4613      	mov	r3, r2
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	4413      	add	r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	4a27      	ldr	r2, [pc, #156]	; (800338c <xTaskResumeAll+0x128>)
 80032f0:	441a      	add	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	3304      	adds	r3, #4
 80032f6:	4619      	mov	r1, r3
 80032f8:	4610      	mov	r0, r2
 80032fa:	f7fe ffc8 	bl	800228e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003302:	4b23      	ldr	r3, [pc, #140]	; (8003390 <xTaskResumeAll+0x12c>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003308:	429a      	cmp	r2, r3
 800330a:	d302      	bcc.n	8003312 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800330c:	4b21      	ldr	r3, [pc, #132]	; (8003394 <xTaskResumeAll+0x130>)
 800330e:	2201      	movs	r2, #1
 8003310:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003312:	4b1c      	ldr	r3, [pc, #112]	; (8003384 <xTaskResumeAll+0x120>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1cc      	bne.n	80032b4 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d001      	beq.n	8003324 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003320:	f000 fb20 	bl	8003964 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003324:	4b1c      	ldr	r3, [pc, #112]	; (8003398 <xTaskResumeAll+0x134>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d010      	beq.n	8003352 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003330:	f000 f836 	bl	80033a0 <xTaskIncrementTick>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d002      	beq.n	8003340 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800333a:	4b16      	ldr	r3, [pc, #88]	; (8003394 <xTaskResumeAll+0x130>)
 800333c:	2201      	movs	r2, #1
 800333e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	3b01      	subs	r3, #1
 8003344:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d1f1      	bne.n	8003330 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800334c:	4b12      	ldr	r3, [pc, #72]	; (8003398 <xTaskResumeAll+0x134>)
 800334e:	2200      	movs	r2, #0
 8003350:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003352:	4b10      	ldr	r3, [pc, #64]	; (8003394 <xTaskResumeAll+0x130>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d009      	beq.n	800336e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800335a:	2301      	movs	r3, #1
 800335c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800335e:	4b0f      	ldr	r3, [pc, #60]	; (800339c <xTaskResumeAll+0x138>)
 8003360:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003364:	601a      	str	r2, [r3, #0]
 8003366:	f3bf 8f4f 	dsb	sy
 800336a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800336e:	f7ff f959 	bl	8002624 <vPortExitCritical>

	return xAlreadyYielded;
 8003372:	68bb      	ldr	r3, [r7, #8]
}
 8003374:	4618      	mov	r0, r3
 8003376:	3710      	adds	r7, #16
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	20004024 	.word	0x20004024
 8003380:	20003ffc 	.word	0x20003ffc
 8003384:	20003fbc 	.word	0x20003fbc
 8003388:	20004004 	.word	0x20004004
 800338c:	20003f00 	.word	0x20003f00
 8003390:	20003efc 	.word	0x20003efc
 8003394:	20004010 	.word	0x20004010
 8003398:	2000400c 	.word	0x2000400c
 800339c:	e000ed04 	.word	0xe000ed04

080033a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b086      	sub	sp, #24
 80033a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80033a6:	2300      	movs	r3, #0
 80033a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80033aa:	4b4f      	ldr	r3, [pc, #316]	; (80034e8 <xTaskIncrementTick+0x148>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	f040 808a 	bne.w	80034c8 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80033b4:	4b4d      	ldr	r3, [pc, #308]	; (80034ec <xTaskIncrementTick+0x14c>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	3301      	adds	r3, #1
 80033ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80033bc:	4a4b      	ldr	r2, [pc, #300]	; (80034ec <xTaskIncrementTick+0x14c>)
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d122      	bne.n	800340e <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80033c8:	4b49      	ldr	r3, [pc, #292]	; (80034f0 <xTaskIncrementTick+0x150>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00c      	beq.n	80033ec <xTaskIncrementTick+0x4c>
	__asm volatile
 80033d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033d6:	b672      	cpsid	i
 80033d8:	f383 8811 	msr	BASEPRI, r3
 80033dc:	f3bf 8f6f 	isb	sy
 80033e0:	f3bf 8f4f 	dsb	sy
 80033e4:	b662      	cpsie	i
 80033e6:	603b      	str	r3, [r7, #0]
}
 80033e8:	bf00      	nop
 80033ea:	e7fe      	b.n	80033ea <xTaskIncrementTick+0x4a>
 80033ec:	4b40      	ldr	r3, [pc, #256]	; (80034f0 <xTaskIncrementTick+0x150>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	60fb      	str	r3, [r7, #12]
 80033f2:	4b40      	ldr	r3, [pc, #256]	; (80034f4 <xTaskIncrementTick+0x154>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a3e      	ldr	r2, [pc, #248]	; (80034f0 <xTaskIncrementTick+0x150>)
 80033f8:	6013      	str	r3, [r2, #0]
 80033fa:	4a3e      	ldr	r2, [pc, #248]	; (80034f4 <xTaskIncrementTick+0x154>)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6013      	str	r3, [r2, #0]
 8003400:	4b3d      	ldr	r3, [pc, #244]	; (80034f8 <xTaskIncrementTick+0x158>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	3301      	adds	r3, #1
 8003406:	4a3c      	ldr	r2, [pc, #240]	; (80034f8 <xTaskIncrementTick+0x158>)
 8003408:	6013      	str	r3, [r2, #0]
 800340a:	f000 faab 	bl	8003964 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800340e:	4b3b      	ldr	r3, [pc, #236]	; (80034fc <xTaskIncrementTick+0x15c>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	693a      	ldr	r2, [r7, #16]
 8003414:	429a      	cmp	r2, r3
 8003416:	d348      	bcc.n	80034aa <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003418:	4b35      	ldr	r3, [pc, #212]	; (80034f0 <xTaskIncrementTick+0x150>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d104      	bne.n	800342c <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003422:	4b36      	ldr	r3, [pc, #216]	; (80034fc <xTaskIncrementTick+0x15c>)
 8003424:	f04f 32ff 	mov.w	r2, #4294967295
 8003428:	601a      	str	r2, [r3, #0]
					break;
 800342a:	e03e      	b.n	80034aa <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800342c:	4b30      	ldr	r3, [pc, #192]	; (80034f0 <xTaskIncrementTick+0x150>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800343c:	693a      	ldr	r2, [r7, #16]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	429a      	cmp	r2, r3
 8003442:	d203      	bcs.n	800344c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003444:	4a2d      	ldr	r2, [pc, #180]	; (80034fc <xTaskIncrementTick+0x15c>)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800344a:	e02e      	b.n	80034aa <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	3304      	adds	r3, #4
 8003450:	4618      	mov	r0, r3
 8003452:	f7fe ff79 	bl	8002348 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800345a:	2b00      	cmp	r3, #0
 800345c:	d004      	beq.n	8003468 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	3318      	adds	r3, #24
 8003462:	4618      	mov	r0, r3
 8003464:	f7fe ff70 	bl	8002348 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346c:	2201      	movs	r2, #1
 800346e:	409a      	lsls	r2, r3
 8003470:	4b23      	ldr	r3, [pc, #140]	; (8003500 <xTaskIncrementTick+0x160>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4313      	orrs	r3, r2
 8003476:	4a22      	ldr	r2, [pc, #136]	; (8003500 <xTaskIncrementTick+0x160>)
 8003478:	6013      	str	r3, [r2, #0]
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800347e:	4613      	mov	r3, r2
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	4413      	add	r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	4a1f      	ldr	r2, [pc, #124]	; (8003504 <xTaskIncrementTick+0x164>)
 8003488:	441a      	add	r2, r3
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	3304      	adds	r3, #4
 800348e:	4619      	mov	r1, r3
 8003490:	4610      	mov	r0, r2
 8003492:	f7fe fefc 	bl	800228e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800349a:	4b1b      	ldr	r3, [pc, #108]	; (8003508 <xTaskIncrementTick+0x168>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d3b9      	bcc.n	8003418 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80034a4:	2301      	movs	r3, #1
 80034a6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80034a8:	e7b6      	b.n	8003418 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80034aa:	4b17      	ldr	r3, [pc, #92]	; (8003508 <xTaskIncrementTick+0x168>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034b0:	4914      	ldr	r1, [pc, #80]	; (8003504 <xTaskIncrementTick+0x164>)
 80034b2:	4613      	mov	r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	4413      	add	r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	440b      	add	r3, r1
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d907      	bls.n	80034d2 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 80034c2:	2301      	movs	r3, #1
 80034c4:	617b      	str	r3, [r7, #20]
 80034c6:	e004      	b.n	80034d2 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80034c8:	4b10      	ldr	r3, [pc, #64]	; (800350c <xTaskIncrementTick+0x16c>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	3301      	adds	r3, #1
 80034ce:	4a0f      	ldr	r2, [pc, #60]	; (800350c <xTaskIncrementTick+0x16c>)
 80034d0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80034d2:	4b0f      	ldr	r3, [pc, #60]	; (8003510 <xTaskIncrementTick+0x170>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d001      	beq.n	80034de <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 80034da:	2301      	movs	r3, #1
 80034dc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80034de:	697b      	ldr	r3, [r7, #20]
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3718      	adds	r7, #24
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	20004024 	.word	0x20004024
 80034ec:	20004000 	.word	0x20004000
 80034f0:	20003fb4 	.word	0x20003fb4
 80034f4:	20003fb8 	.word	0x20003fb8
 80034f8:	20004014 	.word	0x20004014
 80034fc:	2000401c 	.word	0x2000401c
 8003500:	20004004 	.word	0x20004004
 8003504:	20003f00 	.word	0x20003f00
 8003508:	20003efc 	.word	0x20003efc
 800350c:	2000400c 	.word	0x2000400c
 8003510:	20004010 	.word	0x20004010

08003514 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003514:	b480      	push	{r7}
 8003516:	b087      	sub	sp, #28
 8003518:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800351a:	4b28      	ldr	r3, [pc, #160]	; (80035bc <vTaskSwitchContext+0xa8>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d003      	beq.n	800352a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003522:	4b27      	ldr	r3, [pc, #156]	; (80035c0 <vTaskSwitchContext+0xac>)
 8003524:	2201      	movs	r2, #1
 8003526:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003528:	e041      	b.n	80035ae <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800352a:	4b25      	ldr	r3, [pc, #148]	; (80035c0 <vTaskSwitchContext+0xac>)
 800352c:	2200      	movs	r2, #0
 800352e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003530:	4b24      	ldr	r3, [pc, #144]	; (80035c4 <vTaskSwitchContext+0xb0>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	fab3 f383 	clz	r3, r3
 800353c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800353e:	7afb      	ldrb	r3, [r7, #11]
 8003540:	f1c3 031f 	rsb	r3, r3, #31
 8003544:	617b      	str	r3, [r7, #20]
 8003546:	4920      	ldr	r1, [pc, #128]	; (80035c8 <vTaskSwitchContext+0xb4>)
 8003548:	697a      	ldr	r2, [r7, #20]
 800354a:	4613      	mov	r3, r2
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	4413      	add	r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	440b      	add	r3, r1
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d10c      	bne.n	8003574 <vTaskSwitchContext+0x60>
	__asm volatile
 800355a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800355e:	b672      	cpsid	i
 8003560:	f383 8811 	msr	BASEPRI, r3
 8003564:	f3bf 8f6f 	isb	sy
 8003568:	f3bf 8f4f 	dsb	sy
 800356c:	b662      	cpsie	i
 800356e:	607b      	str	r3, [r7, #4]
}
 8003570:	bf00      	nop
 8003572:	e7fe      	b.n	8003572 <vTaskSwitchContext+0x5e>
 8003574:	697a      	ldr	r2, [r7, #20]
 8003576:	4613      	mov	r3, r2
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	4413      	add	r3, r2
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	4a12      	ldr	r2, [pc, #72]	; (80035c8 <vTaskSwitchContext+0xb4>)
 8003580:	4413      	add	r3, r2
 8003582:	613b      	str	r3, [r7, #16]
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	685a      	ldr	r2, [r3, #4]
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	605a      	str	r2, [r3, #4]
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	685a      	ldr	r2, [r3, #4]
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	3308      	adds	r3, #8
 8003596:	429a      	cmp	r2, r3
 8003598:	d104      	bne.n	80035a4 <vTaskSwitchContext+0x90>
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	685a      	ldr	r2, [r3, #4]
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	605a      	str	r2, [r3, #4]
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	4a08      	ldr	r2, [pc, #32]	; (80035cc <vTaskSwitchContext+0xb8>)
 80035ac:	6013      	str	r3, [r2, #0]
}
 80035ae:	bf00      	nop
 80035b0:	371c      	adds	r7, #28
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	20004024 	.word	0x20004024
 80035c0:	20004010 	.word	0x20004010
 80035c4:	20004004 	.word	0x20004004
 80035c8:	20003f00 	.word	0x20003f00
 80035cc:	20003efc 	.word	0x20003efc

080035d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d10c      	bne.n	80035fa <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 80035e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035e4:	b672      	cpsid	i
 80035e6:	f383 8811 	msr	BASEPRI, r3
 80035ea:	f3bf 8f6f 	isb	sy
 80035ee:	f3bf 8f4f 	dsb	sy
 80035f2:	b662      	cpsie	i
 80035f4:	60fb      	str	r3, [r7, #12]
}
 80035f6:	bf00      	nop
 80035f8:	e7fe      	b.n	80035f8 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80035fa:	4b07      	ldr	r3, [pc, #28]	; (8003618 <vTaskPlaceOnEventList+0x48>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	3318      	adds	r3, #24
 8003600:	4619      	mov	r1, r3
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f7fe fe67 	bl	80022d6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003608:	2101      	movs	r1, #1
 800360a:	6838      	ldr	r0, [r7, #0]
 800360c:	f000 fa72 	bl	8003af4 <prvAddCurrentTaskToDelayedList>
}
 8003610:	bf00      	nop
 8003612:	3710      	adds	r7, #16
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	20003efc 	.word	0x20003efc

0800361c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b086      	sub	sp, #24
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d10c      	bne.n	800364c <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8003632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003636:	b672      	cpsid	i
 8003638:	f383 8811 	msr	BASEPRI, r3
 800363c:	f3bf 8f6f 	isb	sy
 8003640:	f3bf 8f4f 	dsb	sy
 8003644:	b662      	cpsie	i
 8003646:	60fb      	str	r3, [r7, #12]
}
 8003648:	bf00      	nop
 800364a:	e7fe      	b.n	800364a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	3318      	adds	r3, #24
 8003650:	4618      	mov	r0, r3
 8003652:	f7fe fe79 	bl	8002348 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003656:	4b1d      	ldr	r3, [pc, #116]	; (80036cc <xTaskRemoveFromEventList+0xb0>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d11c      	bne.n	8003698 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	3304      	adds	r3, #4
 8003662:	4618      	mov	r0, r3
 8003664:	f7fe fe70 	bl	8002348 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800366c:	2201      	movs	r2, #1
 800366e:	409a      	lsls	r2, r3
 8003670:	4b17      	ldr	r3, [pc, #92]	; (80036d0 <xTaskRemoveFromEventList+0xb4>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4313      	orrs	r3, r2
 8003676:	4a16      	ldr	r2, [pc, #88]	; (80036d0 <xTaskRemoveFromEventList+0xb4>)
 8003678:	6013      	str	r3, [r2, #0]
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800367e:	4613      	mov	r3, r2
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	4413      	add	r3, r2
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	4a13      	ldr	r2, [pc, #76]	; (80036d4 <xTaskRemoveFromEventList+0xb8>)
 8003688:	441a      	add	r2, r3
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	3304      	adds	r3, #4
 800368e:	4619      	mov	r1, r3
 8003690:	4610      	mov	r0, r2
 8003692:	f7fe fdfc 	bl	800228e <vListInsertEnd>
 8003696:	e005      	b.n	80036a4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	3318      	adds	r3, #24
 800369c:	4619      	mov	r1, r3
 800369e:	480e      	ldr	r0, [pc, #56]	; (80036d8 <xTaskRemoveFromEventList+0xbc>)
 80036a0:	f7fe fdf5 	bl	800228e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036a8:	4b0c      	ldr	r3, [pc, #48]	; (80036dc <xTaskRemoveFromEventList+0xc0>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d905      	bls.n	80036be <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80036b2:	2301      	movs	r3, #1
 80036b4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80036b6:	4b0a      	ldr	r3, [pc, #40]	; (80036e0 <xTaskRemoveFromEventList+0xc4>)
 80036b8:	2201      	movs	r2, #1
 80036ba:	601a      	str	r2, [r3, #0]
 80036bc:	e001      	b.n	80036c2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80036be:	2300      	movs	r3, #0
 80036c0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80036c2:	697b      	ldr	r3, [r7, #20]
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3718      	adds	r7, #24
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	20004024 	.word	0x20004024
 80036d0:	20004004 	.word	0x20004004
 80036d4:	20003f00 	.word	0x20003f00
 80036d8:	20003fbc 	.word	0x20003fbc
 80036dc:	20003efc 	.word	0x20003efc
 80036e0:	20004010 	.word	0x20004010

080036e4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80036ec:	4b06      	ldr	r3, [pc, #24]	; (8003708 <vTaskInternalSetTimeOutState+0x24>)
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80036f4:	4b05      	ldr	r3, [pc, #20]	; (800370c <vTaskInternalSetTimeOutState+0x28>)
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	605a      	str	r2, [r3, #4]
}
 80036fc:	bf00      	nop
 80036fe:	370c      	adds	r7, #12
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr
 8003708:	20004014 	.word	0x20004014
 800370c:	20004000 	.word	0x20004000

08003710 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b088      	sub	sp, #32
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d10c      	bne.n	800373a <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8003720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003724:	b672      	cpsid	i
 8003726:	f383 8811 	msr	BASEPRI, r3
 800372a:	f3bf 8f6f 	isb	sy
 800372e:	f3bf 8f4f 	dsb	sy
 8003732:	b662      	cpsie	i
 8003734:	613b      	str	r3, [r7, #16]
}
 8003736:	bf00      	nop
 8003738:	e7fe      	b.n	8003738 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d10c      	bne.n	800375a <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8003740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003744:	b672      	cpsid	i
 8003746:	f383 8811 	msr	BASEPRI, r3
 800374a:	f3bf 8f6f 	isb	sy
 800374e:	f3bf 8f4f 	dsb	sy
 8003752:	b662      	cpsie	i
 8003754:	60fb      	str	r3, [r7, #12]
}
 8003756:	bf00      	nop
 8003758:	e7fe      	b.n	8003758 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800375a:	f7fe ff2f 	bl	80025bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800375e:	4b1d      	ldr	r3, [pc, #116]	; (80037d4 <xTaskCheckForTimeOut+0xc4>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003776:	d102      	bne.n	800377e <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003778:	2300      	movs	r3, #0
 800377a:	61fb      	str	r3, [r7, #28]
 800377c:	e023      	b.n	80037c6 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	4b15      	ldr	r3, [pc, #84]	; (80037d8 <xTaskCheckForTimeOut+0xc8>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	429a      	cmp	r2, r3
 8003788:	d007      	beq.n	800379a <xTaskCheckForTimeOut+0x8a>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	69ba      	ldr	r2, [r7, #24]
 8003790:	429a      	cmp	r2, r3
 8003792:	d302      	bcc.n	800379a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003794:	2301      	movs	r3, #1
 8003796:	61fb      	str	r3, [r7, #28]
 8003798:	e015      	b.n	80037c6 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	697a      	ldr	r2, [r7, #20]
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d20b      	bcs.n	80037bc <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	1ad2      	subs	r2, r2, r3
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f7ff ff97 	bl	80036e4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80037b6:	2300      	movs	r3, #0
 80037b8:	61fb      	str	r3, [r7, #28]
 80037ba:	e004      	b.n	80037c6 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	2200      	movs	r2, #0
 80037c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80037c2:	2301      	movs	r3, #1
 80037c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80037c6:	f7fe ff2d 	bl	8002624 <vPortExitCritical>

	return xReturn;
 80037ca:	69fb      	ldr	r3, [r7, #28]
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3720      	adds	r7, #32
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	20004000 	.word	0x20004000
 80037d8:	20004014 	.word	0x20004014

080037dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80037dc:	b480      	push	{r7}
 80037de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80037e0:	4b03      	ldr	r3, [pc, #12]	; (80037f0 <vTaskMissedYield+0x14>)
 80037e2:	2201      	movs	r2, #1
 80037e4:	601a      	str	r2, [r3, #0]
}
 80037e6:	bf00      	nop
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr
 80037f0:	20004010 	.word	0x20004010

080037f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80037fc:	f000 f852 	bl	80038a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003800:	4b06      	ldr	r3, [pc, #24]	; (800381c <prvIdleTask+0x28>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2b01      	cmp	r3, #1
 8003806:	d9f9      	bls.n	80037fc <prvIdleTask+0x8>
			{
				taskYIELD();
 8003808:	4b05      	ldr	r3, [pc, #20]	; (8003820 <prvIdleTask+0x2c>)
 800380a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800380e:	601a      	str	r2, [r3, #0]
 8003810:	f3bf 8f4f 	dsb	sy
 8003814:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003818:	e7f0      	b.n	80037fc <prvIdleTask+0x8>
 800381a:	bf00      	nop
 800381c:	20003f00 	.word	0x20003f00
 8003820:	e000ed04 	.word	0xe000ed04

08003824 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800382a:	2300      	movs	r3, #0
 800382c:	607b      	str	r3, [r7, #4]
 800382e:	e00c      	b.n	800384a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	4613      	mov	r3, r2
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	4413      	add	r3, r2
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	4a12      	ldr	r2, [pc, #72]	; (8003884 <prvInitialiseTaskLists+0x60>)
 800383c:	4413      	add	r3, r2
 800383e:	4618      	mov	r0, r3
 8003840:	f7fe fcf8 	bl	8002234 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	3301      	adds	r3, #1
 8003848:	607b      	str	r3, [r7, #4]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2b06      	cmp	r3, #6
 800384e:	d9ef      	bls.n	8003830 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003850:	480d      	ldr	r0, [pc, #52]	; (8003888 <prvInitialiseTaskLists+0x64>)
 8003852:	f7fe fcef 	bl	8002234 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003856:	480d      	ldr	r0, [pc, #52]	; (800388c <prvInitialiseTaskLists+0x68>)
 8003858:	f7fe fcec 	bl	8002234 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800385c:	480c      	ldr	r0, [pc, #48]	; (8003890 <prvInitialiseTaskLists+0x6c>)
 800385e:	f7fe fce9 	bl	8002234 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003862:	480c      	ldr	r0, [pc, #48]	; (8003894 <prvInitialiseTaskLists+0x70>)
 8003864:	f7fe fce6 	bl	8002234 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003868:	480b      	ldr	r0, [pc, #44]	; (8003898 <prvInitialiseTaskLists+0x74>)
 800386a:	f7fe fce3 	bl	8002234 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800386e:	4b0b      	ldr	r3, [pc, #44]	; (800389c <prvInitialiseTaskLists+0x78>)
 8003870:	4a05      	ldr	r2, [pc, #20]	; (8003888 <prvInitialiseTaskLists+0x64>)
 8003872:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003874:	4b0a      	ldr	r3, [pc, #40]	; (80038a0 <prvInitialiseTaskLists+0x7c>)
 8003876:	4a05      	ldr	r2, [pc, #20]	; (800388c <prvInitialiseTaskLists+0x68>)
 8003878:	601a      	str	r2, [r3, #0]
}
 800387a:	bf00      	nop
 800387c:	3708      	adds	r7, #8
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	20003f00 	.word	0x20003f00
 8003888:	20003f8c 	.word	0x20003f8c
 800388c:	20003fa0 	.word	0x20003fa0
 8003890:	20003fbc 	.word	0x20003fbc
 8003894:	20003fd0 	.word	0x20003fd0
 8003898:	20003fe8 	.word	0x20003fe8
 800389c:	20003fb4 	.word	0x20003fb4
 80038a0:	20003fb8 	.word	0x20003fb8

080038a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80038aa:	e019      	b.n	80038e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80038ac:	f7fe fe86 	bl	80025bc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038b0:	4b10      	ldr	r3, [pc, #64]	; (80038f4 <prvCheckTasksWaitingTermination+0x50>)
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	3304      	adds	r3, #4
 80038bc:	4618      	mov	r0, r3
 80038be:	f7fe fd43 	bl	8002348 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80038c2:	4b0d      	ldr	r3, [pc, #52]	; (80038f8 <prvCheckTasksWaitingTermination+0x54>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	3b01      	subs	r3, #1
 80038c8:	4a0b      	ldr	r2, [pc, #44]	; (80038f8 <prvCheckTasksWaitingTermination+0x54>)
 80038ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80038cc:	4b0b      	ldr	r3, [pc, #44]	; (80038fc <prvCheckTasksWaitingTermination+0x58>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	3b01      	subs	r3, #1
 80038d2:	4a0a      	ldr	r2, [pc, #40]	; (80038fc <prvCheckTasksWaitingTermination+0x58>)
 80038d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80038d6:	f7fe fea5 	bl	8002624 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f000 f810 	bl	8003900 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80038e0:	4b06      	ldr	r3, [pc, #24]	; (80038fc <prvCheckTasksWaitingTermination+0x58>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d1e1      	bne.n	80038ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80038e8:	bf00      	nop
 80038ea:	bf00      	nop
 80038ec:	3708      	adds	r7, #8
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	20003fd0 	.word	0x20003fd0
 80038f8:	20003ffc 	.word	0x20003ffc
 80038fc:	20003fe4 	.word	0x20003fe4

08003900 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800390e:	2b00      	cmp	r3, #0
 8003910:	d108      	bne.n	8003924 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003916:	4618      	mov	r0, r3
 8003918:	f7fe fb72 	bl	8002000 <vPortFree>
				vPortFree( pxTCB );
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f7fe fb6f 	bl	8002000 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003922:	e01a      	b.n	800395a <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800392a:	2b01      	cmp	r3, #1
 800392c:	d103      	bne.n	8003936 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f7fe fb66 	bl	8002000 <vPortFree>
	}
 8003934:	e011      	b.n	800395a <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800393c:	2b02      	cmp	r3, #2
 800393e:	d00c      	beq.n	800395a <prvDeleteTCB+0x5a>
	__asm volatile
 8003940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003944:	b672      	cpsid	i
 8003946:	f383 8811 	msr	BASEPRI, r3
 800394a:	f3bf 8f6f 	isb	sy
 800394e:	f3bf 8f4f 	dsb	sy
 8003952:	b662      	cpsie	i
 8003954:	60fb      	str	r3, [r7, #12]
}
 8003956:	bf00      	nop
 8003958:	e7fe      	b.n	8003958 <prvDeleteTCB+0x58>
	}
 800395a:	bf00      	nop
 800395c:	3710      	adds	r7, #16
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
	...

08003964 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800396a:	4b0c      	ldr	r3, [pc, #48]	; (800399c <prvResetNextTaskUnblockTime+0x38>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d104      	bne.n	800397e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003974:	4b0a      	ldr	r3, [pc, #40]	; (80039a0 <prvResetNextTaskUnblockTime+0x3c>)
 8003976:	f04f 32ff 	mov.w	r2, #4294967295
 800397a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800397c:	e008      	b.n	8003990 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800397e:	4b07      	ldr	r3, [pc, #28]	; (800399c <prvResetNextTaskUnblockTime+0x38>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	4a04      	ldr	r2, [pc, #16]	; (80039a0 <prvResetNextTaskUnblockTime+0x3c>)
 800398e:	6013      	str	r3, [r2, #0]
}
 8003990:	bf00      	nop
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr
 800399c:	20003fb4 	.word	0x20003fb4
 80039a0:	2000401c 	.word	0x2000401c

080039a4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80039aa:	4b0b      	ldr	r3, [pc, #44]	; (80039d8 <xTaskGetSchedulerState+0x34>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d102      	bne.n	80039b8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80039b2:	2301      	movs	r3, #1
 80039b4:	607b      	str	r3, [r7, #4]
 80039b6:	e008      	b.n	80039ca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039b8:	4b08      	ldr	r3, [pc, #32]	; (80039dc <xTaskGetSchedulerState+0x38>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d102      	bne.n	80039c6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80039c0:	2302      	movs	r3, #2
 80039c2:	607b      	str	r3, [r7, #4]
 80039c4:	e001      	b.n	80039ca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80039c6:	2300      	movs	r3, #0
 80039c8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80039ca:	687b      	ldr	r3, [r7, #4]
	}
 80039cc:	4618      	mov	r0, r3
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr
 80039d8:	20004008 	.word	0x20004008
 80039dc:	20004024 	.word	0x20004024

080039e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b086      	sub	sp, #24
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80039ec:	2300      	movs	r3, #0
 80039ee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d072      	beq.n	8003adc <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80039f6:	4b3c      	ldr	r3, [pc, #240]	; (8003ae8 <xTaskPriorityDisinherit+0x108>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	693a      	ldr	r2, [r7, #16]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d00c      	beq.n	8003a1a <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8003a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a04:	b672      	cpsid	i
 8003a06:	f383 8811 	msr	BASEPRI, r3
 8003a0a:	f3bf 8f6f 	isb	sy
 8003a0e:	f3bf 8f4f 	dsb	sy
 8003a12:	b662      	cpsie	i
 8003a14:	60fb      	str	r3, [r7, #12]
}
 8003a16:	bf00      	nop
 8003a18:	e7fe      	b.n	8003a18 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d10c      	bne.n	8003a3c <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8003a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a26:	b672      	cpsid	i
 8003a28:	f383 8811 	msr	BASEPRI, r3
 8003a2c:	f3bf 8f6f 	isb	sy
 8003a30:	f3bf 8f4f 	dsb	sy
 8003a34:	b662      	cpsie	i
 8003a36:	60bb      	str	r3, [r7, #8]
}
 8003a38:	bf00      	nop
 8003a3a:	e7fe      	b.n	8003a3a <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a40:	1e5a      	subs	r2, r3, #1
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d044      	beq.n	8003adc <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d140      	bne.n	8003adc <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	3304      	adds	r3, #4
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f7fe fc72 	bl	8002348 <uxListRemove>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d115      	bne.n	8003a96 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a6e:	491f      	ldr	r1, [pc, #124]	; (8003aec <xTaskPriorityDisinherit+0x10c>)
 8003a70:	4613      	mov	r3, r2
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	4413      	add	r3, r2
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	440b      	add	r3, r1
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d10a      	bne.n	8003a96 <xTaskPriorityDisinherit+0xb6>
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a84:	2201      	movs	r2, #1
 8003a86:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8a:	43da      	mvns	r2, r3
 8003a8c:	4b18      	ldr	r3, [pc, #96]	; (8003af0 <xTaskPriorityDisinherit+0x110>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4013      	ands	r3, r2
 8003a92:	4a17      	ldr	r2, [pc, #92]	; (8003af0 <xTaskPriorityDisinherit+0x110>)
 8003a94:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa2:	f1c3 0207 	rsb	r2, r3, #7
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aae:	2201      	movs	r2, #1
 8003ab0:	409a      	lsls	r2, r3
 8003ab2:	4b0f      	ldr	r3, [pc, #60]	; (8003af0 <xTaskPriorityDisinherit+0x110>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	4a0d      	ldr	r2, [pc, #52]	; (8003af0 <xTaskPriorityDisinherit+0x110>)
 8003aba:	6013      	str	r3, [r2, #0]
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	4413      	add	r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	4a08      	ldr	r2, [pc, #32]	; (8003aec <xTaskPriorityDisinherit+0x10c>)
 8003aca:	441a      	add	r2, r3
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	3304      	adds	r3, #4
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	4610      	mov	r0, r2
 8003ad4:	f7fe fbdb 	bl	800228e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003adc:	697b      	ldr	r3, [r7, #20]
	}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3718      	adds	r7, #24
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	20003efc 	.word	0x20003efc
 8003aec:	20003f00 	.word	0x20003f00
 8003af0:	20004004 	.word	0x20004004

08003af4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003afe:	4b29      	ldr	r3, [pc, #164]	; (8003ba4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b04:	4b28      	ldr	r3, [pc, #160]	; (8003ba8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	3304      	adds	r3, #4
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f7fe fc1c 	bl	8002348 <uxListRemove>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d10b      	bne.n	8003b2e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003b16:	4b24      	ldr	r3, [pc, #144]	; (8003ba8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b22:	43da      	mvns	r2, r3
 8003b24:	4b21      	ldr	r3, [pc, #132]	; (8003bac <prvAddCurrentTaskToDelayedList+0xb8>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4013      	ands	r3, r2
 8003b2a:	4a20      	ldr	r2, [pc, #128]	; (8003bac <prvAddCurrentTaskToDelayedList+0xb8>)
 8003b2c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b34:	d10a      	bne.n	8003b4c <prvAddCurrentTaskToDelayedList+0x58>
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d007      	beq.n	8003b4c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b3c:	4b1a      	ldr	r3, [pc, #104]	; (8003ba8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	3304      	adds	r3, #4
 8003b42:	4619      	mov	r1, r3
 8003b44:	481a      	ldr	r0, [pc, #104]	; (8003bb0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003b46:	f7fe fba2 	bl	800228e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003b4a:	e026      	b.n	8003b9a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003b4c:	68fa      	ldr	r2, [r7, #12]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4413      	add	r3, r2
 8003b52:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003b54:	4b14      	ldr	r3, [pc, #80]	; (8003ba8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	68ba      	ldr	r2, [r7, #8]
 8003b5a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003b5c:	68ba      	ldr	r2, [r7, #8]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d209      	bcs.n	8003b78 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b64:	4b13      	ldr	r3, [pc, #76]	; (8003bb4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	4b0f      	ldr	r3, [pc, #60]	; (8003ba8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	3304      	adds	r3, #4
 8003b6e:	4619      	mov	r1, r3
 8003b70:	4610      	mov	r0, r2
 8003b72:	f7fe fbb0 	bl	80022d6 <vListInsert>
}
 8003b76:	e010      	b.n	8003b9a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b78:	4b0f      	ldr	r3, [pc, #60]	; (8003bb8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	4b0a      	ldr	r3, [pc, #40]	; (8003ba8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	3304      	adds	r3, #4
 8003b82:	4619      	mov	r1, r3
 8003b84:	4610      	mov	r0, r2
 8003b86:	f7fe fba6 	bl	80022d6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003b8a:	4b0c      	ldr	r3, [pc, #48]	; (8003bbc <prvAddCurrentTaskToDelayedList+0xc8>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	68ba      	ldr	r2, [r7, #8]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d202      	bcs.n	8003b9a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003b94:	4a09      	ldr	r2, [pc, #36]	; (8003bbc <prvAddCurrentTaskToDelayedList+0xc8>)
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	6013      	str	r3, [r2, #0]
}
 8003b9a:	bf00      	nop
 8003b9c:	3710      	adds	r7, #16
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	20004000 	.word	0x20004000
 8003ba8:	20003efc 	.word	0x20003efc
 8003bac:	20004004 	.word	0x20004004
 8003bb0:	20003fe8 	.word	0x20003fe8
 8003bb4:	20003fb8 	.word	0x20003fb8
 8003bb8:	20003fb4 	.word	0x20003fb4
 8003bbc:	2000401c 	.word	0x2000401c

08003bc0 <memset>:
 8003bc0:	4402      	add	r2, r0
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d100      	bne.n	8003bca <memset+0xa>
 8003bc8:	4770      	bx	lr
 8003bca:	f803 1b01 	strb.w	r1, [r3], #1
 8003bce:	e7f9      	b.n	8003bc4 <memset+0x4>

08003bd0 <__libc_init_array>:
 8003bd0:	b570      	push	{r4, r5, r6, lr}
 8003bd2:	4d0d      	ldr	r5, [pc, #52]	; (8003c08 <__libc_init_array+0x38>)
 8003bd4:	4c0d      	ldr	r4, [pc, #52]	; (8003c0c <__libc_init_array+0x3c>)
 8003bd6:	1b64      	subs	r4, r4, r5
 8003bd8:	10a4      	asrs	r4, r4, #2
 8003bda:	2600      	movs	r6, #0
 8003bdc:	42a6      	cmp	r6, r4
 8003bde:	d109      	bne.n	8003bf4 <__libc_init_array+0x24>
 8003be0:	4d0b      	ldr	r5, [pc, #44]	; (8003c10 <__libc_init_array+0x40>)
 8003be2:	4c0c      	ldr	r4, [pc, #48]	; (8003c14 <__libc_init_array+0x44>)
 8003be4:	f000 f826 	bl	8003c34 <_init>
 8003be8:	1b64      	subs	r4, r4, r5
 8003bea:	10a4      	asrs	r4, r4, #2
 8003bec:	2600      	movs	r6, #0
 8003bee:	42a6      	cmp	r6, r4
 8003bf0:	d105      	bne.n	8003bfe <__libc_init_array+0x2e>
 8003bf2:	bd70      	pop	{r4, r5, r6, pc}
 8003bf4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bf8:	4798      	blx	r3
 8003bfa:	3601      	adds	r6, #1
 8003bfc:	e7ee      	b.n	8003bdc <__libc_init_array+0xc>
 8003bfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c02:	4798      	blx	r3
 8003c04:	3601      	adds	r6, #1
 8003c06:	e7f2      	b.n	8003bee <__libc_init_array+0x1e>
 8003c08:	08003ce4 	.word	0x08003ce4
 8003c0c:	08003ce4 	.word	0x08003ce4
 8003c10:	08003ce4 	.word	0x08003ce4
 8003c14:	08003ce8 	.word	0x08003ce8

08003c18 <memcpy>:
 8003c18:	440a      	add	r2, r1
 8003c1a:	4291      	cmp	r1, r2
 8003c1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003c20:	d100      	bne.n	8003c24 <memcpy+0xc>
 8003c22:	4770      	bx	lr
 8003c24:	b510      	push	{r4, lr}
 8003c26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003c2e:	4291      	cmp	r1, r2
 8003c30:	d1f9      	bne.n	8003c26 <memcpy+0xe>
 8003c32:	bd10      	pop	{r4, pc}

08003c34 <_init>:
 8003c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c36:	bf00      	nop
 8003c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c3a:	bc08      	pop	{r3}
 8003c3c:	469e      	mov	lr, r3
 8003c3e:	4770      	bx	lr

08003c40 <_fini>:
 8003c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c42:	bf00      	nop
 8003c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c46:	bc08      	pop	{r3}
 8003c48:	469e      	mov	lr, r3
 8003c4a:	4770      	bx	lr
