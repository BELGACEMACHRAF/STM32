
new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003124  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080032f4  080032f4  000132f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003334  08003334  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08003334  08003334  00013334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800333c  0800333c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800333c  0800333c  0001333c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003340  08003340  00013340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003344  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000400c  20000010  08003354  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000401c  08003354  0002401c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009d9e  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fbd  00000000  00000000  00029e21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009b0  00000000  00000000  0002bde0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000073b  00000000  00000000  0002c790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025926  00000000  00000000  0002cecb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b406  00000000  00000000  000527f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed74c  00000000  00000000  0005dbf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000025d0  00000000  00000000  0014b344  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  0014d914  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080032dc 	.word	0x080032dc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	080032dc 	.word	0x080032dc

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b970 	b.w	8000508 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	460d      	mov	r5, r1
 8000248:	4604      	mov	r4, r0
 800024a:	460f      	mov	r7, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4694      	mov	ip, r2
 8000254:	d965      	bls.n	8000322 <__udivmoddi4+0xe2>
 8000256:	fab2 f382 	clz	r3, r2
 800025a:	b143      	cbz	r3, 800026e <__udivmoddi4+0x2e>
 800025c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000260:	f1c3 0220 	rsb	r2, r3, #32
 8000264:	409f      	lsls	r7, r3
 8000266:	fa20 f202 	lsr.w	r2, r0, r2
 800026a:	4317      	orrs	r7, r2
 800026c:	409c      	lsls	r4, r3
 800026e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000272:	fa1f f58c 	uxth.w	r5, ip
 8000276:	fbb7 f1fe 	udiv	r1, r7, lr
 800027a:	0c22      	lsrs	r2, r4, #16
 800027c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000280:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000284:	fb01 f005 	mul.w	r0, r1, r5
 8000288:	4290      	cmp	r0, r2
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028c:	eb1c 0202 	adds.w	r2, ip, r2
 8000290:	f101 37ff 	add.w	r7, r1, #4294967295
 8000294:	f080 811c 	bcs.w	80004d0 <__udivmoddi4+0x290>
 8000298:	4290      	cmp	r0, r2
 800029a:	f240 8119 	bls.w	80004d0 <__udivmoddi4+0x290>
 800029e:	3902      	subs	r1, #2
 80002a0:	4462      	add	r2, ip
 80002a2:	1a12      	subs	r2, r2, r0
 80002a4:	b2a4      	uxth	r4, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002b2:	fb00 f505 	mul.w	r5, r0, r5
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	d90a      	bls.n	80002d0 <__udivmoddi4+0x90>
 80002ba:	eb1c 0404 	adds.w	r4, ip, r4
 80002be:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c2:	f080 8107 	bcs.w	80004d4 <__udivmoddi4+0x294>
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	f240 8104 	bls.w	80004d4 <__udivmoddi4+0x294>
 80002cc:	4464      	add	r4, ip
 80002ce:	3802      	subs	r0, #2
 80002d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d4:	1b64      	subs	r4, r4, r5
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11e      	cbz	r6, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40dc      	lsrs	r4, r3
 80002dc:	2300      	movs	r3, #0
 80002de:	e9c6 4300 	strd	r4, r3, [r6]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0xbc>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80ed 	beq.w	80004ca <__udivmoddi4+0x28a>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e9c6 0500 	strd	r0, r5, [r6]
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	d149      	bne.n	8000398 <__udivmoddi4+0x158>
 8000304:	42ab      	cmp	r3, r5
 8000306:	d302      	bcc.n	800030e <__udivmoddi4+0xce>
 8000308:	4282      	cmp	r2, r0
 800030a:	f200 80f8 	bhi.w	80004fe <__udivmoddi4+0x2be>
 800030e:	1a84      	subs	r4, r0, r2
 8000310:	eb65 0203 	sbc.w	r2, r5, r3
 8000314:	2001      	movs	r0, #1
 8000316:	4617      	mov	r7, r2
 8000318:	2e00      	cmp	r6, #0
 800031a:	d0e2      	beq.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	e9c6 4700 	strd	r4, r7, [r6]
 8000320:	e7df      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000322:	b902      	cbnz	r2, 8000326 <__udivmoddi4+0xe6>
 8000324:	deff      	udf	#255	; 0xff
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8090 	bne.w	8000450 <__udivmoddi4+0x210>
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2101      	movs	r1, #1
 800033c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000340:	fb07 2015 	mls	r0, r7, r5, r2
 8000344:	0c22      	lsrs	r2, r4, #16
 8000346:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800034a:	fb0e f005 	mul.w	r0, lr, r5
 800034e:	4290      	cmp	r0, r2
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x124>
 8000352:	eb1c 0202 	adds.w	r2, ip, r2
 8000356:	f105 38ff 	add.w	r8, r5, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4290      	cmp	r0, r2
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2b8>
 8000362:	4645      	mov	r5, r8
 8000364:	1a12      	subs	r2, r2, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb2 f0f7 	udiv	r0, r2, r7
 800036c:	fb07 2210 	mls	r2, r7, r0, r2
 8000370:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x14e>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 32ff 	add.w	r2, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x14c>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2c2>
 800038c:	4610      	mov	r0, r2
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000396:	e79f      	b.n	80002d8 <__udivmoddi4+0x98>
 8000398:	f1c1 0720 	rsb	r7, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa05 f401 	lsl.w	r4, r5, r1
 80003aa:	fa20 f307 	lsr.w	r3, r0, r7
 80003ae:	40fd      	lsrs	r5, r7
 80003b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b4:	4323      	orrs	r3, r4
 80003b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ba:	fa1f fe8c 	uxth.w	lr, ip
 80003be:	fb09 5518 	mls	r5, r9, r8, r5
 80003c2:	0c1c      	lsrs	r4, r3, #16
 80003c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c8:	fb08 f50e 	mul.w	r5, r8, lr
 80003cc:	42a5      	cmp	r5, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	fa00 f001 	lsl.w	r0, r0, r1
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2b4>
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2b4>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4464      	add	r4, ip
 80003f0:	1b64      	subs	r4, r4, r5
 80003f2:	b29d      	uxth	r5, r3
 80003f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f8:	fb09 4413 	mls	r4, r9, r3, r4
 80003fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000400:	fb03 fe0e 	mul.w	lr, r3, lr
 8000404:	45a6      	cmp	lr, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2ac>
 8000412:	45a6      	cmp	lr, r4
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2ac>
 8000416:	3b02      	subs	r3, #2
 8000418:	4464      	add	r4, ip
 800041a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800041e:	fba3 9502 	umull	r9, r5, r3, r2
 8000422:	eba4 040e 	sub.w	r4, r4, lr
 8000426:	42ac      	cmp	r4, r5
 8000428:	46c8      	mov	r8, r9
 800042a:	46ae      	mov	lr, r5
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x29c>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x298>
 8000430:	b156      	cbz	r6, 8000448 <__udivmoddi4+0x208>
 8000432:	ebb0 0208 	subs.w	r2, r0, r8
 8000436:	eb64 040e 	sbc.w	r4, r4, lr
 800043a:	fa04 f707 	lsl.w	r7, r4, r7
 800043e:	40ca      	lsrs	r2, r1
 8000440:	40cc      	lsrs	r4, r1
 8000442:	4317      	orrs	r7, r2
 8000444:	e9c6 7400 	strd	r7, r4, [r6]
 8000448:	4618      	mov	r0, r3
 800044a:	2100      	movs	r1, #0
 800044c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000450:	f1c3 0120 	rsb	r1, r3, #32
 8000454:	fa02 fc03 	lsl.w	ip, r2, r3
 8000458:	fa20 f201 	lsr.w	r2, r0, r1
 800045c:	fa25 f101 	lsr.w	r1, r5, r1
 8000460:	409d      	lsls	r5, r3
 8000462:	432a      	orrs	r2, r5
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000470:	fb07 1510 	mls	r5, r7, r0, r1
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047a:	fb00 f50e 	mul.w	r5, r0, lr
 800047e:	428d      	cmp	r5, r1
 8000480:	fa04 f403 	lsl.w	r4, r4, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x258>
 8000486:	eb1c 0101 	adds.w	r1, ip, r1
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 8000490:	428d      	cmp	r5, r1
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 8000494:	3802      	subs	r0, #2
 8000496:	4461      	add	r1, ip
 8000498:	1b49      	subs	r1, r1, r5
 800049a:	b292      	uxth	r2, r2
 800049c:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a0:	fb07 1115 	mls	r1, r7, r5, r1
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	fb05 f10e 	mul.w	r1, r5, lr
 80004ac:	4291      	cmp	r1, r2
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x282>
 80004b0:	eb1c 0202 	adds.w	r2, ip, r2
 80004b4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 80004be:	3d02      	subs	r5, #2
 80004c0:	4462      	add	r2, ip
 80004c2:	1a52      	subs	r2, r2, r1
 80004c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0xfc>
 80004ca:	4631      	mov	r1, r6
 80004cc:	4630      	mov	r0, r6
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xa2>
 80004d0:	4639      	mov	r1, r7
 80004d2:	e6e6      	b.n	80002a2 <__udivmoddi4+0x62>
 80004d4:	4610      	mov	r0, r2
 80004d6:	e6fb      	b.n	80002d0 <__udivmoddi4+0x90>
 80004d8:	4548      	cmp	r0, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004e4:	3b01      	subs	r3, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e8:	4645      	mov	r5, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x282>
 80004ec:	462b      	mov	r3, r5
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1da>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x258>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f8:	3d02      	subs	r5, #2
 80004fa:	4462      	add	r2, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x124>
 80004fe:	4608      	mov	r0, r1
 8000500:	e70a      	b.n	8000318 <__udivmoddi4+0xd8>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x14e>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	60f8      	str	r0, [r7, #12]
 8000514:	60b9      	str	r1, [r7, #8]
 8000516:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	4a07      	ldr	r2, [pc, #28]	; (8000538 <vApplicationGetIdleTaskMemory+0x2c>)
 800051c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	4a06      	ldr	r2, [pc, #24]	; (800053c <vApplicationGetIdleTaskMemory+0x30>)
 8000522:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2280      	movs	r2, #128	; 0x80
 8000528:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800052a:	bf00      	nop
 800052c:	3714      	adds	r7, #20
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	2000002c 	.word	0x2000002c
 800053c:	20000080 	.word	0x20000080

08000540 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000540:	b5b0      	push	{r4, r5, r7, lr}
 8000542:	b088      	sub	sp, #32
 8000544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000546:	f000 f8ef 	bl	8000728 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054a:	f000 f9e6 	bl	800091a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054e:	f000 f81d 	bl	800058c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000552:	f000 f8c9 	bl	80006e8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000556:	f000 f875 	bl	8000644 <MX_ADC1_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800055a:	4b0a      	ldr	r3, [pc, #40]	; (8000584 <main+0x44>)
 800055c:	1d3c      	adds	r4, r7, #4
 800055e:	461d      	mov	r5, r3
 8000560:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000562:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000564:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000568:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800056c:	1d3b      	adds	r3, r7, #4
 800056e:	2100      	movs	r1, #0
 8000570:	4618      	mov	r0, r3
 8000572:	f001 fc46 	bl	8001e02 <osThreadCreate>
 8000576:	4603      	mov	r3, r0
 8000578:	4a03      	ldr	r2, [pc, #12]	; (8000588 <main+0x48>)
 800057a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800057c:	f001 fc3a 	bl	8001df4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000580:	e7fe      	b.n	8000580 <main+0x40>
 8000582:	bf00      	nop
 8000584:	08003300 	.word	0x08003300
 8000588:	200002c8 	.word	0x200002c8

0800058c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b094      	sub	sp, #80	; 0x50
 8000590:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000592:	f107 0320 	add.w	r3, r7, #32
 8000596:	2230      	movs	r2, #48	; 0x30
 8000598:	2100      	movs	r1, #0
 800059a:	4618      	mov	r0, r3
 800059c:	f002 fe72 	bl	8003284 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a0:	f107 030c 	add.w	r3, r7, #12
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]
 80005ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b0:	4b22      	ldr	r3, [pc, #136]	; (800063c <SystemClock_Config+0xb0>)
 80005b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b4:	4a21      	ldr	r2, [pc, #132]	; (800063c <SystemClock_Config+0xb0>)
 80005b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ba:	6413      	str	r3, [r2, #64]	; 0x40
 80005bc:	4b1f      	ldr	r3, [pc, #124]	; (800063c <SystemClock_Config+0xb0>)
 80005be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c4:	60bb      	str	r3, [r7, #8]
 80005c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005c8:	4b1d      	ldr	r3, [pc, #116]	; (8000640 <SystemClock_Config+0xb4>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005d0:	4a1b      	ldr	r2, [pc, #108]	; (8000640 <SystemClock_Config+0xb4>)
 80005d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005d6:	6013      	str	r3, [r2, #0]
 80005d8:	4b19      	ldr	r3, [pc, #100]	; (8000640 <SystemClock_Config+0xb4>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005e0:	607b      	str	r3, [r7, #4]
 80005e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005e4:	2302      	movs	r3, #2
 80005e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e8:	2301      	movs	r3, #1
 80005ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ec:	2310      	movs	r3, #16
 80005ee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005f0:	2300      	movs	r3, #0
 80005f2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f4:	f107 0320 	add.w	r3, r7, #32
 80005f8:	4618      	mov	r0, r3
 80005fa:	f000 ff8d 	bl	8001518 <HAL_RCC_OscConfig>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000604:	f000 f8bc 	bl	8000780 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000608:	230f      	movs	r3, #15
 800060a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800060c:	2300      	movs	r3, #0
 800060e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000610:	2300      	movs	r3, #0
 8000612:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000614:	2300      	movs	r3, #0
 8000616:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800061c:	f107 030c 	add.w	r3, r7, #12
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f001 fa1c 	bl	8001a60 <HAL_RCC_ClockConfig>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800062e:	f000 f8a7 	bl	8000780 <Error_Handler>
  }
}
 8000632:	bf00      	nop
 8000634:	3750      	adds	r7, #80	; 0x50
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	40023800 	.word	0x40023800
 8000640:	40007000 	.word	0x40007000

08000644 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800064a:	463b      	mov	r3, r7
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000656:	4b21      	ldr	r3, [pc, #132]	; (80006dc <MX_ADC1_Init+0x98>)
 8000658:	4a21      	ldr	r2, [pc, #132]	; (80006e0 <MX_ADC1_Init+0x9c>)
 800065a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800065c:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <MX_ADC1_Init+0x98>)
 800065e:	2200      	movs	r2, #0
 8000660:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000662:	4b1e      	ldr	r3, [pc, #120]	; (80006dc <MX_ADC1_Init+0x98>)
 8000664:	2200      	movs	r2, #0
 8000666:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000668:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <MX_ADC1_Init+0x98>)
 800066a:	2200      	movs	r2, #0
 800066c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800066e:	4b1b      	ldr	r3, [pc, #108]	; (80006dc <MX_ADC1_Init+0x98>)
 8000670:	2201      	movs	r2, #1
 8000672:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000674:	4b19      	ldr	r3, [pc, #100]	; (80006dc <MX_ADC1_Init+0x98>)
 8000676:	2200      	movs	r2, #0
 8000678:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <MX_ADC1_Init+0x98>)
 800067e:	2200      	movs	r2, #0
 8000680:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000682:	4b16      	ldr	r3, [pc, #88]	; (80006dc <MX_ADC1_Init+0x98>)
 8000684:	4a17      	ldr	r2, [pc, #92]	; (80006e4 <MX_ADC1_Init+0xa0>)
 8000686:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <MX_ADC1_Init+0x98>)
 800068a:	2200      	movs	r2, #0
 800068c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800068e:	4b13      	ldr	r3, [pc, #76]	; (80006dc <MX_ADC1_Init+0x98>)
 8000690:	2201      	movs	r2, #1
 8000692:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <MX_ADC1_Init+0x98>)
 8000696:	2200      	movs	r2, #0
 8000698:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800069c:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <MX_ADC1_Init+0x98>)
 800069e:	2201      	movs	r2, #1
 80006a0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006a2:	480e      	ldr	r0, [pc, #56]	; (80006dc <MX_ADC1_Init+0x98>)
 80006a4:	f000 f996 	bl	80009d4 <HAL_ADC_Init>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80006ae:	f000 f867 	bl	8000780 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80006b2:	2300      	movs	r3, #0
 80006b4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006b6:	2301      	movs	r3, #1
 80006b8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006ba:	2300      	movs	r3, #0
 80006bc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006be:	463b      	mov	r3, r7
 80006c0:	4619      	mov	r1, r3
 80006c2:	4806      	ldr	r0, [pc, #24]	; (80006dc <MX_ADC1_Init+0x98>)
 80006c4:	f000 f9ca 	bl	8000a5c <HAL_ADC_ConfigChannel>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80006ce:	f000 f857 	bl	8000780 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006d2:	bf00      	nop
 80006d4:	3710      	adds	r7, #16
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	20000280 	.word	0x20000280
 80006e0:	40012000 	.word	0x40012000
 80006e4:	0f000001 	.word	0x0f000001

080006e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ee:	4b09      	ldr	r3, [pc, #36]	; (8000714 <MX_GPIO_Init+0x2c>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	4a08      	ldr	r2, [pc, #32]	; (8000714 <MX_GPIO_Init+0x2c>)
 80006f4:	f043 0301 	orr.w	r3, r3, #1
 80006f8:	6313      	str	r3, [r2, #48]	; 0x30
 80006fa:	4b06      	ldr	r3, [pc, #24]	; (8000714 <MX_GPIO_Init+0x2c>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	f003 0301 	and.w	r3, r3, #1
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000706:	bf00      	nop
 8000708:	370c      	adds	r7, #12
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	40023800 	.word	0x40023800

08000718 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000720:	2001      	movs	r0, #1
 8000722:	f001 fbba 	bl	8001e9a <osDelay>
 8000726:	e7fb      	b.n	8000720 <StartDefaultTask+0x8>

08000728 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800072e:	463b      	mov	r3, r7
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800073a:	f000 fcc5 	bl	80010c8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800073e:	2301      	movs	r3, #1
 8000740:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000742:	2300      	movs	r3, #0
 8000744:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000746:	2300      	movs	r3, #0
 8000748:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800074a:	231f      	movs	r3, #31
 800074c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800074e:	2387      	movs	r3, #135	; 0x87
 8000750:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000752:	2300      	movs	r3, #0
 8000754:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000756:	2300      	movs	r3, #0
 8000758:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800075a:	2301      	movs	r3, #1
 800075c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800075e:	2301      	movs	r3, #1
 8000760:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000762:	2300      	movs	r3, #0
 8000764:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000766:	2300      	movs	r3, #0
 8000768:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800076a:	463b      	mov	r3, r7
 800076c:	4618      	mov	r0, r3
 800076e:	f000 fce3 	bl	8001138 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000772:	2004      	movs	r0, #4
 8000774:	f000 fcc0 	bl	80010f8 <HAL_MPU_Enable>

}
 8000778:	bf00      	nop
 800077a:	3710      	adds	r7, #16
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}

08000780 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000784:	b672      	cpsid	i
}
 8000786:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000788:	e7fe      	b.n	8000788 <Error_Handler+0x8>
	...

0800078c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000792:	4b11      	ldr	r3, [pc, #68]	; (80007d8 <HAL_MspInit+0x4c>)
 8000794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000796:	4a10      	ldr	r2, [pc, #64]	; (80007d8 <HAL_MspInit+0x4c>)
 8000798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800079c:	6413      	str	r3, [r2, #64]	; 0x40
 800079e:	4b0e      	ldr	r3, [pc, #56]	; (80007d8 <HAL_MspInit+0x4c>)
 80007a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007aa:	4b0b      	ldr	r3, [pc, #44]	; (80007d8 <HAL_MspInit+0x4c>)
 80007ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ae:	4a0a      	ldr	r2, [pc, #40]	; (80007d8 <HAL_MspInit+0x4c>)
 80007b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007b4:	6453      	str	r3, [r2, #68]	; 0x44
 80007b6:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <HAL_MspInit+0x4c>)
 80007b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007be:	603b      	str	r3, [r7, #0]
 80007c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007c2:	2200      	movs	r2, #0
 80007c4:	210f      	movs	r1, #15
 80007c6:	f06f 0001 	mvn.w	r0, #1
 80007ca:	f000 fc54 	bl	8001076 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40023800 	.word	0x40023800

080007dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b08a      	sub	sp, #40	; 0x28
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e4:	f107 0314 	add.w	r3, r7, #20
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	60da      	str	r2, [r3, #12]
 80007f2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a15      	ldr	r2, [pc, #84]	; (8000850 <HAL_ADC_MspInit+0x74>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d123      	bne.n	8000846 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80007fe:	4b15      	ldr	r3, [pc, #84]	; (8000854 <HAL_ADC_MspInit+0x78>)
 8000800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000802:	4a14      	ldr	r2, [pc, #80]	; (8000854 <HAL_ADC_MspInit+0x78>)
 8000804:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000808:	6453      	str	r3, [r2, #68]	; 0x44
 800080a:	4b12      	ldr	r3, [pc, #72]	; (8000854 <HAL_ADC_MspInit+0x78>)
 800080c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800080e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000812:	613b      	str	r3, [r7, #16]
 8000814:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000816:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <HAL_ADC_MspInit+0x78>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a0e      	ldr	r2, [pc, #56]	; (8000854 <HAL_ADC_MspInit+0x78>)
 800081c:	f043 0301 	orr.w	r3, r3, #1
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <HAL_ADC_MspInit+0x78>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800082e:	2301      	movs	r3, #1
 8000830:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000832:	2303      	movs	r3, #3
 8000834:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800083a:	f107 0314 	add.w	r3, r7, #20
 800083e:	4619      	mov	r1, r3
 8000840:	4805      	ldr	r0, [pc, #20]	; (8000858 <HAL_ADC_MspInit+0x7c>)
 8000842:	f000 fcbd 	bl	80011c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000846:	bf00      	nop
 8000848:	3728      	adds	r7, #40	; 0x28
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40012000 	.word	0x40012000
 8000854:	40023800 	.word	0x40023800
 8000858:	40020000 	.word	0x40020000

0800085c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000860:	e7fe      	b.n	8000860 <NMI_Handler+0x4>

08000862 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000862:	b480      	push	{r7}
 8000864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000866:	e7fe      	b.n	8000866 <HardFault_Handler+0x4>

08000868 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800086c:	e7fe      	b.n	800086c <MemManage_Handler+0x4>

0800086e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800086e:	b480      	push	{r7}
 8000870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000872:	e7fe      	b.n	8000872 <BusFault_Handler+0x4>

08000874 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000878:	e7fe      	b.n	8000878 <UsageFault_Handler+0x4>

0800087a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800087a:	b480      	push	{r7}
 800087c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800087e:	bf00      	nop
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr

08000888 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800088c:	f000 f882 	bl	8000994 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000890:	f002 f89c 	bl	80029cc <xTaskGetSchedulerState>
 8000894:	4603      	mov	r3, r0
 8000896:	2b01      	cmp	r3, #1
 8000898:	d001      	beq.n	800089e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800089a:	f002 fabd 	bl	8002e18 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
	...

080008a4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008a8:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <SystemInit+0x20>)
 80008aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008ae:	4a05      	ldr	r2, [pc, #20]	; (80008c4 <SystemInit+0x20>)
 80008b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008b8:	bf00      	nop
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	e000ed00 	.word	0xe000ed00

080008c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80008c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000900 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008cc:	480d      	ldr	r0, [pc, #52]	; (8000904 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80008ce:	490e      	ldr	r1, [pc, #56]	; (8000908 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80008d0:	4a0e      	ldr	r2, [pc, #56]	; (800090c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008d4:	e002      	b.n	80008dc <LoopCopyDataInit>

080008d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008da:	3304      	adds	r3, #4

080008dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008e0:	d3f9      	bcc.n	80008d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008e2:	4a0b      	ldr	r2, [pc, #44]	; (8000910 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80008e4:	4c0b      	ldr	r4, [pc, #44]	; (8000914 <LoopFillZerobss+0x26>)
  movs r3, #0
 80008e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008e8:	e001      	b.n	80008ee <LoopFillZerobss>

080008ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008ec:	3204      	adds	r2, #4

080008ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008f0:	d3fb      	bcc.n	80008ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80008f2:	f7ff ffd7 	bl	80008a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008f6:	f002 fccd 	bl	8003294 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008fa:	f7ff fe21 	bl	8000540 <main>
  bx  lr    
 80008fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000900:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000904:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000908:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800090c:	08003344 	.word	0x08003344
  ldr r2, =_sbss
 8000910:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000914:	2000401c 	.word	0x2000401c

08000918 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000918:	e7fe      	b.n	8000918 <ADC_IRQHandler>

0800091a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800091a:	b580      	push	{r7, lr}
 800091c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800091e:	2003      	movs	r0, #3
 8000920:	f000 fb9e 	bl	8001060 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000924:	200f      	movs	r0, #15
 8000926:	f000 f805 	bl	8000934 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800092a:	f7ff ff2f 	bl	800078c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800092e:	2300      	movs	r3, #0
}
 8000930:	4618      	mov	r0, r3
 8000932:	bd80      	pop	{r7, pc}

08000934 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800093c:	4b12      	ldr	r3, [pc, #72]	; (8000988 <HAL_InitTick+0x54>)
 800093e:	681a      	ldr	r2, [r3, #0]
 8000940:	4b12      	ldr	r3, [pc, #72]	; (800098c <HAL_InitTick+0x58>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	4619      	mov	r1, r3
 8000946:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800094a:	fbb3 f3f1 	udiv	r3, r3, r1
 800094e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000952:	4618      	mov	r0, r3
 8000954:	f000 fbab 	bl	80010ae <HAL_SYSTICK_Config>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800095e:	2301      	movs	r3, #1
 8000960:	e00e      	b.n	8000980 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	2b0f      	cmp	r3, #15
 8000966:	d80a      	bhi.n	800097e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000968:	2200      	movs	r2, #0
 800096a:	6879      	ldr	r1, [r7, #4]
 800096c:	f04f 30ff 	mov.w	r0, #4294967295
 8000970:	f000 fb81 	bl	8001076 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000974:	4a06      	ldr	r2, [pc, #24]	; (8000990 <HAL_InitTick+0x5c>)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800097a:	2300      	movs	r3, #0
 800097c:	e000      	b.n	8000980 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800097e:	2301      	movs	r3, #1
}
 8000980:	4618      	mov	r0, r3
 8000982:	3708      	adds	r7, #8
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	20000000 	.word	0x20000000
 800098c:	20000008 	.word	0x20000008
 8000990:	20000004 	.word	0x20000004

08000994 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000998:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <HAL_IncTick+0x20>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	461a      	mov	r2, r3
 800099e:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <HAL_IncTick+0x24>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4413      	add	r3, r2
 80009a4:	4a04      	ldr	r2, [pc, #16]	; (80009b8 <HAL_IncTick+0x24>)
 80009a6:	6013      	str	r3, [r2, #0]
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	20000008 	.word	0x20000008
 80009b8:	200002cc 	.word	0x200002cc

080009bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  return uwTick;
 80009c0:	4b03      	ldr	r3, [pc, #12]	; (80009d0 <HAL_GetTick+0x14>)
 80009c2:	681b      	ldr	r3, [r3, #0]
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	200002cc 	.word	0x200002cc

080009d4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009dc:	2300      	movs	r3, #0
 80009de:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d101      	bne.n	80009ea <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80009e6:	2301      	movs	r3, #1
 80009e8:	e031      	b.n	8000a4e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d109      	bne.n	8000a06 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80009f2:	6878      	ldr	r0, [r7, #4]
 80009f4:	f7ff fef2 	bl	80007dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	2200      	movs	r2, #0
 80009fc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	2200      	movs	r2, #0
 8000a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0a:	f003 0310 	and.w	r3, r3, #16
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d116      	bne.n	8000a40 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a16:	4b10      	ldr	r3, [pc, #64]	; (8000a58 <HAL_ADC_Init+0x84>)
 8000a18:	4013      	ands	r3, r2
 8000a1a:	f043 0202 	orr.w	r2, r3, #2
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000a22:	6878      	ldr	r0, [r7, #4]
 8000a24:	f000 f970 	bl	8000d08 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a32:	f023 0303 	bic.w	r3, r3, #3
 8000a36:	f043 0201 	orr.w	r2, r3, #1
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	641a      	str	r2, [r3, #64]	; 0x40
 8000a3e:	e001      	b.n	8000a44 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000a40:	2301      	movs	r3, #1
 8000a42:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	2200      	movs	r2, #0
 8000a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3710      	adds	r7, #16
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	ffffeefd 	.word	0xffffeefd

08000a5c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b085      	sub	sp, #20
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
 8000a64:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8000a66:	2300      	movs	r3, #0
 8000a68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000a70:	2b01      	cmp	r3, #1
 8000a72:	d101      	bne.n	8000a78 <HAL_ADC_ConfigChannel+0x1c>
 8000a74:	2302      	movs	r3, #2
 8000a76:	e136      	b.n	8000ce6 <HAL_ADC_ConfigChannel+0x28a>
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	2b09      	cmp	r3, #9
 8000a86:	d93a      	bls.n	8000afe <HAL_ADC_ConfigChannel+0xa2>
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000a90:	d035      	beq.n	8000afe <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	68d9      	ldr	r1, [r3, #12]
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	b29b      	uxth	r3, r3
 8000a9e:	461a      	mov	r2, r3
 8000aa0:	4613      	mov	r3, r2
 8000aa2:	005b      	lsls	r3, r3, #1
 8000aa4:	4413      	add	r3, r2
 8000aa6:	3b1e      	subs	r3, #30
 8000aa8:	2207      	movs	r2, #7
 8000aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000aae:	43da      	mvns	r2, r3
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	400a      	ands	r2, r1
 8000ab6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a8d      	ldr	r2, [pc, #564]	; (8000cf4 <HAL_ADC_ConfigChannel+0x298>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d10a      	bne.n	8000ad8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	68d9      	ldr	r1, [r3, #12]
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	689b      	ldr	r3, [r3, #8]
 8000acc:	061a      	lsls	r2, r3, #24
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	430a      	orrs	r2, r1
 8000ad4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000ad6:	e035      	b.n	8000b44 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	68d9      	ldr	r1, [r3, #12]
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	689a      	ldr	r2, [r3, #8]
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	b29b      	uxth	r3, r3
 8000ae8:	4618      	mov	r0, r3
 8000aea:	4603      	mov	r3, r0
 8000aec:	005b      	lsls	r3, r3, #1
 8000aee:	4403      	add	r3, r0
 8000af0:	3b1e      	subs	r3, #30
 8000af2:	409a      	lsls	r2, r3
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	430a      	orrs	r2, r1
 8000afa:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000afc:	e022      	b.n	8000b44 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	6919      	ldr	r1, [r3, #16]
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	b29b      	uxth	r3, r3
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	4613      	mov	r3, r2
 8000b0e:	005b      	lsls	r3, r3, #1
 8000b10:	4413      	add	r3, r2
 8000b12:	2207      	movs	r2, #7
 8000b14:	fa02 f303 	lsl.w	r3, r2, r3
 8000b18:	43da      	mvns	r2, r3
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	400a      	ands	r2, r1
 8000b20:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	6919      	ldr	r1, [r3, #16]
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	689a      	ldr	r2, [r3, #8]
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	b29b      	uxth	r3, r3
 8000b32:	4618      	mov	r0, r3
 8000b34:	4603      	mov	r3, r0
 8000b36:	005b      	lsls	r3, r3, #1
 8000b38:	4403      	add	r3, r0
 8000b3a:	409a      	lsls	r2, r3
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	430a      	orrs	r2, r1
 8000b42:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	2b06      	cmp	r3, #6
 8000b4a:	d824      	bhi.n	8000b96 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	685a      	ldr	r2, [r3, #4]
 8000b56:	4613      	mov	r3, r2
 8000b58:	009b      	lsls	r3, r3, #2
 8000b5a:	4413      	add	r3, r2
 8000b5c:	3b05      	subs	r3, #5
 8000b5e:	221f      	movs	r2, #31
 8000b60:	fa02 f303 	lsl.w	r3, r2, r3
 8000b64:	43da      	mvns	r2, r3
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	400a      	ands	r2, r1
 8000b6c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	b29b      	uxth	r3, r3
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	685a      	ldr	r2, [r3, #4]
 8000b80:	4613      	mov	r3, r2
 8000b82:	009b      	lsls	r3, r3, #2
 8000b84:	4413      	add	r3, r2
 8000b86:	3b05      	subs	r3, #5
 8000b88:	fa00 f203 	lsl.w	r2, r0, r3
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	430a      	orrs	r2, r1
 8000b92:	635a      	str	r2, [r3, #52]	; 0x34
 8000b94:	e04c      	b.n	8000c30 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	2b0c      	cmp	r3, #12
 8000b9c:	d824      	bhi.n	8000be8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	685a      	ldr	r2, [r3, #4]
 8000ba8:	4613      	mov	r3, r2
 8000baa:	009b      	lsls	r3, r3, #2
 8000bac:	4413      	add	r3, r2
 8000bae:	3b23      	subs	r3, #35	; 0x23
 8000bb0:	221f      	movs	r2, #31
 8000bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb6:	43da      	mvns	r2, r3
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	400a      	ands	r2, r1
 8000bbe:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	b29b      	uxth	r3, r3
 8000bcc:	4618      	mov	r0, r3
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	685a      	ldr	r2, [r3, #4]
 8000bd2:	4613      	mov	r3, r2
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	4413      	add	r3, r2
 8000bd8:	3b23      	subs	r3, #35	; 0x23
 8000bda:	fa00 f203 	lsl.w	r2, r0, r3
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	430a      	orrs	r2, r1
 8000be4:	631a      	str	r2, [r3, #48]	; 0x30
 8000be6:	e023      	b.n	8000c30 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	685a      	ldr	r2, [r3, #4]
 8000bf2:	4613      	mov	r3, r2
 8000bf4:	009b      	lsls	r3, r3, #2
 8000bf6:	4413      	add	r3, r2
 8000bf8:	3b41      	subs	r3, #65	; 0x41
 8000bfa:	221f      	movs	r2, #31
 8000bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000c00:	43da      	mvns	r2, r3
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	400a      	ands	r2, r1
 8000c08:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	b29b      	uxth	r3, r3
 8000c16:	4618      	mov	r0, r3
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	685a      	ldr	r2, [r3, #4]
 8000c1c:	4613      	mov	r3, r2
 8000c1e:	009b      	lsls	r3, r3, #2
 8000c20:	4413      	add	r3, r2
 8000c22:	3b41      	subs	r3, #65	; 0x41
 8000c24:	fa00 f203 	lsl.w	r2, r0, r3
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	430a      	orrs	r2, r1
 8000c2e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a30      	ldr	r2, [pc, #192]	; (8000cf8 <HAL_ADC_ConfigChannel+0x29c>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d10a      	bne.n	8000c50 <HAL_ADC_ConfigChannel+0x1f4>
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c42:	d105      	bne.n	8000c50 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8000c44:	4b2d      	ldr	r3, [pc, #180]	; (8000cfc <HAL_ADC_ConfigChannel+0x2a0>)
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	4a2c      	ldr	r2, [pc, #176]	; (8000cfc <HAL_ADC_ConfigChannel+0x2a0>)
 8000c4a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000c4e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a28      	ldr	r2, [pc, #160]	; (8000cf8 <HAL_ADC_ConfigChannel+0x29c>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d10f      	bne.n	8000c7a <HAL_ADC_ConfigChannel+0x21e>
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	2b12      	cmp	r3, #18
 8000c60:	d10b      	bne.n	8000c7a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8000c62:	4b26      	ldr	r3, [pc, #152]	; (8000cfc <HAL_ADC_ConfigChannel+0x2a0>)
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	4a25      	ldr	r2, [pc, #148]	; (8000cfc <HAL_ADC_ConfigChannel+0x2a0>)
 8000c68:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000c6c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8000c6e:	4b23      	ldr	r3, [pc, #140]	; (8000cfc <HAL_ADC_ConfigChannel+0x2a0>)
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	4a22      	ldr	r2, [pc, #136]	; (8000cfc <HAL_ADC_ConfigChannel+0x2a0>)
 8000c74:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c78:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4a1e      	ldr	r2, [pc, #120]	; (8000cf8 <HAL_ADC_ConfigChannel+0x29c>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d12b      	bne.n	8000cdc <HAL_ADC_ConfigChannel+0x280>
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a1a      	ldr	r2, [pc, #104]	; (8000cf4 <HAL_ADC_ConfigChannel+0x298>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d003      	beq.n	8000c96 <HAL_ADC_ConfigChannel+0x23a>
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	2b11      	cmp	r3, #17
 8000c94:	d122      	bne.n	8000cdc <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8000c96:	4b19      	ldr	r3, [pc, #100]	; (8000cfc <HAL_ADC_ConfigChannel+0x2a0>)
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	4a18      	ldr	r2, [pc, #96]	; (8000cfc <HAL_ADC_ConfigChannel+0x2a0>)
 8000c9c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000ca0:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8000ca2:	4b16      	ldr	r3, [pc, #88]	; (8000cfc <HAL_ADC_ConfigChannel+0x2a0>)
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	4a15      	ldr	r2, [pc, #84]	; (8000cfc <HAL_ADC_ConfigChannel+0x2a0>)
 8000ca8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000cac:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4a10      	ldr	r2, [pc, #64]	; (8000cf4 <HAL_ADC_ConfigChannel+0x298>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d111      	bne.n	8000cdc <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8000cb8:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <HAL_ADC_ConfigChannel+0x2a4>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a11      	ldr	r2, [pc, #68]	; (8000d04 <HAL_ADC_ConfigChannel+0x2a8>)
 8000cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8000cc2:	0c9a      	lsrs	r2, r3, #18
 8000cc4:	4613      	mov	r3, r2
 8000cc6:	009b      	lsls	r3, r3, #2
 8000cc8:	4413      	add	r3, r2
 8000cca:	005b      	lsls	r3, r3, #1
 8000ccc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8000cce:	e002      	b.n	8000cd6 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	3b01      	subs	r3, #1
 8000cd4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d1f9      	bne.n	8000cd0 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2200      	movs	r2, #0
 8000ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000ce4:	2300      	movs	r3, #0
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3714      	adds	r7, #20
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	10000012 	.word	0x10000012
 8000cf8:	40012000 	.word	0x40012000
 8000cfc:	40012300 	.word	0x40012300
 8000d00:	20000000 	.word	0x20000000
 8000d04:	431bde83 	.word	0x431bde83

08000d08 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8000d10:	4b78      	ldr	r3, [pc, #480]	; (8000ef4 <ADC_Init+0x1ec>)
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	4a77      	ldr	r2, [pc, #476]	; (8000ef4 <ADC_Init+0x1ec>)
 8000d16:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000d1a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8000d1c:	4b75      	ldr	r3, [pc, #468]	; (8000ef4 <ADC_Init+0x1ec>)
 8000d1e:	685a      	ldr	r2, [r3, #4]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	4973      	ldr	r1, [pc, #460]	; (8000ef4 <ADC_Init+0x1ec>)
 8000d26:	4313      	orrs	r3, r2
 8000d28:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	685a      	ldr	r2, [r3, #4]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000d38:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	6859      	ldr	r1, [r3, #4]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	691b      	ldr	r3, [r3, #16]
 8000d44:	021a      	lsls	r2, r3, #8
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	430a      	orrs	r2, r1
 8000d4c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	685a      	ldr	r2, [r3, #4]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000d5c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	6859      	ldr	r1, [r3, #4]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	689a      	ldr	r2, [r3, #8]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	430a      	orrs	r2, r1
 8000d6e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	689a      	ldr	r2, [r3, #8]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000d7e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	6899      	ldr	r1, [r3, #8]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	68da      	ldr	r2, [r3, #12]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	430a      	orrs	r2, r1
 8000d90:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d96:	4a58      	ldr	r2, [pc, #352]	; (8000ef8 <ADC_Init+0x1f0>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d022      	beq.n	8000de2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	689a      	ldr	r2, [r3, #8]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000daa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	6899      	ldr	r1, [r3, #8]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	430a      	orrs	r2, r1
 8000dbc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	689a      	ldr	r2, [r3, #8]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000dcc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	6899      	ldr	r1, [r3, #8]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	430a      	orrs	r2, r1
 8000dde:	609a      	str	r2, [r3, #8]
 8000de0:	e00f      	b.n	8000e02 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	689a      	ldr	r2, [r3, #8]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000df0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	689a      	ldr	r2, [r3, #8]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000e00:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	689a      	ldr	r2, [r3, #8]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f022 0202 	bic.w	r2, r2, #2
 8000e10:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	6899      	ldr	r1, [r3, #8]
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	699b      	ldr	r3, [r3, #24]
 8000e1c:	005a      	lsls	r2, r3, #1
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	430a      	orrs	r2, r1
 8000e24:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d01b      	beq.n	8000e68 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	685a      	ldr	r2, [r3, #4]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000e3e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	685a      	ldr	r2, [r3, #4]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000e4e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	6859      	ldr	r1, [r3, #4]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e5a:	3b01      	subs	r3, #1
 8000e5c:	035a      	lsls	r2, r3, #13
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	430a      	orrs	r2, r1
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	e007      	b.n	8000e78 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	685a      	ldr	r2, [r3, #4]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000e76:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000e86:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	69db      	ldr	r3, [r3, #28]
 8000e92:	3b01      	subs	r3, #1
 8000e94:	051a      	lsls	r2, r3, #20
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	430a      	orrs	r2, r1
 8000e9c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	689a      	ldr	r2, [r3, #8]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000eac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	6899      	ldr	r1, [r3, #8]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000eba:	025a      	lsls	r2, r3, #9
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	689a      	ldr	r2, [r3, #8]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000ed2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	6899      	ldr	r1, [r3, #8]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	695b      	ldr	r3, [r3, #20]
 8000ede:	029a      	lsls	r2, r3, #10
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	430a      	orrs	r2, r1
 8000ee6:	609a      	str	r2, [r3, #8]
}
 8000ee8:	bf00      	nop
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr
 8000ef4:	40012300 	.word	0x40012300
 8000ef8:	0f000001 	.word	0x0f000001

08000efc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	f003 0307 	and.w	r3, r3, #7
 8000f0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f0c:	4b0b      	ldr	r3, [pc, #44]	; (8000f3c <__NVIC_SetPriorityGrouping+0x40>)
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f12:	68ba      	ldr	r2, [r7, #8]
 8000f14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f18:	4013      	ands	r3, r2
 8000f1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f24:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <__NVIC_SetPriorityGrouping+0x44>)
 8000f26:	4313      	orrs	r3, r2
 8000f28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f2a:	4a04      	ldr	r2, [pc, #16]	; (8000f3c <__NVIC_SetPriorityGrouping+0x40>)
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	60d3      	str	r3, [r2, #12]
}
 8000f30:	bf00      	nop
 8000f32:	3714      	adds	r7, #20
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	e000ed00 	.word	0xe000ed00
 8000f40:	05fa0000 	.word	0x05fa0000

08000f44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f48:	4b04      	ldr	r3, [pc, #16]	; (8000f5c <__NVIC_GetPriorityGrouping+0x18>)
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	0a1b      	lsrs	r3, r3, #8
 8000f4e:	f003 0307 	and.w	r3, r3, #7
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	e000ed00 	.word	0xe000ed00

08000f60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	6039      	str	r1, [r7, #0]
 8000f6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	db0a      	blt.n	8000f8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	b2da      	uxtb	r2, r3
 8000f78:	490c      	ldr	r1, [pc, #48]	; (8000fac <__NVIC_SetPriority+0x4c>)
 8000f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7e:	0112      	lsls	r2, r2, #4
 8000f80:	b2d2      	uxtb	r2, r2
 8000f82:	440b      	add	r3, r1
 8000f84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f88:	e00a      	b.n	8000fa0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	b2da      	uxtb	r2, r3
 8000f8e:	4908      	ldr	r1, [pc, #32]	; (8000fb0 <__NVIC_SetPriority+0x50>)
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	f003 030f 	and.w	r3, r3, #15
 8000f96:	3b04      	subs	r3, #4
 8000f98:	0112      	lsls	r2, r2, #4
 8000f9a:	b2d2      	uxtb	r2, r2
 8000f9c:	440b      	add	r3, r1
 8000f9e:	761a      	strb	r2, [r3, #24]
}
 8000fa0:	bf00      	nop
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	e000e100 	.word	0xe000e100
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b089      	sub	sp, #36	; 0x24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	f003 0307 	and.w	r3, r3, #7
 8000fc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	f1c3 0307 	rsb	r3, r3, #7
 8000fce:	2b04      	cmp	r3, #4
 8000fd0:	bf28      	it	cs
 8000fd2:	2304      	movcs	r3, #4
 8000fd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	3304      	adds	r3, #4
 8000fda:	2b06      	cmp	r3, #6
 8000fdc:	d902      	bls.n	8000fe4 <NVIC_EncodePriority+0x30>
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	3b03      	subs	r3, #3
 8000fe2:	e000      	b.n	8000fe6 <NVIC_EncodePriority+0x32>
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fec:	69bb      	ldr	r3, [r7, #24]
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	43da      	mvns	r2, r3
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	401a      	ands	r2, r3
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ffc:	f04f 31ff 	mov.w	r1, #4294967295
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	fa01 f303 	lsl.w	r3, r1, r3
 8001006:	43d9      	mvns	r1, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800100c:	4313      	orrs	r3, r2
         );
}
 800100e:	4618      	mov	r0, r3
 8001010:	3724      	adds	r7, #36	; 0x24
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
	...

0800101c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	3b01      	subs	r3, #1
 8001028:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800102c:	d301      	bcc.n	8001032 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800102e:	2301      	movs	r3, #1
 8001030:	e00f      	b.n	8001052 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001032:	4a0a      	ldr	r2, [pc, #40]	; (800105c <SysTick_Config+0x40>)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	3b01      	subs	r3, #1
 8001038:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800103a:	210f      	movs	r1, #15
 800103c:	f04f 30ff 	mov.w	r0, #4294967295
 8001040:	f7ff ff8e 	bl	8000f60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001044:	4b05      	ldr	r3, [pc, #20]	; (800105c <SysTick_Config+0x40>)
 8001046:	2200      	movs	r2, #0
 8001048:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800104a:	4b04      	ldr	r3, [pc, #16]	; (800105c <SysTick_Config+0x40>)
 800104c:	2207      	movs	r2, #7
 800104e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001050:	2300      	movs	r3, #0
}
 8001052:	4618      	mov	r0, r3
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	e000e010 	.word	0xe000e010

08001060 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f7ff ff47 	bl	8000efc <__NVIC_SetPriorityGrouping>
}
 800106e:	bf00      	nop
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001076:	b580      	push	{r7, lr}
 8001078:	b086      	sub	sp, #24
 800107a:	af00      	add	r7, sp, #0
 800107c:	4603      	mov	r3, r0
 800107e:	60b9      	str	r1, [r7, #8]
 8001080:	607a      	str	r2, [r7, #4]
 8001082:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001088:	f7ff ff5c 	bl	8000f44 <__NVIC_GetPriorityGrouping>
 800108c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800108e:	687a      	ldr	r2, [r7, #4]
 8001090:	68b9      	ldr	r1, [r7, #8]
 8001092:	6978      	ldr	r0, [r7, #20]
 8001094:	f7ff ff8e 	bl	8000fb4 <NVIC_EncodePriority>
 8001098:	4602      	mov	r2, r0
 800109a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800109e:	4611      	mov	r1, r2
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff ff5d 	bl	8000f60 <__NVIC_SetPriority>
}
 80010a6:	bf00      	nop
 80010a8:	3718      	adds	r7, #24
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b082      	sub	sp, #8
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f7ff ffb0 	bl	800101c <SysTick_Config>
 80010bc:	4603      	mov	r3, r0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
	...

080010c8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80010cc:	f3bf 8f5f 	dmb	sy
}
 80010d0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80010d2:	4b07      	ldr	r3, [pc, #28]	; (80010f0 <HAL_MPU_Disable+0x28>)
 80010d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d6:	4a06      	ldr	r2, [pc, #24]	; (80010f0 <HAL_MPU_Disable+0x28>)
 80010d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010dc:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80010de:	4b05      	ldr	r3, [pc, #20]	; (80010f4 <HAL_MPU_Disable+0x2c>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	605a      	str	r2, [r3, #4]
}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	e000ed00 	.word	0xe000ed00
 80010f4:	e000ed90 	.word	0xe000ed90

080010f8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001100:	4a0b      	ldr	r2, [pc, #44]	; (8001130 <HAL_MPU_Enable+0x38>)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f043 0301 	orr.w	r3, r3, #1
 8001108:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800110a:	4b0a      	ldr	r3, [pc, #40]	; (8001134 <HAL_MPU_Enable+0x3c>)
 800110c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800110e:	4a09      	ldr	r2, [pc, #36]	; (8001134 <HAL_MPU_Enable+0x3c>)
 8001110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001114:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001116:	f3bf 8f4f 	dsb	sy
}
 800111a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800111c:	f3bf 8f6f 	isb	sy
}
 8001120:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001122:	bf00      	nop
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	e000ed90 	.word	0xe000ed90
 8001134:	e000ed00 	.word	0xe000ed00

08001138 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	785a      	ldrb	r2, [r3, #1]
 8001144:	4b1d      	ldr	r3, [pc, #116]	; (80011bc <HAL_MPU_ConfigRegion+0x84>)
 8001146:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d029      	beq.n	80011a4 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8001150:	4a1a      	ldr	r2, [pc, #104]	; (80011bc <HAL_MPU_ConfigRegion+0x84>)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	7b1b      	ldrb	r3, [r3, #12]
 800115c:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	7adb      	ldrb	r3, [r3, #11]
 8001162:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001164:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	7a9b      	ldrb	r3, [r3, #10]
 800116a:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800116c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	7b5b      	ldrb	r3, [r3, #13]
 8001172:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001174:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	7b9b      	ldrb	r3, [r3, #14]
 800117a:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800117c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	7bdb      	ldrb	r3, [r3, #15]
 8001182:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001184:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	7a5b      	ldrb	r3, [r3, #9]
 800118a:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800118c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	7a1b      	ldrb	r3, [r3, #8]
 8001192:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001194:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	7812      	ldrb	r2, [r2, #0]
 800119a:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800119c:	4a07      	ldr	r2, [pc, #28]	; (80011bc <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800119e:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80011a0:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80011a2:	e005      	b.n	80011b0 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80011a4:	4b05      	ldr	r3, [pc, #20]	; (80011bc <HAL_MPU_ConfigRegion+0x84>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80011aa:	4b04      	ldr	r3, [pc, #16]	; (80011bc <HAL_MPU_ConfigRegion+0x84>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	611a      	str	r2, [r3, #16]
}
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	e000ed90 	.word	0xe000ed90

080011c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b089      	sub	sp, #36	; 0x24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80011ca:	2300      	movs	r3, #0
 80011cc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80011ce:	2300      	movs	r3, #0
 80011d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80011d2:	2300      	movs	r3, #0
 80011d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80011d6:	2300      	movs	r3, #0
 80011d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80011da:	2300      	movs	r3, #0
 80011dc:	61fb      	str	r3, [r7, #28]
 80011de:	e175      	b.n	80014cc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80011e0:	2201      	movs	r2, #1
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	697a      	ldr	r2, [r7, #20]
 80011f0:	4013      	ands	r3, r2
 80011f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011f4:	693a      	ldr	r2, [r7, #16]
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	f040 8164 	bne.w	80014c6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f003 0303 	and.w	r3, r3, #3
 8001206:	2b01      	cmp	r3, #1
 8001208:	d005      	beq.n	8001216 <HAL_GPIO_Init+0x56>
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f003 0303 	and.w	r3, r3, #3
 8001212:	2b02      	cmp	r3, #2
 8001214:	d130      	bne.n	8001278 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	2203      	movs	r2, #3
 8001222:	fa02 f303 	lsl.w	r3, r2, r3
 8001226:	43db      	mvns	r3, r3
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	4013      	ands	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	68da      	ldr	r2, [r3, #12]
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	4313      	orrs	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	69ba      	ldr	r2, [r7, #24]
 8001244:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800124c:	2201      	movs	r2, #1
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	43db      	mvns	r3, r3
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	4013      	ands	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	091b      	lsrs	r3, r3, #4
 8001262:	f003 0201 	and.w	r2, r3, #1
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	4313      	orrs	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f003 0303 	and.w	r3, r3, #3
 8001280:	2b03      	cmp	r3, #3
 8001282:	d017      	beq.n	80012b4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	2203      	movs	r2, #3
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	43db      	mvns	r3, r3
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	4013      	ands	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	689a      	ldr	r2, [r3, #8]
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f003 0303 	and.w	r3, r3, #3
 80012bc:	2b02      	cmp	r3, #2
 80012be:	d123      	bne.n	8001308 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	08da      	lsrs	r2, r3, #3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	3208      	adds	r2, #8
 80012c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	f003 0307 	and.w	r3, r3, #7
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	220f      	movs	r2, #15
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	43db      	mvns	r3, r3
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	4013      	ands	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	691a      	ldr	r2, [r3, #16]
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	f003 0307 	and.w	r3, r3, #7
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	08da      	lsrs	r2, r3, #3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	3208      	adds	r2, #8
 8001302:	69b9      	ldr	r1, [r7, #24]
 8001304:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	2203      	movs	r2, #3
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	43db      	mvns	r3, r3
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	4013      	ands	r3, r2
 800131e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f003 0203 	and.w	r2, r3, #3
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	4313      	orrs	r3, r2
 8001334:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001344:	2b00      	cmp	r3, #0
 8001346:	f000 80be 	beq.w	80014c6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800134a:	4b66      	ldr	r3, [pc, #408]	; (80014e4 <HAL_GPIO_Init+0x324>)
 800134c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134e:	4a65      	ldr	r2, [pc, #404]	; (80014e4 <HAL_GPIO_Init+0x324>)
 8001350:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001354:	6453      	str	r3, [r2, #68]	; 0x44
 8001356:	4b63      	ldr	r3, [pc, #396]	; (80014e4 <HAL_GPIO_Init+0x324>)
 8001358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001362:	4a61      	ldr	r2, [pc, #388]	; (80014e8 <HAL_GPIO_Init+0x328>)
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	089b      	lsrs	r3, r3, #2
 8001368:	3302      	adds	r3, #2
 800136a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800136e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	f003 0303 	and.w	r3, r3, #3
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	220f      	movs	r2, #15
 800137a:	fa02 f303 	lsl.w	r3, r2, r3
 800137e:	43db      	mvns	r3, r3
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	4013      	ands	r3, r2
 8001384:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a58      	ldr	r2, [pc, #352]	; (80014ec <HAL_GPIO_Init+0x32c>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d037      	beq.n	80013fe <HAL_GPIO_Init+0x23e>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a57      	ldr	r2, [pc, #348]	; (80014f0 <HAL_GPIO_Init+0x330>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d031      	beq.n	80013fa <HAL_GPIO_Init+0x23a>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a56      	ldr	r2, [pc, #344]	; (80014f4 <HAL_GPIO_Init+0x334>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d02b      	beq.n	80013f6 <HAL_GPIO_Init+0x236>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a55      	ldr	r2, [pc, #340]	; (80014f8 <HAL_GPIO_Init+0x338>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d025      	beq.n	80013f2 <HAL_GPIO_Init+0x232>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a54      	ldr	r2, [pc, #336]	; (80014fc <HAL_GPIO_Init+0x33c>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d01f      	beq.n	80013ee <HAL_GPIO_Init+0x22e>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a53      	ldr	r2, [pc, #332]	; (8001500 <HAL_GPIO_Init+0x340>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d019      	beq.n	80013ea <HAL_GPIO_Init+0x22a>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a52      	ldr	r2, [pc, #328]	; (8001504 <HAL_GPIO_Init+0x344>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d013      	beq.n	80013e6 <HAL_GPIO_Init+0x226>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a51      	ldr	r2, [pc, #324]	; (8001508 <HAL_GPIO_Init+0x348>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d00d      	beq.n	80013e2 <HAL_GPIO_Init+0x222>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a50      	ldr	r2, [pc, #320]	; (800150c <HAL_GPIO_Init+0x34c>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d007      	beq.n	80013de <HAL_GPIO_Init+0x21e>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a4f      	ldr	r2, [pc, #316]	; (8001510 <HAL_GPIO_Init+0x350>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d101      	bne.n	80013da <HAL_GPIO_Init+0x21a>
 80013d6:	2309      	movs	r3, #9
 80013d8:	e012      	b.n	8001400 <HAL_GPIO_Init+0x240>
 80013da:	230a      	movs	r3, #10
 80013dc:	e010      	b.n	8001400 <HAL_GPIO_Init+0x240>
 80013de:	2308      	movs	r3, #8
 80013e0:	e00e      	b.n	8001400 <HAL_GPIO_Init+0x240>
 80013e2:	2307      	movs	r3, #7
 80013e4:	e00c      	b.n	8001400 <HAL_GPIO_Init+0x240>
 80013e6:	2306      	movs	r3, #6
 80013e8:	e00a      	b.n	8001400 <HAL_GPIO_Init+0x240>
 80013ea:	2305      	movs	r3, #5
 80013ec:	e008      	b.n	8001400 <HAL_GPIO_Init+0x240>
 80013ee:	2304      	movs	r3, #4
 80013f0:	e006      	b.n	8001400 <HAL_GPIO_Init+0x240>
 80013f2:	2303      	movs	r3, #3
 80013f4:	e004      	b.n	8001400 <HAL_GPIO_Init+0x240>
 80013f6:	2302      	movs	r3, #2
 80013f8:	e002      	b.n	8001400 <HAL_GPIO_Init+0x240>
 80013fa:	2301      	movs	r3, #1
 80013fc:	e000      	b.n	8001400 <HAL_GPIO_Init+0x240>
 80013fe:	2300      	movs	r3, #0
 8001400:	69fa      	ldr	r2, [r7, #28]
 8001402:	f002 0203 	and.w	r2, r2, #3
 8001406:	0092      	lsls	r2, r2, #2
 8001408:	4093      	lsls	r3, r2
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	4313      	orrs	r3, r2
 800140e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001410:	4935      	ldr	r1, [pc, #212]	; (80014e8 <HAL_GPIO_Init+0x328>)
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	089b      	lsrs	r3, r3, #2
 8001416:	3302      	adds	r3, #2
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800141e:	4b3d      	ldr	r3, [pc, #244]	; (8001514 <HAL_GPIO_Init+0x354>)
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	43db      	mvns	r3, r3
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	4013      	ands	r3, r2
 800142c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d003      	beq.n	8001442 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	4313      	orrs	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001442:	4a34      	ldr	r2, [pc, #208]	; (8001514 <HAL_GPIO_Init+0x354>)
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001448:	4b32      	ldr	r3, [pc, #200]	; (8001514 <HAL_GPIO_Init+0x354>)
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	43db      	mvns	r3, r3
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	4013      	ands	r3, r2
 8001456:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001460:	2b00      	cmp	r3, #0
 8001462:	d003      	beq.n	800146c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	4313      	orrs	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800146c:	4a29      	ldr	r2, [pc, #164]	; (8001514 <HAL_GPIO_Init+0x354>)
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001472:	4b28      	ldr	r3, [pc, #160]	; (8001514 <HAL_GPIO_Init+0x354>)
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	43db      	mvns	r3, r3
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	4013      	ands	r3, r2
 8001480:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d003      	beq.n	8001496 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800148e:	69ba      	ldr	r2, [r7, #24]
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	4313      	orrs	r3, r2
 8001494:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001496:	4a1f      	ldr	r2, [pc, #124]	; (8001514 <HAL_GPIO_Init+0x354>)
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800149c:	4b1d      	ldr	r3, [pc, #116]	; (8001514 <HAL_GPIO_Init+0x354>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	43db      	mvns	r3, r3
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	4013      	ands	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d003      	beq.n	80014c0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	4313      	orrs	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014c0:	4a14      	ldr	r2, [pc, #80]	; (8001514 <HAL_GPIO_Init+0x354>)
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	3301      	adds	r3, #1
 80014ca:	61fb      	str	r3, [r7, #28]
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	2b0f      	cmp	r3, #15
 80014d0:	f67f ae86 	bls.w	80011e0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80014d4:	bf00      	nop
 80014d6:	bf00      	nop
 80014d8:	3724      	adds	r7, #36	; 0x24
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	40023800 	.word	0x40023800
 80014e8:	40013800 	.word	0x40013800
 80014ec:	40020000 	.word	0x40020000
 80014f0:	40020400 	.word	0x40020400
 80014f4:	40020800 	.word	0x40020800
 80014f8:	40020c00 	.word	0x40020c00
 80014fc:	40021000 	.word	0x40021000
 8001500:	40021400 	.word	0x40021400
 8001504:	40021800 	.word	0x40021800
 8001508:	40021c00 	.word	0x40021c00
 800150c:	40022000 	.word	0x40022000
 8001510:	40022400 	.word	0x40022400
 8001514:	40013c00 	.word	0x40013c00

08001518 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001520:	2300      	movs	r3, #0
 8001522:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d101      	bne.n	800152e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e291      	b.n	8001a52 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	2b00      	cmp	r3, #0
 8001538:	f000 8087 	beq.w	800164a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800153c:	4b96      	ldr	r3, [pc, #600]	; (8001798 <HAL_RCC_OscConfig+0x280>)
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	f003 030c 	and.w	r3, r3, #12
 8001544:	2b04      	cmp	r3, #4
 8001546:	d00c      	beq.n	8001562 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001548:	4b93      	ldr	r3, [pc, #588]	; (8001798 <HAL_RCC_OscConfig+0x280>)
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	f003 030c 	and.w	r3, r3, #12
 8001550:	2b08      	cmp	r3, #8
 8001552:	d112      	bne.n	800157a <HAL_RCC_OscConfig+0x62>
 8001554:	4b90      	ldr	r3, [pc, #576]	; (8001798 <HAL_RCC_OscConfig+0x280>)
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800155c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001560:	d10b      	bne.n	800157a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001562:	4b8d      	ldr	r3, [pc, #564]	; (8001798 <HAL_RCC_OscConfig+0x280>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d06c      	beq.n	8001648 <HAL_RCC_OscConfig+0x130>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d168      	bne.n	8001648 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e26b      	b.n	8001a52 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001582:	d106      	bne.n	8001592 <HAL_RCC_OscConfig+0x7a>
 8001584:	4b84      	ldr	r3, [pc, #528]	; (8001798 <HAL_RCC_OscConfig+0x280>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a83      	ldr	r2, [pc, #524]	; (8001798 <HAL_RCC_OscConfig+0x280>)
 800158a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800158e:	6013      	str	r3, [r2, #0]
 8001590:	e02e      	b.n	80015f0 <HAL_RCC_OscConfig+0xd8>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d10c      	bne.n	80015b4 <HAL_RCC_OscConfig+0x9c>
 800159a:	4b7f      	ldr	r3, [pc, #508]	; (8001798 <HAL_RCC_OscConfig+0x280>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a7e      	ldr	r2, [pc, #504]	; (8001798 <HAL_RCC_OscConfig+0x280>)
 80015a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015a4:	6013      	str	r3, [r2, #0]
 80015a6:	4b7c      	ldr	r3, [pc, #496]	; (8001798 <HAL_RCC_OscConfig+0x280>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a7b      	ldr	r2, [pc, #492]	; (8001798 <HAL_RCC_OscConfig+0x280>)
 80015ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015b0:	6013      	str	r3, [r2, #0]
 80015b2:	e01d      	b.n	80015f0 <HAL_RCC_OscConfig+0xd8>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015bc:	d10c      	bne.n	80015d8 <HAL_RCC_OscConfig+0xc0>
 80015be:	4b76      	ldr	r3, [pc, #472]	; (8001798 <HAL_RCC_OscConfig+0x280>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a75      	ldr	r2, [pc, #468]	; (8001798 <HAL_RCC_OscConfig+0x280>)
 80015c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015c8:	6013      	str	r3, [r2, #0]
 80015ca:	4b73      	ldr	r3, [pc, #460]	; (8001798 <HAL_RCC_OscConfig+0x280>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a72      	ldr	r2, [pc, #456]	; (8001798 <HAL_RCC_OscConfig+0x280>)
 80015d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015d4:	6013      	str	r3, [r2, #0]
 80015d6:	e00b      	b.n	80015f0 <HAL_RCC_OscConfig+0xd8>
 80015d8:	4b6f      	ldr	r3, [pc, #444]	; (8001798 <HAL_RCC_OscConfig+0x280>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a6e      	ldr	r2, [pc, #440]	; (8001798 <HAL_RCC_OscConfig+0x280>)
 80015de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015e2:	6013      	str	r3, [r2, #0]
 80015e4:	4b6c      	ldr	r3, [pc, #432]	; (8001798 <HAL_RCC_OscConfig+0x280>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a6b      	ldr	r2, [pc, #428]	; (8001798 <HAL_RCC_OscConfig+0x280>)
 80015ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d013      	beq.n	8001620 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f8:	f7ff f9e0 	bl	80009bc <HAL_GetTick>
 80015fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015fe:	e008      	b.n	8001612 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001600:	f7ff f9dc 	bl	80009bc <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	2b64      	cmp	r3, #100	; 0x64
 800160c:	d901      	bls.n	8001612 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e21f      	b.n	8001a52 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001612:	4b61      	ldr	r3, [pc, #388]	; (8001798 <HAL_RCC_OscConfig+0x280>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d0f0      	beq.n	8001600 <HAL_RCC_OscConfig+0xe8>
 800161e:	e014      	b.n	800164a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001620:	f7ff f9cc 	bl	80009bc <HAL_GetTick>
 8001624:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001626:	e008      	b.n	800163a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001628:	f7ff f9c8 	bl	80009bc <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	2b64      	cmp	r3, #100	; 0x64
 8001634:	d901      	bls.n	800163a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e20b      	b.n	8001a52 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800163a:	4b57      	ldr	r3, [pc, #348]	; (8001798 <HAL_RCC_OscConfig+0x280>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d1f0      	bne.n	8001628 <HAL_RCC_OscConfig+0x110>
 8001646:	e000      	b.n	800164a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001648:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	2b00      	cmp	r3, #0
 8001654:	d069      	beq.n	800172a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001656:	4b50      	ldr	r3, [pc, #320]	; (8001798 <HAL_RCC_OscConfig+0x280>)
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	f003 030c 	and.w	r3, r3, #12
 800165e:	2b00      	cmp	r3, #0
 8001660:	d00b      	beq.n	800167a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001662:	4b4d      	ldr	r3, [pc, #308]	; (8001798 <HAL_RCC_OscConfig+0x280>)
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	f003 030c 	and.w	r3, r3, #12
 800166a:	2b08      	cmp	r3, #8
 800166c:	d11c      	bne.n	80016a8 <HAL_RCC_OscConfig+0x190>
 800166e:	4b4a      	ldr	r3, [pc, #296]	; (8001798 <HAL_RCC_OscConfig+0x280>)
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d116      	bne.n	80016a8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800167a:	4b47      	ldr	r3, [pc, #284]	; (8001798 <HAL_RCC_OscConfig+0x280>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	2b00      	cmp	r3, #0
 8001684:	d005      	beq.n	8001692 <HAL_RCC_OscConfig+0x17a>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	68db      	ldr	r3, [r3, #12]
 800168a:	2b01      	cmp	r3, #1
 800168c:	d001      	beq.n	8001692 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e1df      	b.n	8001a52 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001692:	4b41      	ldr	r3, [pc, #260]	; (8001798 <HAL_RCC_OscConfig+0x280>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	691b      	ldr	r3, [r3, #16]
 800169e:	00db      	lsls	r3, r3, #3
 80016a0:	493d      	ldr	r1, [pc, #244]	; (8001798 <HAL_RCC_OscConfig+0x280>)
 80016a2:	4313      	orrs	r3, r2
 80016a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016a6:	e040      	b.n	800172a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d023      	beq.n	80016f8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016b0:	4b39      	ldr	r3, [pc, #228]	; (8001798 <HAL_RCC_OscConfig+0x280>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a38      	ldr	r2, [pc, #224]	; (8001798 <HAL_RCC_OscConfig+0x280>)
 80016b6:	f043 0301 	orr.w	r3, r3, #1
 80016ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016bc:	f7ff f97e 	bl	80009bc <HAL_GetTick>
 80016c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016c2:	e008      	b.n	80016d6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016c4:	f7ff f97a 	bl	80009bc <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e1bd      	b.n	8001a52 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016d6:	4b30      	ldr	r3, [pc, #192]	; (8001798 <HAL_RCC_OscConfig+0x280>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d0f0      	beq.n	80016c4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016e2:	4b2d      	ldr	r3, [pc, #180]	; (8001798 <HAL_RCC_OscConfig+0x280>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	691b      	ldr	r3, [r3, #16]
 80016ee:	00db      	lsls	r3, r3, #3
 80016f0:	4929      	ldr	r1, [pc, #164]	; (8001798 <HAL_RCC_OscConfig+0x280>)
 80016f2:	4313      	orrs	r3, r2
 80016f4:	600b      	str	r3, [r1, #0]
 80016f6:	e018      	b.n	800172a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016f8:	4b27      	ldr	r3, [pc, #156]	; (8001798 <HAL_RCC_OscConfig+0x280>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a26      	ldr	r2, [pc, #152]	; (8001798 <HAL_RCC_OscConfig+0x280>)
 80016fe:	f023 0301 	bic.w	r3, r3, #1
 8001702:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001704:	f7ff f95a 	bl	80009bc <HAL_GetTick>
 8001708:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800170a:	e008      	b.n	800171e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800170c:	f7ff f956 	bl	80009bc <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b02      	cmp	r3, #2
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e199      	b.n	8001a52 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800171e:	4b1e      	ldr	r3, [pc, #120]	; (8001798 <HAL_RCC_OscConfig+0x280>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	2b00      	cmp	r3, #0
 8001728:	d1f0      	bne.n	800170c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0308 	and.w	r3, r3, #8
 8001732:	2b00      	cmp	r3, #0
 8001734:	d038      	beq.n	80017a8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	695b      	ldr	r3, [r3, #20]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d019      	beq.n	8001772 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800173e:	4b16      	ldr	r3, [pc, #88]	; (8001798 <HAL_RCC_OscConfig+0x280>)
 8001740:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001742:	4a15      	ldr	r2, [pc, #84]	; (8001798 <HAL_RCC_OscConfig+0x280>)
 8001744:	f043 0301 	orr.w	r3, r3, #1
 8001748:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800174a:	f7ff f937 	bl	80009bc <HAL_GetTick>
 800174e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001750:	e008      	b.n	8001764 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001752:	f7ff f933 	bl	80009bc <HAL_GetTick>
 8001756:	4602      	mov	r2, r0
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	2b02      	cmp	r3, #2
 800175e:	d901      	bls.n	8001764 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001760:	2303      	movs	r3, #3
 8001762:	e176      	b.n	8001a52 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001764:	4b0c      	ldr	r3, [pc, #48]	; (8001798 <HAL_RCC_OscConfig+0x280>)
 8001766:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001768:	f003 0302 	and.w	r3, r3, #2
 800176c:	2b00      	cmp	r3, #0
 800176e:	d0f0      	beq.n	8001752 <HAL_RCC_OscConfig+0x23a>
 8001770:	e01a      	b.n	80017a8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001772:	4b09      	ldr	r3, [pc, #36]	; (8001798 <HAL_RCC_OscConfig+0x280>)
 8001774:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001776:	4a08      	ldr	r2, [pc, #32]	; (8001798 <HAL_RCC_OscConfig+0x280>)
 8001778:	f023 0301 	bic.w	r3, r3, #1
 800177c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800177e:	f7ff f91d 	bl	80009bc <HAL_GetTick>
 8001782:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001784:	e00a      	b.n	800179c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001786:	f7ff f919 	bl	80009bc <HAL_GetTick>
 800178a:	4602      	mov	r2, r0
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	2b02      	cmp	r3, #2
 8001792:	d903      	bls.n	800179c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	e15c      	b.n	8001a52 <HAL_RCC_OscConfig+0x53a>
 8001798:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800179c:	4b91      	ldr	r3, [pc, #580]	; (80019e4 <HAL_RCC_OscConfig+0x4cc>)
 800179e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017a0:	f003 0302 	and.w	r3, r3, #2
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d1ee      	bne.n	8001786 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0304 	and.w	r3, r3, #4
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	f000 80a4 	beq.w	80018fe <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017b6:	4b8b      	ldr	r3, [pc, #556]	; (80019e4 <HAL_RCC_OscConfig+0x4cc>)
 80017b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d10d      	bne.n	80017de <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80017c2:	4b88      	ldr	r3, [pc, #544]	; (80019e4 <HAL_RCC_OscConfig+0x4cc>)
 80017c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c6:	4a87      	ldr	r2, [pc, #540]	; (80019e4 <HAL_RCC_OscConfig+0x4cc>)
 80017c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017cc:	6413      	str	r3, [r2, #64]	; 0x40
 80017ce:	4b85      	ldr	r3, [pc, #532]	; (80019e4 <HAL_RCC_OscConfig+0x4cc>)
 80017d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017d6:	60bb      	str	r3, [r7, #8]
 80017d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017da:	2301      	movs	r3, #1
 80017dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017de:	4b82      	ldr	r3, [pc, #520]	; (80019e8 <HAL_RCC_OscConfig+0x4d0>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d118      	bne.n	800181c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80017ea:	4b7f      	ldr	r3, [pc, #508]	; (80019e8 <HAL_RCC_OscConfig+0x4d0>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a7e      	ldr	r2, [pc, #504]	; (80019e8 <HAL_RCC_OscConfig+0x4d0>)
 80017f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017f6:	f7ff f8e1 	bl	80009bc <HAL_GetTick>
 80017fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017fc:	e008      	b.n	8001810 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017fe:	f7ff f8dd 	bl	80009bc <HAL_GetTick>
 8001802:	4602      	mov	r2, r0
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	2b64      	cmp	r3, #100	; 0x64
 800180a:	d901      	bls.n	8001810 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800180c:	2303      	movs	r3, #3
 800180e:	e120      	b.n	8001a52 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001810:	4b75      	ldr	r3, [pc, #468]	; (80019e8 <HAL_RCC_OscConfig+0x4d0>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001818:	2b00      	cmp	r3, #0
 800181a:	d0f0      	beq.n	80017fe <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	2b01      	cmp	r3, #1
 8001822:	d106      	bne.n	8001832 <HAL_RCC_OscConfig+0x31a>
 8001824:	4b6f      	ldr	r3, [pc, #444]	; (80019e4 <HAL_RCC_OscConfig+0x4cc>)
 8001826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001828:	4a6e      	ldr	r2, [pc, #440]	; (80019e4 <HAL_RCC_OscConfig+0x4cc>)
 800182a:	f043 0301 	orr.w	r3, r3, #1
 800182e:	6713      	str	r3, [r2, #112]	; 0x70
 8001830:	e02d      	b.n	800188e <HAL_RCC_OscConfig+0x376>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d10c      	bne.n	8001854 <HAL_RCC_OscConfig+0x33c>
 800183a:	4b6a      	ldr	r3, [pc, #424]	; (80019e4 <HAL_RCC_OscConfig+0x4cc>)
 800183c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800183e:	4a69      	ldr	r2, [pc, #420]	; (80019e4 <HAL_RCC_OscConfig+0x4cc>)
 8001840:	f023 0301 	bic.w	r3, r3, #1
 8001844:	6713      	str	r3, [r2, #112]	; 0x70
 8001846:	4b67      	ldr	r3, [pc, #412]	; (80019e4 <HAL_RCC_OscConfig+0x4cc>)
 8001848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800184a:	4a66      	ldr	r2, [pc, #408]	; (80019e4 <HAL_RCC_OscConfig+0x4cc>)
 800184c:	f023 0304 	bic.w	r3, r3, #4
 8001850:	6713      	str	r3, [r2, #112]	; 0x70
 8001852:	e01c      	b.n	800188e <HAL_RCC_OscConfig+0x376>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	2b05      	cmp	r3, #5
 800185a:	d10c      	bne.n	8001876 <HAL_RCC_OscConfig+0x35e>
 800185c:	4b61      	ldr	r3, [pc, #388]	; (80019e4 <HAL_RCC_OscConfig+0x4cc>)
 800185e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001860:	4a60      	ldr	r2, [pc, #384]	; (80019e4 <HAL_RCC_OscConfig+0x4cc>)
 8001862:	f043 0304 	orr.w	r3, r3, #4
 8001866:	6713      	str	r3, [r2, #112]	; 0x70
 8001868:	4b5e      	ldr	r3, [pc, #376]	; (80019e4 <HAL_RCC_OscConfig+0x4cc>)
 800186a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800186c:	4a5d      	ldr	r2, [pc, #372]	; (80019e4 <HAL_RCC_OscConfig+0x4cc>)
 800186e:	f043 0301 	orr.w	r3, r3, #1
 8001872:	6713      	str	r3, [r2, #112]	; 0x70
 8001874:	e00b      	b.n	800188e <HAL_RCC_OscConfig+0x376>
 8001876:	4b5b      	ldr	r3, [pc, #364]	; (80019e4 <HAL_RCC_OscConfig+0x4cc>)
 8001878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800187a:	4a5a      	ldr	r2, [pc, #360]	; (80019e4 <HAL_RCC_OscConfig+0x4cc>)
 800187c:	f023 0301 	bic.w	r3, r3, #1
 8001880:	6713      	str	r3, [r2, #112]	; 0x70
 8001882:	4b58      	ldr	r3, [pc, #352]	; (80019e4 <HAL_RCC_OscConfig+0x4cc>)
 8001884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001886:	4a57      	ldr	r2, [pc, #348]	; (80019e4 <HAL_RCC_OscConfig+0x4cc>)
 8001888:	f023 0304 	bic.w	r3, r3, #4
 800188c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d015      	beq.n	80018c2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001896:	f7ff f891 	bl	80009bc <HAL_GetTick>
 800189a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800189c:	e00a      	b.n	80018b4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800189e:	f7ff f88d 	bl	80009bc <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d901      	bls.n	80018b4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e0ce      	b.n	8001a52 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018b4:	4b4b      	ldr	r3, [pc, #300]	; (80019e4 <HAL_RCC_OscConfig+0x4cc>)
 80018b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b8:	f003 0302 	and.w	r3, r3, #2
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d0ee      	beq.n	800189e <HAL_RCC_OscConfig+0x386>
 80018c0:	e014      	b.n	80018ec <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018c2:	f7ff f87b 	bl	80009bc <HAL_GetTick>
 80018c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018c8:	e00a      	b.n	80018e0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018ca:	f7ff f877 	bl	80009bc <HAL_GetTick>
 80018ce:	4602      	mov	r2, r0
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80018d8:	4293      	cmp	r3, r2
 80018da:	d901      	bls.n	80018e0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e0b8      	b.n	8001a52 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018e0:	4b40      	ldr	r3, [pc, #256]	; (80019e4 <HAL_RCC_OscConfig+0x4cc>)
 80018e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018e4:	f003 0302 	and.w	r3, r3, #2
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d1ee      	bne.n	80018ca <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80018ec:	7dfb      	ldrb	r3, [r7, #23]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d105      	bne.n	80018fe <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018f2:	4b3c      	ldr	r3, [pc, #240]	; (80019e4 <HAL_RCC_OscConfig+0x4cc>)
 80018f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f6:	4a3b      	ldr	r2, [pc, #236]	; (80019e4 <HAL_RCC_OscConfig+0x4cc>)
 80018f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018fc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	699b      	ldr	r3, [r3, #24]
 8001902:	2b00      	cmp	r3, #0
 8001904:	f000 80a4 	beq.w	8001a50 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001908:	4b36      	ldr	r3, [pc, #216]	; (80019e4 <HAL_RCC_OscConfig+0x4cc>)
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	f003 030c 	and.w	r3, r3, #12
 8001910:	2b08      	cmp	r3, #8
 8001912:	d06b      	beq.n	80019ec <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	699b      	ldr	r3, [r3, #24]
 8001918:	2b02      	cmp	r3, #2
 800191a:	d149      	bne.n	80019b0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800191c:	4b31      	ldr	r3, [pc, #196]	; (80019e4 <HAL_RCC_OscConfig+0x4cc>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a30      	ldr	r2, [pc, #192]	; (80019e4 <HAL_RCC_OscConfig+0x4cc>)
 8001922:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001926:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001928:	f7ff f848 	bl	80009bc <HAL_GetTick>
 800192c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800192e:	e008      	b.n	8001942 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001930:	f7ff f844 	bl	80009bc <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b02      	cmp	r3, #2
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e087      	b.n	8001a52 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001942:	4b28      	ldr	r3, [pc, #160]	; (80019e4 <HAL_RCC_OscConfig+0x4cc>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d1f0      	bne.n	8001930 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	69da      	ldr	r2, [r3, #28]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6a1b      	ldr	r3, [r3, #32]
 8001956:	431a      	orrs	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195c:	019b      	lsls	r3, r3, #6
 800195e:	431a      	orrs	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001964:	085b      	lsrs	r3, r3, #1
 8001966:	3b01      	subs	r3, #1
 8001968:	041b      	lsls	r3, r3, #16
 800196a:	431a      	orrs	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001970:	061b      	lsls	r3, r3, #24
 8001972:	4313      	orrs	r3, r2
 8001974:	4a1b      	ldr	r2, [pc, #108]	; (80019e4 <HAL_RCC_OscConfig+0x4cc>)
 8001976:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800197a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800197c:	4b19      	ldr	r3, [pc, #100]	; (80019e4 <HAL_RCC_OscConfig+0x4cc>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a18      	ldr	r2, [pc, #96]	; (80019e4 <HAL_RCC_OscConfig+0x4cc>)
 8001982:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001986:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001988:	f7ff f818 	bl	80009bc <HAL_GetTick>
 800198c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800198e:	e008      	b.n	80019a2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001990:	f7ff f814 	bl	80009bc <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b02      	cmp	r3, #2
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e057      	b.n	8001a52 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019a2:	4b10      	ldr	r3, [pc, #64]	; (80019e4 <HAL_RCC_OscConfig+0x4cc>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d0f0      	beq.n	8001990 <HAL_RCC_OscConfig+0x478>
 80019ae:	e04f      	b.n	8001a50 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019b0:	4b0c      	ldr	r3, [pc, #48]	; (80019e4 <HAL_RCC_OscConfig+0x4cc>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a0b      	ldr	r2, [pc, #44]	; (80019e4 <HAL_RCC_OscConfig+0x4cc>)
 80019b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019bc:	f7fe fffe 	bl	80009bc <HAL_GetTick>
 80019c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019c2:	e008      	b.n	80019d6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019c4:	f7fe fffa 	bl	80009bc <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e03d      	b.n	8001a52 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019d6:	4b03      	ldr	r3, [pc, #12]	; (80019e4 <HAL_RCC_OscConfig+0x4cc>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d1f0      	bne.n	80019c4 <HAL_RCC_OscConfig+0x4ac>
 80019e2:	e035      	b.n	8001a50 <HAL_RCC_OscConfig+0x538>
 80019e4:	40023800 	.word	0x40023800
 80019e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80019ec:	4b1b      	ldr	r3, [pc, #108]	; (8001a5c <HAL_RCC_OscConfig+0x544>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	699b      	ldr	r3, [r3, #24]
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d028      	beq.n	8001a4c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d121      	bne.n	8001a4c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d11a      	bne.n	8001a4c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a16:	68fa      	ldr	r2, [r7, #12]
 8001a18:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a22:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d111      	bne.n	8001a4c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a32:	085b      	lsrs	r3, r3, #1
 8001a34:	3b01      	subs	r3, #1
 8001a36:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d107      	bne.n	8001a4c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a46:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d001      	beq.n	8001a50 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e000      	b.n	8001a52 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3718      	adds	r7, #24
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40023800 	.word	0x40023800

08001a60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d101      	bne.n	8001a78 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e0d0      	b.n	8001c1a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a78:	4b6a      	ldr	r3, [pc, #424]	; (8001c24 <HAL_RCC_ClockConfig+0x1c4>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 030f 	and.w	r3, r3, #15
 8001a80:	683a      	ldr	r2, [r7, #0]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d910      	bls.n	8001aa8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a86:	4b67      	ldr	r3, [pc, #412]	; (8001c24 <HAL_RCC_ClockConfig+0x1c4>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f023 020f 	bic.w	r2, r3, #15
 8001a8e:	4965      	ldr	r1, [pc, #404]	; (8001c24 <HAL_RCC_ClockConfig+0x1c4>)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a96:	4b63      	ldr	r3, [pc, #396]	; (8001c24 <HAL_RCC_ClockConfig+0x1c4>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 030f 	and.w	r3, r3, #15
 8001a9e:	683a      	ldr	r2, [r7, #0]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d001      	beq.n	8001aa8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e0b8      	b.n	8001c1a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0302 	and.w	r3, r3, #2
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d020      	beq.n	8001af6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0304 	and.w	r3, r3, #4
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d005      	beq.n	8001acc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ac0:	4b59      	ldr	r3, [pc, #356]	; (8001c28 <HAL_RCC_ClockConfig+0x1c8>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	4a58      	ldr	r2, [pc, #352]	; (8001c28 <HAL_RCC_ClockConfig+0x1c8>)
 8001ac6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001aca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0308 	and.w	r3, r3, #8
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d005      	beq.n	8001ae4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ad8:	4b53      	ldr	r3, [pc, #332]	; (8001c28 <HAL_RCC_ClockConfig+0x1c8>)
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	4a52      	ldr	r2, [pc, #328]	; (8001c28 <HAL_RCC_ClockConfig+0x1c8>)
 8001ade:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ae2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ae4:	4b50      	ldr	r3, [pc, #320]	; (8001c28 <HAL_RCC_ClockConfig+0x1c8>)
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	494d      	ldr	r1, [pc, #308]	; (8001c28 <HAL_RCC_ClockConfig+0x1c8>)
 8001af2:	4313      	orrs	r3, r2
 8001af4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d040      	beq.n	8001b84 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d107      	bne.n	8001b1a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b0a:	4b47      	ldr	r3, [pc, #284]	; (8001c28 <HAL_RCC_ClockConfig+0x1c8>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d115      	bne.n	8001b42 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e07f      	b.n	8001c1a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d107      	bne.n	8001b32 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b22:	4b41      	ldr	r3, [pc, #260]	; (8001c28 <HAL_RCC_ClockConfig+0x1c8>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d109      	bne.n	8001b42 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e073      	b.n	8001c1a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b32:	4b3d      	ldr	r3, [pc, #244]	; (8001c28 <HAL_RCC_ClockConfig+0x1c8>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d101      	bne.n	8001b42 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e06b      	b.n	8001c1a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b42:	4b39      	ldr	r3, [pc, #228]	; (8001c28 <HAL_RCC_ClockConfig+0x1c8>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f023 0203 	bic.w	r2, r3, #3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	4936      	ldr	r1, [pc, #216]	; (8001c28 <HAL_RCC_ClockConfig+0x1c8>)
 8001b50:	4313      	orrs	r3, r2
 8001b52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b54:	f7fe ff32 	bl	80009bc <HAL_GetTick>
 8001b58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b5a:	e00a      	b.n	8001b72 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b5c:	f7fe ff2e 	bl	80009bc <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e053      	b.n	8001c1a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b72:	4b2d      	ldr	r3, [pc, #180]	; (8001c28 <HAL_RCC_ClockConfig+0x1c8>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	f003 020c 	and.w	r2, r3, #12
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d1eb      	bne.n	8001b5c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b84:	4b27      	ldr	r3, [pc, #156]	; (8001c24 <HAL_RCC_ClockConfig+0x1c4>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 030f 	and.w	r3, r3, #15
 8001b8c:	683a      	ldr	r2, [r7, #0]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d210      	bcs.n	8001bb4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b92:	4b24      	ldr	r3, [pc, #144]	; (8001c24 <HAL_RCC_ClockConfig+0x1c4>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f023 020f 	bic.w	r2, r3, #15
 8001b9a:	4922      	ldr	r1, [pc, #136]	; (8001c24 <HAL_RCC_ClockConfig+0x1c4>)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ba2:	4b20      	ldr	r3, [pc, #128]	; (8001c24 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 030f 	and.w	r3, r3, #15
 8001baa:	683a      	ldr	r2, [r7, #0]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d001      	beq.n	8001bb4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e032      	b.n	8001c1a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0304 	and.w	r3, r3, #4
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d008      	beq.n	8001bd2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bc0:	4b19      	ldr	r3, [pc, #100]	; (8001c28 <HAL_RCC_ClockConfig+0x1c8>)
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	4916      	ldr	r1, [pc, #88]	; (8001c28 <HAL_RCC_ClockConfig+0x1c8>)
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0308 	and.w	r3, r3, #8
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d009      	beq.n	8001bf2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001bde:	4b12      	ldr	r3, [pc, #72]	; (8001c28 <HAL_RCC_ClockConfig+0x1c8>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	691b      	ldr	r3, [r3, #16]
 8001bea:	00db      	lsls	r3, r3, #3
 8001bec:	490e      	ldr	r1, [pc, #56]	; (8001c28 <HAL_RCC_ClockConfig+0x1c8>)
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001bf2:	f000 f821 	bl	8001c38 <HAL_RCC_GetSysClockFreq>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	4b0b      	ldr	r3, [pc, #44]	; (8001c28 <HAL_RCC_ClockConfig+0x1c8>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	091b      	lsrs	r3, r3, #4
 8001bfe:	f003 030f 	and.w	r3, r3, #15
 8001c02:	490a      	ldr	r1, [pc, #40]	; (8001c2c <HAL_RCC_ClockConfig+0x1cc>)
 8001c04:	5ccb      	ldrb	r3, [r1, r3]
 8001c06:	fa22 f303 	lsr.w	r3, r2, r3
 8001c0a:	4a09      	ldr	r2, [pc, #36]	; (8001c30 <HAL_RCC_ClockConfig+0x1d0>)
 8001c0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c0e:	4b09      	ldr	r3, [pc, #36]	; (8001c34 <HAL_RCC_ClockConfig+0x1d4>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7fe fe8e 	bl	8000934 <HAL_InitTick>

  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	40023c00 	.word	0x40023c00
 8001c28:	40023800 	.word	0x40023800
 8001c2c:	08003324 	.word	0x08003324
 8001c30:	20000000 	.word	0x20000000
 8001c34:	20000004 	.word	0x20000004

08001c38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c3c:	b090      	sub	sp, #64	; 0x40
 8001c3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001c40:	2300      	movs	r3, #0
 8001c42:	637b      	str	r3, [r7, #52]	; 0x34
 8001c44:	2300      	movs	r3, #0
 8001c46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c48:	2300      	movs	r3, #0
 8001c4a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c50:	4b59      	ldr	r3, [pc, #356]	; (8001db8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	f003 030c 	and.w	r3, r3, #12
 8001c58:	2b08      	cmp	r3, #8
 8001c5a:	d00d      	beq.n	8001c78 <HAL_RCC_GetSysClockFreq+0x40>
 8001c5c:	2b08      	cmp	r3, #8
 8001c5e:	f200 80a1 	bhi.w	8001da4 <HAL_RCC_GetSysClockFreq+0x16c>
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d002      	beq.n	8001c6c <HAL_RCC_GetSysClockFreq+0x34>
 8001c66:	2b04      	cmp	r3, #4
 8001c68:	d003      	beq.n	8001c72 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c6a:	e09b      	b.n	8001da4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c6c:	4b53      	ldr	r3, [pc, #332]	; (8001dbc <HAL_RCC_GetSysClockFreq+0x184>)
 8001c6e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c70:	e09b      	b.n	8001daa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c72:	4b53      	ldr	r3, [pc, #332]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001c74:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c76:	e098      	b.n	8001daa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c78:	4b4f      	ldr	r3, [pc, #316]	; (8001db8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c80:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001c82:	4b4d      	ldr	r3, [pc, #308]	; (8001db8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d028      	beq.n	8001ce0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c8e:	4b4a      	ldr	r3, [pc, #296]	; (8001db8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	099b      	lsrs	r3, r3, #6
 8001c94:	2200      	movs	r2, #0
 8001c96:	623b      	str	r3, [r7, #32]
 8001c98:	627a      	str	r2, [r7, #36]	; 0x24
 8001c9a:	6a3b      	ldr	r3, [r7, #32]
 8001c9c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	4b47      	ldr	r3, [pc, #284]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001ca4:	fb03 f201 	mul.w	r2, r3, r1
 8001ca8:	2300      	movs	r3, #0
 8001caa:	fb00 f303 	mul.w	r3, r0, r3
 8001cae:	4413      	add	r3, r2
 8001cb0:	4a43      	ldr	r2, [pc, #268]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001cb2:	fba0 1202 	umull	r1, r2, r0, r2
 8001cb6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001cb8:	460a      	mov	r2, r1
 8001cba:	62ba      	str	r2, [r7, #40]	; 0x28
 8001cbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cbe:	4413      	add	r3, r2
 8001cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	61bb      	str	r3, [r7, #24]
 8001cc8:	61fa      	str	r2, [r7, #28]
 8001cca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001cd2:	f7fe fa9d 	bl	8000210 <__aeabi_uldivmod>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	460b      	mov	r3, r1
 8001cda:	4613      	mov	r3, r2
 8001cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001cde:	e053      	b.n	8001d88 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ce0:	4b35      	ldr	r3, [pc, #212]	; (8001db8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	099b      	lsrs	r3, r3, #6
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	613b      	str	r3, [r7, #16]
 8001cea:	617a      	str	r2, [r7, #20]
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001cf2:	f04f 0b00 	mov.w	fp, #0
 8001cf6:	4652      	mov	r2, sl
 8001cf8:	465b      	mov	r3, fp
 8001cfa:	f04f 0000 	mov.w	r0, #0
 8001cfe:	f04f 0100 	mov.w	r1, #0
 8001d02:	0159      	lsls	r1, r3, #5
 8001d04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d08:	0150      	lsls	r0, r2, #5
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	ebb2 080a 	subs.w	r8, r2, sl
 8001d12:	eb63 090b 	sbc.w	r9, r3, fp
 8001d16:	f04f 0200 	mov.w	r2, #0
 8001d1a:	f04f 0300 	mov.w	r3, #0
 8001d1e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001d22:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001d26:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001d2a:	ebb2 0408 	subs.w	r4, r2, r8
 8001d2e:	eb63 0509 	sbc.w	r5, r3, r9
 8001d32:	f04f 0200 	mov.w	r2, #0
 8001d36:	f04f 0300 	mov.w	r3, #0
 8001d3a:	00eb      	lsls	r3, r5, #3
 8001d3c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d40:	00e2      	lsls	r2, r4, #3
 8001d42:	4614      	mov	r4, r2
 8001d44:	461d      	mov	r5, r3
 8001d46:	eb14 030a 	adds.w	r3, r4, sl
 8001d4a:	603b      	str	r3, [r7, #0]
 8001d4c:	eb45 030b 	adc.w	r3, r5, fp
 8001d50:	607b      	str	r3, [r7, #4]
 8001d52:	f04f 0200 	mov.w	r2, #0
 8001d56:	f04f 0300 	mov.w	r3, #0
 8001d5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d5e:	4629      	mov	r1, r5
 8001d60:	028b      	lsls	r3, r1, #10
 8001d62:	4621      	mov	r1, r4
 8001d64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d68:	4621      	mov	r1, r4
 8001d6a:	028a      	lsls	r2, r1, #10
 8001d6c:	4610      	mov	r0, r2
 8001d6e:	4619      	mov	r1, r3
 8001d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d72:	2200      	movs	r2, #0
 8001d74:	60bb      	str	r3, [r7, #8]
 8001d76:	60fa      	str	r2, [r7, #12]
 8001d78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d7c:	f7fe fa48 	bl	8000210 <__aeabi_uldivmod>
 8001d80:	4602      	mov	r2, r0
 8001d82:	460b      	mov	r3, r1
 8001d84:	4613      	mov	r3, r2
 8001d86:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001d88:	4b0b      	ldr	r3, [pc, #44]	; (8001db8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	0c1b      	lsrs	r3, r3, #16
 8001d8e:	f003 0303 	and.w	r3, r3, #3
 8001d92:	3301      	adds	r3, #1
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8001d98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001da2:	e002      	b.n	8001daa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001da4:	4b05      	ldr	r3, [pc, #20]	; (8001dbc <HAL_RCC_GetSysClockFreq+0x184>)
 8001da6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001da8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3740      	adds	r7, #64	; 0x40
 8001db0:	46bd      	mov	sp, r7
 8001db2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001db6:	bf00      	nop
 8001db8:	40023800 	.word	0x40023800
 8001dbc:	00f42400 	.word	0x00f42400
 8001dc0:	017d7840 	.word	0x017d7840

08001dc4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	4603      	mov	r3, r0
 8001dcc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001dd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dd6:	2b84      	cmp	r3, #132	; 0x84
 8001dd8:	d005      	beq.n	8001de6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001dda:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	4413      	add	r3, r2
 8001de2:	3303      	adds	r3, #3
 8001de4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001de6:	68fb      	ldr	r3, [r7, #12]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3714      	adds	r7, #20
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001df8:	f000 fae8 	bl	80023cc <vTaskStartScheduler>
  
  return osOK;
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001e02:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e04:	b089      	sub	sp, #36	; 0x24
 8001e06:	af04      	add	r7, sp, #16
 8001e08:	6078      	str	r0, [r7, #4]
 8001e0a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	695b      	ldr	r3, [r3, #20]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d020      	beq.n	8001e56 <osThreadCreate+0x54>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d01c      	beq.n	8001e56 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685c      	ldr	r4, [r3, #4]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	691e      	ldr	r6, [r3, #16]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7ff ffc8 	bl	8001dc4 <makeFreeRtosPriority>
 8001e34:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	695b      	ldr	r3, [r3, #20]
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001e3e:	9202      	str	r2, [sp, #8]
 8001e40:	9301      	str	r3, [sp, #4]
 8001e42:	9100      	str	r1, [sp, #0]
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	4632      	mov	r2, r6
 8001e48:	4629      	mov	r1, r5
 8001e4a:	4620      	mov	r0, r4
 8001e4c:	f000 f8ed 	bl	800202a <xTaskCreateStatic>
 8001e50:	4603      	mov	r3, r0
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	e01c      	b.n	8001e90 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685c      	ldr	r4, [r3, #4]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001e62:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7ff ffaa 	bl	8001dc4 <makeFreeRtosPriority>
 8001e70:	4602      	mov	r2, r0
 8001e72:	f107 030c 	add.w	r3, r7, #12
 8001e76:	9301      	str	r3, [sp, #4]
 8001e78:	9200      	str	r2, [sp, #0]
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	4632      	mov	r2, r6
 8001e7e:	4629      	mov	r1, r5
 8001e80:	4620      	mov	r0, r4
 8001e82:	f000 f935 	bl	80020f0 <xTaskCreate>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d001      	beq.n	8001e90 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	e000      	b.n	8001e92 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001e90:	68fb      	ldr	r3, [r7, #12]
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3714      	adds	r7, #20
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e9a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b084      	sub	sp, #16
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <osDelay+0x16>
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	e000      	b.n	8001eb2 <osDelay+0x18>
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f000 fa54 	bl	8002360 <vTaskDelay>
  
  return osOK;
 8001eb8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	b083      	sub	sp, #12
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f103 0208 	add.w	r2, r3, #8
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f04f 32ff 	mov.w	r2, #4294967295
 8001eda:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f103 0208 	add.w	r2, r3, #8
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f103 0208 	add.w	r2, r3, #8
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001ef6:	bf00      	nop
 8001ef8:	370c      	adds	r7, #12
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr

08001f02 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001f02:	b480      	push	{r7}
 8001f04:	b083      	sub	sp, #12
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b085      	sub	sp, #20
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	68fa      	ldr	r2, [r7, #12]
 8001f30:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	689a      	ldr	r2, [r3, #8]
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	683a      	ldr	r2, [r7, #0]
 8001f40:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	683a      	ldr	r2, [r7, #0]
 8001f46:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	1c5a      	adds	r2, r3, #1
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	601a      	str	r2, [r3, #0]
}
 8001f58:	bf00      	nop
 8001f5a:	3714      	adds	r7, #20
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001f64:	b480      	push	{r7}
 8001f66:	b085      	sub	sp, #20
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f7a:	d103      	bne.n	8001f84 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	691b      	ldr	r3, [r3, #16]
 8001f80:	60fb      	str	r3, [r7, #12]
 8001f82:	e00c      	b.n	8001f9e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	3308      	adds	r3, #8
 8001f88:	60fb      	str	r3, [r7, #12]
 8001f8a:	e002      	b.n	8001f92 <vListInsert+0x2e>
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	60fb      	str	r3, [r7, #12]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	68ba      	ldr	r2, [r7, #8]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d2f6      	bcs.n	8001f8c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	685a      	ldr	r2, [r3, #4]
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	683a      	ldr	r2, [r7, #0]
 8001fac:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	68fa      	ldr	r2, [r7, #12]
 8001fb2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	1c5a      	adds	r2, r3, #1
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	601a      	str	r2, [r3, #0]
}
 8001fca:	bf00      	nop
 8001fcc:	3714      	adds	r7, #20
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr

08001fd6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	b085      	sub	sp, #20
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	691b      	ldr	r3, [r3, #16]
 8001fe2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	6892      	ldr	r2, [r2, #8]
 8001fec:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	6852      	ldr	r2, [r2, #4]
 8001ff6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d103      	bne.n	800200a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	689a      	ldr	r2, [r3, #8]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	1e5a      	subs	r2, r3, #1
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
}
 800201e:	4618      	mov	r0, r3
 8002020:	3714      	adds	r7, #20
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr

0800202a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800202a:	b580      	push	{r7, lr}
 800202c:	b08e      	sub	sp, #56	; 0x38
 800202e:	af04      	add	r7, sp, #16
 8002030:	60f8      	str	r0, [r7, #12]
 8002032:	60b9      	str	r1, [r7, #8]
 8002034:	607a      	str	r2, [r7, #4]
 8002036:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800203a:	2b00      	cmp	r3, #0
 800203c:	d10c      	bne.n	8002058 <xTaskCreateStatic+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800203e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002042:	b672      	cpsid	i
 8002044:	f383 8811 	msr	BASEPRI, r3
 8002048:	f3bf 8f6f 	isb	sy
 800204c:	f3bf 8f4f 	dsb	sy
 8002050:	b662      	cpsie	i
 8002052:	623b      	str	r3, [r7, #32]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002054:	bf00      	nop
 8002056:	e7fe      	b.n	8002056 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8002058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800205a:	2b00      	cmp	r3, #0
 800205c:	d10c      	bne.n	8002078 <xTaskCreateStatic+0x4e>
	__asm volatile
 800205e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002062:	b672      	cpsid	i
 8002064:	f383 8811 	msr	BASEPRI, r3
 8002068:	f3bf 8f6f 	isb	sy
 800206c:	f3bf 8f4f 	dsb	sy
 8002070:	b662      	cpsie	i
 8002072:	61fb      	str	r3, [r7, #28]
}
 8002074:	bf00      	nop
 8002076:	e7fe      	b.n	8002076 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002078:	2354      	movs	r3, #84	; 0x54
 800207a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	2b54      	cmp	r3, #84	; 0x54
 8002080:	d00c      	beq.n	800209c <xTaskCreateStatic+0x72>
	__asm volatile
 8002082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002086:	b672      	cpsid	i
 8002088:	f383 8811 	msr	BASEPRI, r3
 800208c:	f3bf 8f6f 	isb	sy
 8002090:	f3bf 8f4f 	dsb	sy
 8002094:	b662      	cpsie	i
 8002096:	61bb      	str	r3, [r7, #24]
}
 8002098:	bf00      	nop
 800209a:	e7fe      	b.n	800209a <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800209c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800209e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d01e      	beq.n	80020e2 <xTaskCreateStatic+0xb8>
 80020a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d01b      	beq.n	80020e2 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80020aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020ac:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80020ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020b2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80020b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b6:	2202      	movs	r2, #2
 80020b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80020bc:	2300      	movs	r3, #0
 80020be:	9303      	str	r3, [sp, #12]
 80020c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c2:	9302      	str	r3, [sp, #8]
 80020c4:	f107 0314 	add.w	r3, r7, #20
 80020c8:	9301      	str	r3, [sp, #4]
 80020ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020cc:	9300      	str	r3, [sp, #0]
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	68b9      	ldr	r1, [r7, #8]
 80020d4:	68f8      	ldr	r0, [r7, #12]
 80020d6:	f000 f850 	bl	800217a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80020da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80020dc:	f000 f8d6 	bl	800228c <prvAddNewTaskToReadyList>
 80020e0:	e001      	b.n	80020e6 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 80020e2:	2300      	movs	r3, #0
 80020e4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80020e6:	697b      	ldr	r3, [r7, #20]
	}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3728      	adds	r7, #40	; 0x28
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b08c      	sub	sp, #48	; 0x30
 80020f4:	af04      	add	r7, sp, #16
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	60b9      	str	r1, [r7, #8]
 80020fa:	603b      	str	r3, [r7, #0]
 80020fc:	4613      	mov	r3, r2
 80020fe:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002100:	88fb      	ldrh	r3, [r7, #6]
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	4618      	mov	r0, r3
 8002106:	f000 fed9 	bl	8002ebc <pvPortMalloc>
 800210a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d00e      	beq.n	8002130 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002112:	2054      	movs	r0, #84	; 0x54
 8002114:	f000 fed2 	bl	8002ebc <pvPortMalloc>
 8002118:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d003      	beq.n	8002128 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	697a      	ldr	r2, [r7, #20]
 8002124:	631a      	str	r2, [r3, #48]	; 0x30
 8002126:	e005      	b.n	8002134 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002128:	6978      	ldr	r0, [r7, #20]
 800212a:	f000 ff91 	bl	8003050 <vPortFree>
 800212e:	e001      	b.n	8002134 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002130:	2300      	movs	r3, #0
 8002132:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d017      	beq.n	800216a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002142:	88fa      	ldrh	r2, [r7, #6]
 8002144:	2300      	movs	r3, #0
 8002146:	9303      	str	r3, [sp, #12]
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	9302      	str	r3, [sp, #8]
 800214c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800214e:	9301      	str	r3, [sp, #4]
 8002150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002152:	9300      	str	r3, [sp, #0]
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	68b9      	ldr	r1, [r7, #8]
 8002158:	68f8      	ldr	r0, [r7, #12]
 800215a:	f000 f80e 	bl	800217a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800215e:	69f8      	ldr	r0, [r7, #28]
 8002160:	f000 f894 	bl	800228c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002164:	2301      	movs	r3, #1
 8002166:	61bb      	str	r3, [r7, #24]
 8002168:	e002      	b.n	8002170 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800216a:	f04f 33ff 	mov.w	r3, #4294967295
 800216e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002170:	69bb      	ldr	r3, [r7, #24]
	}
 8002172:	4618      	mov	r0, r3
 8002174:	3720      	adds	r7, #32
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}

0800217a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800217a:	b580      	push	{r7, lr}
 800217c:	b088      	sub	sp, #32
 800217e:	af00      	add	r7, sp, #0
 8002180:	60f8      	str	r0, [r7, #12]
 8002182:	60b9      	str	r1, [r7, #8]
 8002184:	607a      	str	r2, [r7, #4]
 8002186:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800218a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800218c:	6879      	ldr	r1, [r7, #4]
 800218e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8002192:	440b      	add	r3, r1
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	4413      	add	r3, r2
 8002198:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	f023 0307 	bic.w	r3, r3, #7
 80021a0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	f003 0307 	and.w	r3, r3, #7
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d00c      	beq.n	80021c6 <prvInitialiseNewTask+0x4c>
	__asm volatile
 80021ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021b0:	b672      	cpsid	i
 80021b2:	f383 8811 	msr	BASEPRI, r3
 80021b6:	f3bf 8f6f 	isb	sy
 80021ba:	f3bf 8f4f 	dsb	sy
 80021be:	b662      	cpsie	i
 80021c0:	617b      	str	r3, [r7, #20]
}
 80021c2:	bf00      	nop
 80021c4:	e7fe      	b.n	80021c4 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d01f      	beq.n	800220c <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80021cc:	2300      	movs	r3, #0
 80021ce:	61fb      	str	r3, [r7, #28]
 80021d0:	e012      	b.n	80021f8 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80021d2:	68ba      	ldr	r2, [r7, #8]
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	4413      	add	r3, r2
 80021d8:	7819      	ldrb	r1, [r3, #0]
 80021da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	4413      	add	r3, r2
 80021e0:	3334      	adds	r3, #52	; 0x34
 80021e2:	460a      	mov	r2, r1
 80021e4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80021e6:	68ba      	ldr	r2, [r7, #8]
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	4413      	add	r3, r2
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d006      	beq.n	8002200 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	3301      	adds	r3, #1
 80021f6:	61fb      	str	r3, [r7, #28]
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	2b0f      	cmp	r3, #15
 80021fc:	d9e9      	bls.n	80021d2 <prvInitialiseNewTask+0x58>
 80021fe:	e000      	b.n	8002202 <prvInitialiseNewTask+0x88>
			{
				break;
 8002200:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002204:	2200      	movs	r2, #0
 8002206:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800220a:	e003      	b.n	8002214 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800220c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800220e:	2200      	movs	r2, #0
 8002210:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002216:	2b06      	cmp	r3, #6
 8002218:	d901      	bls.n	800221e <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800221a:	2306      	movs	r3, #6
 800221c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800221e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002220:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002222:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002226:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002228:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800222a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800222c:	2200      	movs	r2, #0
 800222e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002232:	3304      	adds	r3, #4
 8002234:	4618      	mov	r0, r3
 8002236:	f7ff fe64 	bl	8001f02 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800223a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800223c:	3318      	adds	r3, #24
 800223e:	4618      	mov	r0, r3
 8002240:	f7ff fe5f 	bl	8001f02 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002246:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002248:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800224a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800224c:	f1c3 0207 	rsb	r2, r3, #7
 8002250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002252:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002256:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002258:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800225a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800225c:	2200      	movs	r2, #0
 800225e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002262:	2200      	movs	r2, #0
 8002264:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002268:	683a      	ldr	r2, [r7, #0]
 800226a:	68f9      	ldr	r1, [r7, #12]
 800226c:	69b8      	ldr	r0, [r7, #24]
 800226e:	f000 fc31 	bl	8002ad4 <pxPortInitialiseStack>
 8002272:	4602      	mov	r2, r0
 8002274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002276:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800227a:	2b00      	cmp	r3, #0
 800227c:	d002      	beq.n	8002284 <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800227e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002280:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002282:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002284:	bf00      	nop
 8002286:	3720      	adds	r7, #32
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002294:	f000 fd2a 	bl	8002cec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002298:	4b2a      	ldr	r3, [pc, #168]	; (8002344 <prvAddNewTaskToReadyList+0xb8>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	3301      	adds	r3, #1
 800229e:	4a29      	ldr	r2, [pc, #164]	; (8002344 <prvAddNewTaskToReadyList+0xb8>)
 80022a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80022a2:	4b29      	ldr	r3, [pc, #164]	; (8002348 <prvAddNewTaskToReadyList+0xbc>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d109      	bne.n	80022be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80022aa:	4a27      	ldr	r2, [pc, #156]	; (8002348 <prvAddNewTaskToReadyList+0xbc>)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80022b0:	4b24      	ldr	r3, [pc, #144]	; (8002344 <prvAddNewTaskToReadyList+0xb8>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d110      	bne.n	80022da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80022b8:	f000 fac8 	bl	800284c <prvInitialiseTaskLists>
 80022bc:	e00d      	b.n	80022da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80022be:	4b23      	ldr	r3, [pc, #140]	; (800234c <prvAddNewTaskToReadyList+0xc0>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d109      	bne.n	80022da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80022c6:	4b20      	ldr	r3, [pc, #128]	; (8002348 <prvAddNewTaskToReadyList+0xbc>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d802      	bhi.n	80022da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80022d4:	4a1c      	ldr	r2, [pc, #112]	; (8002348 <prvAddNewTaskToReadyList+0xbc>)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80022da:	4b1d      	ldr	r3, [pc, #116]	; (8002350 <prvAddNewTaskToReadyList+0xc4>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	3301      	adds	r3, #1
 80022e0:	4a1b      	ldr	r2, [pc, #108]	; (8002350 <prvAddNewTaskToReadyList+0xc4>)
 80022e2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e8:	2201      	movs	r2, #1
 80022ea:	409a      	lsls	r2, r3
 80022ec:	4b19      	ldr	r3, [pc, #100]	; (8002354 <prvAddNewTaskToReadyList+0xc8>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	4a18      	ldr	r2, [pc, #96]	; (8002354 <prvAddNewTaskToReadyList+0xc8>)
 80022f4:	6013      	str	r3, [r2, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022fa:	4613      	mov	r3, r2
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	4413      	add	r3, r2
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	4a15      	ldr	r2, [pc, #84]	; (8002358 <prvAddNewTaskToReadyList+0xcc>)
 8002304:	441a      	add	r2, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	3304      	adds	r3, #4
 800230a:	4619      	mov	r1, r3
 800230c:	4610      	mov	r0, r2
 800230e:	f7ff fe05 	bl	8001f1c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002312:	f000 fd1f 	bl	8002d54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002316:	4b0d      	ldr	r3, [pc, #52]	; (800234c <prvAddNewTaskToReadyList+0xc0>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d00e      	beq.n	800233c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800231e:	4b0a      	ldr	r3, [pc, #40]	; (8002348 <prvAddNewTaskToReadyList+0xbc>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002328:	429a      	cmp	r2, r3
 800232a:	d207      	bcs.n	800233c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800232c:	4b0b      	ldr	r3, [pc, #44]	; (800235c <prvAddNewTaskToReadyList+0xd0>)
 800232e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	f3bf 8f4f 	dsb	sy
 8002338:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800233c:	bf00      	nop
 800233e:	3708      	adds	r7, #8
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	200003d0 	.word	0x200003d0
 8002348:	200002d0 	.word	0x200002d0
 800234c:	200003dc 	.word	0x200003dc
 8002350:	200003ec 	.word	0x200003ec
 8002354:	200003d8 	.word	0x200003d8
 8002358:	200002d4 	.word	0x200002d4
 800235c:	e000ed04 	.word	0xe000ed04

08002360 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002368:	2300      	movs	r3, #0
 800236a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d019      	beq.n	80023a6 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002372:	4b14      	ldr	r3, [pc, #80]	; (80023c4 <vTaskDelay+0x64>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d00c      	beq.n	8002394 <vTaskDelay+0x34>
	__asm volatile
 800237a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800237e:	b672      	cpsid	i
 8002380:	f383 8811 	msr	BASEPRI, r3
 8002384:	f3bf 8f6f 	isb	sy
 8002388:	f3bf 8f4f 	dsb	sy
 800238c:	b662      	cpsie	i
 800238e:	60bb      	str	r3, [r7, #8]
}
 8002390:	bf00      	nop
 8002392:	e7fe      	b.n	8002392 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8002394:	f000 f87e 	bl	8002494 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002398:	2100      	movs	r1, #0
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f000 fb34 	bl	8002a08 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80023a0:	f000 f886 	bl	80024b0 <xTaskResumeAll>
 80023a4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d107      	bne.n	80023bc <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80023ac:	4b06      	ldr	r3, [pc, #24]	; (80023c8 <vTaskDelay+0x68>)
 80023ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023b2:	601a      	str	r2, [r3, #0]
 80023b4:	f3bf 8f4f 	dsb	sy
 80023b8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80023bc:	bf00      	nop
 80023be:	3710      	adds	r7, #16
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	200003f8 	.word	0x200003f8
 80023c8:	e000ed04 	.word	0xe000ed04

080023cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b08a      	sub	sp, #40	; 0x28
 80023d0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80023d2:	2300      	movs	r3, #0
 80023d4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80023d6:	2300      	movs	r3, #0
 80023d8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80023da:	463a      	mov	r2, r7
 80023dc:	1d39      	adds	r1, r7, #4
 80023de:	f107 0308 	add.w	r3, r7, #8
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7fe f892 	bl	800050c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80023e8:	6839      	ldr	r1, [r7, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	68ba      	ldr	r2, [r7, #8]
 80023ee:	9202      	str	r2, [sp, #8]
 80023f0:	9301      	str	r3, [sp, #4]
 80023f2:	2300      	movs	r3, #0
 80023f4:	9300      	str	r3, [sp, #0]
 80023f6:	2300      	movs	r3, #0
 80023f8:	460a      	mov	r2, r1
 80023fa:	4920      	ldr	r1, [pc, #128]	; (800247c <vTaskStartScheduler+0xb0>)
 80023fc:	4820      	ldr	r0, [pc, #128]	; (8002480 <vTaskStartScheduler+0xb4>)
 80023fe:	f7ff fe14 	bl	800202a <xTaskCreateStatic>
 8002402:	4603      	mov	r3, r0
 8002404:	4a1f      	ldr	r2, [pc, #124]	; (8002484 <vTaskStartScheduler+0xb8>)
 8002406:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002408:	4b1e      	ldr	r3, [pc, #120]	; (8002484 <vTaskStartScheduler+0xb8>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d002      	beq.n	8002416 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002410:	2301      	movs	r3, #1
 8002412:	617b      	str	r3, [r7, #20]
 8002414:	e001      	b.n	800241a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002416:	2300      	movs	r3, #0
 8002418:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d118      	bne.n	8002452 <vTaskStartScheduler+0x86>
	__asm volatile
 8002420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002424:	b672      	cpsid	i
 8002426:	f383 8811 	msr	BASEPRI, r3
 800242a:	f3bf 8f6f 	isb	sy
 800242e:	f3bf 8f4f 	dsb	sy
 8002432:	b662      	cpsie	i
 8002434:	613b      	str	r3, [r7, #16]
}
 8002436:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002438:	4b13      	ldr	r3, [pc, #76]	; (8002488 <vTaskStartScheduler+0xbc>)
 800243a:	f04f 32ff 	mov.w	r2, #4294967295
 800243e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002440:	4b12      	ldr	r3, [pc, #72]	; (800248c <vTaskStartScheduler+0xc0>)
 8002442:	2201      	movs	r2, #1
 8002444:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002446:	4b12      	ldr	r3, [pc, #72]	; (8002490 <vTaskStartScheduler+0xc4>)
 8002448:	2200      	movs	r2, #0
 800244a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800244c:	f000 fbd0 	bl	8002bf0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002450:	e010      	b.n	8002474 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002458:	d10c      	bne.n	8002474 <vTaskStartScheduler+0xa8>
	__asm volatile
 800245a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800245e:	b672      	cpsid	i
 8002460:	f383 8811 	msr	BASEPRI, r3
 8002464:	f3bf 8f6f 	isb	sy
 8002468:	f3bf 8f4f 	dsb	sy
 800246c:	b662      	cpsie	i
 800246e:	60fb      	str	r3, [r7, #12]
}
 8002470:	bf00      	nop
 8002472:	e7fe      	b.n	8002472 <vTaskStartScheduler+0xa6>
}
 8002474:	bf00      	nop
 8002476:	3718      	adds	r7, #24
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	0800331c 	.word	0x0800331c
 8002480:	0800281d 	.word	0x0800281d
 8002484:	200003f4 	.word	0x200003f4
 8002488:	200003f0 	.word	0x200003f0
 800248c:	200003dc 	.word	0x200003dc
 8002490:	200003d4 	.word	0x200003d4

08002494 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002498:	4b04      	ldr	r3, [pc, #16]	; (80024ac <vTaskSuspendAll+0x18>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	3301      	adds	r3, #1
 800249e:	4a03      	ldr	r2, [pc, #12]	; (80024ac <vTaskSuspendAll+0x18>)
 80024a0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80024a2:	bf00      	nop
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr
 80024ac:	200003f8 	.word	0x200003f8

080024b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80024b6:	2300      	movs	r3, #0
 80024b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80024ba:	2300      	movs	r3, #0
 80024bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80024be:	4b42      	ldr	r3, [pc, #264]	; (80025c8 <xTaskResumeAll+0x118>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d10c      	bne.n	80024e0 <xTaskResumeAll+0x30>
	__asm volatile
 80024c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024ca:	b672      	cpsid	i
 80024cc:	f383 8811 	msr	BASEPRI, r3
 80024d0:	f3bf 8f6f 	isb	sy
 80024d4:	f3bf 8f4f 	dsb	sy
 80024d8:	b662      	cpsie	i
 80024da:	603b      	str	r3, [r7, #0]
}
 80024dc:	bf00      	nop
 80024de:	e7fe      	b.n	80024de <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80024e0:	f000 fc04 	bl	8002cec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80024e4:	4b38      	ldr	r3, [pc, #224]	; (80025c8 <xTaskResumeAll+0x118>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	3b01      	subs	r3, #1
 80024ea:	4a37      	ldr	r2, [pc, #220]	; (80025c8 <xTaskResumeAll+0x118>)
 80024ec:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80024ee:	4b36      	ldr	r3, [pc, #216]	; (80025c8 <xTaskResumeAll+0x118>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d161      	bne.n	80025ba <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80024f6:	4b35      	ldr	r3, [pc, #212]	; (80025cc <xTaskResumeAll+0x11c>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d05d      	beq.n	80025ba <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80024fe:	e02e      	b.n	800255e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002500:	4b33      	ldr	r3, [pc, #204]	; (80025d0 <xTaskResumeAll+0x120>)
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	3318      	adds	r3, #24
 800250c:	4618      	mov	r0, r3
 800250e:	f7ff fd62 	bl	8001fd6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	3304      	adds	r3, #4
 8002516:	4618      	mov	r0, r3
 8002518:	f7ff fd5d 	bl	8001fd6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002520:	2201      	movs	r2, #1
 8002522:	409a      	lsls	r2, r3
 8002524:	4b2b      	ldr	r3, [pc, #172]	; (80025d4 <xTaskResumeAll+0x124>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4313      	orrs	r3, r2
 800252a:	4a2a      	ldr	r2, [pc, #168]	; (80025d4 <xTaskResumeAll+0x124>)
 800252c:	6013      	str	r3, [r2, #0]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002532:	4613      	mov	r3, r2
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	4413      	add	r3, r2
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	4a27      	ldr	r2, [pc, #156]	; (80025d8 <xTaskResumeAll+0x128>)
 800253c:	441a      	add	r2, r3
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	3304      	adds	r3, #4
 8002542:	4619      	mov	r1, r3
 8002544:	4610      	mov	r0, r2
 8002546:	f7ff fce9 	bl	8001f1c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800254e:	4b23      	ldr	r3, [pc, #140]	; (80025dc <xTaskResumeAll+0x12c>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002554:	429a      	cmp	r2, r3
 8002556:	d302      	bcc.n	800255e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8002558:	4b21      	ldr	r3, [pc, #132]	; (80025e0 <xTaskResumeAll+0x130>)
 800255a:	2201      	movs	r2, #1
 800255c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800255e:	4b1c      	ldr	r3, [pc, #112]	; (80025d0 <xTaskResumeAll+0x120>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d1cc      	bne.n	8002500 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800256c:	f000 fa0e 	bl	800298c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002570:	4b1c      	ldr	r3, [pc, #112]	; (80025e4 <xTaskResumeAll+0x134>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d010      	beq.n	800259e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800257c:	f000 f836 	bl	80025ec <xTaskIncrementTick>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d002      	beq.n	800258c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8002586:	4b16      	ldr	r3, [pc, #88]	; (80025e0 <xTaskResumeAll+0x130>)
 8002588:	2201      	movs	r2, #1
 800258a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	3b01      	subs	r3, #1
 8002590:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d1f1      	bne.n	800257c <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8002598:	4b12      	ldr	r3, [pc, #72]	; (80025e4 <xTaskResumeAll+0x134>)
 800259a:	2200      	movs	r2, #0
 800259c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800259e:	4b10      	ldr	r3, [pc, #64]	; (80025e0 <xTaskResumeAll+0x130>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d009      	beq.n	80025ba <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80025a6:	2301      	movs	r3, #1
 80025a8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80025aa:	4b0f      	ldr	r3, [pc, #60]	; (80025e8 <xTaskResumeAll+0x138>)
 80025ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025b0:	601a      	str	r2, [r3, #0]
 80025b2:	f3bf 8f4f 	dsb	sy
 80025b6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80025ba:	f000 fbcb 	bl	8002d54 <vPortExitCritical>

	return xAlreadyYielded;
 80025be:	68bb      	ldr	r3, [r7, #8]
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3710      	adds	r7, #16
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	200003f8 	.word	0x200003f8
 80025cc:	200003d0 	.word	0x200003d0
 80025d0:	20000390 	.word	0x20000390
 80025d4:	200003d8 	.word	0x200003d8
 80025d8:	200002d4 	.word	0x200002d4
 80025dc:	200002d0 	.word	0x200002d0
 80025e0:	200003e4 	.word	0x200003e4
 80025e4:	200003e0 	.word	0x200003e0
 80025e8:	e000ed04 	.word	0xe000ed04

080025ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80025f2:	2300      	movs	r3, #0
 80025f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80025f6:	4b4f      	ldr	r3, [pc, #316]	; (8002734 <xTaskIncrementTick+0x148>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	f040 808a 	bne.w	8002714 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002600:	4b4d      	ldr	r3, [pc, #308]	; (8002738 <xTaskIncrementTick+0x14c>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	3301      	adds	r3, #1
 8002606:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002608:	4a4b      	ldr	r2, [pc, #300]	; (8002738 <xTaskIncrementTick+0x14c>)
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d122      	bne.n	800265a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8002614:	4b49      	ldr	r3, [pc, #292]	; (800273c <xTaskIncrementTick+0x150>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00c      	beq.n	8002638 <xTaskIncrementTick+0x4c>
	__asm volatile
 800261e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002622:	b672      	cpsid	i
 8002624:	f383 8811 	msr	BASEPRI, r3
 8002628:	f3bf 8f6f 	isb	sy
 800262c:	f3bf 8f4f 	dsb	sy
 8002630:	b662      	cpsie	i
 8002632:	603b      	str	r3, [r7, #0]
}
 8002634:	bf00      	nop
 8002636:	e7fe      	b.n	8002636 <xTaskIncrementTick+0x4a>
 8002638:	4b40      	ldr	r3, [pc, #256]	; (800273c <xTaskIncrementTick+0x150>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	60fb      	str	r3, [r7, #12]
 800263e:	4b40      	ldr	r3, [pc, #256]	; (8002740 <xTaskIncrementTick+0x154>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a3e      	ldr	r2, [pc, #248]	; (800273c <xTaskIncrementTick+0x150>)
 8002644:	6013      	str	r3, [r2, #0]
 8002646:	4a3e      	ldr	r2, [pc, #248]	; (8002740 <xTaskIncrementTick+0x154>)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6013      	str	r3, [r2, #0]
 800264c:	4b3d      	ldr	r3, [pc, #244]	; (8002744 <xTaskIncrementTick+0x158>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	3301      	adds	r3, #1
 8002652:	4a3c      	ldr	r2, [pc, #240]	; (8002744 <xTaskIncrementTick+0x158>)
 8002654:	6013      	str	r3, [r2, #0]
 8002656:	f000 f999 	bl	800298c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800265a:	4b3b      	ldr	r3, [pc, #236]	; (8002748 <xTaskIncrementTick+0x15c>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	693a      	ldr	r2, [r7, #16]
 8002660:	429a      	cmp	r2, r3
 8002662:	d348      	bcc.n	80026f6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002664:	4b35      	ldr	r3, [pc, #212]	; (800273c <xTaskIncrementTick+0x150>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d104      	bne.n	8002678 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800266e:	4b36      	ldr	r3, [pc, #216]	; (8002748 <xTaskIncrementTick+0x15c>)
 8002670:	f04f 32ff 	mov.w	r2, #4294967295
 8002674:	601a      	str	r2, [r3, #0]
					break;
 8002676:	e03e      	b.n	80026f6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002678:	4b30      	ldr	r3, [pc, #192]	; (800273c <xTaskIncrementTick+0x150>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002688:	693a      	ldr	r2, [r7, #16]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	429a      	cmp	r2, r3
 800268e:	d203      	bcs.n	8002698 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002690:	4a2d      	ldr	r2, [pc, #180]	; (8002748 <xTaskIncrementTick+0x15c>)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002696:	e02e      	b.n	80026f6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	3304      	adds	r3, #4
 800269c:	4618      	mov	r0, r3
 800269e:	f7ff fc9a 	bl	8001fd6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d004      	beq.n	80026b4 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	3318      	adds	r3, #24
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7ff fc91 	bl	8001fd6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b8:	2201      	movs	r2, #1
 80026ba:	409a      	lsls	r2, r3
 80026bc:	4b23      	ldr	r3, [pc, #140]	; (800274c <xTaskIncrementTick+0x160>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	4a22      	ldr	r2, [pc, #136]	; (800274c <xTaskIncrementTick+0x160>)
 80026c4:	6013      	str	r3, [r2, #0]
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026ca:	4613      	mov	r3, r2
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	4413      	add	r3, r2
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	4a1f      	ldr	r2, [pc, #124]	; (8002750 <xTaskIncrementTick+0x164>)
 80026d4:	441a      	add	r2, r3
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	3304      	adds	r3, #4
 80026da:	4619      	mov	r1, r3
 80026dc:	4610      	mov	r0, r2
 80026de:	f7ff fc1d 	bl	8001f1c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026e6:	4b1b      	ldr	r3, [pc, #108]	; (8002754 <xTaskIncrementTick+0x168>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d3b9      	bcc.n	8002664 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80026f0:	2301      	movs	r3, #1
 80026f2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80026f4:	e7b6      	b.n	8002664 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80026f6:	4b17      	ldr	r3, [pc, #92]	; (8002754 <xTaskIncrementTick+0x168>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026fc:	4914      	ldr	r1, [pc, #80]	; (8002750 <xTaskIncrementTick+0x164>)
 80026fe:	4613      	mov	r3, r2
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	4413      	add	r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	440b      	add	r3, r1
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d907      	bls.n	800271e <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800270e:	2301      	movs	r3, #1
 8002710:	617b      	str	r3, [r7, #20]
 8002712:	e004      	b.n	800271e <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002714:	4b10      	ldr	r3, [pc, #64]	; (8002758 <xTaskIncrementTick+0x16c>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	3301      	adds	r3, #1
 800271a:	4a0f      	ldr	r2, [pc, #60]	; (8002758 <xTaskIncrementTick+0x16c>)
 800271c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800271e:	4b0f      	ldr	r3, [pc, #60]	; (800275c <xTaskIncrementTick+0x170>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8002726:	2301      	movs	r3, #1
 8002728:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800272a:	697b      	ldr	r3, [r7, #20]
}
 800272c:	4618      	mov	r0, r3
 800272e:	3718      	adds	r7, #24
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	200003f8 	.word	0x200003f8
 8002738:	200003d4 	.word	0x200003d4
 800273c:	20000388 	.word	0x20000388
 8002740:	2000038c 	.word	0x2000038c
 8002744:	200003e8 	.word	0x200003e8
 8002748:	200003f0 	.word	0x200003f0
 800274c:	200003d8 	.word	0x200003d8
 8002750:	200002d4 	.word	0x200002d4
 8002754:	200002d0 	.word	0x200002d0
 8002758:	200003e0 	.word	0x200003e0
 800275c:	200003e4 	.word	0x200003e4

08002760 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002760:	b480      	push	{r7}
 8002762:	b087      	sub	sp, #28
 8002764:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002766:	4b28      	ldr	r3, [pc, #160]	; (8002808 <vTaskSwitchContext+0xa8>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d003      	beq.n	8002776 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800276e:	4b27      	ldr	r3, [pc, #156]	; (800280c <vTaskSwitchContext+0xac>)
 8002770:	2201      	movs	r2, #1
 8002772:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002774:	e041      	b.n	80027fa <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8002776:	4b25      	ldr	r3, [pc, #148]	; (800280c <vTaskSwitchContext+0xac>)
 8002778:	2200      	movs	r2, #0
 800277a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800277c:	4b24      	ldr	r3, [pc, #144]	; (8002810 <vTaskSwitchContext+0xb0>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	fab3 f383 	clz	r3, r3
 8002788:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800278a:	7afb      	ldrb	r3, [r7, #11]
 800278c:	f1c3 031f 	rsb	r3, r3, #31
 8002790:	617b      	str	r3, [r7, #20]
 8002792:	4920      	ldr	r1, [pc, #128]	; (8002814 <vTaskSwitchContext+0xb4>)
 8002794:	697a      	ldr	r2, [r7, #20]
 8002796:	4613      	mov	r3, r2
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	4413      	add	r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	440b      	add	r3, r1
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d10c      	bne.n	80027c0 <vTaskSwitchContext+0x60>
	__asm volatile
 80027a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027aa:	b672      	cpsid	i
 80027ac:	f383 8811 	msr	BASEPRI, r3
 80027b0:	f3bf 8f6f 	isb	sy
 80027b4:	f3bf 8f4f 	dsb	sy
 80027b8:	b662      	cpsie	i
 80027ba:	607b      	str	r3, [r7, #4]
}
 80027bc:	bf00      	nop
 80027be:	e7fe      	b.n	80027be <vTaskSwitchContext+0x5e>
 80027c0:	697a      	ldr	r2, [r7, #20]
 80027c2:	4613      	mov	r3, r2
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	4413      	add	r3, r2
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	4a12      	ldr	r2, [pc, #72]	; (8002814 <vTaskSwitchContext+0xb4>)
 80027cc:	4413      	add	r3, r2
 80027ce:	613b      	str	r3, [r7, #16]
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	685a      	ldr	r2, [r3, #4]
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	605a      	str	r2, [r3, #4]
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	685a      	ldr	r2, [r3, #4]
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	3308      	adds	r3, #8
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d104      	bne.n	80027f0 <vTaskSwitchContext+0x90>
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	685a      	ldr	r2, [r3, #4]
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	605a      	str	r2, [r3, #4]
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	4a08      	ldr	r2, [pc, #32]	; (8002818 <vTaskSwitchContext+0xb8>)
 80027f8:	6013      	str	r3, [r2, #0]
}
 80027fa:	bf00      	nop
 80027fc:	371c      	adds	r7, #28
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	200003f8 	.word	0x200003f8
 800280c:	200003e4 	.word	0x200003e4
 8002810:	200003d8 	.word	0x200003d8
 8002814:	200002d4 	.word	0x200002d4
 8002818:	200002d0 	.word	0x200002d0

0800281c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002824:	f000 f852 	bl	80028cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002828:	4b06      	ldr	r3, [pc, #24]	; (8002844 <prvIdleTask+0x28>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2b01      	cmp	r3, #1
 800282e:	d9f9      	bls.n	8002824 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002830:	4b05      	ldr	r3, [pc, #20]	; (8002848 <prvIdleTask+0x2c>)
 8002832:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002836:	601a      	str	r2, [r3, #0]
 8002838:	f3bf 8f4f 	dsb	sy
 800283c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002840:	e7f0      	b.n	8002824 <prvIdleTask+0x8>
 8002842:	bf00      	nop
 8002844:	200002d4 	.word	0x200002d4
 8002848:	e000ed04 	.word	0xe000ed04

0800284c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002852:	2300      	movs	r3, #0
 8002854:	607b      	str	r3, [r7, #4]
 8002856:	e00c      	b.n	8002872 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	4613      	mov	r3, r2
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	4413      	add	r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	4a12      	ldr	r2, [pc, #72]	; (80028ac <prvInitialiseTaskLists+0x60>)
 8002864:	4413      	add	r3, r2
 8002866:	4618      	mov	r0, r3
 8002868:	f7ff fb2b 	bl	8001ec2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	3301      	adds	r3, #1
 8002870:	607b      	str	r3, [r7, #4]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2b06      	cmp	r3, #6
 8002876:	d9ef      	bls.n	8002858 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002878:	480d      	ldr	r0, [pc, #52]	; (80028b0 <prvInitialiseTaskLists+0x64>)
 800287a:	f7ff fb22 	bl	8001ec2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800287e:	480d      	ldr	r0, [pc, #52]	; (80028b4 <prvInitialiseTaskLists+0x68>)
 8002880:	f7ff fb1f 	bl	8001ec2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002884:	480c      	ldr	r0, [pc, #48]	; (80028b8 <prvInitialiseTaskLists+0x6c>)
 8002886:	f7ff fb1c 	bl	8001ec2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800288a:	480c      	ldr	r0, [pc, #48]	; (80028bc <prvInitialiseTaskLists+0x70>)
 800288c:	f7ff fb19 	bl	8001ec2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002890:	480b      	ldr	r0, [pc, #44]	; (80028c0 <prvInitialiseTaskLists+0x74>)
 8002892:	f7ff fb16 	bl	8001ec2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002896:	4b0b      	ldr	r3, [pc, #44]	; (80028c4 <prvInitialiseTaskLists+0x78>)
 8002898:	4a05      	ldr	r2, [pc, #20]	; (80028b0 <prvInitialiseTaskLists+0x64>)
 800289a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800289c:	4b0a      	ldr	r3, [pc, #40]	; (80028c8 <prvInitialiseTaskLists+0x7c>)
 800289e:	4a05      	ldr	r2, [pc, #20]	; (80028b4 <prvInitialiseTaskLists+0x68>)
 80028a0:	601a      	str	r2, [r3, #0]
}
 80028a2:	bf00      	nop
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	200002d4 	.word	0x200002d4
 80028b0:	20000360 	.word	0x20000360
 80028b4:	20000374 	.word	0x20000374
 80028b8:	20000390 	.word	0x20000390
 80028bc:	200003a4 	.word	0x200003a4
 80028c0:	200003bc 	.word	0x200003bc
 80028c4:	20000388 	.word	0x20000388
 80028c8:	2000038c 	.word	0x2000038c

080028cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80028d2:	e019      	b.n	8002908 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80028d4:	f000 fa0a 	bl	8002cec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80028d8:	4b10      	ldr	r3, [pc, #64]	; (800291c <prvCheckTasksWaitingTermination+0x50>)
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	3304      	adds	r3, #4
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7ff fb76 	bl	8001fd6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80028ea:	4b0d      	ldr	r3, [pc, #52]	; (8002920 <prvCheckTasksWaitingTermination+0x54>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	3b01      	subs	r3, #1
 80028f0:	4a0b      	ldr	r2, [pc, #44]	; (8002920 <prvCheckTasksWaitingTermination+0x54>)
 80028f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80028f4:	4b0b      	ldr	r3, [pc, #44]	; (8002924 <prvCheckTasksWaitingTermination+0x58>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	3b01      	subs	r3, #1
 80028fa:	4a0a      	ldr	r2, [pc, #40]	; (8002924 <prvCheckTasksWaitingTermination+0x58>)
 80028fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80028fe:	f000 fa29 	bl	8002d54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f000 f810 	bl	8002928 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002908:	4b06      	ldr	r3, [pc, #24]	; (8002924 <prvCheckTasksWaitingTermination+0x58>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d1e1      	bne.n	80028d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002910:	bf00      	nop
 8002912:	bf00      	nop
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	200003a4 	.word	0x200003a4
 8002920:	200003d0 	.word	0x200003d0
 8002924:	200003b8 	.word	0x200003b8

08002928 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002936:	2b00      	cmp	r3, #0
 8002938:	d108      	bne.n	800294c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293e:	4618      	mov	r0, r3
 8002940:	f000 fb86 	bl	8003050 <vPortFree>
				vPortFree( pxTCB );
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f000 fb83 	bl	8003050 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800294a:	e01a      	b.n	8002982 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002952:	2b01      	cmp	r3, #1
 8002954:	d103      	bne.n	800295e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f000 fb7a 	bl	8003050 <vPortFree>
	}
 800295c:	e011      	b.n	8002982 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002964:	2b02      	cmp	r3, #2
 8002966:	d00c      	beq.n	8002982 <prvDeleteTCB+0x5a>
	__asm volatile
 8002968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800296c:	b672      	cpsid	i
 800296e:	f383 8811 	msr	BASEPRI, r3
 8002972:	f3bf 8f6f 	isb	sy
 8002976:	f3bf 8f4f 	dsb	sy
 800297a:	b662      	cpsie	i
 800297c:	60fb      	str	r3, [r7, #12]
}
 800297e:	bf00      	nop
 8002980:	e7fe      	b.n	8002980 <prvDeleteTCB+0x58>
	}
 8002982:	bf00      	nop
 8002984:	3710      	adds	r7, #16
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
	...

0800298c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002992:	4b0c      	ldr	r3, [pc, #48]	; (80029c4 <prvResetNextTaskUnblockTime+0x38>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d104      	bne.n	80029a6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800299c:	4b0a      	ldr	r3, [pc, #40]	; (80029c8 <prvResetNextTaskUnblockTime+0x3c>)
 800299e:	f04f 32ff 	mov.w	r2, #4294967295
 80029a2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80029a4:	e008      	b.n	80029b8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80029a6:	4b07      	ldr	r3, [pc, #28]	; (80029c4 <prvResetNextTaskUnblockTime+0x38>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	4a04      	ldr	r2, [pc, #16]	; (80029c8 <prvResetNextTaskUnblockTime+0x3c>)
 80029b6:	6013      	str	r3, [r2, #0]
}
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr
 80029c4:	20000388 	.word	0x20000388
 80029c8:	200003f0 	.word	0x200003f0

080029cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80029d2:	4b0b      	ldr	r3, [pc, #44]	; (8002a00 <xTaskGetSchedulerState+0x34>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d102      	bne.n	80029e0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80029da:	2301      	movs	r3, #1
 80029dc:	607b      	str	r3, [r7, #4]
 80029de:	e008      	b.n	80029f2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80029e0:	4b08      	ldr	r3, [pc, #32]	; (8002a04 <xTaskGetSchedulerState+0x38>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d102      	bne.n	80029ee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80029e8:	2302      	movs	r3, #2
 80029ea:	607b      	str	r3, [r7, #4]
 80029ec:	e001      	b.n	80029f2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80029ee:	2300      	movs	r3, #0
 80029f0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80029f2:	687b      	ldr	r3, [r7, #4]
	}
 80029f4:	4618      	mov	r0, r3
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr
 8002a00:	200003dc 	.word	0x200003dc
 8002a04:	200003f8 	.word	0x200003f8

08002a08 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002a12:	4b29      	ldr	r3, [pc, #164]	; (8002ab8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002a18:	4b28      	ldr	r3, [pc, #160]	; (8002abc <prvAddCurrentTaskToDelayedList+0xb4>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	3304      	adds	r3, #4
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7ff fad9 	bl	8001fd6 <uxListRemove>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d10b      	bne.n	8002a42 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002a2a:	4b24      	ldr	r3, [pc, #144]	; (8002abc <prvAddCurrentTaskToDelayedList+0xb4>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a30:	2201      	movs	r2, #1
 8002a32:	fa02 f303 	lsl.w	r3, r2, r3
 8002a36:	43da      	mvns	r2, r3
 8002a38:	4b21      	ldr	r3, [pc, #132]	; (8002ac0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	4a20      	ldr	r2, [pc, #128]	; (8002ac0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002a40:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a48:	d10a      	bne.n	8002a60 <prvAddCurrentTaskToDelayedList+0x58>
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d007      	beq.n	8002a60 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002a50:	4b1a      	ldr	r3, [pc, #104]	; (8002abc <prvAddCurrentTaskToDelayedList+0xb4>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	3304      	adds	r3, #4
 8002a56:	4619      	mov	r1, r3
 8002a58:	481a      	ldr	r0, [pc, #104]	; (8002ac4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8002a5a:	f7ff fa5f 	bl	8001f1c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002a5e:	e026      	b.n	8002aae <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4413      	add	r3, r2
 8002a66:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002a68:	4b14      	ldr	r3, [pc, #80]	; (8002abc <prvAddCurrentTaskToDelayedList+0xb4>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	68ba      	ldr	r2, [r7, #8]
 8002a6e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002a70:	68ba      	ldr	r2, [r7, #8]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d209      	bcs.n	8002a8c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002a78:	4b13      	ldr	r3, [pc, #76]	; (8002ac8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	4b0f      	ldr	r3, [pc, #60]	; (8002abc <prvAddCurrentTaskToDelayedList+0xb4>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	3304      	adds	r3, #4
 8002a82:	4619      	mov	r1, r3
 8002a84:	4610      	mov	r0, r2
 8002a86:	f7ff fa6d 	bl	8001f64 <vListInsert>
}
 8002a8a:	e010      	b.n	8002aae <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002a8c:	4b0f      	ldr	r3, [pc, #60]	; (8002acc <prvAddCurrentTaskToDelayedList+0xc4>)
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	4b0a      	ldr	r3, [pc, #40]	; (8002abc <prvAddCurrentTaskToDelayedList+0xb4>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	3304      	adds	r3, #4
 8002a96:	4619      	mov	r1, r3
 8002a98:	4610      	mov	r0, r2
 8002a9a:	f7ff fa63 	bl	8001f64 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002a9e:	4b0c      	ldr	r3, [pc, #48]	; (8002ad0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	68ba      	ldr	r2, [r7, #8]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d202      	bcs.n	8002aae <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002aa8:	4a09      	ldr	r2, [pc, #36]	; (8002ad0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	6013      	str	r3, [r2, #0]
}
 8002aae:	bf00      	nop
 8002ab0:	3710      	adds	r7, #16
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	200003d4 	.word	0x200003d4
 8002abc:	200002d0 	.word	0x200002d0
 8002ac0:	200003d8 	.word	0x200003d8
 8002ac4:	200003bc 	.word	0x200003bc
 8002ac8:	2000038c 	.word	0x2000038c
 8002acc:	20000388 	.word	0x20000388
 8002ad0:	200003f0 	.word	0x200003f0

08002ad4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b085      	sub	sp, #20
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	3b04      	subs	r3, #4
 8002ae4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002aec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	3b04      	subs	r3, #4
 8002af2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	f023 0201 	bic.w	r2, r3, #1
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	3b04      	subs	r3, #4
 8002b02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002b04:	4a0c      	ldr	r2, [pc, #48]	; (8002b38 <pxPortInitialiseStack+0x64>)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	3b14      	subs	r3, #20
 8002b0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	3b04      	subs	r3, #4
 8002b1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f06f 0202 	mvn.w	r2, #2
 8002b22:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	3b20      	subs	r3, #32
 8002b28:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3714      	adds	r7, #20
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr
 8002b38:	08002b3d 	.word	0x08002b3d

08002b3c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b085      	sub	sp, #20
 8002b40:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8002b42:	2300      	movs	r3, #0
 8002b44:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002b46:	4b14      	ldr	r3, [pc, #80]	; (8002b98 <prvTaskExitError+0x5c>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b4e:	d00c      	beq.n	8002b6a <prvTaskExitError+0x2e>
	__asm volatile
 8002b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b54:	b672      	cpsid	i
 8002b56:	f383 8811 	msr	BASEPRI, r3
 8002b5a:	f3bf 8f6f 	isb	sy
 8002b5e:	f3bf 8f4f 	dsb	sy
 8002b62:	b662      	cpsie	i
 8002b64:	60fb      	str	r3, [r7, #12]
}
 8002b66:	bf00      	nop
 8002b68:	e7fe      	b.n	8002b68 <prvTaskExitError+0x2c>
	__asm volatile
 8002b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b6e:	b672      	cpsid	i
 8002b70:	f383 8811 	msr	BASEPRI, r3
 8002b74:	f3bf 8f6f 	isb	sy
 8002b78:	f3bf 8f4f 	dsb	sy
 8002b7c:	b662      	cpsie	i
 8002b7e:	60bb      	str	r3, [r7, #8]
}
 8002b80:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002b82:	bf00      	nop
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d0fc      	beq.n	8002b84 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002b8a:	bf00      	nop
 8002b8c:	bf00      	nop
 8002b8e:	3714      	adds	r7, #20
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr
 8002b98:	2000000c 	.word	0x2000000c
 8002b9c:	00000000 	.word	0x00000000

08002ba0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002ba0:	4b07      	ldr	r3, [pc, #28]	; (8002bc0 <pxCurrentTCBConst2>)
 8002ba2:	6819      	ldr	r1, [r3, #0]
 8002ba4:	6808      	ldr	r0, [r1, #0]
 8002ba6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002baa:	f380 8809 	msr	PSP, r0
 8002bae:	f3bf 8f6f 	isb	sy
 8002bb2:	f04f 0000 	mov.w	r0, #0
 8002bb6:	f380 8811 	msr	BASEPRI, r0
 8002bba:	4770      	bx	lr
 8002bbc:	f3af 8000 	nop.w

08002bc0 <pxCurrentTCBConst2>:
 8002bc0:	200002d0 	.word	0x200002d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002bc4:	bf00      	nop
 8002bc6:	bf00      	nop

08002bc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002bc8:	4808      	ldr	r0, [pc, #32]	; (8002bec <prvPortStartFirstTask+0x24>)
 8002bca:	6800      	ldr	r0, [r0, #0]
 8002bcc:	6800      	ldr	r0, [r0, #0]
 8002bce:	f380 8808 	msr	MSP, r0
 8002bd2:	f04f 0000 	mov.w	r0, #0
 8002bd6:	f380 8814 	msr	CONTROL, r0
 8002bda:	b662      	cpsie	i
 8002bdc:	b661      	cpsie	f
 8002bde:	f3bf 8f4f 	dsb	sy
 8002be2:	f3bf 8f6f 	isb	sy
 8002be6:	df00      	svc	0
 8002be8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002bea:	bf00      	nop
 8002bec:	e000ed08 	.word	0xe000ed08

08002bf0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002bf6:	4b37      	ldr	r3, [pc, #220]	; (8002cd4 <xPortStartScheduler+0xe4>)
 8002bf8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	22ff      	movs	r2, #255	; 0xff
 8002c06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002c10:	78fb      	ldrb	r3, [r7, #3]
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002c18:	b2da      	uxtb	r2, r3
 8002c1a:	4b2f      	ldr	r3, [pc, #188]	; (8002cd8 <xPortStartScheduler+0xe8>)
 8002c1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002c1e:	4b2f      	ldr	r3, [pc, #188]	; (8002cdc <xPortStartScheduler+0xec>)
 8002c20:	2207      	movs	r2, #7
 8002c22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002c24:	e009      	b.n	8002c3a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8002c26:	4b2d      	ldr	r3, [pc, #180]	; (8002cdc <xPortStartScheduler+0xec>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	4a2b      	ldr	r2, [pc, #172]	; (8002cdc <xPortStartScheduler+0xec>)
 8002c2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002c30:	78fb      	ldrb	r3, [r7, #3]
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002c3a:	78fb      	ldrb	r3, [r7, #3]
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c42:	2b80      	cmp	r3, #128	; 0x80
 8002c44:	d0ef      	beq.n	8002c26 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002c46:	4b25      	ldr	r3, [pc, #148]	; (8002cdc <xPortStartScheduler+0xec>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f1c3 0307 	rsb	r3, r3, #7
 8002c4e:	2b04      	cmp	r3, #4
 8002c50:	d00c      	beq.n	8002c6c <xPortStartScheduler+0x7c>
	__asm volatile
 8002c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c56:	b672      	cpsid	i
 8002c58:	f383 8811 	msr	BASEPRI, r3
 8002c5c:	f3bf 8f6f 	isb	sy
 8002c60:	f3bf 8f4f 	dsb	sy
 8002c64:	b662      	cpsie	i
 8002c66:	60bb      	str	r3, [r7, #8]
}
 8002c68:	bf00      	nop
 8002c6a:	e7fe      	b.n	8002c6a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002c6c:	4b1b      	ldr	r3, [pc, #108]	; (8002cdc <xPortStartScheduler+0xec>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	021b      	lsls	r3, r3, #8
 8002c72:	4a1a      	ldr	r2, [pc, #104]	; (8002cdc <xPortStartScheduler+0xec>)
 8002c74:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002c76:	4b19      	ldr	r3, [pc, #100]	; (8002cdc <xPortStartScheduler+0xec>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002c7e:	4a17      	ldr	r2, [pc, #92]	; (8002cdc <xPortStartScheduler+0xec>)
 8002c80:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	b2da      	uxtb	r2, r3
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002c8a:	4b15      	ldr	r3, [pc, #84]	; (8002ce0 <xPortStartScheduler+0xf0>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a14      	ldr	r2, [pc, #80]	; (8002ce0 <xPortStartScheduler+0xf0>)
 8002c90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c94:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002c96:	4b12      	ldr	r3, [pc, #72]	; (8002ce0 <xPortStartScheduler+0xf0>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a11      	ldr	r2, [pc, #68]	; (8002ce0 <xPortStartScheduler+0xf0>)
 8002c9c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002ca0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002ca2:	f000 f8dd 	bl	8002e60 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002ca6:	4b0f      	ldr	r3, [pc, #60]	; (8002ce4 <xPortStartScheduler+0xf4>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8002cac:	f000 f8fc 	bl	8002ea8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002cb0:	4b0d      	ldr	r3, [pc, #52]	; (8002ce8 <xPortStartScheduler+0xf8>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a0c      	ldr	r2, [pc, #48]	; (8002ce8 <xPortStartScheduler+0xf8>)
 8002cb6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002cba:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002cbc:	f7ff ff84 	bl	8002bc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002cc0:	f7ff fd4e 	bl	8002760 <vTaskSwitchContext>
	prvTaskExitError();
 8002cc4:	f7ff ff3a 	bl	8002b3c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3710      	adds	r7, #16
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	e000e400 	.word	0xe000e400
 8002cd8:	200003fc 	.word	0x200003fc
 8002cdc:	20000400 	.word	0x20000400
 8002ce0:	e000ed20 	.word	0xe000ed20
 8002ce4:	2000000c 	.word	0x2000000c
 8002ce8:	e000ef34 	.word	0xe000ef34

08002cec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
	__asm volatile
 8002cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cf6:	b672      	cpsid	i
 8002cf8:	f383 8811 	msr	BASEPRI, r3
 8002cfc:	f3bf 8f6f 	isb	sy
 8002d00:	f3bf 8f4f 	dsb	sy
 8002d04:	b662      	cpsie	i
 8002d06:	607b      	str	r3, [r7, #4]
}
 8002d08:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002d0a:	4b10      	ldr	r3, [pc, #64]	; (8002d4c <vPortEnterCritical+0x60>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	3301      	adds	r3, #1
 8002d10:	4a0e      	ldr	r2, [pc, #56]	; (8002d4c <vPortEnterCritical+0x60>)
 8002d12:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002d14:	4b0d      	ldr	r3, [pc, #52]	; (8002d4c <vPortEnterCritical+0x60>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d111      	bne.n	8002d40 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002d1c:	4b0c      	ldr	r3, [pc, #48]	; (8002d50 <vPortEnterCritical+0x64>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d00c      	beq.n	8002d40 <vPortEnterCritical+0x54>
	__asm volatile
 8002d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d2a:	b672      	cpsid	i
 8002d2c:	f383 8811 	msr	BASEPRI, r3
 8002d30:	f3bf 8f6f 	isb	sy
 8002d34:	f3bf 8f4f 	dsb	sy
 8002d38:	b662      	cpsie	i
 8002d3a:	603b      	str	r3, [r7, #0]
}
 8002d3c:	bf00      	nop
 8002d3e:	e7fe      	b.n	8002d3e <vPortEnterCritical+0x52>
	}
}
 8002d40:	bf00      	nop
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr
 8002d4c:	2000000c 	.word	0x2000000c
 8002d50:	e000ed04 	.word	0xe000ed04

08002d54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002d5a:	4b13      	ldr	r3, [pc, #76]	; (8002da8 <vPortExitCritical+0x54>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d10c      	bne.n	8002d7c <vPortExitCritical+0x28>
	__asm volatile
 8002d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d66:	b672      	cpsid	i
 8002d68:	f383 8811 	msr	BASEPRI, r3
 8002d6c:	f3bf 8f6f 	isb	sy
 8002d70:	f3bf 8f4f 	dsb	sy
 8002d74:	b662      	cpsie	i
 8002d76:	607b      	str	r3, [r7, #4]
}
 8002d78:	bf00      	nop
 8002d7a:	e7fe      	b.n	8002d7a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8002d7c:	4b0a      	ldr	r3, [pc, #40]	; (8002da8 <vPortExitCritical+0x54>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	3b01      	subs	r3, #1
 8002d82:	4a09      	ldr	r2, [pc, #36]	; (8002da8 <vPortExitCritical+0x54>)
 8002d84:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002d86:	4b08      	ldr	r3, [pc, #32]	; (8002da8 <vPortExitCritical+0x54>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d105      	bne.n	8002d9a <vPortExitCritical+0x46>
 8002d8e:	2300      	movs	r3, #0
 8002d90:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002d98:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8002d9a:	bf00      	nop
 8002d9c:	370c      	adds	r7, #12
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	2000000c 	.word	0x2000000c
 8002dac:	00000000 	.word	0x00000000

08002db0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002db0:	f3ef 8009 	mrs	r0, PSP
 8002db4:	f3bf 8f6f 	isb	sy
 8002db8:	4b15      	ldr	r3, [pc, #84]	; (8002e10 <pxCurrentTCBConst>)
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	f01e 0f10 	tst.w	lr, #16
 8002dc0:	bf08      	it	eq
 8002dc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002dc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dca:	6010      	str	r0, [r2, #0]
 8002dcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002dd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002dd4:	b672      	cpsid	i
 8002dd6:	f380 8811 	msr	BASEPRI, r0
 8002dda:	f3bf 8f4f 	dsb	sy
 8002dde:	f3bf 8f6f 	isb	sy
 8002de2:	b662      	cpsie	i
 8002de4:	f7ff fcbc 	bl	8002760 <vTaskSwitchContext>
 8002de8:	f04f 0000 	mov.w	r0, #0
 8002dec:	f380 8811 	msr	BASEPRI, r0
 8002df0:	bc09      	pop	{r0, r3}
 8002df2:	6819      	ldr	r1, [r3, #0]
 8002df4:	6808      	ldr	r0, [r1, #0]
 8002df6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dfa:	f01e 0f10 	tst.w	lr, #16
 8002dfe:	bf08      	it	eq
 8002e00:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002e04:	f380 8809 	msr	PSP, r0
 8002e08:	f3bf 8f6f 	isb	sy
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop

08002e10 <pxCurrentTCBConst>:
 8002e10:	200002d0 	.word	0x200002d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002e14:	bf00      	nop
 8002e16:	bf00      	nop

08002e18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
	__asm volatile
 8002e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e22:	b672      	cpsid	i
 8002e24:	f383 8811 	msr	BASEPRI, r3
 8002e28:	f3bf 8f6f 	isb	sy
 8002e2c:	f3bf 8f4f 	dsb	sy
 8002e30:	b662      	cpsie	i
 8002e32:	607b      	str	r3, [r7, #4]
}
 8002e34:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002e36:	f7ff fbd9 	bl	80025ec <xTaskIncrementTick>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d003      	beq.n	8002e48 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002e40:	4b06      	ldr	r3, [pc, #24]	; (8002e5c <xPortSysTickHandler+0x44>)
 8002e42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e46:	601a      	str	r2, [r3, #0]
 8002e48:	2300      	movs	r3, #0
 8002e4a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	f383 8811 	msr	BASEPRI, r3
}
 8002e52:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8002e54:	bf00      	nop
 8002e56:	3708      	adds	r7, #8
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	e000ed04 	.word	0xe000ed04

08002e60 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002e64:	4b0b      	ldr	r3, [pc, #44]	; (8002e94 <vPortSetupTimerInterrupt+0x34>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002e6a:	4b0b      	ldr	r3, [pc, #44]	; (8002e98 <vPortSetupTimerInterrupt+0x38>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002e70:	4b0a      	ldr	r3, [pc, #40]	; (8002e9c <vPortSetupTimerInterrupt+0x3c>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a0a      	ldr	r2, [pc, #40]	; (8002ea0 <vPortSetupTimerInterrupt+0x40>)
 8002e76:	fba2 2303 	umull	r2, r3, r2, r3
 8002e7a:	099b      	lsrs	r3, r3, #6
 8002e7c:	4a09      	ldr	r2, [pc, #36]	; (8002ea4 <vPortSetupTimerInterrupt+0x44>)
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002e82:	4b04      	ldr	r3, [pc, #16]	; (8002e94 <vPortSetupTimerInterrupt+0x34>)
 8002e84:	2207      	movs	r2, #7
 8002e86:	601a      	str	r2, [r3, #0]
}
 8002e88:	bf00      	nop
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	e000e010 	.word	0xe000e010
 8002e98:	e000e018 	.word	0xe000e018
 8002e9c:	20000000 	.word	0x20000000
 8002ea0:	10624dd3 	.word	0x10624dd3
 8002ea4:	e000e014 	.word	0xe000e014

08002ea8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002ea8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002eb8 <vPortEnableVFP+0x10>
 8002eac:	6801      	ldr	r1, [r0, #0]
 8002eae:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002eb2:	6001      	str	r1, [r0, #0]
 8002eb4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8002eb6:	bf00      	nop
 8002eb8:	e000ed88 	.word	0xe000ed88

08002ebc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b08a      	sub	sp, #40	; 0x28
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002ec8:	f7ff fae4 	bl	8002494 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002ecc:	4b5b      	ldr	r3, [pc, #364]	; (800303c <pvPortMalloc+0x180>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d101      	bne.n	8002ed8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002ed4:	f000 f91a 	bl	800310c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002ed8:	4b59      	ldr	r3, [pc, #356]	; (8003040 <pvPortMalloc+0x184>)
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4013      	ands	r3, r2
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f040 8092 	bne.w	800300a <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d01f      	beq.n	8002f2c <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8002eec:	2208      	movs	r2, #8
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4413      	add	r3, r2
 8002ef2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f003 0307 	and.w	r3, r3, #7
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d016      	beq.n	8002f2c <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f023 0307 	bic.w	r3, r3, #7
 8002f04:	3308      	adds	r3, #8
 8002f06:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f003 0307 	and.w	r3, r3, #7
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d00c      	beq.n	8002f2c <pvPortMalloc+0x70>
	__asm volatile
 8002f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f16:	b672      	cpsid	i
 8002f18:	f383 8811 	msr	BASEPRI, r3
 8002f1c:	f3bf 8f6f 	isb	sy
 8002f20:	f3bf 8f4f 	dsb	sy
 8002f24:	b662      	cpsie	i
 8002f26:	617b      	str	r3, [r7, #20]
}
 8002f28:	bf00      	nop
 8002f2a:	e7fe      	b.n	8002f2a <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d06b      	beq.n	800300a <pvPortMalloc+0x14e>
 8002f32:	4b44      	ldr	r3, [pc, #272]	; (8003044 <pvPortMalloc+0x188>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d866      	bhi.n	800300a <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002f3c:	4b42      	ldr	r3, [pc, #264]	; (8003048 <pvPortMalloc+0x18c>)
 8002f3e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002f40:	4b41      	ldr	r3, [pc, #260]	; (8003048 <pvPortMalloc+0x18c>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002f46:	e004      	b.n	8002f52 <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8002f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d903      	bls.n	8002f64 <pvPortMalloc+0xa8>
 8002f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d1f1      	bne.n	8002f48 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002f64:	4b35      	ldr	r3, [pc, #212]	; (800303c <pvPortMalloc+0x180>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d04d      	beq.n	800300a <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002f6e:	6a3b      	ldr	r3, [r7, #32]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2208      	movs	r2, #8
 8002f74:	4413      	add	r3, r2
 8002f76:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	6a3b      	ldr	r3, [r7, #32]
 8002f7e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f82:	685a      	ldr	r2, [r3, #4]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	1ad2      	subs	r2, r2, r3
 8002f88:	2308      	movs	r3, #8
 8002f8a:	005b      	lsls	r3, r3, #1
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d921      	bls.n	8002fd4 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002f90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4413      	add	r3, r2
 8002f96:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	f003 0307 	and.w	r3, r3, #7
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d00c      	beq.n	8002fbc <pvPortMalloc+0x100>
	__asm volatile
 8002fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fa6:	b672      	cpsid	i
 8002fa8:	f383 8811 	msr	BASEPRI, r3
 8002fac:	f3bf 8f6f 	isb	sy
 8002fb0:	f3bf 8f4f 	dsb	sy
 8002fb4:	b662      	cpsie	i
 8002fb6:	613b      	str	r3, [r7, #16]
}
 8002fb8:	bf00      	nop
 8002fba:	e7fe      	b.n	8002fba <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbe:	685a      	ldr	r2, [r3, #4]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	1ad2      	subs	r2, r2, r3
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002fce:	69b8      	ldr	r0, [r7, #24]
 8002fd0:	f000 f8fe 	bl	80031d0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002fd4:	4b1b      	ldr	r3, [pc, #108]	; (8003044 <pvPortMalloc+0x188>)
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	4a19      	ldr	r2, [pc, #100]	; (8003044 <pvPortMalloc+0x188>)
 8002fe0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002fe2:	4b18      	ldr	r3, [pc, #96]	; (8003044 <pvPortMalloc+0x188>)
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	4b19      	ldr	r3, [pc, #100]	; (800304c <pvPortMalloc+0x190>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d203      	bcs.n	8002ff6 <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002fee:	4b15      	ldr	r3, [pc, #84]	; (8003044 <pvPortMalloc+0x188>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a16      	ldr	r2, [pc, #88]	; (800304c <pvPortMalloc+0x190>)
 8002ff4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff8:	685a      	ldr	r2, [r3, #4]
 8002ffa:	4b11      	ldr	r3, [pc, #68]	; (8003040 <pvPortMalloc+0x184>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	431a      	orrs	r2, r3
 8003000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003002:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003006:	2200      	movs	r2, #0
 8003008:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800300a:	f7ff fa51 	bl	80024b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	f003 0307 	and.w	r3, r3, #7
 8003014:	2b00      	cmp	r3, #0
 8003016:	d00c      	beq.n	8003032 <pvPortMalloc+0x176>
	__asm volatile
 8003018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800301c:	b672      	cpsid	i
 800301e:	f383 8811 	msr	BASEPRI, r3
 8003022:	f3bf 8f6f 	isb	sy
 8003026:	f3bf 8f4f 	dsb	sy
 800302a:	b662      	cpsie	i
 800302c:	60fb      	str	r3, [r7, #12]
}
 800302e:	bf00      	nop
 8003030:	e7fe      	b.n	8003030 <pvPortMalloc+0x174>
	return pvReturn;
 8003032:	69fb      	ldr	r3, [r7, #28]
}
 8003034:	4618      	mov	r0, r3
 8003036:	3728      	adds	r7, #40	; 0x28
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	2000400c 	.word	0x2000400c
 8003040:	20004018 	.word	0x20004018
 8003044:	20004010 	.word	0x20004010
 8003048:	20004004 	.word	0x20004004
 800304c:	20004014 	.word	0x20004014

08003050 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b086      	sub	sp, #24
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d04c      	beq.n	80030fc <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003062:	2308      	movs	r3, #8
 8003064:	425b      	negs	r3, r3
 8003066:	697a      	ldr	r2, [r7, #20]
 8003068:	4413      	add	r3, r2
 800306a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	685a      	ldr	r2, [r3, #4]
 8003074:	4b23      	ldr	r3, [pc, #140]	; (8003104 <vPortFree+0xb4>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4013      	ands	r3, r2
 800307a:	2b00      	cmp	r3, #0
 800307c:	d10c      	bne.n	8003098 <vPortFree+0x48>
	__asm volatile
 800307e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003082:	b672      	cpsid	i
 8003084:	f383 8811 	msr	BASEPRI, r3
 8003088:	f3bf 8f6f 	isb	sy
 800308c:	f3bf 8f4f 	dsb	sy
 8003090:	b662      	cpsie	i
 8003092:	60fb      	str	r3, [r7, #12]
}
 8003094:	bf00      	nop
 8003096:	e7fe      	b.n	8003096 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d00c      	beq.n	80030ba <vPortFree+0x6a>
	__asm volatile
 80030a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030a4:	b672      	cpsid	i
 80030a6:	f383 8811 	msr	BASEPRI, r3
 80030aa:	f3bf 8f6f 	isb	sy
 80030ae:	f3bf 8f4f 	dsb	sy
 80030b2:	b662      	cpsie	i
 80030b4:	60bb      	str	r3, [r7, #8]
}
 80030b6:	bf00      	nop
 80030b8:	e7fe      	b.n	80030b8 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	685a      	ldr	r2, [r3, #4]
 80030be:	4b11      	ldr	r3, [pc, #68]	; (8003104 <vPortFree+0xb4>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4013      	ands	r3, r2
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d019      	beq.n	80030fc <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d115      	bne.n	80030fc <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	685a      	ldr	r2, [r3, #4]
 80030d4:	4b0b      	ldr	r3, [pc, #44]	; (8003104 <vPortFree+0xb4>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	43db      	mvns	r3, r3
 80030da:	401a      	ands	r2, r3
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80030e0:	f7ff f9d8 	bl	8002494 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	685a      	ldr	r2, [r3, #4]
 80030e8:	4b07      	ldr	r3, [pc, #28]	; (8003108 <vPortFree+0xb8>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4413      	add	r3, r2
 80030ee:	4a06      	ldr	r2, [pc, #24]	; (8003108 <vPortFree+0xb8>)
 80030f0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80030f2:	6938      	ldr	r0, [r7, #16]
 80030f4:	f000 f86c 	bl	80031d0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80030f8:	f7ff f9da 	bl	80024b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80030fc:	bf00      	nop
 80030fe:	3718      	adds	r7, #24
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	20004018 	.word	0x20004018
 8003108:	20004010 	.word	0x20004010

0800310c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800310c:	b480      	push	{r7}
 800310e:	b085      	sub	sp, #20
 8003110:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003112:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8003116:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003118:	4b27      	ldr	r3, [pc, #156]	; (80031b8 <prvHeapInit+0xac>)
 800311a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f003 0307 	and.w	r3, r3, #7
 8003122:	2b00      	cmp	r3, #0
 8003124:	d00c      	beq.n	8003140 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	3307      	adds	r3, #7
 800312a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f023 0307 	bic.w	r3, r3, #7
 8003132:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003134:	68ba      	ldr	r2, [r7, #8]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	4a1f      	ldr	r2, [pc, #124]	; (80031b8 <prvHeapInit+0xac>)
 800313c:	4413      	add	r3, r2
 800313e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003144:	4a1d      	ldr	r2, [pc, #116]	; (80031bc <prvHeapInit+0xb0>)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800314a:	4b1c      	ldr	r3, [pc, #112]	; (80031bc <prvHeapInit+0xb0>)
 800314c:	2200      	movs	r2, #0
 800314e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	68ba      	ldr	r2, [r7, #8]
 8003154:	4413      	add	r3, r2
 8003156:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003158:	2208      	movs	r2, #8
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	1a9b      	subs	r3, r3, r2
 800315e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f023 0307 	bic.w	r3, r3, #7
 8003166:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	4a15      	ldr	r2, [pc, #84]	; (80031c0 <prvHeapInit+0xb4>)
 800316c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800316e:	4b14      	ldr	r3, [pc, #80]	; (80031c0 <prvHeapInit+0xb4>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2200      	movs	r2, #0
 8003174:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003176:	4b12      	ldr	r3, [pc, #72]	; (80031c0 <prvHeapInit+0xb4>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2200      	movs	r2, #0
 800317c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	68fa      	ldr	r2, [r7, #12]
 8003186:	1ad2      	subs	r2, r2, r3
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800318c:	4b0c      	ldr	r3, [pc, #48]	; (80031c0 <prvHeapInit+0xb4>)
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	4a0a      	ldr	r2, [pc, #40]	; (80031c4 <prvHeapInit+0xb8>)
 800319a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	4a09      	ldr	r2, [pc, #36]	; (80031c8 <prvHeapInit+0xbc>)
 80031a2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80031a4:	4b09      	ldr	r3, [pc, #36]	; (80031cc <prvHeapInit+0xc0>)
 80031a6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80031aa:	601a      	str	r2, [r3, #0]
}
 80031ac:	bf00      	nop
 80031ae:	3714      	adds	r7, #20
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr
 80031b8:	20000404 	.word	0x20000404
 80031bc:	20004004 	.word	0x20004004
 80031c0:	2000400c 	.word	0x2000400c
 80031c4:	20004014 	.word	0x20004014
 80031c8:	20004010 	.word	0x20004010
 80031cc:	20004018 	.word	0x20004018

080031d0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80031d0:	b480      	push	{r7}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80031d8:	4b28      	ldr	r3, [pc, #160]	; (800327c <prvInsertBlockIntoFreeList+0xac>)
 80031da:	60fb      	str	r3, [r7, #12]
 80031dc:	e002      	b.n	80031e4 <prvInsertBlockIntoFreeList+0x14>
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	60fb      	str	r3, [r7, #12]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d8f7      	bhi.n	80031de <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	68ba      	ldr	r2, [r7, #8]
 80031f8:	4413      	add	r3, r2
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d108      	bne.n	8003212 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	685a      	ldr	r2, [r3, #4]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	441a      	add	r2, r3
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	68ba      	ldr	r2, [r7, #8]
 800321c:	441a      	add	r2, r3
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	429a      	cmp	r2, r3
 8003224:	d118      	bne.n	8003258 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	4b15      	ldr	r3, [pc, #84]	; (8003280 <prvInsertBlockIntoFreeList+0xb0>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	429a      	cmp	r2, r3
 8003230:	d00d      	beq.n	800324e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685a      	ldr	r2, [r3, #4]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	441a      	add	r2, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	601a      	str	r2, [r3, #0]
 800324c:	e008      	b.n	8003260 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800324e:	4b0c      	ldr	r3, [pc, #48]	; (8003280 <prvInsertBlockIntoFreeList+0xb0>)
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	601a      	str	r2, [r3, #0]
 8003256:	e003      	b.n	8003260 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003260:	68fa      	ldr	r2, [r7, #12]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	429a      	cmp	r2, r3
 8003266:	d002      	beq.n	800326e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800326e:	bf00      	nop
 8003270:	3714      	adds	r7, #20
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	20004004 	.word	0x20004004
 8003280:	2000400c 	.word	0x2000400c

08003284 <memset>:
 8003284:	4402      	add	r2, r0
 8003286:	4603      	mov	r3, r0
 8003288:	4293      	cmp	r3, r2
 800328a:	d100      	bne.n	800328e <memset+0xa>
 800328c:	4770      	bx	lr
 800328e:	f803 1b01 	strb.w	r1, [r3], #1
 8003292:	e7f9      	b.n	8003288 <memset+0x4>

08003294 <__libc_init_array>:
 8003294:	b570      	push	{r4, r5, r6, lr}
 8003296:	4d0d      	ldr	r5, [pc, #52]	; (80032cc <__libc_init_array+0x38>)
 8003298:	4c0d      	ldr	r4, [pc, #52]	; (80032d0 <__libc_init_array+0x3c>)
 800329a:	1b64      	subs	r4, r4, r5
 800329c:	10a4      	asrs	r4, r4, #2
 800329e:	2600      	movs	r6, #0
 80032a0:	42a6      	cmp	r6, r4
 80032a2:	d109      	bne.n	80032b8 <__libc_init_array+0x24>
 80032a4:	4d0b      	ldr	r5, [pc, #44]	; (80032d4 <__libc_init_array+0x40>)
 80032a6:	4c0c      	ldr	r4, [pc, #48]	; (80032d8 <__libc_init_array+0x44>)
 80032a8:	f000 f818 	bl	80032dc <_init>
 80032ac:	1b64      	subs	r4, r4, r5
 80032ae:	10a4      	asrs	r4, r4, #2
 80032b0:	2600      	movs	r6, #0
 80032b2:	42a6      	cmp	r6, r4
 80032b4:	d105      	bne.n	80032c2 <__libc_init_array+0x2e>
 80032b6:	bd70      	pop	{r4, r5, r6, pc}
 80032b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80032bc:	4798      	blx	r3
 80032be:	3601      	adds	r6, #1
 80032c0:	e7ee      	b.n	80032a0 <__libc_init_array+0xc>
 80032c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80032c6:	4798      	blx	r3
 80032c8:	3601      	adds	r6, #1
 80032ca:	e7f2      	b.n	80032b2 <__libc_init_array+0x1e>
 80032cc:	0800333c 	.word	0x0800333c
 80032d0:	0800333c 	.word	0x0800333c
 80032d4:	0800333c 	.word	0x0800333c
 80032d8:	08003340 	.word	0x08003340

080032dc <_init>:
 80032dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032de:	bf00      	nop
 80032e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032e2:	bc08      	pop	{r3}
 80032e4:	469e      	mov	lr, r3
 80032e6:	4770      	bx	lr

080032e8 <_fini>:
 80032e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ea:	bf00      	nop
 80032ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032ee:	bc08      	pop	{r3}
 80032f0:	469e      	mov	lr, r3
 80032f2:	4770      	bx	lr
