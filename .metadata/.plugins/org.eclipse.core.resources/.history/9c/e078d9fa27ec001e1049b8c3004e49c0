/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "adc.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */
#define FILTER_ALPHA 0.1f // Adjust this value based on filter requirements
#define INPUT_FILTER_R1 100 // Ohms
#define INPUT_FILTER_C 100e-9 // Farads
#define INPUT_FILTER_R2 100 // Ohms

// Global variable
float previousFilteredValue = 0.0f;
float previousFilteredTorque = 0.0f;
float torque_signal = 0.0f;
float filtered_torque = 0.0f;
float torque_value = 0.0f;
uint32_t adcValue;

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
float applyInputFilter(float rawValue, float previousFilteredValue);
float applyLowPassFilter(float rawValue, float previousFilteredValue);

/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_ADC1_Init();
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
	{

	  // Start ADC conversion
	  if (HAL_ADC_Start(&hadc1) != HAL_OK)
	  {
	  // ADC start error handling
	    	}

	  // Wait for conversion to complete
	  if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) != HAL_OK)
	    {
	  // ADC conversion error handling
	         }

	  // Read the converted value
	  uint16_t adcValue = HAL_ADC_GetValue(&hadc1);

	  // Apply input filtering
	  float filteredValue = applyInputFilter((float)adcValue, previousFilteredValue);

	  // Convert ADC value to voltage
	  torque_signal = filteredValue * (3.6f / 4095.0f); // Assuming Vref+ = 10V and 12-bit ADC

	  // Define the input range
	  float min_input = 1.7f;
	  float max_input = 3.6f;

	  // Define the output range
	  float min_output = -5.0f;
	  float max_output = +5.0f;

	  // Perform the linear transformation
	  filtered_torque = ((torque_signal - min_input) / (max_input - min_input)) * (max_output - min_output) + min_output;

	  // Apply low-pass filter
	  torque_value = applyLowPassFilter(filtered_torque, previousFilteredTorque);

	  // Store previous filtered values for next iteration
	  previousFilteredValue = filteredValue;
	  previousFilteredTorque = torque_value;

	 /* for (i=0;i<50;i++)
	  {
		  i=i+1;
	  }*/
/*
		// Start ADC conversion
		if (HAL_ADC_Start(&hadc1) != HAL_OK) {
			Error_Handler();
		}

		// Wait for conversion to complete
		if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) != HAL_OK) {
			Error_Handler();
		}

		// Read ADC value
		 adcValue = HAL_ADC_GetValue(&hadc1);

		// Convert ADC value to voltage (assuming 3.3V reference voltage)
		 voltage = adcValue * (3.3f / 4096.0f);

		// Apply conversion factor to map voltage to torque sensor range
		 torqueVoltage = voltage * VOLTAGE_TO_TORQUE_FACTOR;



		filteredTorqueValue = applyLowPassFilter(torqueVoltage, filteredTorqueValue);
		// Calculate torque value based on the torque resolution
		 torque_Value = torqueVoltage * TORQUE_RESOLUTION  ;
*/

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
//low Pass filtre
float applyLowPassFilter(float rawValue, float previousFilteredValue) {
    return (FILTER_ALPHA * rawValue) + ((1.0f - FILTER_ALPHA) * previousFilteredValue);
}

//Input Filtre

float applyInputFilter(float rawTorqueVoltage) {
    // Calculate the filtered torque voltage using the input filter components
    float filteredTorqueVoltage = (rawTorqueVoltage * INPUT_FILTER_R2) / (INPUT_FILTER_R1 + INPUT_FILTER_R2);
    return filteredTorqueVoltage;
}



void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 192;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 8;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
