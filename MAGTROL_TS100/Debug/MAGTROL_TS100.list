
MAGTROL_TS100.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bd0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08003d70  08003d70  00004d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e38  08003e38  00005010  2**0
                  CONTENTS
  4 .ARM          00000008  08003e38  08003e38  00004e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e40  08003e40  00005010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e40  08003e40  00004e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003e44  08003e44  00004e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08003e48  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004028  20000010  08003e58  00005010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004038  08003e58  00005038  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b5a2  00000000  00000000  00005040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002389  00000000  00000000  000105e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad8  00000000  00000000  00012970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000821  00000000  00000000  00013448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017436  00000000  00000000  00013c69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c8a9  00000000  00000000  0002b09f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097630  00000000  00000000  00037948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cef78  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ae4  00000000  00000000  000cefbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000d1aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003d58 	.word	0x08003d58

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08003d58 	.word	0x08003d58

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004d0:	b480      	push	{r7}
 80004d2:	b085      	sub	sp, #20
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	60f8      	str	r0, [r7, #12]
 80004d8:	60b9      	str	r1, [r7, #8]
 80004da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	4a07      	ldr	r2, [pc, #28]	@ (80004fc <vApplicationGetIdleTaskMemory+0x2c>)
 80004e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	4a06      	ldr	r2, [pc, #24]	@ (8000500 <vApplicationGetIdleTaskMemory+0x30>)
 80004e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2280      	movs	r2, #128	@ 0x80
 80004ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004ee:	bf00      	nop
 80004f0:	3714      	adds	r7, #20
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	2000002c 	.word	0x2000002c
 8000500:	20000080 	.word	0x20000080

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b5b0      	push	{r4, r5, r7, lr}
 8000506:	b0a2      	sub	sp, #136	@ 0x88
 8000508:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050a:	f000 fa7f 	bl	8000a0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050e:	f000 f885 	bl	800061c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000512:	f000 f93d 	bl	8000790 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000516:	f000 f8e9 	bl	80006ec <MX_ADC1_Init>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of Mutex */
  osMutexDef(Mutex);
 800051a:	2300      	movs	r3, #0
 800051c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000520:	2300      	movs	r3, #0
 8000522:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  MutexHandle = osMutexCreate(osMutex(Mutex));
 8000526:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800052a:	4618      	mov	r0, r3
 800052c:	f001 fc9f 	bl	8001e6e <osMutexCreate>
 8000530:	4603      	mov	r3, r0
 8000532:	4a2f      	ldr	r2, [pc, #188]	@ (80005f0 <main+0xec>)
 8000534:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of TorqueQueue */
  osMessageQDef(TorqueQueue, 16, uint16_t);
 8000536:	4b2f      	ldr	r3, [pc, #188]	@ (80005f4 <main+0xf0>)
 8000538:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 800053c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800053e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  TorqueQueueHandle = osMessageCreate(osMessageQ(TorqueQueue), NULL);
 8000542:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000546:	2100      	movs	r1, #0
 8000548:	4618      	mov	r0, r3
 800054a:	f001 fca8 	bl	8001e9e <osMessageCreate>
 800054e:	4603      	mov	r3, r0
 8000550:	4a29      	ldr	r2, [pc, #164]	@ (80005f8 <main+0xf4>)
 8000552:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000554:	4b29      	ldr	r3, [pc, #164]	@ (80005fc <main+0xf8>)
 8000556:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 800055a:	461d      	mov	r5, r3
 800055c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800055e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000560:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000564:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000568:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f001 fc1d 	bl	8001dae <osThreadCreate>
 8000574:	4603      	mov	r3, r0
 8000576:	4a22      	ldr	r2, [pc, #136]	@ (8000600 <main+0xfc>)
 8000578:	6013      	str	r3, [r2, #0]

  /* definition and creation of SpeedTask */
  osThreadDef(SpeedTask, vTask_speed, osPriorityNormal, 0, 128);
 800057a:	4b22      	ldr	r3, [pc, #136]	@ (8000604 <main+0x100>)
 800057c:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8000580:	461d      	mov	r5, r3
 8000582:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000584:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000586:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800058a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SpeedTaskHandle = osThreadCreate(osThread(SpeedTask), NULL);
 800058e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000592:	2100      	movs	r1, #0
 8000594:	4618      	mov	r0, r3
 8000596:	f001 fc0a 	bl	8001dae <osThreadCreate>
 800059a:	4603      	mov	r3, r0
 800059c:	4a1a      	ldr	r2, [pc, #104]	@ (8000608 <main+0x104>)
 800059e:	6013      	str	r3, [r2, #0]

  /* definition and creation of TorqueTask */
  osThreadDef(TorqueTask, vTask_torque, osPriorityNormal, 0, 128);
 80005a0:	4b1a      	ldr	r3, [pc, #104]	@ (800060c <main+0x108>)
 80005a2:	f107 041c 	add.w	r4, r7, #28
 80005a6:	461d      	mov	r5, r3
 80005a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TorqueTaskHandle = osThreadCreate(osThread(TorqueTask), NULL);
 80005b4:	f107 031c 	add.w	r3, r7, #28
 80005b8:	2100      	movs	r1, #0
 80005ba:	4618      	mov	r0, r3
 80005bc:	f001 fbf7 	bl	8001dae <osThreadCreate>
 80005c0:	4603      	mov	r3, r0
 80005c2:	4a13      	ldr	r2, [pc, #76]	@ (8000610 <main+0x10c>)
 80005c4:	6013      	str	r3, [r2, #0]

  /* definition and creation of BITE_TARE */
  osThreadDef(BITE_TARE, vTaskBITE_TARE, osPriorityIdle, 0, 128);
 80005c6:	4b13      	ldr	r3, [pc, #76]	@ (8000614 <main+0x110>)
 80005c8:	463c      	mov	r4, r7
 80005ca:	461d      	mov	r5, r3
 80005cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  BITE_TAREHandle = osThreadCreate(osThread(BITE_TARE), NULL);
 80005d8:	463b      	mov	r3, r7
 80005da:	2100      	movs	r1, #0
 80005dc:	4618      	mov	r0, r3
 80005de:	f001 fbe6 	bl	8001dae <osThreadCreate>
 80005e2:	4603      	mov	r3, r0
 80005e4:	4a0c      	ldr	r2, [pc, #48]	@ (8000618 <main+0x114>)
 80005e6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005e8:	f001 fbda 	bl	8001da0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ec:	bf00      	nop
 80005ee:	e7fd      	b.n	80005ec <main+0xe8>
 80005f0:	200002dc 	.word	0x200002dc
 80005f4:	08003d70 	.word	0x08003d70
 80005f8:	200002d8 	.word	0x200002d8
 80005fc:	08003d8c 	.word	0x08003d8c
 8000600:	200002c8 	.word	0x200002c8
 8000604:	08003db4 	.word	0x08003db4
 8000608:	200002cc 	.word	0x200002cc
 800060c:	08003ddc 	.word	0x08003ddc
 8000610:	200002d0 	.word	0x200002d0
 8000614:	08003e04 	.word	0x08003e04
 8000618:	200002d4 	.word	0x200002d4

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b094      	sub	sp, #80	@ 0x50
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 0320 	add.w	r3, r7, #32
 8000626:	2230      	movs	r2, #48	@ 0x30
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f003 fb5a 	bl	8003ce4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000640:	2300      	movs	r3, #0
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	4b27      	ldr	r3, [pc, #156]	@ (80006e4 <SystemClock_Config+0xc8>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000648:	4a26      	ldr	r2, [pc, #152]	@ (80006e4 <SystemClock_Config+0xc8>)
 800064a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800064e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000650:	4b24      	ldr	r3, [pc, #144]	@ (80006e4 <SystemClock_Config+0xc8>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000654:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800065c:	2300      	movs	r3, #0
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	4b21      	ldr	r3, [pc, #132]	@ (80006e8 <SystemClock_Config+0xcc>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a20      	ldr	r2, [pc, #128]	@ (80006e8 <SystemClock_Config+0xcc>)
 8000666:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800066a:	6013      	str	r3, [r2, #0]
 800066c:	4b1e      	ldr	r3, [pc, #120]	@ (80006e8 <SystemClock_Config+0xcc>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000678:	2302      	movs	r3, #2
 800067a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800067c:	2301      	movs	r3, #1
 800067e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000680:	2310      	movs	r3, #16
 8000682:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000684:	2302      	movs	r3, #2
 8000686:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000688:	2300      	movs	r3, #0
 800068a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800068c:	2308      	movs	r3, #8
 800068e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000690:	23c0      	movs	r3, #192	@ 0xc0
 8000692:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 8000694:	2308      	movs	r3, #8
 8000696:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000698:	2308      	movs	r3, #8
 800069a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069c:	f107 0320 	add.w	r3, r7, #32
 80006a0:	4618      	mov	r0, r3
 80006a2:	f000 ff01 	bl	80014a8 <HAL_RCC_OscConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006ac:	f000 f8bc 	bl	8000828 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b0:	230f      	movs	r3, #15
 80006b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b4:	2302      	movs	r3, #2
 80006b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006bc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c2:	2300      	movs	r3, #0
 80006c4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006c6:	f107 030c 	add.w	r3, r7, #12
 80006ca:	2101      	movs	r1, #1
 80006cc:	4618      	mov	r0, r3
 80006ce:	f001 f963 	bl	8001998 <HAL_RCC_ClockConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006d8:	f000 f8a6 	bl	8000828 <Error_Handler>
  }
}
 80006dc:	bf00      	nop
 80006de:	3750      	adds	r7, #80	@ 0x50
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40023800 	.word	0x40023800
 80006e8:	40007000 	.word	0x40007000

080006ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006f2:	463b      	mov	r3, r7
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006fe:	4b21      	ldr	r3, [pc, #132]	@ (8000784 <MX_ADC1_Init+0x98>)
 8000700:	4a21      	ldr	r2, [pc, #132]	@ (8000788 <MX_ADC1_Init+0x9c>)
 8000702:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000704:	4b1f      	ldr	r3, [pc, #124]	@ (8000784 <MX_ADC1_Init+0x98>)
 8000706:	2200      	movs	r2, #0
 8000708:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800070a:	4b1e      	ldr	r3, [pc, #120]	@ (8000784 <MX_ADC1_Init+0x98>)
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000710:	4b1c      	ldr	r3, [pc, #112]	@ (8000784 <MX_ADC1_Init+0x98>)
 8000712:	2200      	movs	r2, #0
 8000714:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000716:	4b1b      	ldr	r3, [pc, #108]	@ (8000784 <MX_ADC1_Init+0x98>)
 8000718:	2200      	movs	r2, #0
 800071a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800071c:	4b19      	ldr	r3, [pc, #100]	@ (8000784 <MX_ADC1_Init+0x98>)
 800071e:	2200      	movs	r2, #0
 8000720:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000724:	4b17      	ldr	r3, [pc, #92]	@ (8000784 <MX_ADC1_Init+0x98>)
 8000726:	2200      	movs	r2, #0
 8000728:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800072a:	4b16      	ldr	r3, [pc, #88]	@ (8000784 <MX_ADC1_Init+0x98>)
 800072c:	4a17      	ldr	r2, [pc, #92]	@ (800078c <MX_ADC1_Init+0xa0>)
 800072e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000730:	4b14      	ldr	r3, [pc, #80]	@ (8000784 <MX_ADC1_Init+0x98>)
 8000732:	2200      	movs	r2, #0
 8000734:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000736:	4b13      	ldr	r3, [pc, #76]	@ (8000784 <MX_ADC1_Init+0x98>)
 8000738:	2201      	movs	r2, #1
 800073a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800073c:	4b11      	ldr	r3, [pc, #68]	@ (8000784 <MX_ADC1_Init+0x98>)
 800073e:	2200      	movs	r2, #0
 8000740:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000744:	4b0f      	ldr	r3, [pc, #60]	@ (8000784 <MX_ADC1_Init+0x98>)
 8000746:	2201      	movs	r2, #1
 8000748:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800074a:	480e      	ldr	r0, [pc, #56]	@ (8000784 <MX_ADC1_Init+0x98>)
 800074c:	f000 f9d0 	bl	8000af0 <HAL_ADC_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000756:	f000 f867 	bl	8000828 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800075a:	2301      	movs	r3, #1
 800075c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800075e:	2301      	movs	r3, #1
 8000760:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000762:	2300      	movs	r3, #0
 8000764:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000766:	463b      	mov	r3, r7
 8000768:	4619      	mov	r1, r3
 800076a:	4806      	ldr	r0, [pc, #24]	@ (8000784 <MX_ADC1_Init+0x98>)
 800076c:	f000 fa04 	bl	8000b78 <HAL_ADC_ConfigChannel>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000776:	f000 f857 	bl	8000828 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800077a:	bf00      	nop
 800077c:	3710      	adds	r7, #16
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	20000280 	.word	0x20000280
 8000788:	40012000 	.word	0x40012000
 800078c:	0f000001 	.word	0x0f000001

08000790 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b086      	sub	sp, #24
 8000794:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000796:	1d3b      	adds	r3, r7, #4
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]
 80007a2:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a4:	2300      	movs	r3, #0
 80007a6:	603b      	str	r3, [r7, #0]
 80007a8:	4b0d      	ldr	r3, [pc, #52]	@ (80007e0 <MX_GPIO_Init+0x50>)
 80007aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ac:	4a0c      	ldr	r2, [pc, #48]	@ (80007e0 <MX_GPIO_Init+0x50>)
 80007ae:	f043 0301 	orr.w	r3, r3, #1
 80007b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b4:	4b0a      	ldr	r3, [pc, #40]	@ (80007e0 <MX_GPIO_Init+0x50>)
 80007b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b8:	f003 0301 	and.w	r3, r3, #1
 80007bc:	603b      	str	r3, [r7, #0]
 80007be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80007c0:	2304      	movs	r3, #4
 80007c2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007c4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80007c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ce:	1d3b      	adds	r3, r7, #4
 80007d0:	4619      	mov	r1, r3
 80007d2:	4804      	ldr	r0, [pc, #16]	@ (80007e4 <MX_GPIO_Init+0x54>)
 80007d4:	f000 fce4 	bl	80011a0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007d8:	bf00      	nop
 80007da:	3718      	adds	r7, #24
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40023800 	.word	0x40023800
 80007e4:	40020000 	.word	0x40020000

080007e8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80007f0:	2001      	movs	r0, #1
 80007f2:	f001 fb28 	bl	8001e46 <osDelay>
 80007f6:	e7fb      	b.n	80007f0 <StartDefaultTask+0x8>

080007f8 <vTask_speed>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vTask_speed */
void vTask_speed(void const * argument)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vTask_speed */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000800:	2001      	movs	r0, #1
 8000802:	f001 fb20 	bl	8001e46 <osDelay>
 8000806:	e7fb      	b.n	8000800 <vTask_speed+0x8>

08000808 <vTask_torque>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vTask_torque */
void vTask_torque(void const * argument)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vTask_torque */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000810:	2001      	movs	r0, #1
 8000812:	f001 fb18 	bl	8001e46 <osDelay>
 8000816:	e7fb      	b.n	8000810 <vTask_torque+0x8>

08000818 <vTaskBITE_TARE>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vTaskBITE_TARE */
void vTaskBITE_TARE(void const * argument)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vTaskBITE_TARE */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000820:	2001      	movs	r0, #1
 8000822:	f001 fb10 	bl	8001e46 <osDelay>
 8000826:	e7fb      	b.n	8000820 <vTaskBITE_TARE+0x8>

08000828 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800082c:	b672      	cpsid	i
}
 800082e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000830:	bf00      	nop
 8000832:	e7fd      	b.n	8000830 <Error_Handler+0x8>

08000834 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	4b1e      	ldr	r3, [pc, #120]	@ (80008b8 <HAL_MspInit+0x84>)
 8000840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000842:	4a1d      	ldr	r2, [pc, #116]	@ (80008b8 <HAL_MspInit+0x84>)
 8000844:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000848:	6453      	str	r3, [r2, #68]	@ 0x44
 800084a:	4b1b      	ldr	r3, [pc, #108]	@ (80008b8 <HAL_MspInit+0x84>)
 800084c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800084e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	603b      	str	r3, [r7, #0]
 800085a:	4b17      	ldr	r3, [pc, #92]	@ (80008b8 <HAL_MspInit+0x84>)
 800085c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800085e:	4a16      	ldr	r2, [pc, #88]	@ (80008b8 <HAL_MspInit+0x84>)
 8000860:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000864:	6413      	str	r3, [r2, #64]	@ 0x40
 8000866:	4b14      	ldr	r3, [pc, #80]	@ (80008b8 <HAL_MspInit+0x84>)
 8000868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800086a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800086e:	603b      	str	r3, [r7, #0]
 8000870:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 5, 0);
 8000872:	2200      	movs	r2, #0
 8000874:	2105      	movs	r1, #5
 8000876:	f06f 000b 	mvn.w	r0, #11
 800087a:	f000 fc68 	bl	800114e <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 5, 0);
 800087e:	2200      	movs	r2, #0
 8000880:	2105      	movs	r1, #5
 8000882:	f06f 000a 	mvn.w	r0, #10
 8000886:	f000 fc62 	bl	800114e <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 5, 0);
 800088a:	2200      	movs	r2, #0
 800088c:	2105      	movs	r1, #5
 800088e:	f06f 0009 	mvn.w	r0, #9
 8000892:	f000 fc5c 	bl	800114e <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 5, 0);
 8000896:	2200      	movs	r2, #0
 8000898:	2105      	movs	r1, #5
 800089a:	f06f 0004 	mvn.w	r0, #4
 800089e:	f000 fc56 	bl	800114e <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 5, 0);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2105      	movs	r1, #5
 80008a6:	f06f 0003 	mvn.w	r0, #3
 80008aa:	f000 fc50 	bl	800114e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40023800 	.word	0x40023800

080008bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08a      	sub	sp, #40	@ 0x28
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c4:	f107 0314 	add.w	r3, r7, #20
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]
 80008d2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a17      	ldr	r2, [pc, #92]	@ (8000938 <HAL_ADC_MspInit+0x7c>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d127      	bne.n	800092e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	613b      	str	r3, [r7, #16]
 80008e2:	4b16      	ldr	r3, [pc, #88]	@ (800093c <HAL_ADC_MspInit+0x80>)
 80008e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008e6:	4a15      	ldr	r2, [pc, #84]	@ (800093c <HAL_ADC_MspInit+0x80>)
 80008e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80008ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80008ee:	4b13      	ldr	r3, [pc, #76]	@ (800093c <HAL_ADC_MspInit+0x80>)
 80008f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80008f6:	613b      	str	r3, [r7, #16]
 80008f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	4b0f      	ldr	r3, [pc, #60]	@ (800093c <HAL_ADC_MspInit+0x80>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000902:	4a0e      	ldr	r2, [pc, #56]	@ (800093c <HAL_ADC_MspInit+0x80>)
 8000904:	f043 0301 	orr.w	r3, r3, #1
 8000908:	6313      	str	r3, [r2, #48]	@ 0x30
 800090a:	4b0c      	ldr	r3, [pc, #48]	@ (800093c <HAL_ADC_MspInit+0x80>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000916:	2302      	movs	r3, #2
 8000918:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800091a:	2303      	movs	r3, #3
 800091c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000922:	f107 0314 	add.w	r3, r7, #20
 8000926:	4619      	mov	r1, r3
 8000928:	4805      	ldr	r0, [pc, #20]	@ (8000940 <HAL_ADC_MspInit+0x84>)
 800092a:	f000 fc39 	bl	80011a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800092e:	bf00      	nop
 8000930:	3728      	adds	r7, #40	@ 0x28
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40012000 	.word	0x40012000
 800093c:	40023800 	.word	0x40023800
 8000940:	40020000 	.word	0x40020000

08000944 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000948:	bf00      	nop
 800094a:	e7fd      	b.n	8000948 <NMI_Handler+0x4>

0800094c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000950:	bf00      	nop
 8000952:	e7fd      	b.n	8000950 <HardFault_Handler+0x4>

08000954 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000958:	bf00      	nop
 800095a:	e7fd      	b.n	8000958 <MemManage_Handler+0x4>

0800095c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000960:	bf00      	nop
 8000962:	e7fd      	b.n	8000960 <BusFault_Handler+0x4>

08000964 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000968:	bf00      	nop
 800096a:	e7fd      	b.n	8000968 <UsageFault_Handler+0x4>

0800096c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr

0800097a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800097a:	b580      	push	{r7, lr}
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800097e:	f000 f897 	bl	8000ab0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000982:	f002 fca5 	bl	80032d0 <xTaskGetSchedulerState>
 8000986:	4603      	mov	r3, r0
 8000988:	2b01      	cmp	r3, #1
 800098a:	d001      	beq.n	8000990 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800098c:	f002 ff6c 	bl	8003868 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000990:	bf00      	nop
 8000992:	bd80      	pop	{r7, pc}

08000994 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000998:	4b06      	ldr	r3, [pc, #24]	@ (80009b4 <SystemInit+0x20>)
 800099a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800099e:	4a05      	ldr	r2, [pc, #20]	@ (80009b4 <SystemInit+0x20>)
 80009a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	e000ed00 	.word	0xe000ed00

080009b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80009b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009f0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009bc:	f7ff ffea 	bl	8000994 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009c0:	480c      	ldr	r0, [pc, #48]	@ (80009f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009c2:	490d      	ldr	r1, [pc, #52]	@ (80009f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009c4:	4a0d      	ldr	r2, [pc, #52]	@ (80009fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009c8:	e002      	b.n	80009d0 <LoopCopyDataInit>

080009ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ce:	3304      	adds	r3, #4

080009d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009d4:	d3f9      	bcc.n	80009ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009d6:	4a0a      	ldr	r2, [pc, #40]	@ (8000a00 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009d8:	4c0a      	ldr	r4, [pc, #40]	@ (8000a04 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009dc:	e001      	b.n	80009e2 <LoopFillZerobss>

080009de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009e0:	3204      	adds	r2, #4

080009e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009e4:	d3fb      	bcc.n	80009de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009e6:	f003 f985 	bl	8003cf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009ea:	f7ff fd8b 	bl	8000504 <main>
  bx  lr    
 80009ee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80009f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009f8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80009fc:	08003e48 	.word	0x08003e48
  ldr r2, =_sbss
 8000a00:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000a04:	20004038 	.word	0x20004038

08000a08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a08:	e7fe      	b.n	8000a08 <ADC_IRQHandler>
	...

08000a0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a10:	4b0e      	ldr	r3, [pc, #56]	@ (8000a4c <HAL_Init+0x40>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a0d      	ldr	r2, [pc, #52]	@ (8000a4c <HAL_Init+0x40>)
 8000a16:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a1c:	4b0b      	ldr	r3, [pc, #44]	@ (8000a4c <HAL_Init+0x40>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a0a      	ldr	r2, [pc, #40]	@ (8000a4c <HAL_Init+0x40>)
 8000a22:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a28:	4b08      	ldr	r3, [pc, #32]	@ (8000a4c <HAL_Init+0x40>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a07      	ldr	r2, [pc, #28]	@ (8000a4c <HAL_Init+0x40>)
 8000a2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a34:	2003      	movs	r0, #3
 8000a36:	f000 fb7f 	bl	8001138 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a3a:	2000      	movs	r0, #0
 8000a3c:	f000 f808 	bl	8000a50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a40:	f7ff fef8 	bl	8000834 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a44:	2300      	movs	r3, #0
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40023c00 	.word	0x40023c00

08000a50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a58:	4b12      	ldr	r3, [pc, #72]	@ (8000aa4 <HAL_InitTick+0x54>)
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	4b12      	ldr	r3, [pc, #72]	@ (8000aa8 <HAL_InitTick+0x58>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	4619      	mov	r1, r3
 8000a62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f000 fb89 	bl	8001186 <HAL_SYSTICK_Config>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	e00e      	b.n	8000a9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	2b0f      	cmp	r3, #15
 8000a82:	d80a      	bhi.n	8000a9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a84:	2200      	movs	r2, #0
 8000a86:	6879      	ldr	r1, [r7, #4]
 8000a88:	f04f 30ff 	mov.w	r0, #4294967295
 8000a8c:	f000 fb5f 	bl	800114e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a90:	4a06      	ldr	r2, [pc, #24]	@ (8000aac <HAL_InitTick+0x5c>)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a96:	2300      	movs	r3, #0
 8000a98:	e000      	b.n	8000a9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a9a:	2301      	movs	r3, #1
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	3708      	adds	r7, #8
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	20000000 	.word	0x20000000
 8000aa8:	20000008 	.word	0x20000008
 8000aac:	20000004 	.word	0x20000004

08000ab0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ab4:	4b06      	ldr	r3, [pc, #24]	@ (8000ad0 <HAL_IncTick+0x20>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	461a      	mov	r2, r3
 8000aba:	4b06      	ldr	r3, [pc, #24]	@ (8000ad4 <HAL_IncTick+0x24>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4413      	add	r3, r2
 8000ac0:	4a04      	ldr	r2, [pc, #16]	@ (8000ad4 <HAL_IncTick+0x24>)
 8000ac2:	6013      	str	r3, [r2, #0]
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	20000008 	.word	0x20000008
 8000ad4:	200002e0 	.word	0x200002e0

08000ad8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  return uwTick;
 8000adc:	4b03      	ldr	r3, [pc, #12]	@ (8000aec <HAL_GetTick+0x14>)
 8000ade:	681b      	ldr	r3, [r3, #0]
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	200002e0 	.word	0x200002e0

08000af0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000af8:	2300      	movs	r3, #0
 8000afa:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d101      	bne.n	8000b06 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000b02:	2301      	movs	r3, #1
 8000b04:	e033      	b.n	8000b6e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d109      	bne.n	8000b22 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b0e:	6878      	ldr	r0, [r7, #4]
 8000b10:	f7ff fed4 	bl	80008bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	2200      	movs	r2, #0
 8000b18:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b26:	f003 0310 	and.w	r3, r3, #16
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d118      	bne.n	8000b60 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b32:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000b36:	f023 0302 	bic.w	r3, r3, #2
 8000b3a:	f043 0202 	orr.w	r2, r3, #2
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000b42:	6878      	ldr	r0, [r7, #4]
 8000b44:	f000 f94a 	bl	8000ddc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b52:	f023 0303 	bic.w	r3, r3, #3
 8000b56:	f043 0201 	orr.w	r2, r3, #1
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	641a      	str	r2, [r3, #64]	@ 0x40
 8000b5e:	e001      	b.n	8000b64 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000b60:	2301      	movs	r3, #1
 8000b62:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	2200      	movs	r2, #0
 8000b68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3710      	adds	r7, #16
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
	...

08000b78 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b085      	sub	sp, #20
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
 8000b80:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000b82:	2300      	movs	r3, #0
 8000b84:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000b8c:	2b01      	cmp	r3, #1
 8000b8e:	d101      	bne.n	8000b94 <HAL_ADC_ConfigChannel+0x1c>
 8000b90:	2302      	movs	r3, #2
 8000b92:	e113      	b.n	8000dbc <HAL_ADC_ConfigChannel+0x244>
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2201      	movs	r2, #1
 8000b98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	2b09      	cmp	r3, #9
 8000ba2:	d925      	bls.n	8000bf0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	68d9      	ldr	r1, [r3, #12]
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	b29b      	uxth	r3, r3
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	4613      	mov	r3, r2
 8000bb4:	005b      	lsls	r3, r3, #1
 8000bb6:	4413      	add	r3, r2
 8000bb8:	3b1e      	subs	r3, #30
 8000bba:	2207      	movs	r2, #7
 8000bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc0:	43da      	mvns	r2, r3
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	400a      	ands	r2, r1
 8000bc8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	68d9      	ldr	r1, [r3, #12]
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	689a      	ldr	r2, [r3, #8]
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	b29b      	uxth	r3, r3
 8000bda:	4618      	mov	r0, r3
 8000bdc:	4603      	mov	r3, r0
 8000bde:	005b      	lsls	r3, r3, #1
 8000be0:	4403      	add	r3, r0
 8000be2:	3b1e      	subs	r3, #30
 8000be4:	409a      	lsls	r2, r3
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	430a      	orrs	r2, r1
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	e022      	b.n	8000c36 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	6919      	ldr	r1, [r3, #16]
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	b29b      	uxth	r3, r3
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	4613      	mov	r3, r2
 8000c00:	005b      	lsls	r3, r3, #1
 8000c02:	4413      	add	r3, r2
 8000c04:	2207      	movs	r2, #7
 8000c06:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0a:	43da      	mvns	r2, r3
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	400a      	ands	r2, r1
 8000c12:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	6919      	ldr	r1, [r3, #16]
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	689a      	ldr	r2, [r3, #8]
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	b29b      	uxth	r3, r3
 8000c24:	4618      	mov	r0, r3
 8000c26:	4603      	mov	r3, r0
 8000c28:	005b      	lsls	r3, r3, #1
 8000c2a:	4403      	add	r3, r0
 8000c2c:	409a      	lsls	r2, r3
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	430a      	orrs	r2, r1
 8000c34:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	2b06      	cmp	r3, #6
 8000c3c:	d824      	bhi.n	8000c88 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	685a      	ldr	r2, [r3, #4]
 8000c48:	4613      	mov	r3, r2
 8000c4a:	009b      	lsls	r3, r3, #2
 8000c4c:	4413      	add	r3, r2
 8000c4e:	3b05      	subs	r3, #5
 8000c50:	221f      	movs	r2, #31
 8000c52:	fa02 f303 	lsl.w	r3, r2, r3
 8000c56:	43da      	mvns	r2, r3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	400a      	ands	r2, r1
 8000c5e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	b29b      	uxth	r3, r3
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	685a      	ldr	r2, [r3, #4]
 8000c72:	4613      	mov	r3, r2
 8000c74:	009b      	lsls	r3, r3, #2
 8000c76:	4413      	add	r3, r2
 8000c78:	3b05      	subs	r3, #5
 8000c7a:	fa00 f203 	lsl.w	r2, r0, r3
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	430a      	orrs	r2, r1
 8000c84:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c86:	e04c      	b.n	8000d22 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	2b0c      	cmp	r3, #12
 8000c8e:	d824      	bhi.n	8000cda <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	685a      	ldr	r2, [r3, #4]
 8000c9a:	4613      	mov	r3, r2
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	4413      	add	r3, r2
 8000ca0:	3b23      	subs	r3, #35	@ 0x23
 8000ca2:	221f      	movs	r2, #31
 8000ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca8:	43da      	mvns	r2, r3
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	400a      	ands	r2, r1
 8000cb0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	b29b      	uxth	r3, r3
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	685a      	ldr	r2, [r3, #4]
 8000cc4:	4613      	mov	r3, r2
 8000cc6:	009b      	lsls	r3, r3, #2
 8000cc8:	4413      	add	r3, r2
 8000cca:	3b23      	subs	r3, #35	@ 0x23
 8000ccc:	fa00 f203 	lsl.w	r2, r0, r3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	430a      	orrs	r2, r1
 8000cd6:	631a      	str	r2, [r3, #48]	@ 0x30
 8000cd8:	e023      	b.n	8000d22 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	685a      	ldr	r2, [r3, #4]
 8000ce4:	4613      	mov	r3, r2
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	4413      	add	r3, r2
 8000cea:	3b41      	subs	r3, #65	@ 0x41
 8000cec:	221f      	movs	r2, #31
 8000cee:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf2:	43da      	mvns	r2, r3
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	400a      	ands	r2, r1
 8000cfa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	b29b      	uxth	r3, r3
 8000d08:	4618      	mov	r0, r3
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	685a      	ldr	r2, [r3, #4]
 8000d0e:	4613      	mov	r3, r2
 8000d10:	009b      	lsls	r3, r3, #2
 8000d12:	4413      	add	r3, r2
 8000d14:	3b41      	subs	r3, #65	@ 0x41
 8000d16:	fa00 f203 	lsl.w	r2, r0, r3
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	430a      	orrs	r2, r1
 8000d20:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000d22:	4b29      	ldr	r3, [pc, #164]	@ (8000dc8 <HAL_ADC_ConfigChannel+0x250>)
 8000d24:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4a28      	ldr	r2, [pc, #160]	@ (8000dcc <HAL_ADC_ConfigChannel+0x254>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d10f      	bne.n	8000d50 <HAL_ADC_ConfigChannel+0x1d8>
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2b12      	cmp	r3, #18
 8000d36:	d10b      	bne.n	8000d50 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a1d      	ldr	r2, [pc, #116]	@ (8000dcc <HAL_ADC_ConfigChannel+0x254>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d12b      	bne.n	8000db2 <HAL_ADC_ConfigChannel+0x23a>
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a1c      	ldr	r2, [pc, #112]	@ (8000dd0 <HAL_ADC_ConfigChannel+0x258>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d003      	beq.n	8000d6c <HAL_ADC_ConfigChannel+0x1f4>
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	2b11      	cmp	r3, #17
 8000d6a:	d122      	bne.n	8000db2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a11      	ldr	r2, [pc, #68]	@ (8000dd0 <HAL_ADC_ConfigChannel+0x258>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d111      	bne.n	8000db2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000d8e:	4b11      	ldr	r3, [pc, #68]	@ (8000dd4 <HAL_ADC_ConfigChannel+0x25c>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a11      	ldr	r2, [pc, #68]	@ (8000dd8 <HAL_ADC_ConfigChannel+0x260>)
 8000d94:	fba2 2303 	umull	r2, r3, r2, r3
 8000d98:	0c9a      	lsrs	r2, r3, #18
 8000d9a:	4613      	mov	r3, r2
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	4413      	add	r3, r2
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8000da4:	e002      	b.n	8000dac <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8000da6:	68bb      	ldr	r3, [r7, #8]
 8000da8:	3b01      	subs	r3, #1
 8000daa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d1f9      	bne.n	8000da6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2200      	movs	r2, #0
 8000db6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8000dba:	2300      	movs	r3, #0
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3714      	adds	r7, #20
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	40012300 	.word	0x40012300
 8000dcc:	40012000 	.word	0x40012000
 8000dd0:	10000012 	.word	0x10000012
 8000dd4:	20000000 	.word	0x20000000
 8000dd8:	431bde83 	.word	0x431bde83

08000ddc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b085      	sub	sp, #20
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000de4:	4b79      	ldr	r3, [pc, #484]	@ (8000fcc <ADC_Init+0x1f0>)
 8000de6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	685a      	ldr	r2, [r3, #4]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	431a      	orrs	r2, r3
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	685a      	ldr	r2, [r3, #4]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000e10:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	6859      	ldr	r1, [r3, #4]
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	691b      	ldr	r3, [r3, #16]
 8000e1c:	021a      	lsls	r2, r3, #8
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	430a      	orrs	r2, r1
 8000e24:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	685a      	ldr	r2, [r3, #4]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8000e34:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	6859      	ldr	r1, [r3, #4]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	689a      	ldr	r2, [r3, #8]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	430a      	orrs	r2, r1
 8000e46:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	689a      	ldr	r2, [r3, #8]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000e56:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	6899      	ldr	r1, [r3, #8]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	68da      	ldr	r2, [r3, #12]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	430a      	orrs	r2, r1
 8000e68:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e6e:	4a58      	ldr	r2, [pc, #352]	@ (8000fd0 <ADC_Init+0x1f4>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d022      	beq.n	8000eba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	689a      	ldr	r2, [r3, #8]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8000e82:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	6899      	ldr	r1, [r3, #8]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	430a      	orrs	r2, r1
 8000e94:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	689a      	ldr	r2, [r3, #8]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8000ea4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	6899      	ldr	r1, [r3, #8]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	430a      	orrs	r2, r1
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	e00f      	b.n	8000eda <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	689a      	ldr	r2, [r3, #8]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8000ec8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	689a      	ldr	r2, [r3, #8]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8000ed8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	689a      	ldr	r2, [r3, #8]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f022 0202 	bic.w	r2, r2, #2
 8000ee8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	6899      	ldr	r1, [r3, #8]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	7e1b      	ldrb	r3, [r3, #24]
 8000ef4:	005a      	lsls	r2, r3, #1
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	430a      	orrs	r2, r1
 8000efc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d01b      	beq.n	8000f40 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	685a      	ldr	r2, [r3, #4]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000f16:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	685a      	ldr	r2, [r3, #4]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8000f26:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	6859      	ldr	r1, [r3, #4]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f32:	3b01      	subs	r3, #1
 8000f34:	035a      	lsls	r2, r3, #13
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	430a      	orrs	r2, r1
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	e007      	b.n	8000f50 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	685a      	ldr	r2, [r3, #4]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000f4e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8000f5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	69db      	ldr	r3, [r3, #28]
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	051a      	lsls	r2, r3, #20
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	430a      	orrs	r2, r1
 8000f74:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	689a      	ldr	r2, [r3, #8]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8000f84:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	6899      	ldr	r1, [r3, #8]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000f92:	025a      	lsls	r2, r3, #9
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	430a      	orrs	r2, r1
 8000f9a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	689a      	ldr	r2, [r3, #8]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000faa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	6899      	ldr	r1, [r3, #8]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	695b      	ldr	r3, [r3, #20]
 8000fb6:	029a      	lsls	r2, r3, #10
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	430a      	orrs	r2, r1
 8000fbe:	609a      	str	r2, [r3, #8]
}
 8000fc0:	bf00      	nop
 8000fc2:	3714      	adds	r7, #20
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	40012300 	.word	0x40012300
 8000fd0:	0f000001 	.word	0x0f000001

08000fd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f003 0307 	and.w	r3, r3, #7
 8000fe2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fe4:	4b0c      	ldr	r3, [pc, #48]	@ (8001018 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fea:	68ba      	ldr	r2, [r7, #8]
 8000fec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ffc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001000:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001004:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001006:	4a04      	ldr	r2, [pc, #16]	@ (8001018 <__NVIC_SetPriorityGrouping+0x44>)
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	60d3      	str	r3, [r2, #12]
}
 800100c:	bf00      	nop
 800100e:	3714      	adds	r7, #20
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001020:	4b04      	ldr	r3, [pc, #16]	@ (8001034 <__NVIC_GetPriorityGrouping+0x18>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	0a1b      	lsrs	r3, r3, #8
 8001026:	f003 0307 	and.w	r3, r3, #7
}
 800102a:	4618      	mov	r0, r3
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	e000ed00 	.word	0xe000ed00

08001038 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	6039      	str	r1, [r7, #0]
 8001042:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001048:	2b00      	cmp	r3, #0
 800104a:	db0a      	blt.n	8001062 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	b2da      	uxtb	r2, r3
 8001050:	490c      	ldr	r1, [pc, #48]	@ (8001084 <__NVIC_SetPriority+0x4c>)
 8001052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001056:	0112      	lsls	r2, r2, #4
 8001058:	b2d2      	uxtb	r2, r2
 800105a:	440b      	add	r3, r1
 800105c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001060:	e00a      	b.n	8001078 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	b2da      	uxtb	r2, r3
 8001066:	4908      	ldr	r1, [pc, #32]	@ (8001088 <__NVIC_SetPriority+0x50>)
 8001068:	79fb      	ldrb	r3, [r7, #7]
 800106a:	f003 030f 	and.w	r3, r3, #15
 800106e:	3b04      	subs	r3, #4
 8001070:	0112      	lsls	r2, r2, #4
 8001072:	b2d2      	uxtb	r2, r2
 8001074:	440b      	add	r3, r1
 8001076:	761a      	strb	r2, [r3, #24]
}
 8001078:	bf00      	nop
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	e000e100 	.word	0xe000e100
 8001088:	e000ed00 	.word	0xe000ed00

0800108c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800108c:	b480      	push	{r7}
 800108e:	b089      	sub	sp, #36	@ 0x24
 8001090:	af00      	add	r7, sp, #0
 8001092:	60f8      	str	r0, [r7, #12]
 8001094:	60b9      	str	r1, [r7, #8]
 8001096:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	f003 0307 	and.w	r3, r3, #7
 800109e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	f1c3 0307 	rsb	r3, r3, #7
 80010a6:	2b04      	cmp	r3, #4
 80010a8:	bf28      	it	cs
 80010aa:	2304      	movcs	r3, #4
 80010ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	3304      	adds	r3, #4
 80010b2:	2b06      	cmp	r3, #6
 80010b4:	d902      	bls.n	80010bc <NVIC_EncodePriority+0x30>
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	3b03      	subs	r3, #3
 80010ba:	e000      	b.n	80010be <NVIC_EncodePriority+0x32>
 80010bc:	2300      	movs	r3, #0
 80010be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c0:	f04f 32ff 	mov.w	r2, #4294967295
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	43da      	mvns	r2, r3
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	401a      	ands	r2, r3
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010d4:	f04f 31ff 	mov.w	r1, #4294967295
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	fa01 f303 	lsl.w	r3, r1, r3
 80010de:	43d9      	mvns	r1, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e4:	4313      	orrs	r3, r2
         );
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3724      	adds	r7, #36	@ 0x24
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
	...

080010f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	3b01      	subs	r3, #1
 8001100:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001104:	d301      	bcc.n	800110a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001106:	2301      	movs	r3, #1
 8001108:	e00f      	b.n	800112a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800110a:	4a0a      	ldr	r2, [pc, #40]	@ (8001134 <SysTick_Config+0x40>)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	3b01      	subs	r3, #1
 8001110:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001112:	210f      	movs	r1, #15
 8001114:	f04f 30ff 	mov.w	r0, #4294967295
 8001118:	f7ff ff8e 	bl	8001038 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800111c:	4b05      	ldr	r3, [pc, #20]	@ (8001134 <SysTick_Config+0x40>)
 800111e:	2200      	movs	r2, #0
 8001120:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001122:	4b04      	ldr	r3, [pc, #16]	@ (8001134 <SysTick_Config+0x40>)
 8001124:	2207      	movs	r2, #7
 8001126:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001128:	2300      	movs	r3, #0
}
 800112a:	4618      	mov	r0, r3
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	e000e010 	.word	0xe000e010

08001138 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f7ff ff47 	bl	8000fd4 <__NVIC_SetPriorityGrouping>
}
 8001146:	bf00      	nop
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800114e:	b580      	push	{r7, lr}
 8001150:	b086      	sub	sp, #24
 8001152:	af00      	add	r7, sp, #0
 8001154:	4603      	mov	r3, r0
 8001156:	60b9      	str	r1, [r7, #8]
 8001158:	607a      	str	r2, [r7, #4]
 800115a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800115c:	2300      	movs	r3, #0
 800115e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001160:	f7ff ff5c 	bl	800101c <__NVIC_GetPriorityGrouping>
 8001164:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	68b9      	ldr	r1, [r7, #8]
 800116a:	6978      	ldr	r0, [r7, #20]
 800116c:	f7ff ff8e 	bl	800108c <NVIC_EncodePriority>
 8001170:	4602      	mov	r2, r0
 8001172:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001176:	4611      	mov	r1, r2
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff ff5d 	bl	8001038 <__NVIC_SetPriority>
}
 800117e:	bf00      	nop
 8001180:	3718      	adds	r7, #24
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	b082      	sub	sp, #8
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f7ff ffb0 	bl	80010f4 <SysTick_Config>
 8001194:	4603      	mov	r3, r0
}
 8001196:	4618      	mov	r0, r3
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
	...

080011a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b089      	sub	sp, #36	@ 0x24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011aa:	2300      	movs	r3, #0
 80011ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011ae:	2300      	movs	r3, #0
 80011b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011b2:	2300      	movs	r3, #0
 80011b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011b6:	2300      	movs	r3, #0
 80011b8:	61fb      	str	r3, [r7, #28]
 80011ba:	e159      	b.n	8001470 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011bc:	2201      	movs	r2, #1
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	697a      	ldr	r2, [r7, #20]
 80011cc:	4013      	ands	r3, r2
 80011ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	f040 8148 	bne.w	800146a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f003 0303 	and.w	r3, r3, #3
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d005      	beq.n	80011f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011ee:	2b02      	cmp	r3, #2
 80011f0:	d130      	bne.n	8001254 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	2203      	movs	r2, #3
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	43db      	mvns	r3, r3
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	4013      	ands	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	68da      	ldr	r2, [r3, #12]
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	4313      	orrs	r3, r2
 800121a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001228:	2201      	movs	r2, #1
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	43db      	mvns	r3, r3
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	4013      	ands	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	091b      	lsrs	r3, r3, #4
 800123e:	f003 0201 	and.w	r2, r3, #1
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4313      	orrs	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f003 0303 	and.w	r3, r3, #3
 800125c:	2b03      	cmp	r3, #3
 800125e:	d017      	beq.n	8001290 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	2203      	movs	r2, #3
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	43db      	mvns	r3, r3
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	4013      	ands	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	689a      	ldr	r2, [r3, #8]
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	4313      	orrs	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f003 0303 	and.w	r3, r3, #3
 8001298:	2b02      	cmp	r3, #2
 800129a:	d123      	bne.n	80012e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	08da      	lsrs	r2, r3, #3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	3208      	adds	r2, #8
 80012a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	f003 0307 	and.w	r3, r3, #7
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	220f      	movs	r2, #15
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	43db      	mvns	r3, r3
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	4013      	ands	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	691a      	ldr	r2, [r3, #16]
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	f003 0307 	and.w	r3, r3, #7
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	08da      	lsrs	r2, r3, #3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	3208      	adds	r2, #8
 80012de:	69b9      	ldr	r1, [r7, #24]
 80012e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	2203      	movs	r2, #3
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	43db      	mvns	r3, r3
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	4013      	ands	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f003 0203 	and.w	r2, r3, #3
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	4313      	orrs	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001320:	2b00      	cmp	r3, #0
 8001322:	f000 80a2 	beq.w	800146a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	60fb      	str	r3, [r7, #12]
 800132a:	4b57      	ldr	r3, [pc, #348]	@ (8001488 <HAL_GPIO_Init+0x2e8>)
 800132c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800132e:	4a56      	ldr	r2, [pc, #344]	@ (8001488 <HAL_GPIO_Init+0x2e8>)
 8001330:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001334:	6453      	str	r3, [r2, #68]	@ 0x44
 8001336:	4b54      	ldr	r3, [pc, #336]	@ (8001488 <HAL_GPIO_Init+0x2e8>)
 8001338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800133a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800133e:	60fb      	str	r3, [r7, #12]
 8001340:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001342:	4a52      	ldr	r2, [pc, #328]	@ (800148c <HAL_GPIO_Init+0x2ec>)
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	089b      	lsrs	r3, r3, #2
 8001348:	3302      	adds	r3, #2
 800134a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800134e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	f003 0303 	and.w	r3, r3, #3
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	220f      	movs	r2, #15
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	43db      	mvns	r3, r3
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	4013      	ands	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a49      	ldr	r2, [pc, #292]	@ (8001490 <HAL_GPIO_Init+0x2f0>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d019      	beq.n	80013a2 <HAL_GPIO_Init+0x202>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a48      	ldr	r2, [pc, #288]	@ (8001494 <HAL_GPIO_Init+0x2f4>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d013      	beq.n	800139e <HAL_GPIO_Init+0x1fe>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a47      	ldr	r2, [pc, #284]	@ (8001498 <HAL_GPIO_Init+0x2f8>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d00d      	beq.n	800139a <HAL_GPIO_Init+0x1fa>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a46      	ldr	r2, [pc, #280]	@ (800149c <HAL_GPIO_Init+0x2fc>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d007      	beq.n	8001396 <HAL_GPIO_Init+0x1f6>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a45      	ldr	r2, [pc, #276]	@ (80014a0 <HAL_GPIO_Init+0x300>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d101      	bne.n	8001392 <HAL_GPIO_Init+0x1f2>
 800138e:	2304      	movs	r3, #4
 8001390:	e008      	b.n	80013a4 <HAL_GPIO_Init+0x204>
 8001392:	2307      	movs	r3, #7
 8001394:	e006      	b.n	80013a4 <HAL_GPIO_Init+0x204>
 8001396:	2303      	movs	r3, #3
 8001398:	e004      	b.n	80013a4 <HAL_GPIO_Init+0x204>
 800139a:	2302      	movs	r3, #2
 800139c:	e002      	b.n	80013a4 <HAL_GPIO_Init+0x204>
 800139e:	2301      	movs	r3, #1
 80013a0:	e000      	b.n	80013a4 <HAL_GPIO_Init+0x204>
 80013a2:	2300      	movs	r3, #0
 80013a4:	69fa      	ldr	r2, [r7, #28]
 80013a6:	f002 0203 	and.w	r2, r2, #3
 80013aa:	0092      	lsls	r2, r2, #2
 80013ac:	4093      	lsls	r3, r2
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013b4:	4935      	ldr	r1, [pc, #212]	@ (800148c <HAL_GPIO_Init+0x2ec>)
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	089b      	lsrs	r3, r3, #2
 80013ba:	3302      	adds	r3, #2
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013c2:	4b38      	ldr	r3, [pc, #224]	@ (80014a4 <HAL_GPIO_Init+0x304>)
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	43db      	mvns	r3, r3
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	4013      	ands	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d003      	beq.n	80013e6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013e6:	4a2f      	ldr	r2, [pc, #188]	@ (80014a4 <HAL_GPIO_Init+0x304>)
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013ec:	4b2d      	ldr	r3, [pc, #180]	@ (80014a4 <HAL_GPIO_Init+0x304>)
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	43db      	mvns	r3, r3
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	4013      	ands	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001404:	2b00      	cmp	r3, #0
 8001406:	d003      	beq.n	8001410 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	4313      	orrs	r3, r2
 800140e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001410:	4a24      	ldr	r2, [pc, #144]	@ (80014a4 <HAL_GPIO_Init+0x304>)
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001416:	4b23      	ldr	r3, [pc, #140]	@ (80014a4 <HAL_GPIO_Init+0x304>)
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	43db      	mvns	r3, r3
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	4013      	ands	r3, r2
 8001424:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d003      	beq.n	800143a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	4313      	orrs	r3, r2
 8001438:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800143a:	4a1a      	ldr	r2, [pc, #104]	@ (80014a4 <HAL_GPIO_Init+0x304>)
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001440:	4b18      	ldr	r3, [pc, #96]	@ (80014a4 <HAL_GPIO_Init+0x304>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	43db      	mvns	r3, r3
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	4013      	ands	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001458:	2b00      	cmp	r3, #0
 800145a:	d003      	beq.n	8001464 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	4313      	orrs	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001464:	4a0f      	ldr	r2, [pc, #60]	@ (80014a4 <HAL_GPIO_Init+0x304>)
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	3301      	adds	r3, #1
 800146e:	61fb      	str	r3, [r7, #28]
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	2b0f      	cmp	r3, #15
 8001474:	f67f aea2 	bls.w	80011bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001478:	bf00      	nop
 800147a:	bf00      	nop
 800147c:	3724      	adds	r7, #36	@ 0x24
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	40023800 	.word	0x40023800
 800148c:	40013800 	.word	0x40013800
 8001490:	40020000 	.word	0x40020000
 8001494:	40020400 	.word	0x40020400
 8001498:	40020800 	.word	0x40020800
 800149c:	40020c00 	.word	0x40020c00
 80014a0:	40021000 	.word	0x40021000
 80014a4:	40013c00 	.word	0x40013c00

080014a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d101      	bne.n	80014ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e267      	b.n	800198a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d075      	beq.n	80015b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014c6:	4b88      	ldr	r3, [pc, #544]	@ (80016e8 <HAL_RCC_OscConfig+0x240>)
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	f003 030c 	and.w	r3, r3, #12
 80014ce:	2b04      	cmp	r3, #4
 80014d0:	d00c      	beq.n	80014ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014d2:	4b85      	ldr	r3, [pc, #532]	@ (80016e8 <HAL_RCC_OscConfig+0x240>)
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014da:	2b08      	cmp	r3, #8
 80014dc:	d112      	bne.n	8001504 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014de:	4b82      	ldr	r3, [pc, #520]	@ (80016e8 <HAL_RCC_OscConfig+0x240>)
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80014ea:	d10b      	bne.n	8001504 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014ec:	4b7e      	ldr	r3, [pc, #504]	@ (80016e8 <HAL_RCC_OscConfig+0x240>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d05b      	beq.n	80015b0 <HAL_RCC_OscConfig+0x108>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d157      	bne.n	80015b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	e242      	b.n	800198a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800150c:	d106      	bne.n	800151c <HAL_RCC_OscConfig+0x74>
 800150e:	4b76      	ldr	r3, [pc, #472]	@ (80016e8 <HAL_RCC_OscConfig+0x240>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a75      	ldr	r2, [pc, #468]	@ (80016e8 <HAL_RCC_OscConfig+0x240>)
 8001514:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001518:	6013      	str	r3, [r2, #0]
 800151a:	e01d      	b.n	8001558 <HAL_RCC_OscConfig+0xb0>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001524:	d10c      	bne.n	8001540 <HAL_RCC_OscConfig+0x98>
 8001526:	4b70      	ldr	r3, [pc, #448]	@ (80016e8 <HAL_RCC_OscConfig+0x240>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a6f      	ldr	r2, [pc, #444]	@ (80016e8 <HAL_RCC_OscConfig+0x240>)
 800152c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001530:	6013      	str	r3, [r2, #0]
 8001532:	4b6d      	ldr	r3, [pc, #436]	@ (80016e8 <HAL_RCC_OscConfig+0x240>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a6c      	ldr	r2, [pc, #432]	@ (80016e8 <HAL_RCC_OscConfig+0x240>)
 8001538:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800153c:	6013      	str	r3, [r2, #0]
 800153e:	e00b      	b.n	8001558 <HAL_RCC_OscConfig+0xb0>
 8001540:	4b69      	ldr	r3, [pc, #420]	@ (80016e8 <HAL_RCC_OscConfig+0x240>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a68      	ldr	r2, [pc, #416]	@ (80016e8 <HAL_RCC_OscConfig+0x240>)
 8001546:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800154a:	6013      	str	r3, [r2, #0]
 800154c:	4b66      	ldr	r3, [pc, #408]	@ (80016e8 <HAL_RCC_OscConfig+0x240>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a65      	ldr	r2, [pc, #404]	@ (80016e8 <HAL_RCC_OscConfig+0x240>)
 8001552:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001556:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d013      	beq.n	8001588 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001560:	f7ff faba 	bl	8000ad8 <HAL_GetTick>
 8001564:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001566:	e008      	b.n	800157a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001568:	f7ff fab6 	bl	8000ad8 <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b64      	cmp	r3, #100	@ 0x64
 8001574:	d901      	bls.n	800157a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e207      	b.n	800198a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800157a:	4b5b      	ldr	r3, [pc, #364]	@ (80016e8 <HAL_RCC_OscConfig+0x240>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d0f0      	beq.n	8001568 <HAL_RCC_OscConfig+0xc0>
 8001586:	e014      	b.n	80015b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001588:	f7ff faa6 	bl	8000ad8 <HAL_GetTick>
 800158c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800158e:	e008      	b.n	80015a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001590:	f7ff faa2 	bl	8000ad8 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b64      	cmp	r3, #100	@ 0x64
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e1f3      	b.n	800198a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015a2:	4b51      	ldr	r3, [pc, #324]	@ (80016e8 <HAL_RCC_OscConfig+0x240>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d1f0      	bne.n	8001590 <HAL_RCC_OscConfig+0xe8>
 80015ae:	e000      	b.n	80015b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d063      	beq.n	8001686 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015be:	4b4a      	ldr	r3, [pc, #296]	@ (80016e8 <HAL_RCC_OscConfig+0x240>)
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	f003 030c 	and.w	r3, r3, #12
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d00b      	beq.n	80015e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015ca:	4b47      	ldr	r3, [pc, #284]	@ (80016e8 <HAL_RCC_OscConfig+0x240>)
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015d2:	2b08      	cmp	r3, #8
 80015d4:	d11c      	bne.n	8001610 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015d6:	4b44      	ldr	r3, [pc, #272]	@ (80016e8 <HAL_RCC_OscConfig+0x240>)
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d116      	bne.n	8001610 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015e2:	4b41      	ldr	r3, [pc, #260]	@ (80016e8 <HAL_RCC_OscConfig+0x240>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d005      	beq.n	80015fa <HAL_RCC_OscConfig+0x152>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	68db      	ldr	r3, [r3, #12]
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d001      	beq.n	80015fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e1c7      	b.n	800198a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015fa:	4b3b      	ldr	r3, [pc, #236]	@ (80016e8 <HAL_RCC_OscConfig+0x240>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	691b      	ldr	r3, [r3, #16]
 8001606:	00db      	lsls	r3, r3, #3
 8001608:	4937      	ldr	r1, [pc, #220]	@ (80016e8 <HAL_RCC_OscConfig+0x240>)
 800160a:	4313      	orrs	r3, r2
 800160c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800160e:	e03a      	b.n	8001686 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d020      	beq.n	800165a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001618:	4b34      	ldr	r3, [pc, #208]	@ (80016ec <HAL_RCC_OscConfig+0x244>)
 800161a:	2201      	movs	r2, #1
 800161c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800161e:	f7ff fa5b 	bl	8000ad8 <HAL_GetTick>
 8001622:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001624:	e008      	b.n	8001638 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001626:	f7ff fa57 	bl	8000ad8 <HAL_GetTick>
 800162a:	4602      	mov	r2, r0
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	2b02      	cmp	r3, #2
 8001632:	d901      	bls.n	8001638 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001634:	2303      	movs	r3, #3
 8001636:	e1a8      	b.n	800198a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001638:	4b2b      	ldr	r3, [pc, #172]	@ (80016e8 <HAL_RCC_OscConfig+0x240>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 0302 	and.w	r3, r3, #2
 8001640:	2b00      	cmp	r3, #0
 8001642:	d0f0      	beq.n	8001626 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001644:	4b28      	ldr	r3, [pc, #160]	@ (80016e8 <HAL_RCC_OscConfig+0x240>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	691b      	ldr	r3, [r3, #16]
 8001650:	00db      	lsls	r3, r3, #3
 8001652:	4925      	ldr	r1, [pc, #148]	@ (80016e8 <HAL_RCC_OscConfig+0x240>)
 8001654:	4313      	orrs	r3, r2
 8001656:	600b      	str	r3, [r1, #0]
 8001658:	e015      	b.n	8001686 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800165a:	4b24      	ldr	r3, [pc, #144]	@ (80016ec <HAL_RCC_OscConfig+0x244>)
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001660:	f7ff fa3a 	bl	8000ad8 <HAL_GetTick>
 8001664:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001666:	e008      	b.n	800167a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001668:	f7ff fa36 	bl	8000ad8 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b02      	cmp	r3, #2
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e187      	b.n	800198a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800167a:	4b1b      	ldr	r3, [pc, #108]	@ (80016e8 <HAL_RCC_OscConfig+0x240>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	2b00      	cmp	r3, #0
 8001684:	d1f0      	bne.n	8001668 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0308 	and.w	r3, r3, #8
 800168e:	2b00      	cmp	r3, #0
 8001690:	d036      	beq.n	8001700 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	695b      	ldr	r3, [r3, #20]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d016      	beq.n	80016c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800169a:	4b15      	ldr	r3, [pc, #84]	@ (80016f0 <HAL_RCC_OscConfig+0x248>)
 800169c:	2201      	movs	r2, #1
 800169e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016a0:	f7ff fa1a 	bl	8000ad8 <HAL_GetTick>
 80016a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016a6:	e008      	b.n	80016ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016a8:	f7ff fa16 	bl	8000ad8 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e167      	b.n	800198a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ba:	4b0b      	ldr	r3, [pc, #44]	@ (80016e8 <HAL_RCC_OscConfig+0x240>)
 80016bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016be:	f003 0302 	and.w	r3, r3, #2
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d0f0      	beq.n	80016a8 <HAL_RCC_OscConfig+0x200>
 80016c6:	e01b      	b.n	8001700 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016c8:	4b09      	ldr	r3, [pc, #36]	@ (80016f0 <HAL_RCC_OscConfig+0x248>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ce:	f7ff fa03 	bl	8000ad8 <HAL_GetTick>
 80016d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016d4:	e00e      	b.n	80016f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016d6:	f7ff f9ff 	bl	8000ad8 <HAL_GetTick>
 80016da:	4602      	mov	r2, r0
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d907      	bls.n	80016f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016e4:	2303      	movs	r3, #3
 80016e6:	e150      	b.n	800198a <HAL_RCC_OscConfig+0x4e2>
 80016e8:	40023800 	.word	0x40023800
 80016ec:	42470000 	.word	0x42470000
 80016f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016f4:	4b88      	ldr	r3, [pc, #544]	@ (8001918 <HAL_RCC_OscConfig+0x470>)
 80016f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016f8:	f003 0302 	and.w	r3, r3, #2
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d1ea      	bne.n	80016d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0304 	and.w	r3, r3, #4
 8001708:	2b00      	cmp	r3, #0
 800170a:	f000 8097 	beq.w	800183c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800170e:	2300      	movs	r3, #0
 8001710:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001712:	4b81      	ldr	r3, [pc, #516]	@ (8001918 <HAL_RCC_OscConfig+0x470>)
 8001714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001716:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d10f      	bne.n	800173e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	60bb      	str	r3, [r7, #8]
 8001722:	4b7d      	ldr	r3, [pc, #500]	@ (8001918 <HAL_RCC_OscConfig+0x470>)
 8001724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001726:	4a7c      	ldr	r2, [pc, #496]	@ (8001918 <HAL_RCC_OscConfig+0x470>)
 8001728:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800172c:	6413      	str	r3, [r2, #64]	@ 0x40
 800172e:	4b7a      	ldr	r3, [pc, #488]	@ (8001918 <HAL_RCC_OscConfig+0x470>)
 8001730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001732:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001736:	60bb      	str	r3, [r7, #8]
 8001738:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800173a:	2301      	movs	r3, #1
 800173c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800173e:	4b77      	ldr	r3, [pc, #476]	@ (800191c <HAL_RCC_OscConfig+0x474>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001746:	2b00      	cmp	r3, #0
 8001748:	d118      	bne.n	800177c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800174a:	4b74      	ldr	r3, [pc, #464]	@ (800191c <HAL_RCC_OscConfig+0x474>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a73      	ldr	r2, [pc, #460]	@ (800191c <HAL_RCC_OscConfig+0x474>)
 8001750:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001754:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001756:	f7ff f9bf 	bl	8000ad8 <HAL_GetTick>
 800175a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800175c:	e008      	b.n	8001770 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800175e:	f7ff f9bb 	bl	8000ad8 <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	2b02      	cmp	r3, #2
 800176a:	d901      	bls.n	8001770 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e10c      	b.n	800198a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001770:	4b6a      	ldr	r3, [pc, #424]	@ (800191c <HAL_RCC_OscConfig+0x474>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001778:	2b00      	cmp	r3, #0
 800177a:	d0f0      	beq.n	800175e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	2b01      	cmp	r3, #1
 8001782:	d106      	bne.n	8001792 <HAL_RCC_OscConfig+0x2ea>
 8001784:	4b64      	ldr	r3, [pc, #400]	@ (8001918 <HAL_RCC_OscConfig+0x470>)
 8001786:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001788:	4a63      	ldr	r2, [pc, #396]	@ (8001918 <HAL_RCC_OscConfig+0x470>)
 800178a:	f043 0301 	orr.w	r3, r3, #1
 800178e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001790:	e01c      	b.n	80017cc <HAL_RCC_OscConfig+0x324>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	2b05      	cmp	r3, #5
 8001798:	d10c      	bne.n	80017b4 <HAL_RCC_OscConfig+0x30c>
 800179a:	4b5f      	ldr	r3, [pc, #380]	@ (8001918 <HAL_RCC_OscConfig+0x470>)
 800179c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800179e:	4a5e      	ldr	r2, [pc, #376]	@ (8001918 <HAL_RCC_OscConfig+0x470>)
 80017a0:	f043 0304 	orr.w	r3, r3, #4
 80017a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80017a6:	4b5c      	ldr	r3, [pc, #368]	@ (8001918 <HAL_RCC_OscConfig+0x470>)
 80017a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017aa:	4a5b      	ldr	r2, [pc, #364]	@ (8001918 <HAL_RCC_OscConfig+0x470>)
 80017ac:	f043 0301 	orr.w	r3, r3, #1
 80017b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80017b2:	e00b      	b.n	80017cc <HAL_RCC_OscConfig+0x324>
 80017b4:	4b58      	ldr	r3, [pc, #352]	@ (8001918 <HAL_RCC_OscConfig+0x470>)
 80017b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017b8:	4a57      	ldr	r2, [pc, #348]	@ (8001918 <HAL_RCC_OscConfig+0x470>)
 80017ba:	f023 0301 	bic.w	r3, r3, #1
 80017be:	6713      	str	r3, [r2, #112]	@ 0x70
 80017c0:	4b55      	ldr	r3, [pc, #340]	@ (8001918 <HAL_RCC_OscConfig+0x470>)
 80017c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017c4:	4a54      	ldr	r2, [pc, #336]	@ (8001918 <HAL_RCC_OscConfig+0x470>)
 80017c6:	f023 0304 	bic.w	r3, r3, #4
 80017ca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d015      	beq.n	8001800 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017d4:	f7ff f980 	bl	8000ad8 <HAL_GetTick>
 80017d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017da:	e00a      	b.n	80017f2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017dc:	f7ff f97c 	bl	8000ad8 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e0cb      	b.n	800198a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017f2:	4b49      	ldr	r3, [pc, #292]	@ (8001918 <HAL_RCC_OscConfig+0x470>)
 80017f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d0ee      	beq.n	80017dc <HAL_RCC_OscConfig+0x334>
 80017fe:	e014      	b.n	800182a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001800:	f7ff f96a 	bl	8000ad8 <HAL_GetTick>
 8001804:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001806:	e00a      	b.n	800181e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001808:	f7ff f966 	bl	8000ad8 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001816:	4293      	cmp	r3, r2
 8001818:	d901      	bls.n	800181e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e0b5      	b.n	800198a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800181e:	4b3e      	ldr	r3, [pc, #248]	@ (8001918 <HAL_RCC_OscConfig+0x470>)
 8001820:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001822:	f003 0302 	and.w	r3, r3, #2
 8001826:	2b00      	cmp	r3, #0
 8001828:	d1ee      	bne.n	8001808 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800182a:	7dfb      	ldrb	r3, [r7, #23]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d105      	bne.n	800183c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001830:	4b39      	ldr	r3, [pc, #228]	@ (8001918 <HAL_RCC_OscConfig+0x470>)
 8001832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001834:	4a38      	ldr	r2, [pc, #224]	@ (8001918 <HAL_RCC_OscConfig+0x470>)
 8001836:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800183a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	699b      	ldr	r3, [r3, #24]
 8001840:	2b00      	cmp	r3, #0
 8001842:	f000 80a1 	beq.w	8001988 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001846:	4b34      	ldr	r3, [pc, #208]	@ (8001918 <HAL_RCC_OscConfig+0x470>)
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	f003 030c 	and.w	r3, r3, #12
 800184e:	2b08      	cmp	r3, #8
 8001850:	d05c      	beq.n	800190c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	699b      	ldr	r3, [r3, #24]
 8001856:	2b02      	cmp	r3, #2
 8001858:	d141      	bne.n	80018de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800185a:	4b31      	ldr	r3, [pc, #196]	@ (8001920 <HAL_RCC_OscConfig+0x478>)
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001860:	f7ff f93a 	bl	8000ad8 <HAL_GetTick>
 8001864:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001866:	e008      	b.n	800187a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001868:	f7ff f936 	bl	8000ad8 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b02      	cmp	r3, #2
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e087      	b.n	800198a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800187a:	4b27      	ldr	r3, [pc, #156]	@ (8001918 <HAL_RCC_OscConfig+0x470>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d1f0      	bne.n	8001868 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	69da      	ldr	r2, [r3, #28]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6a1b      	ldr	r3, [r3, #32]
 800188e:	431a      	orrs	r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001894:	019b      	lsls	r3, r3, #6
 8001896:	431a      	orrs	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800189c:	085b      	lsrs	r3, r3, #1
 800189e:	3b01      	subs	r3, #1
 80018a0:	041b      	lsls	r3, r3, #16
 80018a2:	431a      	orrs	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018a8:	061b      	lsls	r3, r3, #24
 80018aa:	491b      	ldr	r1, [pc, #108]	@ (8001918 <HAL_RCC_OscConfig+0x470>)
 80018ac:	4313      	orrs	r3, r2
 80018ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001920 <HAL_RCC_OscConfig+0x478>)
 80018b2:	2201      	movs	r2, #1
 80018b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b6:	f7ff f90f 	bl	8000ad8 <HAL_GetTick>
 80018ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018bc:	e008      	b.n	80018d0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018be:	f7ff f90b 	bl	8000ad8 <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d901      	bls.n	80018d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	e05c      	b.n	800198a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018d0:	4b11      	ldr	r3, [pc, #68]	@ (8001918 <HAL_RCC_OscConfig+0x470>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d0f0      	beq.n	80018be <HAL_RCC_OscConfig+0x416>
 80018dc:	e054      	b.n	8001988 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018de:	4b10      	ldr	r3, [pc, #64]	@ (8001920 <HAL_RCC_OscConfig+0x478>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e4:	f7ff f8f8 	bl	8000ad8 <HAL_GetTick>
 80018e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ea:	e008      	b.n	80018fe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018ec:	f7ff f8f4 	bl	8000ad8 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e045      	b.n	800198a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018fe:	4b06      	ldr	r3, [pc, #24]	@ (8001918 <HAL_RCC_OscConfig+0x470>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d1f0      	bne.n	80018ec <HAL_RCC_OscConfig+0x444>
 800190a:	e03d      	b.n	8001988 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	2b01      	cmp	r3, #1
 8001912:	d107      	bne.n	8001924 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e038      	b.n	800198a <HAL_RCC_OscConfig+0x4e2>
 8001918:	40023800 	.word	0x40023800
 800191c:	40007000 	.word	0x40007000
 8001920:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001924:	4b1b      	ldr	r3, [pc, #108]	@ (8001994 <HAL_RCC_OscConfig+0x4ec>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	699b      	ldr	r3, [r3, #24]
 800192e:	2b01      	cmp	r3, #1
 8001930:	d028      	beq.n	8001984 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800193c:	429a      	cmp	r2, r3
 800193e:	d121      	bne.n	8001984 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800194a:	429a      	cmp	r2, r3
 800194c:	d11a      	bne.n	8001984 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800194e:	68fa      	ldr	r2, [r7, #12]
 8001950:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001954:	4013      	ands	r3, r2
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800195a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800195c:	4293      	cmp	r3, r2
 800195e:	d111      	bne.n	8001984 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800196a:	085b      	lsrs	r3, r3, #1
 800196c:	3b01      	subs	r3, #1
 800196e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001970:	429a      	cmp	r2, r3
 8001972:	d107      	bne.n	8001984 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800197e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001980:	429a      	cmp	r2, r3
 8001982:	d001      	beq.n	8001988 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e000      	b.n	800198a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	3718      	adds	r7, #24
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40023800 	.word	0x40023800

08001998 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d101      	bne.n	80019ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e0cc      	b.n	8001b46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019ac:	4b68      	ldr	r3, [pc, #416]	@ (8001b50 <HAL_RCC_ClockConfig+0x1b8>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0307 	and.w	r3, r3, #7
 80019b4:	683a      	ldr	r2, [r7, #0]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d90c      	bls.n	80019d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ba:	4b65      	ldr	r3, [pc, #404]	@ (8001b50 <HAL_RCC_ClockConfig+0x1b8>)
 80019bc:	683a      	ldr	r2, [r7, #0]
 80019be:	b2d2      	uxtb	r2, r2
 80019c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019c2:	4b63      	ldr	r3, [pc, #396]	@ (8001b50 <HAL_RCC_ClockConfig+0x1b8>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0307 	and.w	r3, r3, #7
 80019ca:	683a      	ldr	r2, [r7, #0]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d001      	beq.n	80019d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e0b8      	b.n	8001b46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0302 	and.w	r3, r3, #2
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d020      	beq.n	8001a22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0304 	and.w	r3, r3, #4
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d005      	beq.n	80019f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019ec:	4b59      	ldr	r3, [pc, #356]	@ (8001b54 <HAL_RCC_ClockConfig+0x1bc>)
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	4a58      	ldr	r2, [pc, #352]	@ (8001b54 <HAL_RCC_ClockConfig+0x1bc>)
 80019f2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80019f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0308 	and.w	r3, r3, #8
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d005      	beq.n	8001a10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a04:	4b53      	ldr	r3, [pc, #332]	@ (8001b54 <HAL_RCC_ClockConfig+0x1bc>)
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	4a52      	ldr	r2, [pc, #328]	@ (8001b54 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001a0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a10:	4b50      	ldr	r3, [pc, #320]	@ (8001b54 <HAL_RCC_ClockConfig+0x1bc>)
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	494d      	ldr	r1, [pc, #308]	@ (8001b54 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d044      	beq.n	8001ab8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d107      	bne.n	8001a46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a36:	4b47      	ldr	r3, [pc, #284]	@ (8001b54 <HAL_RCC_ClockConfig+0x1bc>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d119      	bne.n	8001a76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e07f      	b.n	8001b46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d003      	beq.n	8001a56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a52:	2b03      	cmp	r3, #3
 8001a54:	d107      	bne.n	8001a66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a56:	4b3f      	ldr	r3, [pc, #252]	@ (8001b54 <HAL_RCC_ClockConfig+0x1bc>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d109      	bne.n	8001a76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e06f      	b.n	8001b46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a66:	4b3b      	ldr	r3, [pc, #236]	@ (8001b54 <HAL_RCC_ClockConfig+0x1bc>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d101      	bne.n	8001a76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e067      	b.n	8001b46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a76:	4b37      	ldr	r3, [pc, #220]	@ (8001b54 <HAL_RCC_ClockConfig+0x1bc>)
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	f023 0203 	bic.w	r2, r3, #3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	4934      	ldr	r1, [pc, #208]	@ (8001b54 <HAL_RCC_ClockConfig+0x1bc>)
 8001a84:	4313      	orrs	r3, r2
 8001a86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a88:	f7ff f826 	bl	8000ad8 <HAL_GetTick>
 8001a8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a8e:	e00a      	b.n	8001aa6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a90:	f7ff f822 	bl	8000ad8 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e04f      	b.n	8001b46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aa6:	4b2b      	ldr	r3, [pc, #172]	@ (8001b54 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	f003 020c 	and.w	r2, r3, #12
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d1eb      	bne.n	8001a90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ab8:	4b25      	ldr	r3, [pc, #148]	@ (8001b50 <HAL_RCC_ClockConfig+0x1b8>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0307 	and.w	r3, r3, #7
 8001ac0:	683a      	ldr	r2, [r7, #0]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d20c      	bcs.n	8001ae0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ac6:	4b22      	ldr	r3, [pc, #136]	@ (8001b50 <HAL_RCC_ClockConfig+0x1b8>)
 8001ac8:	683a      	ldr	r2, [r7, #0]
 8001aca:	b2d2      	uxtb	r2, r2
 8001acc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ace:	4b20      	ldr	r3, [pc, #128]	@ (8001b50 <HAL_RCC_ClockConfig+0x1b8>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0307 	and.w	r3, r3, #7
 8001ad6:	683a      	ldr	r2, [r7, #0]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d001      	beq.n	8001ae0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e032      	b.n	8001b46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0304 	and.w	r3, r3, #4
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d008      	beq.n	8001afe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001aec:	4b19      	ldr	r3, [pc, #100]	@ (8001b54 <HAL_RCC_ClockConfig+0x1bc>)
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	4916      	ldr	r1, [pc, #88]	@ (8001b54 <HAL_RCC_ClockConfig+0x1bc>)
 8001afa:	4313      	orrs	r3, r2
 8001afc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0308 	and.w	r3, r3, #8
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d009      	beq.n	8001b1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b0a:	4b12      	ldr	r3, [pc, #72]	@ (8001b54 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	691b      	ldr	r3, [r3, #16]
 8001b16:	00db      	lsls	r3, r3, #3
 8001b18:	490e      	ldr	r1, [pc, #56]	@ (8001b54 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b1e:	f000 f821 	bl	8001b64 <HAL_RCC_GetSysClockFreq>
 8001b22:	4602      	mov	r2, r0
 8001b24:	4b0b      	ldr	r3, [pc, #44]	@ (8001b54 <HAL_RCC_ClockConfig+0x1bc>)
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	091b      	lsrs	r3, r3, #4
 8001b2a:	f003 030f 	and.w	r3, r3, #15
 8001b2e:	490a      	ldr	r1, [pc, #40]	@ (8001b58 <HAL_RCC_ClockConfig+0x1c0>)
 8001b30:	5ccb      	ldrb	r3, [r1, r3]
 8001b32:	fa22 f303 	lsr.w	r3, r2, r3
 8001b36:	4a09      	ldr	r2, [pc, #36]	@ (8001b5c <HAL_RCC_ClockConfig+0x1c4>)
 8001b38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b3a:	4b09      	ldr	r3, [pc, #36]	@ (8001b60 <HAL_RCC_ClockConfig+0x1c8>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7fe ff86 	bl	8000a50 <HAL_InitTick>

  return HAL_OK;
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3710      	adds	r7, #16
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	40023c00 	.word	0x40023c00
 8001b54:	40023800 	.word	0x40023800
 8001b58:	08003e28 	.word	0x08003e28
 8001b5c:	20000000 	.word	0x20000000
 8001b60:	20000004 	.word	0x20000004

08001b64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b68:	b094      	sub	sp, #80	@ 0x50
 8001b6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001b70:	2300      	movs	r3, #0
 8001b72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001b74:	2300      	movs	r3, #0
 8001b76:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b7c:	4b79      	ldr	r3, [pc, #484]	@ (8001d64 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f003 030c 	and.w	r3, r3, #12
 8001b84:	2b08      	cmp	r3, #8
 8001b86:	d00d      	beq.n	8001ba4 <HAL_RCC_GetSysClockFreq+0x40>
 8001b88:	2b08      	cmp	r3, #8
 8001b8a:	f200 80e1 	bhi.w	8001d50 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d002      	beq.n	8001b98 <HAL_RCC_GetSysClockFreq+0x34>
 8001b92:	2b04      	cmp	r3, #4
 8001b94:	d003      	beq.n	8001b9e <HAL_RCC_GetSysClockFreq+0x3a>
 8001b96:	e0db      	b.n	8001d50 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b98:	4b73      	ldr	r3, [pc, #460]	@ (8001d68 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b9a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8001b9c:	e0db      	b.n	8001d56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b9e:	4b73      	ldr	r3, [pc, #460]	@ (8001d6c <HAL_RCC_GetSysClockFreq+0x208>)
 8001ba0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ba2:	e0d8      	b.n	8001d56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ba4:	4b6f      	ldr	r3, [pc, #444]	@ (8001d64 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001bac:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bae:	4b6d      	ldr	r3, [pc, #436]	@ (8001d64 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d063      	beq.n	8001c82 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bba:	4b6a      	ldr	r3, [pc, #424]	@ (8001d64 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	099b      	lsrs	r3, r3, #6
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001bc4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001bc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001bc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bcc:	633b      	str	r3, [r7, #48]	@ 0x30
 8001bce:	2300      	movs	r3, #0
 8001bd0:	637b      	str	r3, [r7, #52]	@ 0x34
 8001bd2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001bd6:	4622      	mov	r2, r4
 8001bd8:	462b      	mov	r3, r5
 8001bda:	f04f 0000 	mov.w	r0, #0
 8001bde:	f04f 0100 	mov.w	r1, #0
 8001be2:	0159      	lsls	r1, r3, #5
 8001be4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001be8:	0150      	lsls	r0, r2, #5
 8001bea:	4602      	mov	r2, r0
 8001bec:	460b      	mov	r3, r1
 8001bee:	4621      	mov	r1, r4
 8001bf0:	1a51      	subs	r1, r2, r1
 8001bf2:	6139      	str	r1, [r7, #16]
 8001bf4:	4629      	mov	r1, r5
 8001bf6:	eb63 0301 	sbc.w	r3, r3, r1
 8001bfa:	617b      	str	r3, [r7, #20]
 8001bfc:	f04f 0200 	mov.w	r2, #0
 8001c00:	f04f 0300 	mov.w	r3, #0
 8001c04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c08:	4659      	mov	r1, fp
 8001c0a:	018b      	lsls	r3, r1, #6
 8001c0c:	4651      	mov	r1, sl
 8001c0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c12:	4651      	mov	r1, sl
 8001c14:	018a      	lsls	r2, r1, #6
 8001c16:	4651      	mov	r1, sl
 8001c18:	ebb2 0801 	subs.w	r8, r2, r1
 8001c1c:	4659      	mov	r1, fp
 8001c1e:	eb63 0901 	sbc.w	r9, r3, r1
 8001c22:	f04f 0200 	mov.w	r2, #0
 8001c26:	f04f 0300 	mov.w	r3, #0
 8001c2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c36:	4690      	mov	r8, r2
 8001c38:	4699      	mov	r9, r3
 8001c3a:	4623      	mov	r3, r4
 8001c3c:	eb18 0303 	adds.w	r3, r8, r3
 8001c40:	60bb      	str	r3, [r7, #8]
 8001c42:	462b      	mov	r3, r5
 8001c44:	eb49 0303 	adc.w	r3, r9, r3
 8001c48:	60fb      	str	r3, [r7, #12]
 8001c4a:	f04f 0200 	mov.w	r2, #0
 8001c4e:	f04f 0300 	mov.w	r3, #0
 8001c52:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c56:	4629      	mov	r1, r5
 8001c58:	024b      	lsls	r3, r1, #9
 8001c5a:	4621      	mov	r1, r4
 8001c5c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c60:	4621      	mov	r1, r4
 8001c62:	024a      	lsls	r2, r1, #9
 8001c64:	4610      	mov	r0, r2
 8001c66:	4619      	mov	r1, r3
 8001c68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c6e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001c70:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001c74:	f7fe fab4 	bl	80001e0 <__aeabi_uldivmod>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001c80:	e058      	b.n	8001d34 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c82:	4b38      	ldr	r3, [pc, #224]	@ (8001d64 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	099b      	lsrs	r3, r3, #6
 8001c88:	2200      	movs	r2, #0
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	4611      	mov	r1, r2
 8001c8e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c92:	623b      	str	r3, [r7, #32]
 8001c94:	2300      	movs	r3, #0
 8001c96:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c98:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c9c:	4642      	mov	r2, r8
 8001c9e:	464b      	mov	r3, r9
 8001ca0:	f04f 0000 	mov.w	r0, #0
 8001ca4:	f04f 0100 	mov.w	r1, #0
 8001ca8:	0159      	lsls	r1, r3, #5
 8001caa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cae:	0150      	lsls	r0, r2, #5
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	4641      	mov	r1, r8
 8001cb6:	ebb2 0a01 	subs.w	sl, r2, r1
 8001cba:	4649      	mov	r1, r9
 8001cbc:	eb63 0b01 	sbc.w	fp, r3, r1
 8001cc0:	f04f 0200 	mov.w	r2, #0
 8001cc4:	f04f 0300 	mov.w	r3, #0
 8001cc8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ccc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001cd0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001cd4:	ebb2 040a 	subs.w	r4, r2, sl
 8001cd8:	eb63 050b 	sbc.w	r5, r3, fp
 8001cdc:	f04f 0200 	mov.w	r2, #0
 8001ce0:	f04f 0300 	mov.w	r3, #0
 8001ce4:	00eb      	lsls	r3, r5, #3
 8001ce6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001cea:	00e2      	lsls	r2, r4, #3
 8001cec:	4614      	mov	r4, r2
 8001cee:	461d      	mov	r5, r3
 8001cf0:	4643      	mov	r3, r8
 8001cf2:	18e3      	adds	r3, r4, r3
 8001cf4:	603b      	str	r3, [r7, #0]
 8001cf6:	464b      	mov	r3, r9
 8001cf8:	eb45 0303 	adc.w	r3, r5, r3
 8001cfc:	607b      	str	r3, [r7, #4]
 8001cfe:	f04f 0200 	mov.w	r2, #0
 8001d02:	f04f 0300 	mov.w	r3, #0
 8001d06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d0a:	4629      	mov	r1, r5
 8001d0c:	028b      	lsls	r3, r1, #10
 8001d0e:	4621      	mov	r1, r4
 8001d10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d14:	4621      	mov	r1, r4
 8001d16:	028a      	lsls	r2, r1, #10
 8001d18:	4610      	mov	r0, r2
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d1e:	2200      	movs	r2, #0
 8001d20:	61bb      	str	r3, [r7, #24]
 8001d22:	61fa      	str	r2, [r7, #28]
 8001d24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d28:	f7fe fa5a 	bl	80001e0 <__aeabi_uldivmod>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	460b      	mov	r3, r1
 8001d30:	4613      	mov	r3, r2
 8001d32:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d34:	4b0b      	ldr	r3, [pc, #44]	@ (8001d64 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	0c1b      	lsrs	r3, r3, #16
 8001d3a:	f003 0303 	and.w	r3, r3, #3
 8001d3e:	3301      	adds	r3, #1
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001d44:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001d46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d4c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d4e:	e002      	b.n	8001d56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d50:	4b05      	ldr	r3, [pc, #20]	@ (8001d68 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d52:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3750      	adds	r7, #80	@ 0x50
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d62:	bf00      	nop
 8001d64:	40023800 	.word	0x40023800
 8001d68:	00f42400 	.word	0x00f42400
 8001d6c:	007a1200 	.word	0x007a1200

08001d70 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4603      	mov	r3, r0
 8001d78:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001d7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d82:	2b84      	cmp	r3, #132	@ 0x84
 8001d84:	d005      	beq.n	8001d92 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001d86:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	3303      	adds	r3, #3
 8001d90:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001d92:	68fb      	ldr	r3, [r7, #12]
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3714      	adds	r7, #20
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001da4:	f000 fe8a 	bl	8002abc <vTaskStartScheduler>
  
  return osOK;
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	bd80      	pop	{r7, pc}

08001dae <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001dae:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001db0:	b089      	sub	sp, #36	@ 0x24
 8001db2:	af04      	add	r7, sp, #16
 8001db4:	6078      	str	r0, [r7, #4]
 8001db6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	695b      	ldr	r3, [r3, #20]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d020      	beq.n	8001e02 <osThreadCreate+0x54>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	699b      	ldr	r3, [r3, #24]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d01c      	beq.n	8001e02 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685c      	ldr	r4, [r3, #4]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	691e      	ldr	r6, [r3, #16]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7ff ffc8 	bl	8001d70 <makeFreeRtosPriority>
 8001de0:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	695b      	ldr	r3, [r3, #20]
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001dea:	9202      	str	r2, [sp, #8]
 8001dec:	9301      	str	r3, [sp, #4]
 8001dee:	9100      	str	r1, [sp, #0]
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	4632      	mov	r2, r6
 8001df4:	4629      	mov	r1, r5
 8001df6:	4620      	mov	r0, r4
 8001df8:	f000 fc92 	bl	8002720 <xTaskCreateStatic>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	60fb      	str	r3, [r7, #12]
 8001e00:	e01c      	b.n	8001e3c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685c      	ldr	r4, [r3, #4]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001e0e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7ff ffaa 	bl	8001d70 <makeFreeRtosPriority>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	f107 030c 	add.w	r3, r7, #12
 8001e22:	9301      	str	r3, [sp, #4]
 8001e24:	9200      	str	r2, [sp, #0]
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	4632      	mov	r2, r6
 8001e2a:	4629      	mov	r1, r5
 8001e2c:	4620      	mov	r0, r4
 8001e2e:	f000 fcd7 	bl	80027e0 <xTaskCreate>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d001      	beq.n	8001e3c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	e000      	b.n	8001e3e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3714      	adds	r7, #20
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e46 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b084      	sub	sp, #16
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <osDelay+0x16>
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	e000      	b.n	8001e5e <osDelay+0x18>
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f000 fdf6 	bl	8002a50 <vTaskDelay>
  
  return osOK;
 8001e64:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3710      	adds	r7, #16
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b082      	sub	sp, #8
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d007      	beq.n	8001e8e <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	4619      	mov	r1, r3
 8001e84:	2001      	movs	r0, #1
 8001e86:	f000 fa5a 	bl	800233e <xQueueCreateMutexStatic>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	e003      	b.n	8001e96 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8001e8e:	2001      	movs	r0, #1
 8001e90:	f000 fa3d 	bl	800230e <xQueueCreateMutex>
 8001e94:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8001e9e:	b590      	push	{r4, r7, lr}
 8001ea0:	b085      	sub	sp, #20
 8001ea2:	af02      	add	r7, sp, #8
 8001ea4:	6078      	str	r0, [r7, #4]
 8001ea6:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d011      	beq.n	8001ed4 <osMessageCreate+0x36>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d00d      	beq.n	8001ed4 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6818      	ldr	r0, [r3, #0]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6859      	ldr	r1, [r3, #4]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689a      	ldr	r2, [r3, #8]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	2400      	movs	r4, #0
 8001eca:	9400      	str	r4, [sp, #0]
 8001ecc:	f000 f92e 	bl	800212c <xQueueGenericCreateStatic>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	e008      	b.n	8001ee6 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6818      	ldr	r0, [r3, #0]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	4619      	mov	r1, r3
 8001ee0:	f000 f9a1 	bl	8002226 <xQueueGenericCreate>
 8001ee4:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd90      	pop	{r4, r7, pc}

08001eee <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001eee:	b480      	push	{r7}
 8001ef0:	b083      	sub	sp, #12
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f103 0208 	add.w	r2, r3, #8
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f04f 32ff 	mov.w	r2, #4294967295
 8001f06:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f103 0208 	add.w	r2, r3, #8
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f103 0208 	add.w	r2, r3, #8
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001f22:	bf00      	nop
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr

08001f2e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001f2e:	b480      	push	{r7}
 8001f30:	b083      	sub	sp, #12
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001f3c:	bf00      	nop
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	689a      	ldr	r2, [r3, #8]
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	683a      	ldr	r2, [r7, #0]
 8001f6c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	683a      	ldr	r2, [r7, #0]
 8001f72:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	1c5a      	adds	r2, r3, #1
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	601a      	str	r2, [r3, #0]
}
 8001f84:	bf00      	nop
 8001f86:	3714      	adds	r7, #20
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fa6:	d103      	bne.n	8001fb0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	691b      	ldr	r3, [r3, #16]
 8001fac:	60fb      	str	r3, [r7, #12]
 8001fae:	e00c      	b.n	8001fca <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	3308      	adds	r3, #8
 8001fb4:	60fb      	str	r3, [r7, #12]
 8001fb6:	e002      	b.n	8001fbe <vListInsert+0x2e>
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	60fb      	str	r3, [r7, #12]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	68ba      	ldr	r2, [r7, #8]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d2f6      	bcs.n	8001fb8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	685a      	ldr	r2, [r3, #4]
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	683a      	ldr	r2, [r7, #0]
 8001fd8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	68fa      	ldr	r2, [r7, #12]
 8001fde:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	683a      	ldr	r2, [r7, #0]
 8001fe4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	1c5a      	adds	r2, r3, #1
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	601a      	str	r2, [r3, #0]
}
 8001ff6:	bf00      	nop
 8001ff8:	3714      	adds	r7, #20
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr

08002002 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002002:	b480      	push	{r7}
 8002004:	b085      	sub	sp, #20
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	6892      	ldr	r2, [r2, #8]
 8002018:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	6852      	ldr	r2, [r2, #4]
 8002022:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	429a      	cmp	r2, r3
 800202c:	d103      	bne.n	8002036 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	689a      	ldr	r2, [r3, #8]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	1e5a      	subs	r2, r3, #1
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
}
 800204a:	4618      	mov	r0, r3
 800204c:	3714      	adds	r7, #20
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
	...

08002058 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d10b      	bne.n	8002084 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800206c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002070:	f383 8811 	msr	BASEPRI, r3
 8002074:	f3bf 8f6f 	isb	sy
 8002078:	f3bf 8f4f 	dsb	sy
 800207c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800207e:	bf00      	nop
 8002080:	bf00      	nop
 8002082:	e7fd      	b.n	8002080 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002084:	f001 fb60 	bl	8003748 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002090:	68f9      	ldr	r1, [r7, #12]
 8002092:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002094:	fb01 f303 	mul.w	r3, r1, r3
 8002098:	441a      	add	r2, r3
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2200      	movs	r2, #0
 80020a2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020b4:	3b01      	subs	r3, #1
 80020b6:	68f9      	ldr	r1, [r7, #12]
 80020b8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80020ba:	fb01 f303 	mul.w	r3, r1, r3
 80020be:	441a      	add	r2, r3
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	22ff      	movs	r2, #255	@ 0xff
 80020c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	22ff      	movs	r2, #255	@ 0xff
 80020d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d114      	bne.n	8002104 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d01a      	beq.n	8002118 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	3310      	adds	r3, #16
 80020e6:	4618      	mov	r0, r3
 80020e8:	f000 ff32 	bl	8002f50 <xTaskRemoveFromEventList>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d012      	beq.n	8002118 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80020f2:	4b0d      	ldr	r3, [pc, #52]	@ (8002128 <xQueueGenericReset+0xd0>)
 80020f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80020f8:	601a      	str	r2, [r3, #0]
 80020fa:	f3bf 8f4f 	dsb	sy
 80020fe:	f3bf 8f6f 	isb	sy
 8002102:	e009      	b.n	8002118 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	3310      	adds	r3, #16
 8002108:	4618      	mov	r0, r3
 800210a:	f7ff fef0 	bl	8001eee <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	3324      	adds	r3, #36	@ 0x24
 8002112:	4618      	mov	r0, r3
 8002114:	f7ff feeb 	bl	8001eee <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002118:	f001 fb48 	bl	80037ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800211c:	2301      	movs	r3, #1
}
 800211e:	4618      	mov	r0, r3
 8002120:	3710      	adds	r7, #16
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	e000ed04 	.word	0xe000ed04

0800212c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800212c:	b580      	push	{r7, lr}
 800212e:	b08e      	sub	sp, #56	@ 0x38
 8002130:	af02      	add	r7, sp, #8
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	60b9      	str	r1, [r7, #8]
 8002136:	607a      	str	r2, [r7, #4]
 8002138:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d10b      	bne.n	8002158 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002144:	f383 8811 	msr	BASEPRI, r3
 8002148:	f3bf 8f6f 	isb	sy
 800214c:	f3bf 8f4f 	dsb	sy
 8002150:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002152:	bf00      	nop
 8002154:	bf00      	nop
 8002156:	e7fd      	b.n	8002154 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d10b      	bne.n	8002176 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800215e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002162:	f383 8811 	msr	BASEPRI, r3
 8002166:	f3bf 8f6f 	isb	sy
 800216a:	f3bf 8f4f 	dsb	sy
 800216e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002170:	bf00      	nop
 8002172:	bf00      	nop
 8002174:	e7fd      	b.n	8002172 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d002      	beq.n	8002182 <xQueueGenericCreateStatic+0x56>
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <xQueueGenericCreateStatic+0x5a>
 8002182:	2301      	movs	r3, #1
 8002184:	e000      	b.n	8002188 <xQueueGenericCreateStatic+0x5c>
 8002186:	2300      	movs	r3, #0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d10b      	bne.n	80021a4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800218c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002190:	f383 8811 	msr	BASEPRI, r3
 8002194:	f3bf 8f6f 	isb	sy
 8002198:	f3bf 8f4f 	dsb	sy
 800219c:	623b      	str	r3, [r7, #32]
}
 800219e:	bf00      	nop
 80021a0:	bf00      	nop
 80021a2:	e7fd      	b.n	80021a0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d102      	bne.n	80021b0 <xQueueGenericCreateStatic+0x84>
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d101      	bne.n	80021b4 <xQueueGenericCreateStatic+0x88>
 80021b0:	2301      	movs	r3, #1
 80021b2:	e000      	b.n	80021b6 <xQueueGenericCreateStatic+0x8a>
 80021b4:	2300      	movs	r3, #0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d10b      	bne.n	80021d2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80021ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021be:	f383 8811 	msr	BASEPRI, r3
 80021c2:	f3bf 8f6f 	isb	sy
 80021c6:	f3bf 8f4f 	dsb	sy
 80021ca:	61fb      	str	r3, [r7, #28]
}
 80021cc:	bf00      	nop
 80021ce:	bf00      	nop
 80021d0:	e7fd      	b.n	80021ce <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80021d2:	2348      	movs	r3, #72	@ 0x48
 80021d4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	2b48      	cmp	r3, #72	@ 0x48
 80021da:	d00b      	beq.n	80021f4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80021dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021e0:	f383 8811 	msr	BASEPRI, r3
 80021e4:	f3bf 8f6f 	isb	sy
 80021e8:	f3bf 8f4f 	dsb	sy
 80021ec:	61bb      	str	r3, [r7, #24]
}
 80021ee:	bf00      	nop
 80021f0:	bf00      	nop
 80021f2:	e7fd      	b.n	80021f0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80021f4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80021fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d00d      	beq.n	800221c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002202:	2201      	movs	r2, #1
 8002204:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002208:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800220c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800220e:	9300      	str	r3, [sp, #0]
 8002210:	4613      	mov	r3, r2
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	68b9      	ldr	r1, [r7, #8]
 8002216:	68f8      	ldr	r0, [r7, #12]
 8002218:	f000 f840 	bl	800229c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800221c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800221e:	4618      	mov	r0, r3
 8002220:	3730      	adds	r7, #48	@ 0x30
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002226:	b580      	push	{r7, lr}
 8002228:	b08a      	sub	sp, #40	@ 0x28
 800222a:	af02      	add	r7, sp, #8
 800222c:	60f8      	str	r0, [r7, #12]
 800222e:	60b9      	str	r1, [r7, #8]
 8002230:	4613      	mov	r3, r2
 8002232:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d10b      	bne.n	8002252 <xQueueGenericCreate+0x2c>
	__asm volatile
 800223a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800223e:	f383 8811 	msr	BASEPRI, r3
 8002242:	f3bf 8f6f 	isb	sy
 8002246:	f3bf 8f4f 	dsb	sy
 800224a:	613b      	str	r3, [r7, #16]
}
 800224c:	bf00      	nop
 800224e:	bf00      	nop
 8002250:	e7fd      	b.n	800224e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	68ba      	ldr	r2, [r7, #8]
 8002256:	fb02 f303 	mul.w	r3, r2, r3
 800225a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	3348      	adds	r3, #72	@ 0x48
 8002260:	4618      	mov	r0, r3
 8002262:	f001 fb51 	bl	8003908 <pvPortMalloc>
 8002266:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d011      	beq.n	8002292 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	3348      	adds	r3, #72	@ 0x48
 8002276:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	2200      	movs	r2, #0
 800227c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002280:	79fa      	ldrb	r2, [r7, #7]
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	9300      	str	r3, [sp, #0]
 8002286:	4613      	mov	r3, r2
 8002288:	697a      	ldr	r2, [r7, #20]
 800228a:	68b9      	ldr	r1, [r7, #8]
 800228c:	68f8      	ldr	r0, [r7, #12]
 800228e:	f000 f805 	bl	800229c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002292:	69bb      	ldr	r3, [r7, #24]
	}
 8002294:	4618      	mov	r0, r3
 8002296:	3720      	adds	r7, #32
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	60b9      	str	r1, [r7, #8]
 80022a6:	607a      	str	r2, [r7, #4]
 80022a8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d103      	bne.n	80022b8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	601a      	str	r2, [r3, #0]
 80022b6:	e002      	b.n	80022be <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	68fa      	ldr	r2, [r7, #12]
 80022c2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	68ba      	ldr	r2, [r7, #8]
 80022c8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80022ca:	2101      	movs	r1, #1
 80022cc:	69b8      	ldr	r0, [r7, #24]
 80022ce:	f7ff fec3 	bl	8002058 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80022d2:	bf00      	nop
 80022d4:	3710      	adds	r7, #16
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b082      	sub	sp, #8
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d00e      	beq.n	8002306 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80022fa:	2300      	movs	r3, #0
 80022fc:	2200      	movs	r2, #0
 80022fe:	2100      	movs	r1, #0
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f000 f837 	bl	8002374 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8002306:	bf00      	nop
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800230e:	b580      	push	{r7, lr}
 8002310:	b086      	sub	sp, #24
 8002312:	af00      	add	r7, sp, #0
 8002314:	4603      	mov	r3, r0
 8002316:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002318:	2301      	movs	r3, #1
 800231a:	617b      	str	r3, [r7, #20]
 800231c:	2300      	movs	r3, #0
 800231e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8002320:	79fb      	ldrb	r3, [r7, #7]
 8002322:	461a      	mov	r2, r3
 8002324:	6939      	ldr	r1, [r7, #16]
 8002326:	6978      	ldr	r0, [r7, #20]
 8002328:	f7ff ff7d 	bl	8002226 <xQueueGenericCreate>
 800232c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800232e:	68f8      	ldr	r0, [r7, #12]
 8002330:	f7ff ffd3 	bl	80022da <prvInitialiseMutex>

		return xNewQueue;
 8002334:	68fb      	ldr	r3, [r7, #12]
	}
 8002336:	4618      	mov	r0, r3
 8002338:	3718      	adds	r7, #24
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800233e:	b580      	push	{r7, lr}
 8002340:	b088      	sub	sp, #32
 8002342:	af02      	add	r7, sp, #8
 8002344:	4603      	mov	r3, r0
 8002346:	6039      	str	r1, [r7, #0]
 8002348:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800234a:	2301      	movs	r3, #1
 800234c:	617b      	str	r3, [r7, #20]
 800234e:	2300      	movs	r3, #0
 8002350:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8002352:	79fb      	ldrb	r3, [r7, #7]
 8002354:	9300      	str	r3, [sp, #0]
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	2200      	movs	r2, #0
 800235a:	6939      	ldr	r1, [r7, #16]
 800235c:	6978      	ldr	r0, [r7, #20]
 800235e:	f7ff fee5 	bl	800212c <xQueueGenericCreateStatic>
 8002362:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002364:	68f8      	ldr	r0, [r7, #12]
 8002366:	f7ff ffb8 	bl	80022da <prvInitialiseMutex>

		return xNewQueue;
 800236a:	68fb      	ldr	r3, [r7, #12]
	}
 800236c:	4618      	mov	r0, r3
 800236e:	3718      	adds	r7, #24
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}

08002374 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b08e      	sub	sp, #56	@ 0x38
 8002378:	af00      	add	r7, sp, #0
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	607a      	str	r2, [r7, #4]
 8002380:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002382:	2300      	movs	r3, #0
 8002384:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800238a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800238c:	2b00      	cmp	r3, #0
 800238e:	d10b      	bne.n	80023a8 <xQueueGenericSend+0x34>
	__asm volatile
 8002390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002394:	f383 8811 	msr	BASEPRI, r3
 8002398:	f3bf 8f6f 	isb	sy
 800239c:	f3bf 8f4f 	dsb	sy
 80023a0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80023a2:	bf00      	nop
 80023a4:	bf00      	nop
 80023a6:	e7fd      	b.n	80023a4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d103      	bne.n	80023b6 <xQueueGenericSend+0x42>
 80023ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d101      	bne.n	80023ba <xQueueGenericSend+0x46>
 80023b6:	2301      	movs	r3, #1
 80023b8:	e000      	b.n	80023bc <xQueueGenericSend+0x48>
 80023ba:	2300      	movs	r3, #0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d10b      	bne.n	80023d8 <xQueueGenericSend+0x64>
	__asm volatile
 80023c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023c4:	f383 8811 	msr	BASEPRI, r3
 80023c8:	f3bf 8f6f 	isb	sy
 80023cc:	f3bf 8f4f 	dsb	sy
 80023d0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80023d2:	bf00      	nop
 80023d4:	bf00      	nop
 80023d6:	e7fd      	b.n	80023d4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d103      	bne.n	80023e6 <xQueueGenericSend+0x72>
 80023de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d101      	bne.n	80023ea <xQueueGenericSend+0x76>
 80023e6:	2301      	movs	r3, #1
 80023e8:	e000      	b.n	80023ec <xQueueGenericSend+0x78>
 80023ea:	2300      	movs	r3, #0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d10b      	bne.n	8002408 <xQueueGenericSend+0x94>
	__asm volatile
 80023f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023f4:	f383 8811 	msr	BASEPRI, r3
 80023f8:	f3bf 8f6f 	isb	sy
 80023fc:	f3bf 8f4f 	dsb	sy
 8002400:	623b      	str	r3, [r7, #32]
}
 8002402:	bf00      	nop
 8002404:	bf00      	nop
 8002406:	e7fd      	b.n	8002404 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002408:	f000 ff62 	bl	80032d0 <xTaskGetSchedulerState>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d102      	bne.n	8002418 <xQueueGenericSend+0xa4>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d101      	bne.n	800241c <xQueueGenericSend+0xa8>
 8002418:	2301      	movs	r3, #1
 800241a:	e000      	b.n	800241e <xQueueGenericSend+0xaa>
 800241c:	2300      	movs	r3, #0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d10b      	bne.n	800243a <xQueueGenericSend+0xc6>
	__asm volatile
 8002422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002426:	f383 8811 	msr	BASEPRI, r3
 800242a:	f3bf 8f6f 	isb	sy
 800242e:	f3bf 8f4f 	dsb	sy
 8002432:	61fb      	str	r3, [r7, #28]
}
 8002434:	bf00      	nop
 8002436:	bf00      	nop
 8002438:	e7fd      	b.n	8002436 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800243a:	f001 f985 	bl	8003748 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800243e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002440:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002444:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002446:	429a      	cmp	r2, r3
 8002448:	d302      	bcc.n	8002450 <xQueueGenericSend+0xdc>
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	2b02      	cmp	r3, #2
 800244e:	d129      	bne.n	80024a4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002450:	683a      	ldr	r2, [r7, #0]
 8002452:	68b9      	ldr	r1, [r7, #8]
 8002454:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002456:	f000 f88f 	bl	8002578 <prvCopyDataToQueue>
 800245a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800245c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800245e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002460:	2b00      	cmp	r3, #0
 8002462:	d010      	beq.n	8002486 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002466:	3324      	adds	r3, #36	@ 0x24
 8002468:	4618      	mov	r0, r3
 800246a:	f000 fd71 	bl	8002f50 <xTaskRemoveFromEventList>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d013      	beq.n	800249c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002474:	4b3f      	ldr	r3, [pc, #252]	@ (8002574 <xQueueGenericSend+0x200>)
 8002476:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800247a:	601a      	str	r2, [r3, #0]
 800247c:	f3bf 8f4f 	dsb	sy
 8002480:	f3bf 8f6f 	isb	sy
 8002484:	e00a      	b.n	800249c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002486:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002488:	2b00      	cmp	r3, #0
 800248a:	d007      	beq.n	800249c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800248c:	4b39      	ldr	r3, [pc, #228]	@ (8002574 <xQueueGenericSend+0x200>)
 800248e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	f3bf 8f4f 	dsb	sy
 8002498:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800249c:	f001 f986 	bl	80037ac <vPortExitCritical>
				return pdPASS;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e063      	b.n	800256c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d103      	bne.n	80024b2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80024aa:	f001 f97f 	bl	80037ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80024ae:	2300      	movs	r3, #0
 80024b0:	e05c      	b.n	800256c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80024b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d106      	bne.n	80024c6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80024b8:	f107 0314 	add.w	r3, r7, #20
 80024bc:	4618      	mov	r0, r3
 80024be:	f000 fdab 	bl	8003018 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80024c2:	2301      	movs	r3, #1
 80024c4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80024c6:	f001 f971 	bl	80037ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80024ca:	f000 fb59 	bl	8002b80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80024ce:	f001 f93b 	bl	8003748 <vPortEnterCritical>
 80024d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80024d8:	b25b      	sxtb	r3, r3
 80024da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024de:	d103      	bne.n	80024e8 <xQueueGenericSend+0x174>
 80024e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024e2:	2200      	movs	r2, #0
 80024e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80024e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024ea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80024ee:	b25b      	sxtb	r3, r3
 80024f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f4:	d103      	bne.n	80024fe <xQueueGenericSend+0x18a>
 80024f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024f8:	2200      	movs	r2, #0
 80024fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80024fe:	f001 f955 	bl	80037ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002502:	1d3a      	adds	r2, r7, #4
 8002504:	f107 0314 	add.w	r3, r7, #20
 8002508:	4611      	mov	r1, r2
 800250a:	4618      	mov	r0, r3
 800250c:	f000 fd9a 	bl	8003044 <xTaskCheckForTimeOut>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d124      	bne.n	8002560 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002516:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002518:	f000 f8ea 	bl	80026f0 <prvIsQueueFull>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d018      	beq.n	8002554 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002524:	3310      	adds	r3, #16
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	4611      	mov	r1, r2
 800252a:	4618      	mov	r0, r3
 800252c:	f000 fcea 	bl	8002f04 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002530:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002532:	f000 f88b 	bl	800264c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002536:	f000 fb31 	bl	8002b9c <xTaskResumeAll>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	f47f af7c 	bne.w	800243a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002542:	4b0c      	ldr	r3, [pc, #48]	@ (8002574 <xQueueGenericSend+0x200>)
 8002544:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002548:	601a      	str	r2, [r3, #0]
 800254a:	f3bf 8f4f 	dsb	sy
 800254e:	f3bf 8f6f 	isb	sy
 8002552:	e772      	b.n	800243a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002554:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002556:	f000 f879 	bl	800264c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800255a:	f000 fb1f 	bl	8002b9c <xTaskResumeAll>
 800255e:	e76c      	b.n	800243a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002560:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002562:	f000 f873 	bl	800264c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002566:	f000 fb19 	bl	8002b9c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800256a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800256c:	4618      	mov	r0, r3
 800256e:	3738      	adds	r7, #56	@ 0x38
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	e000ed04 	.word	0xe000ed04

08002578 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002584:	2300      	movs	r3, #0
 8002586:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800258c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002592:	2b00      	cmp	r3, #0
 8002594:	d10d      	bne.n	80025b2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d14d      	bne.n	800263a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f000 feb2 	bl	800330c <xTaskPriorityDisinherit>
 80025a8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2200      	movs	r2, #0
 80025ae:	609a      	str	r2, [r3, #8]
 80025b0:	e043      	b.n	800263a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d119      	bne.n	80025ec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6858      	ldr	r0, [r3, #4]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c0:	461a      	mov	r2, r3
 80025c2:	68b9      	ldr	r1, [r7, #8]
 80025c4:	f001 fbba 	bl	8003d3c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	685a      	ldr	r2, [r3, #4]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d0:	441a      	add	r2, r3
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	685a      	ldr	r2, [r3, #4]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	429a      	cmp	r2, r3
 80025e0:	d32b      	bcc.n	800263a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	605a      	str	r2, [r3, #4]
 80025ea:	e026      	b.n	800263a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	68d8      	ldr	r0, [r3, #12]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f4:	461a      	mov	r2, r3
 80025f6:	68b9      	ldr	r1, [r7, #8]
 80025f8:	f001 fba0 	bl	8003d3c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	68da      	ldr	r2, [r3, #12]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002604:	425b      	negs	r3, r3
 8002606:	441a      	add	r2, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	68da      	ldr	r2, [r3, #12]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	429a      	cmp	r2, r3
 8002616:	d207      	bcs.n	8002628 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	689a      	ldr	r2, [r3, #8]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002620:	425b      	negs	r3, r3
 8002622:	441a      	add	r2, r3
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2b02      	cmp	r3, #2
 800262c:	d105      	bne.n	800263a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d002      	beq.n	800263a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	3b01      	subs	r3, #1
 8002638:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1c5a      	adds	r2, r3, #1
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8002642:	697b      	ldr	r3, [r7, #20]
}
 8002644:	4618      	mov	r0, r3
 8002646:	3718      	adds	r7, #24
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002654:	f001 f878 	bl	8003748 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800265e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002660:	e011      	b.n	8002686 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002666:	2b00      	cmp	r3, #0
 8002668:	d012      	beq.n	8002690 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	3324      	adds	r3, #36	@ 0x24
 800266e:	4618      	mov	r0, r3
 8002670:	f000 fc6e 	bl	8002f50 <xTaskRemoveFromEventList>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800267a:	f000 fd47 	bl	800310c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800267e:	7bfb      	ldrb	r3, [r7, #15]
 8002680:	3b01      	subs	r3, #1
 8002682:	b2db      	uxtb	r3, r3
 8002684:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002686:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800268a:	2b00      	cmp	r3, #0
 800268c:	dce9      	bgt.n	8002662 <prvUnlockQueue+0x16>
 800268e:	e000      	b.n	8002692 <prvUnlockQueue+0x46>
					break;
 8002690:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	22ff      	movs	r2, #255	@ 0xff
 8002696:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800269a:	f001 f887 	bl	80037ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800269e:	f001 f853 	bl	8003748 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80026a8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80026aa:	e011      	b.n	80026d0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	691b      	ldr	r3, [r3, #16]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d012      	beq.n	80026da <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	3310      	adds	r3, #16
 80026b8:	4618      	mov	r0, r3
 80026ba:	f000 fc49 	bl	8002f50 <xTaskRemoveFromEventList>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80026c4:	f000 fd22 	bl	800310c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80026c8:	7bbb      	ldrb	r3, [r7, #14]
 80026ca:	3b01      	subs	r3, #1
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80026d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	dce9      	bgt.n	80026ac <prvUnlockQueue+0x60>
 80026d8:	e000      	b.n	80026dc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80026da:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	22ff      	movs	r2, #255	@ 0xff
 80026e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80026e4:	f001 f862 	bl	80037ac <vPortExitCritical>
}
 80026e8:	bf00      	nop
 80026ea:	3710      	adds	r7, #16
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80026f8:	f001 f826 	bl	8003748 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002704:	429a      	cmp	r2, r3
 8002706:	d102      	bne.n	800270e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002708:	2301      	movs	r3, #1
 800270a:	60fb      	str	r3, [r7, #12]
 800270c:	e001      	b.n	8002712 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800270e:	2300      	movs	r3, #0
 8002710:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002712:	f001 f84b 	bl	80037ac <vPortExitCritical>

	return xReturn;
 8002716:	68fb      	ldr	r3, [r7, #12]
}
 8002718:	4618      	mov	r0, r3
 800271a:	3710      	adds	r7, #16
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}

08002720 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002720:	b580      	push	{r7, lr}
 8002722:	b08e      	sub	sp, #56	@ 0x38
 8002724:	af04      	add	r7, sp, #16
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	607a      	str	r2, [r7, #4]
 800272c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800272e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002730:	2b00      	cmp	r3, #0
 8002732:	d10b      	bne.n	800274c <xTaskCreateStatic+0x2c>
	__asm volatile
 8002734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002738:	f383 8811 	msr	BASEPRI, r3
 800273c:	f3bf 8f6f 	isb	sy
 8002740:	f3bf 8f4f 	dsb	sy
 8002744:	623b      	str	r3, [r7, #32]
}
 8002746:	bf00      	nop
 8002748:	bf00      	nop
 800274a:	e7fd      	b.n	8002748 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800274c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800274e:	2b00      	cmp	r3, #0
 8002750:	d10b      	bne.n	800276a <xTaskCreateStatic+0x4a>
	__asm volatile
 8002752:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002756:	f383 8811 	msr	BASEPRI, r3
 800275a:	f3bf 8f6f 	isb	sy
 800275e:	f3bf 8f4f 	dsb	sy
 8002762:	61fb      	str	r3, [r7, #28]
}
 8002764:	bf00      	nop
 8002766:	bf00      	nop
 8002768:	e7fd      	b.n	8002766 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800276a:	2354      	movs	r3, #84	@ 0x54
 800276c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	2b54      	cmp	r3, #84	@ 0x54
 8002772:	d00b      	beq.n	800278c <xTaskCreateStatic+0x6c>
	__asm volatile
 8002774:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002778:	f383 8811 	msr	BASEPRI, r3
 800277c:	f3bf 8f6f 	isb	sy
 8002780:	f3bf 8f4f 	dsb	sy
 8002784:	61bb      	str	r3, [r7, #24]
}
 8002786:	bf00      	nop
 8002788:	bf00      	nop
 800278a:	e7fd      	b.n	8002788 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800278c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800278e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002790:	2b00      	cmp	r3, #0
 8002792:	d01e      	beq.n	80027d2 <xTaskCreateStatic+0xb2>
 8002794:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002796:	2b00      	cmp	r3, #0
 8002798:	d01b      	beq.n	80027d2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800279a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800279c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800279e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80027a2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80027a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a6:	2202      	movs	r2, #2
 80027a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80027ac:	2300      	movs	r3, #0
 80027ae:	9303      	str	r3, [sp, #12]
 80027b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b2:	9302      	str	r3, [sp, #8]
 80027b4:	f107 0314 	add.w	r3, r7, #20
 80027b8:	9301      	str	r3, [sp, #4]
 80027ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027bc:	9300      	str	r3, [sp, #0]
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	68b9      	ldr	r1, [r7, #8]
 80027c4:	68f8      	ldr	r0, [r7, #12]
 80027c6:	f000 f850 	bl	800286a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80027ca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80027cc:	f000 f8d6 	bl	800297c <prvAddNewTaskToReadyList>
 80027d0:	e001      	b.n	80027d6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80027d2:	2300      	movs	r3, #0
 80027d4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80027d6:	697b      	ldr	r3, [r7, #20]
	}
 80027d8:	4618      	mov	r0, r3
 80027da:	3728      	adds	r7, #40	@ 0x28
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}

080027e0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b08c      	sub	sp, #48	@ 0x30
 80027e4:	af04      	add	r7, sp, #16
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	60b9      	str	r1, [r7, #8]
 80027ea:	603b      	str	r3, [r7, #0]
 80027ec:	4613      	mov	r3, r2
 80027ee:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80027f0:	88fb      	ldrh	r3, [r7, #6]
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	4618      	mov	r0, r3
 80027f6:	f001 f887 	bl	8003908 <pvPortMalloc>
 80027fa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d00e      	beq.n	8002820 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002802:	2054      	movs	r0, #84	@ 0x54
 8002804:	f001 f880 	bl	8003908 <pvPortMalloc>
 8002808:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d003      	beq.n	8002818 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	697a      	ldr	r2, [r7, #20]
 8002814:	631a      	str	r2, [r3, #48]	@ 0x30
 8002816:	e005      	b.n	8002824 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002818:	6978      	ldr	r0, [r7, #20]
 800281a:	f001 f943 	bl	8003aa4 <vPortFree>
 800281e:	e001      	b.n	8002824 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002820:	2300      	movs	r3, #0
 8002822:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d017      	beq.n	800285a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002832:	88fa      	ldrh	r2, [r7, #6]
 8002834:	2300      	movs	r3, #0
 8002836:	9303      	str	r3, [sp, #12]
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	9302      	str	r3, [sp, #8]
 800283c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800283e:	9301      	str	r3, [sp, #4]
 8002840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002842:	9300      	str	r3, [sp, #0]
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	68b9      	ldr	r1, [r7, #8]
 8002848:	68f8      	ldr	r0, [r7, #12]
 800284a:	f000 f80e 	bl	800286a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800284e:	69f8      	ldr	r0, [r7, #28]
 8002850:	f000 f894 	bl	800297c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002854:	2301      	movs	r3, #1
 8002856:	61bb      	str	r3, [r7, #24]
 8002858:	e002      	b.n	8002860 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800285a:	f04f 33ff 	mov.w	r3, #4294967295
 800285e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002860:	69bb      	ldr	r3, [r7, #24]
	}
 8002862:	4618      	mov	r0, r3
 8002864:	3720      	adds	r7, #32
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800286a:	b580      	push	{r7, lr}
 800286c:	b088      	sub	sp, #32
 800286e:	af00      	add	r7, sp, #0
 8002870:	60f8      	str	r0, [r7, #12]
 8002872:	60b9      	str	r1, [r7, #8]
 8002874:	607a      	str	r2, [r7, #4]
 8002876:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800287a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002882:	3b01      	subs	r3, #1
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	4413      	add	r3, r2
 8002888:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	f023 0307 	bic.w	r3, r3, #7
 8002890:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	f003 0307 	and.w	r3, r3, #7
 8002898:	2b00      	cmp	r3, #0
 800289a:	d00b      	beq.n	80028b4 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800289c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028a0:	f383 8811 	msr	BASEPRI, r3
 80028a4:	f3bf 8f6f 	isb	sy
 80028a8:	f3bf 8f4f 	dsb	sy
 80028ac:	617b      	str	r3, [r7, #20]
}
 80028ae:	bf00      	nop
 80028b0:	bf00      	nop
 80028b2:	e7fd      	b.n	80028b0 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d01f      	beq.n	80028fa <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80028ba:	2300      	movs	r3, #0
 80028bc:	61fb      	str	r3, [r7, #28]
 80028be:	e012      	b.n	80028e6 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80028c0:	68ba      	ldr	r2, [r7, #8]
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	4413      	add	r3, r2
 80028c6:	7819      	ldrb	r1, [r3, #0]
 80028c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	4413      	add	r3, r2
 80028ce:	3334      	adds	r3, #52	@ 0x34
 80028d0:	460a      	mov	r2, r1
 80028d2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80028d4:	68ba      	ldr	r2, [r7, #8]
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	4413      	add	r3, r2
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d006      	beq.n	80028ee <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	3301      	adds	r3, #1
 80028e4:	61fb      	str	r3, [r7, #28]
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	2b0f      	cmp	r3, #15
 80028ea:	d9e9      	bls.n	80028c0 <prvInitialiseNewTask+0x56>
 80028ec:	e000      	b.n	80028f0 <prvInitialiseNewTask+0x86>
			{
				break;
 80028ee:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80028f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028f2:	2200      	movs	r2, #0
 80028f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80028f8:	e003      	b.n	8002902 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80028fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002904:	2b06      	cmp	r3, #6
 8002906:	d901      	bls.n	800290c <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002908:	2306      	movs	r3, #6
 800290a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800290c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800290e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002910:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002914:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002916:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800291a:	2200      	movs	r2, #0
 800291c:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800291e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002920:	3304      	adds	r3, #4
 8002922:	4618      	mov	r0, r3
 8002924:	f7ff fb03 	bl	8001f2e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800292a:	3318      	adds	r3, #24
 800292c:	4618      	mov	r0, r3
 800292e:	f7ff fafe 	bl	8001f2e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002934:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002936:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800293a:	f1c3 0207 	rsb	r2, r3, #7
 800293e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002940:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002944:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002946:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800294a:	2200      	movs	r2, #0
 800294c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800294e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002950:	2200      	movs	r2, #0
 8002952:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002956:	683a      	ldr	r2, [r7, #0]
 8002958:	68f9      	ldr	r1, [r7, #12]
 800295a:	69b8      	ldr	r0, [r7, #24]
 800295c:	f000 fdc4 	bl	80034e8 <pxPortInitialiseStack>
 8002960:	4602      	mov	r2, r0
 8002962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002964:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002966:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002968:	2b00      	cmp	r3, #0
 800296a:	d002      	beq.n	8002972 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800296c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800296e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002970:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002972:	bf00      	nop
 8002974:	3720      	adds	r7, #32
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
	...

0800297c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002984:	f000 fee0 	bl	8003748 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002988:	4b2a      	ldr	r3, [pc, #168]	@ (8002a34 <prvAddNewTaskToReadyList+0xb8>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	3301      	adds	r3, #1
 800298e:	4a29      	ldr	r2, [pc, #164]	@ (8002a34 <prvAddNewTaskToReadyList+0xb8>)
 8002990:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002992:	4b29      	ldr	r3, [pc, #164]	@ (8002a38 <prvAddNewTaskToReadyList+0xbc>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d109      	bne.n	80029ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800299a:	4a27      	ldr	r2, [pc, #156]	@ (8002a38 <prvAddNewTaskToReadyList+0xbc>)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80029a0:	4b24      	ldr	r3, [pc, #144]	@ (8002a34 <prvAddNewTaskToReadyList+0xb8>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d110      	bne.n	80029ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80029a8:	f000 fbd4 	bl	8003154 <prvInitialiseTaskLists>
 80029ac:	e00d      	b.n	80029ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80029ae:	4b23      	ldr	r3, [pc, #140]	@ (8002a3c <prvAddNewTaskToReadyList+0xc0>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d109      	bne.n	80029ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80029b6:	4b20      	ldr	r3, [pc, #128]	@ (8002a38 <prvAddNewTaskToReadyList+0xbc>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d802      	bhi.n	80029ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80029c4:	4a1c      	ldr	r2, [pc, #112]	@ (8002a38 <prvAddNewTaskToReadyList+0xbc>)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80029ca:	4b1d      	ldr	r3, [pc, #116]	@ (8002a40 <prvAddNewTaskToReadyList+0xc4>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	3301      	adds	r3, #1
 80029d0:	4a1b      	ldr	r2, [pc, #108]	@ (8002a40 <prvAddNewTaskToReadyList+0xc4>)
 80029d2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029d8:	2201      	movs	r2, #1
 80029da:	409a      	lsls	r2, r3
 80029dc:	4b19      	ldr	r3, [pc, #100]	@ (8002a44 <prvAddNewTaskToReadyList+0xc8>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	4a18      	ldr	r2, [pc, #96]	@ (8002a44 <prvAddNewTaskToReadyList+0xc8>)
 80029e4:	6013      	str	r3, [r2, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029ea:	4613      	mov	r3, r2
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	4413      	add	r3, r2
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	4a15      	ldr	r2, [pc, #84]	@ (8002a48 <prvAddNewTaskToReadyList+0xcc>)
 80029f4:	441a      	add	r2, r3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	3304      	adds	r3, #4
 80029fa:	4619      	mov	r1, r3
 80029fc:	4610      	mov	r0, r2
 80029fe:	f7ff faa3 	bl	8001f48 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002a02:	f000 fed3 	bl	80037ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002a06:	4b0d      	ldr	r3, [pc, #52]	@ (8002a3c <prvAddNewTaskToReadyList+0xc0>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00e      	beq.n	8002a2c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002a0e:	4b0a      	ldr	r3, [pc, #40]	@ (8002a38 <prvAddNewTaskToReadyList+0xbc>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d207      	bcs.n	8002a2c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002a1c:	4b0b      	ldr	r3, [pc, #44]	@ (8002a4c <prvAddNewTaskToReadyList+0xd0>)
 8002a1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002a22:	601a      	str	r2, [r3, #0]
 8002a24:	f3bf 8f4f 	dsb	sy
 8002a28:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002a2c:	bf00      	nop
 8002a2e:	3708      	adds	r7, #8
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	200003e4 	.word	0x200003e4
 8002a38:	200002e4 	.word	0x200002e4
 8002a3c:	200003f0 	.word	0x200003f0
 8002a40:	20000400 	.word	0x20000400
 8002a44:	200003ec 	.word	0x200003ec
 8002a48:	200002e8 	.word	0x200002e8
 8002a4c:	e000ed04 	.word	0xe000ed04

08002a50 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d018      	beq.n	8002a94 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002a62:	4b14      	ldr	r3, [pc, #80]	@ (8002ab4 <vTaskDelay+0x64>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d00b      	beq.n	8002a82 <vTaskDelay+0x32>
	__asm volatile
 8002a6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a6e:	f383 8811 	msr	BASEPRI, r3
 8002a72:	f3bf 8f6f 	isb	sy
 8002a76:	f3bf 8f4f 	dsb	sy
 8002a7a:	60bb      	str	r3, [r7, #8]
}
 8002a7c:	bf00      	nop
 8002a7e:	bf00      	nop
 8002a80:	e7fd      	b.n	8002a7e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002a82:	f000 f87d 	bl	8002b80 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002a86:	2100      	movs	r1, #0
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f000 fcc7 	bl	800341c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002a8e:	f000 f885 	bl	8002b9c <xTaskResumeAll>
 8002a92:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d107      	bne.n	8002aaa <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8002a9a:	4b07      	ldr	r3, [pc, #28]	@ (8002ab8 <vTaskDelay+0x68>)
 8002a9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002aa0:	601a      	str	r2, [r3, #0]
 8002aa2:	f3bf 8f4f 	dsb	sy
 8002aa6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002aaa:	bf00      	nop
 8002aac:	3710      	adds	r7, #16
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	2000040c 	.word	0x2000040c
 8002ab8:	e000ed04 	.word	0xe000ed04

08002abc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b08a      	sub	sp, #40	@ 0x28
 8002ac0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002aca:	463a      	mov	r2, r7
 8002acc:	1d39      	adds	r1, r7, #4
 8002ace:	f107 0308 	add.w	r3, r7, #8
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7fd fcfc 	bl	80004d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002ad8:	6839      	ldr	r1, [r7, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	68ba      	ldr	r2, [r7, #8]
 8002ade:	9202      	str	r2, [sp, #8]
 8002ae0:	9301      	str	r3, [sp, #4]
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	9300      	str	r3, [sp, #0]
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	460a      	mov	r2, r1
 8002aea:	491f      	ldr	r1, [pc, #124]	@ (8002b68 <vTaskStartScheduler+0xac>)
 8002aec:	481f      	ldr	r0, [pc, #124]	@ (8002b6c <vTaskStartScheduler+0xb0>)
 8002aee:	f7ff fe17 	bl	8002720 <xTaskCreateStatic>
 8002af2:	4603      	mov	r3, r0
 8002af4:	4a1e      	ldr	r2, [pc, #120]	@ (8002b70 <vTaskStartScheduler+0xb4>)
 8002af6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002af8:	4b1d      	ldr	r3, [pc, #116]	@ (8002b70 <vTaskStartScheduler+0xb4>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d002      	beq.n	8002b06 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002b00:	2301      	movs	r3, #1
 8002b02:	617b      	str	r3, [r7, #20]
 8002b04:	e001      	b.n	8002b0a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002b06:	2300      	movs	r3, #0
 8002b08:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d116      	bne.n	8002b3e <vTaskStartScheduler+0x82>
	__asm volatile
 8002b10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b14:	f383 8811 	msr	BASEPRI, r3
 8002b18:	f3bf 8f6f 	isb	sy
 8002b1c:	f3bf 8f4f 	dsb	sy
 8002b20:	613b      	str	r3, [r7, #16]
}
 8002b22:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002b24:	4b13      	ldr	r3, [pc, #76]	@ (8002b74 <vTaskStartScheduler+0xb8>)
 8002b26:	f04f 32ff 	mov.w	r2, #4294967295
 8002b2a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002b2c:	4b12      	ldr	r3, [pc, #72]	@ (8002b78 <vTaskStartScheduler+0xbc>)
 8002b2e:	2201      	movs	r2, #1
 8002b30:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002b32:	4b12      	ldr	r3, [pc, #72]	@ (8002b7c <vTaskStartScheduler+0xc0>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002b38:	f000 fd62 	bl	8003600 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002b3c:	e00f      	b.n	8002b5e <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b44:	d10b      	bne.n	8002b5e <vTaskStartScheduler+0xa2>
	__asm volatile
 8002b46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b4a:	f383 8811 	msr	BASEPRI, r3
 8002b4e:	f3bf 8f6f 	isb	sy
 8002b52:	f3bf 8f4f 	dsb	sy
 8002b56:	60fb      	str	r3, [r7, #12]
}
 8002b58:	bf00      	nop
 8002b5a:	bf00      	nop
 8002b5c:	e7fd      	b.n	8002b5a <vTaskStartScheduler+0x9e>
}
 8002b5e:	bf00      	nop
 8002b60:	3718      	adds	r7, #24
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	08003e20 	.word	0x08003e20
 8002b6c:	08003125 	.word	0x08003125
 8002b70:	20000408 	.word	0x20000408
 8002b74:	20000404 	.word	0x20000404
 8002b78:	200003f0 	.word	0x200003f0
 8002b7c:	200003e8 	.word	0x200003e8

08002b80 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002b84:	4b04      	ldr	r3, [pc, #16]	@ (8002b98 <vTaskSuspendAll+0x18>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	3301      	adds	r3, #1
 8002b8a:	4a03      	ldr	r2, [pc, #12]	@ (8002b98 <vTaskSuspendAll+0x18>)
 8002b8c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002b8e:	bf00      	nop
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr
 8002b98:	2000040c 	.word	0x2000040c

08002b9c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002baa:	4b42      	ldr	r3, [pc, #264]	@ (8002cb4 <xTaskResumeAll+0x118>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d10b      	bne.n	8002bca <xTaskResumeAll+0x2e>
	__asm volatile
 8002bb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bb6:	f383 8811 	msr	BASEPRI, r3
 8002bba:	f3bf 8f6f 	isb	sy
 8002bbe:	f3bf 8f4f 	dsb	sy
 8002bc2:	603b      	str	r3, [r7, #0]
}
 8002bc4:	bf00      	nop
 8002bc6:	bf00      	nop
 8002bc8:	e7fd      	b.n	8002bc6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002bca:	f000 fdbd 	bl	8003748 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002bce:	4b39      	ldr	r3, [pc, #228]	@ (8002cb4 <xTaskResumeAll+0x118>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	3b01      	subs	r3, #1
 8002bd4:	4a37      	ldr	r2, [pc, #220]	@ (8002cb4 <xTaskResumeAll+0x118>)
 8002bd6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002bd8:	4b36      	ldr	r3, [pc, #216]	@ (8002cb4 <xTaskResumeAll+0x118>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d161      	bne.n	8002ca4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002be0:	4b35      	ldr	r3, [pc, #212]	@ (8002cb8 <xTaskResumeAll+0x11c>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d05d      	beq.n	8002ca4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002be8:	e02e      	b.n	8002c48 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002bea:	4b34      	ldr	r3, [pc, #208]	@ (8002cbc <xTaskResumeAll+0x120>)
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	3318      	adds	r3, #24
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff fa03 	bl	8002002 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	3304      	adds	r3, #4
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7ff f9fe 	bl	8002002 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	409a      	lsls	r2, r3
 8002c0e:	4b2c      	ldr	r3, [pc, #176]	@ (8002cc0 <xTaskResumeAll+0x124>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	4a2a      	ldr	r2, [pc, #168]	@ (8002cc0 <xTaskResumeAll+0x124>)
 8002c16:	6013      	str	r3, [r2, #0]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	4413      	add	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	4a27      	ldr	r2, [pc, #156]	@ (8002cc4 <xTaskResumeAll+0x128>)
 8002c26:	441a      	add	r2, r3
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	3304      	adds	r3, #4
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	4610      	mov	r0, r2
 8002c30:	f7ff f98a 	bl	8001f48 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c38:	4b23      	ldr	r3, [pc, #140]	@ (8002cc8 <xTaskResumeAll+0x12c>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d302      	bcc.n	8002c48 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8002c42:	4b22      	ldr	r3, [pc, #136]	@ (8002ccc <xTaskResumeAll+0x130>)
 8002c44:	2201      	movs	r2, #1
 8002c46:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002c48:	4b1c      	ldr	r3, [pc, #112]	@ (8002cbc <xTaskResumeAll+0x120>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d1cc      	bne.n	8002bea <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002c56:	f000 fb1b 	bl	8003290 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002c5a:	4b1d      	ldr	r3, [pc, #116]	@ (8002cd0 <xTaskResumeAll+0x134>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d010      	beq.n	8002c88 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002c66:	f000 f837 	bl	8002cd8 <xTaskIncrementTick>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d002      	beq.n	8002c76 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8002c70:	4b16      	ldr	r3, [pc, #88]	@ (8002ccc <xTaskResumeAll+0x130>)
 8002c72:	2201      	movs	r2, #1
 8002c74:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	3b01      	subs	r3, #1
 8002c7a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d1f1      	bne.n	8002c66 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8002c82:	4b13      	ldr	r3, [pc, #76]	@ (8002cd0 <xTaskResumeAll+0x134>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002c88:	4b10      	ldr	r3, [pc, #64]	@ (8002ccc <xTaskResumeAll+0x130>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d009      	beq.n	8002ca4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002c90:	2301      	movs	r3, #1
 8002c92:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002c94:	4b0f      	ldr	r3, [pc, #60]	@ (8002cd4 <xTaskResumeAll+0x138>)
 8002c96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c9a:	601a      	str	r2, [r3, #0]
 8002c9c:	f3bf 8f4f 	dsb	sy
 8002ca0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002ca4:	f000 fd82 	bl	80037ac <vPortExitCritical>

	return xAlreadyYielded;
 8002ca8:	68bb      	ldr	r3, [r7, #8]
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3710      	adds	r7, #16
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	2000040c 	.word	0x2000040c
 8002cb8:	200003e4 	.word	0x200003e4
 8002cbc:	200003a4 	.word	0x200003a4
 8002cc0:	200003ec 	.word	0x200003ec
 8002cc4:	200002e8 	.word	0x200002e8
 8002cc8:	200002e4 	.word	0x200002e4
 8002ccc:	200003f8 	.word	0x200003f8
 8002cd0:	200003f4 	.word	0x200003f4
 8002cd4:	e000ed04 	.word	0xe000ed04

08002cd8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b086      	sub	sp, #24
 8002cdc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ce2:	4b4f      	ldr	r3, [pc, #316]	@ (8002e20 <xTaskIncrementTick+0x148>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	f040 808f 	bne.w	8002e0a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002cec:	4b4d      	ldr	r3, [pc, #308]	@ (8002e24 <xTaskIncrementTick+0x14c>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002cf4:	4a4b      	ldr	r2, [pc, #300]	@ (8002e24 <xTaskIncrementTick+0x14c>)
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d121      	bne.n	8002d44 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8002d00:	4b49      	ldr	r3, [pc, #292]	@ (8002e28 <xTaskIncrementTick+0x150>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d00b      	beq.n	8002d22 <xTaskIncrementTick+0x4a>
	__asm volatile
 8002d0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d0e:	f383 8811 	msr	BASEPRI, r3
 8002d12:	f3bf 8f6f 	isb	sy
 8002d16:	f3bf 8f4f 	dsb	sy
 8002d1a:	603b      	str	r3, [r7, #0]
}
 8002d1c:	bf00      	nop
 8002d1e:	bf00      	nop
 8002d20:	e7fd      	b.n	8002d1e <xTaskIncrementTick+0x46>
 8002d22:	4b41      	ldr	r3, [pc, #260]	@ (8002e28 <xTaskIncrementTick+0x150>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	60fb      	str	r3, [r7, #12]
 8002d28:	4b40      	ldr	r3, [pc, #256]	@ (8002e2c <xTaskIncrementTick+0x154>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a3e      	ldr	r2, [pc, #248]	@ (8002e28 <xTaskIncrementTick+0x150>)
 8002d2e:	6013      	str	r3, [r2, #0]
 8002d30:	4a3e      	ldr	r2, [pc, #248]	@ (8002e2c <xTaskIncrementTick+0x154>)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6013      	str	r3, [r2, #0]
 8002d36:	4b3e      	ldr	r3, [pc, #248]	@ (8002e30 <xTaskIncrementTick+0x158>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	4a3c      	ldr	r2, [pc, #240]	@ (8002e30 <xTaskIncrementTick+0x158>)
 8002d3e:	6013      	str	r3, [r2, #0]
 8002d40:	f000 faa6 	bl	8003290 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002d44:	4b3b      	ldr	r3, [pc, #236]	@ (8002e34 <xTaskIncrementTick+0x15c>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	693a      	ldr	r2, [r7, #16]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d348      	bcc.n	8002de0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d4e:	4b36      	ldr	r3, [pc, #216]	@ (8002e28 <xTaskIncrementTick+0x150>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d104      	bne.n	8002d62 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d58:	4b36      	ldr	r3, [pc, #216]	@ (8002e34 <xTaskIncrementTick+0x15c>)
 8002d5a:	f04f 32ff 	mov.w	r2, #4294967295
 8002d5e:	601a      	str	r2, [r3, #0]
					break;
 8002d60:	e03e      	b.n	8002de0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d62:	4b31      	ldr	r3, [pc, #196]	@ (8002e28 <xTaskIncrementTick+0x150>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d203      	bcs.n	8002d82 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002d7a:	4a2e      	ldr	r2, [pc, #184]	@ (8002e34 <xTaskIncrementTick+0x15c>)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002d80:	e02e      	b.n	8002de0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	3304      	adds	r3, #4
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7ff f93b 	bl	8002002 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d004      	beq.n	8002d9e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	3318      	adds	r3, #24
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7ff f932 	bl	8002002 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002da2:	2201      	movs	r2, #1
 8002da4:	409a      	lsls	r2, r3
 8002da6:	4b24      	ldr	r3, [pc, #144]	@ (8002e38 <xTaskIncrementTick+0x160>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	4a22      	ldr	r2, [pc, #136]	@ (8002e38 <xTaskIncrementTick+0x160>)
 8002dae:	6013      	str	r3, [r2, #0]
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002db4:	4613      	mov	r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	4413      	add	r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	4a1f      	ldr	r2, [pc, #124]	@ (8002e3c <xTaskIncrementTick+0x164>)
 8002dbe:	441a      	add	r2, r3
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	3304      	adds	r3, #4
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	4610      	mov	r0, r2
 8002dc8:	f7ff f8be 	bl	8001f48 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002dd0:	4b1b      	ldr	r3, [pc, #108]	@ (8002e40 <xTaskIncrementTick+0x168>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d3b9      	bcc.n	8002d4e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002dde:	e7b6      	b.n	8002d4e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002de0:	4b17      	ldr	r3, [pc, #92]	@ (8002e40 <xTaskIncrementTick+0x168>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002de6:	4915      	ldr	r1, [pc, #84]	@ (8002e3c <xTaskIncrementTick+0x164>)
 8002de8:	4613      	mov	r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	4413      	add	r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	440b      	add	r3, r1
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d901      	bls.n	8002dfc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002dfc:	4b11      	ldr	r3, [pc, #68]	@ (8002e44 <xTaskIncrementTick+0x16c>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d007      	beq.n	8002e14 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8002e04:	2301      	movs	r3, #1
 8002e06:	617b      	str	r3, [r7, #20]
 8002e08:	e004      	b.n	8002e14 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002e0a:	4b0f      	ldr	r3, [pc, #60]	@ (8002e48 <xTaskIncrementTick+0x170>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	3301      	adds	r3, #1
 8002e10:	4a0d      	ldr	r2, [pc, #52]	@ (8002e48 <xTaskIncrementTick+0x170>)
 8002e12:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002e14:	697b      	ldr	r3, [r7, #20]
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3718      	adds	r7, #24
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	2000040c 	.word	0x2000040c
 8002e24:	200003e8 	.word	0x200003e8
 8002e28:	2000039c 	.word	0x2000039c
 8002e2c:	200003a0 	.word	0x200003a0
 8002e30:	200003fc 	.word	0x200003fc
 8002e34:	20000404 	.word	0x20000404
 8002e38:	200003ec 	.word	0x200003ec
 8002e3c:	200002e8 	.word	0x200002e8
 8002e40:	200002e4 	.word	0x200002e4
 8002e44:	200003f8 	.word	0x200003f8
 8002e48:	200003f4 	.word	0x200003f4

08002e4c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b087      	sub	sp, #28
 8002e50:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002e52:	4b27      	ldr	r3, [pc, #156]	@ (8002ef0 <vTaskSwitchContext+0xa4>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d003      	beq.n	8002e62 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002e5a:	4b26      	ldr	r3, [pc, #152]	@ (8002ef4 <vTaskSwitchContext+0xa8>)
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002e60:	e040      	b.n	8002ee4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8002e62:	4b24      	ldr	r3, [pc, #144]	@ (8002ef4 <vTaskSwitchContext+0xa8>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e68:	4b23      	ldr	r3, [pc, #140]	@ (8002ef8 <vTaskSwitchContext+0xac>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	fab3 f383 	clz	r3, r3
 8002e74:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002e76:	7afb      	ldrb	r3, [r7, #11]
 8002e78:	f1c3 031f 	rsb	r3, r3, #31
 8002e7c:	617b      	str	r3, [r7, #20]
 8002e7e:	491f      	ldr	r1, [pc, #124]	@ (8002efc <vTaskSwitchContext+0xb0>)
 8002e80:	697a      	ldr	r2, [r7, #20]
 8002e82:	4613      	mov	r3, r2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	4413      	add	r3, r2
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	440b      	add	r3, r1
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d10b      	bne.n	8002eaa <vTaskSwitchContext+0x5e>
	__asm volatile
 8002e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e96:	f383 8811 	msr	BASEPRI, r3
 8002e9a:	f3bf 8f6f 	isb	sy
 8002e9e:	f3bf 8f4f 	dsb	sy
 8002ea2:	607b      	str	r3, [r7, #4]
}
 8002ea4:	bf00      	nop
 8002ea6:	bf00      	nop
 8002ea8:	e7fd      	b.n	8002ea6 <vTaskSwitchContext+0x5a>
 8002eaa:	697a      	ldr	r2, [r7, #20]
 8002eac:	4613      	mov	r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	4413      	add	r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	4a11      	ldr	r2, [pc, #68]	@ (8002efc <vTaskSwitchContext+0xb0>)
 8002eb6:	4413      	add	r3, r2
 8002eb8:	613b      	str	r3, [r7, #16]
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	685a      	ldr	r2, [r3, #4]
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	605a      	str	r2, [r3, #4]
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	685a      	ldr	r2, [r3, #4]
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	3308      	adds	r3, #8
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d104      	bne.n	8002eda <vTaskSwitchContext+0x8e>
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	685a      	ldr	r2, [r3, #4]
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	605a      	str	r2, [r3, #4]
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	4a07      	ldr	r2, [pc, #28]	@ (8002f00 <vTaskSwitchContext+0xb4>)
 8002ee2:	6013      	str	r3, [r2, #0]
}
 8002ee4:	bf00      	nop
 8002ee6:	371c      	adds	r7, #28
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr
 8002ef0:	2000040c 	.word	0x2000040c
 8002ef4:	200003f8 	.word	0x200003f8
 8002ef8:	200003ec 	.word	0x200003ec
 8002efc:	200002e8 	.word	0x200002e8
 8002f00:	200002e4 	.word	0x200002e4

08002f04 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d10b      	bne.n	8002f2c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8002f14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f18:	f383 8811 	msr	BASEPRI, r3
 8002f1c:	f3bf 8f6f 	isb	sy
 8002f20:	f3bf 8f4f 	dsb	sy
 8002f24:	60fb      	str	r3, [r7, #12]
}
 8002f26:	bf00      	nop
 8002f28:	bf00      	nop
 8002f2a:	e7fd      	b.n	8002f28 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002f2c:	4b07      	ldr	r3, [pc, #28]	@ (8002f4c <vTaskPlaceOnEventList+0x48>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	3318      	adds	r3, #24
 8002f32:	4619      	mov	r1, r3
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f7ff f82b 	bl	8001f90 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002f3a:	2101      	movs	r1, #1
 8002f3c:	6838      	ldr	r0, [r7, #0]
 8002f3e:	f000 fa6d 	bl	800341c <prvAddCurrentTaskToDelayedList>
}
 8002f42:	bf00      	nop
 8002f44:	3710      	adds	r7, #16
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	200002e4 	.word	0x200002e4

08002f50 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b086      	sub	sp, #24
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d10b      	bne.n	8002f7e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8002f66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f6a:	f383 8811 	msr	BASEPRI, r3
 8002f6e:	f3bf 8f6f 	isb	sy
 8002f72:	f3bf 8f4f 	dsb	sy
 8002f76:	60fb      	str	r3, [r7, #12]
}
 8002f78:	bf00      	nop
 8002f7a:	bf00      	nop
 8002f7c:	e7fd      	b.n	8002f7a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	3318      	adds	r3, #24
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7ff f83d 	bl	8002002 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f88:	4b1d      	ldr	r3, [pc, #116]	@ (8003000 <xTaskRemoveFromEventList+0xb0>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d11c      	bne.n	8002fca <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	3304      	adds	r3, #4
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7ff f834 	bl	8002002 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	409a      	lsls	r2, r3
 8002fa2:	4b18      	ldr	r3, [pc, #96]	@ (8003004 <xTaskRemoveFromEventList+0xb4>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	4a16      	ldr	r2, [pc, #88]	@ (8003004 <xTaskRemoveFromEventList+0xb4>)
 8002faa:	6013      	str	r3, [r2, #0]
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	4413      	add	r3, r2
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	4a13      	ldr	r2, [pc, #76]	@ (8003008 <xTaskRemoveFromEventList+0xb8>)
 8002fba:	441a      	add	r2, r3
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	3304      	adds	r3, #4
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	4610      	mov	r0, r2
 8002fc4:	f7fe ffc0 	bl	8001f48 <vListInsertEnd>
 8002fc8:	e005      	b.n	8002fd6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	3318      	adds	r3, #24
 8002fce:	4619      	mov	r1, r3
 8002fd0:	480e      	ldr	r0, [pc, #56]	@ (800300c <xTaskRemoveFromEventList+0xbc>)
 8002fd2:	f7fe ffb9 	bl	8001f48 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fda:	4b0d      	ldr	r3, [pc, #52]	@ (8003010 <xTaskRemoveFromEventList+0xc0>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d905      	bls.n	8002ff0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002fe8:	4b0a      	ldr	r3, [pc, #40]	@ (8003014 <xTaskRemoveFromEventList+0xc4>)
 8002fea:	2201      	movs	r2, #1
 8002fec:	601a      	str	r2, [r3, #0]
 8002fee:	e001      	b.n	8002ff4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8002ff4:	697b      	ldr	r3, [r7, #20]
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3718      	adds	r7, #24
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	2000040c 	.word	0x2000040c
 8003004:	200003ec 	.word	0x200003ec
 8003008:	200002e8 	.word	0x200002e8
 800300c:	200003a4 	.word	0x200003a4
 8003010:	200002e4 	.word	0x200002e4
 8003014:	200003f8 	.word	0x200003f8

08003018 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003020:	4b06      	ldr	r3, [pc, #24]	@ (800303c <vTaskInternalSetTimeOutState+0x24>)
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003028:	4b05      	ldr	r3, [pc, #20]	@ (8003040 <vTaskInternalSetTimeOutState+0x28>)
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	605a      	str	r2, [r3, #4]
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr
 800303c:	200003fc 	.word	0x200003fc
 8003040:	200003e8 	.word	0x200003e8

08003044 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b088      	sub	sp, #32
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d10b      	bne.n	800306c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003058:	f383 8811 	msr	BASEPRI, r3
 800305c:	f3bf 8f6f 	isb	sy
 8003060:	f3bf 8f4f 	dsb	sy
 8003064:	613b      	str	r3, [r7, #16]
}
 8003066:	bf00      	nop
 8003068:	bf00      	nop
 800306a:	e7fd      	b.n	8003068 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d10b      	bne.n	800308a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003076:	f383 8811 	msr	BASEPRI, r3
 800307a:	f3bf 8f6f 	isb	sy
 800307e:	f3bf 8f4f 	dsb	sy
 8003082:	60fb      	str	r3, [r7, #12]
}
 8003084:	bf00      	nop
 8003086:	bf00      	nop
 8003088:	e7fd      	b.n	8003086 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800308a:	f000 fb5d 	bl	8003748 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800308e:	4b1d      	ldr	r3, [pc, #116]	@ (8003104 <xTaskCheckForTimeOut+0xc0>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	69ba      	ldr	r2, [r7, #24]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a6:	d102      	bne.n	80030ae <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80030a8:	2300      	movs	r3, #0
 80030aa:	61fb      	str	r3, [r7, #28]
 80030ac:	e023      	b.n	80030f6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	4b15      	ldr	r3, [pc, #84]	@ (8003108 <xTaskCheckForTimeOut+0xc4>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d007      	beq.n	80030ca <xTaskCheckForTimeOut+0x86>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	69ba      	ldr	r2, [r7, #24]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d302      	bcc.n	80030ca <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80030c4:	2301      	movs	r3, #1
 80030c6:	61fb      	str	r3, [r7, #28]
 80030c8:	e015      	b.n	80030f6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	697a      	ldr	r2, [r7, #20]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d20b      	bcs.n	80030ec <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	1ad2      	subs	r2, r2, r3
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f7ff ff99 	bl	8003018 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80030e6:	2300      	movs	r3, #0
 80030e8:	61fb      	str	r3, [r7, #28]
 80030ea:	e004      	b.n	80030f6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	2200      	movs	r2, #0
 80030f0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80030f2:	2301      	movs	r3, #1
 80030f4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80030f6:	f000 fb59 	bl	80037ac <vPortExitCritical>

	return xReturn;
 80030fa:	69fb      	ldr	r3, [r7, #28]
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3720      	adds	r7, #32
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	200003e8 	.word	0x200003e8
 8003108:	200003fc 	.word	0x200003fc

0800310c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800310c:	b480      	push	{r7}
 800310e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003110:	4b03      	ldr	r3, [pc, #12]	@ (8003120 <vTaskMissedYield+0x14>)
 8003112:	2201      	movs	r2, #1
 8003114:	601a      	str	r2, [r3, #0]
}
 8003116:	bf00      	nop
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr
 8003120:	200003f8 	.word	0x200003f8

08003124 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800312c:	f000 f852 	bl	80031d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003130:	4b06      	ldr	r3, [pc, #24]	@ (800314c <prvIdleTask+0x28>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2b01      	cmp	r3, #1
 8003136:	d9f9      	bls.n	800312c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003138:	4b05      	ldr	r3, [pc, #20]	@ (8003150 <prvIdleTask+0x2c>)
 800313a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800313e:	601a      	str	r2, [r3, #0]
 8003140:	f3bf 8f4f 	dsb	sy
 8003144:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003148:	e7f0      	b.n	800312c <prvIdleTask+0x8>
 800314a:	bf00      	nop
 800314c:	200002e8 	.word	0x200002e8
 8003150:	e000ed04 	.word	0xe000ed04

08003154 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800315a:	2300      	movs	r3, #0
 800315c:	607b      	str	r3, [r7, #4]
 800315e:	e00c      	b.n	800317a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	4613      	mov	r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	4413      	add	r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	4a12      	ldr	r2, [pc, #72]	@ (80031b4 <prvInitialiseTaskLists+0x60>)
 800316c:	4413      	add	r3, r2
 800316e:	4618      	mov	r0, r3
 8003170:	f7fe febd 	bl	8001eee <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	3301      	adds	r3, #1
 8003178:	607b      	str	r3, [r7, #4]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2b06      	cmp	r3, #6
 800317e:	d9ef      	bls.n	8003160 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003180:	480d      	ldr	r0, [pc, #52]	@ (80031b8 <prvInitialiseTaskLists+0x64>)
 8003182:	f7fe feb4 	bl	8001eee <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003186:	480d      	ldr	r0, [pc, #52]	@ (80031bc <prvInitialiseTaskLists+0x68>)
 8003188:	f7fe feb1 	bl	8001eee <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800318c:	480c      	ldr	r0, [pc, #48]	@ (80031c0 <prvInitialiseTaskLists+0x6c>)
 800318e:	f7fe feae 	bl	8001eee <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003192:	480c      	ldr	r0, [pc, #48]	@ (80031c4 <prvInitialiseTaskLists+0x70>)
 8003194:	f7fe feab 	bl	8001eee <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003198:	480b      	ldr	r0, [pc, #44]	@ (80031c8 <prvInitialiseTaskLists+0x74>)
 800319a:	f7fe fea8 	bl	8001eee <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800319e:	4b0b      	ldr	r3, [pc, #44]	@ (80031cc <prvInitialiseTaskLists+0x78>)
 80031a0:	4a05      	ldr	r2, [pc, #20]	@ (80031b8 <prvInitialiseTaskLists+0x64>)
 80031a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80031a4:	4b0a      	ldr	r3, [pc, #40]	@ (80031d0 <prvInitialiseTaskLists+0x7c>)
 80031a6:	4a05      	ldr	r2, [pc, #20]	@ (80031bc <prvInitialiseTaskLists+0x68>)
 80031a8:	601a      	str	r2, [r3, #0]
}
 80031aa:	bf00      	nop
 80031ac:	3708      	adds	r7, #8
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	200002e8 	.word	0x200002e8
 80031b8:	20000374 	.word	0x20000374
 80031bc:	20000388 	.word	0x20000388
 80031c0:	200003a4 	.word	0x200003a4
 80031c4:	200003b8 	.word	0x200003b8
 80031c8:	200003d0 	.word	0x200003d0
 80031cc:	2000039c 	.word	0x2000039c
 80031d0:	200003a0 	.word	0x200003a0

080031d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80031da:	e019      	b.n	8003210 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80031dc:	f000 fab4 	bl	8003748 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031e0:	4b10      	ldr	r3, [pc, #64]	@ (8003224 <prvCheckTasksWaitingTermination+0x50>)
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	3304      	adds	r3, #4
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7fe ff08 	bl	8002002 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80031f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003228 <prvCheckTasksWaitingTermination+0x54>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	3b01      	subs	r3, #1
 80031f8:	4a0b      	ldr	r2, [pc, #44]	@ (8003228 <prvCheckTasksWaitingTermination+0x54>)
 80031fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80031fc:	4b0b      	ldr	r3, [pc, #44]	@ (800322c <prvCheckTasksWaitingTermination+0x58>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	3b01      	subs	r3, #1
 8003202:	4a0a      	ldr	r2, [pc, #40]	@ (800322c <prvCheckTasksWaitingTermination+0x58>)
 8003204:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003206:	f000 fad1 	bl	80037ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f000 f810 	bl	8003230 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003210:	4b06      	ldr	r3, [pc, #24]	@ (800322c <prvCheckTasksWaitingTermination+0x58>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d1e1      	bne.n	80031dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003218:	bf00      	nop
 800321a:	bf00      	nop
 800321c:	3708      	adds	r7, #8
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	200003b8 	.word	0x200003b8
 8003228:	200003e4 	.word	0x200003e4
 800322c:	200003cc 	.word	0x200003cc

08003230 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800323e:	2b00      	cmp	r3, #0
 8003240:	d108      	bne.n	8003254 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003246:	4618      	mov	r0, r3
 8003248:	f000 fc2c 	bl	8003aa4 <vPortFree>
				vPortFree( pxTCB );
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f000 fc29 	bl	8003aa4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003252:	e019      	b.n	8003288 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800325a:	2b01      	cmp	r3, #1
 800325c:	d103      	bne.n	8003266 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f000 fc20 	bl	8003aa4 <vPortFree>
	}
 8003264:	e010      	b.n	8003288 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800326c:	2b02      	cmp	r3, #2
 800326e:	d00b      	beq.n	8003288 <prvDeleteTCB+0x58>
	__asm volatile
 8003270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003274:	f383 8811 	msr	BASEPRI, r3
 8003278:	f3bf 8f6f 	isb	sy
 800327c:	f3bf 8f4f 	dsb	sy
 8003280:	60fb      	str	r3, [r7, #12]
}
 8003282:	bf00      	nop
 8003284:	bf00      	nop
 8003286:	e7fd      	b.n	8003284 <prvDeleteTCB+0x54>
	}
 8003288:	bf00      	nop
 800328a:	3710      	adds	r7, #16
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003296:	4b0c      	ldr	r3, [pc, #48]	@ (80032c8 <prvResetNextTaskUnblockTime+0x38>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d104      	bne.n	80032aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80032a0:	4b0a      	ldr	r3, [pc, #40]	@ (80032cc <prvResetNextTaskUnblockTime+0x3c>)
 80032a2:	f04f 32ff 	mov.w	r2, #4294967295
 80032a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80032a8:	e008      	b.n	80032bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032aa:	4b07      	ldr	r3, [pc, #28]	@ (80032c8 <prvResetNextTaskUnblockTime+0x38>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	4a04      	ldr	r2, [pc, #16]	@ (80032cc <prvResetNextTaskUnblockTime+0x3c>)
 80032ba:	6013      	str	r3, [r2, #0]
}
 80032bc:	bf00      	nop
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr
 80032c8:	2000039c 	.word	0x2000039c
 80032cc:	20000404 	.word	0x20000404

080032d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80032d6:	4b0b      	ldr	r3, [pc, #44]	@ (8003304 <xTaskGetSchedulerState+0x34>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d102      	bne.n	80032e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80032de:	2301      	movs	r3, #1
 80032e0:	607b      	str	r3, [r7, #4]
 80032e2:	e008      	b.n	80032f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032e4:	4b08      	ldr	r3, [pc, #32]	@ (8003308 <xTaskGetSchedulerState+0x38>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d102      	bne.n	80032f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80032ec:	2302      	movs	r3, #2
 80032ee:	607b      	str	r3, [r7, #4]
 80032f0:	e001      	b.n	80032f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80032f2:	2300      	movs	r3, #0
 80032f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80032f6:	687b      	ldr	r3, [r7, #4]
	}
 80032f8:	4618      	mov	r0, r3
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr
 8003304:	200003f0 	.word	0x200003f0
 8003308:	2000040c 	.word	0x2000040c

0800330c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800330c:	b580      	push	{r7, lr}
 800330e:	b086      	sub	sp, #24
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003318:	2300      	movs	r3, #0
 800331a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d070      	beq.n	8003404 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003322:	4b3b      	ldr	r3, [pc, #236]	@ (8003410 <xTaskPriorityDisinherit+0x104>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	693a      	ldr	r2, [r7, #16]
 8003328:	429a      	cmp	r2, r3
 800332a:	d00b      	beq.n	8003344 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800332c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003330:	f383 8811 	msr	BASEPRI, r3
 8003334:	f3bf 8f6f 	isb	sy
 8003338:	f3bf 8f4f 	dsb	sy
 800333c:	60fb      	str	r3, [r7, #12]
}
 800333e:	bf00      	nop
 8003340:	bf00      	nop
 8003342:	e7fd      	b.n	8003340 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003348:	2b00      	cmp	r3, #0
 800334a:	d10b      	bne.n	8003364 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800334c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003350:	f383 8811 	msr	BASEPRI, r3
 8003354:	f3bf 8f6f 	isb	sy
 8003358:	f3bf 8f4f 	dsb	sy
 800335c:	60bb      	str	r3, [r7, #8]
}
 800335e:	bf00      	nop
 8003360:	bf00      	nop
 8003362:	e7fd      	b.n	8003360 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003368:	1e5a      	subs	r2, r3, #1
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003376:	429a      	cmp	r2, r3
 8003378:	d044      	beq.n	8003404 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800337e:	2b00      	cmp	r3, #0
 8003380:	d140      	bne.n	8003404 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	3304      	adds	r3, #4
 8003386:	4618      	mov	r0, r3
 8003388:	f7fe fe3b 	bl	8002002 <uxListRemove>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d115      	bne.n	80033be <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003396:	491f      	ldr	r1, [pc, #124]	@ (8003414 <xTaskPriorityDisinherit+0x108>)
 8003398:	4613      	mov	r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	4413      	add	r3, r2
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	440b      	add	r3, r1
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d10a      	bne.n	80033be <xTaskPriorityDisinherit+0xb2>
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ac:	2201      	movs	r2, #1
 80033ae:	fa02 f303 	lsl.w	r3, r2, r3
 80033b2:	43da      	mvns	r2, r3
 80033b4:	4b18      	ldr	r3, [pc, #96]	@ (8003418 <xTaskPriorityDisinherit+0x10c>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4013      	ands	r3, r2
 80033ba:	4a17      	ldr	r2, [pc, #92]	@ (8003418 <xTaskPriorityDisinherit+0x10c>)
 80033bc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ca:	f1c3 0207 	rsb	r2, r3, #7
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033d6:	2201      	movs	r2, #1
 80033d8:	409a      	lsls	r2, r3
 80033da:	4b0f      	ldr	r3, [pc, #60]	@ (8003418 <xTaskPriorityDisinherit+0x10c>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4313      	orrs	r3, r2
 80033e0:	4a0d      	ldr	r2, [pc, #52]	@ (8003418 <xTaskPriorityDisinherit+0x10c>)
 80033e2:	6013      	str	r3, [r2, #0]
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033e8:	4613      	mov	r3, r2
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	4413      	add	r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	4a08      	ldr	r2, [pc, #32]	@ (8003414 <xTaskPriorityDisinherit+0x108>)
 80033f2:	441a      	add	r2, r3
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	3304      	adds	r3, #4
 80033f8:	4619      	mov	r1, r3
 80033fa:	4610      	mov	r0, r2
 80033fc:	f7fe fda4 	bl	8001f48 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003400:	2301      	movs	r3, #1
 8003402:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003404:	697b      	ldr	r3, [r7, #20]
	}
 8003406:	4618      	mov	r0, r3
 8003408:	3718      	adds	r7, #24
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	200002e4 	.word	0x200002e4
 8003414:	200002e8 	.word	0x200002e8
 8003418:	200003ec 	.word	0x200003ec

0800341c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003426:	4b29      	ldr	r3, [pc, #164]	@ (80034cc <prvAddCurrentTaskToDelayedList+0xb0>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800342c:	4b28      	ldr	r3, [pc, #160]	@ (80034d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	3304      	adds	r3, #4
 8003432:	4618      	mov	r0, r3
 8003434:	f7fe fde5 	bl	8002002 <uxListRemove>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d10b      	bne.n	8003456 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800343e:	4b24      	ldr	r3, [pc, #144]	@ (80034d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003444:	2201      	movs	r2, #1
 8003446:	fa02 f303 	lsl.w	r3, r2, r3
 800344a:	43da      	mvns	r2, r3
 800344c:	4b21      	ldr	r3, [pc, #132]	@ (80034d4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4013      	ands	r3, r2
 8003452:	4a20      	ldr	r2, [pc, #128]	@ (80034d4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003454:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800345c:	d10a      	bne.n	8003474 <prvAddCurrentTaskToDelayedList+0x58>
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d007      	beq.n	8003474 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003464:	4b1a      	ldr	r3, [pc, #104]	@ (80034d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	3304      	adds	r3, #4
 800346a:	4619      	mov	r1, r3
 800346c:	481a      	ldr	r0, [pc, #104]	@ (80034d8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800346e:	f7fe fd6b 	bl	8001f48 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003472:	e026      	b.n	80034c2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003474:	68fa      	ldr	r2, [r7, #12]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4413      	add	r3, r2
 800347a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800347c:	4b14      	ldr	r3, [pc, #80]	@ (80034d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68ba      	ldr	r2, [r7, #8]
 8003482:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003484:	68ba      	ldr	r2, [r7, #8]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	429a      	cmp	r2, r3
 800348a:	d209      	bcs.n	80034a0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800348c:	4b13      	ldr	r3, [pc, #76]	@ (80034dc <prvAddCurrentTaskToDelayedList+0xc0>)
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	4b0f      	ldr	r3, [pc, #60]	@ (80034d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	3304      	adds	r3, #4
 8003496:	4619      	mov	r1, r3
 8003498:	4610      	mov	r0, r2
 800349a:	f7fe fd79 	bl	8001f90 <vListInsert>
}
 800349e:	e010      	b.n	80034c2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80034a0:	4b0f      	ldr	r3, [pc, #60]	@ (80034e0 <prvAddCurrentTaskToDelayedList+0xc4>)
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	4b0a      	ldr	r3, [pc, #40]	@ (80034d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	3304      	adds	r3, #4
 80034aa:	4619      	mov	r1, r3
 80034ac:	4610      	mov	r0, r2
 80034ae:	f7fe fd6f 	bl	8001f90 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80034b2:	4b0c      	ldr	r3, [pc, #48]	@ (80034e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68ba      	ldr	r2, [r7, #8]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d202      	bcs.n	80034c2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80034bc:	4a09      	ldr	r2, [pc, #36]	@ (80034e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	6013      	str	r3, [r2, #0]
}
 80034c2:	bf00      	nop
 80034c4:	3710      	adds	r7, #16
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	200003e8 	.word	0x200003e8
 80034d0:	200002e4 	.word	0x200002e4
 80034d4:	200003ec 	.word	0x200003ec
 80034d8:	200003d0 	.word	0x200003d0
 80034dc:	200003a0 	.word	0x200003a0
 80034e0:	2000039c 	.word	0x2000039c
 80034e4:	20000404 	.word	0x20000404

080034e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80034e8:	b480      	push	{r7}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	3b04      	subs	r3, #4
 80034f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003500:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	3b04      	subs	r3, #4
 8003506:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	f023 0201 	bic.w	r2, r3, #1
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	3b04      	subs	r3, #4
 8003516:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003518:	4a0c      	ldr	r2, [pc, #48]	@ (800354c <pxPortInitialiseStack+0x64>)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	3b14      	subs	r3, #20
 8003522:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	3b04      	subs	r3, #4
 800352e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f06f 0202 	mvn.w	r2, #2
 8003536:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	3b20      	subs	r3, #32
 800353c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800353e:	68fb      	ldr	r3, [r7, #12]
}
 8003540:	4618      	mov	r0, r3
 8003542:	3714      	adds	r7, #20
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr
 800354c:	08003551 	.word	0x08003551

08003550 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003550:	b480      	push	{r7}
 8003552:	b085      	sub	sp, #20
 8003554:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003556:	2300      	movs	r3, #0
 8003558:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800355a:	4b13      	ldr	r3, [pc, #76]	@ (80035a8 <prvTaskExitError+0x58>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003562:	d00b      	beq.n	800357c <prvTaskExitError+0x2c>
	__asm volatile
 8003564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003568:	f383 8811 	msr	BASEPRI, r3
 800356c:	f3bf 8f6f 	isb	sy
 8003570:	f3bf 8f4f 	dsb	sy
 8003574:	60fb      	str	r3, [r7, #12]
}
 8003576:	bf00      	nop
 8003578:	bf00      	nop
 800357a:	e7fd      	b.n	8003578 <prvTaskExitError+0x28>
	__asm volatile
 800357c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003580:	f383 8811 	msr	BASEPRI, r3
 8003584:	f3bf 8f6f 	isb	sy
 8003588:	f3bf 8f4f 	dsb	sy
 800358c:	60bb      	str	r3, [r7, #8]
}
 800358e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003590:	bf00      	nop
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d0fc      	beq.n	8003592 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003598:	bf00      	nop
 800359a:	bf00      	nop
 800359c:	3714      	adds	r7, #20
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	2000000c 	.word	0x2000000c
 80035ac:	00000000 	.word	0x00000000

080035b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80035b0:	4b07      	ldr	r3, [pc, #28]	@ (80035d0 <pxCurrentTCBConst2>)
 80035b2:	6819      	ldr	r1, [r3, #0]
 80035b4:	6808      	ldr	r0, [r1, #0]
 80035b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035ba:	f380 8809 	msr	PSP, r0
 80035be:	f3bf 8f6f 	isb	sy
 80035c2:	f04f 0000 	mov.w	r0, #0
 80035c6:	f380 8811 	msr	BASEPRI, r0
 80035ca:	4770      	bx	lr
 80035cc:	f3af 8000 	nop.w

080035d0 <pxCurrentTCBConst2>:
 80035d0:	200002e4 	.word	0x200002e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80035d4:	bf00      	nop
 80035d6:	bf00      	nop

080035d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80035d8:	4808      	ldr	r0, [pc, #32]	@ (80035fc <prvPortStartFirstTask+0x24>)
 80035da:	6800      	ldr	r0, [r0, #0]
 80035dc:	6800      	ldr	r0, [r0, #0]
 80035de:	f380 8808 	msr	MSP, r0
 80035e2:	f04f 0000 	mov.w	r0, #0
 80035e6:	f380 8814 	msr	CONTROL, r0
 80035ea:	b662      	cpsie	i
 80035ec:	b661      	cpsie	f
 80035ee:	f3bf 8f4f 	dsb	sy
 80035f2:	f3bf 8f6f 	isb	sy
 80035f6:	df00      	svc	0
 80035f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80035fa:	bf00      	nop
 80035fc:	e000ed08 	.word	0xe000ed08

08003600 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b086      	sub	sp, #24
 8003604:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003606:	4b47      	ldr	r3, [pc, #284]	@ (8003724 <xPortStartScheduler+0x124>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a47      	ldr	r2, [pc, #284]	@ (8003728 <xPortStartScheduler+0x128>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d10b      	bne.n	8003628 <xPortStartScheduler+0x28>
	__asm volatile
 8003610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003614:	f383 8811 	msr	BASEPRI, r3
 8003618:	f3bf 8f6f 	isb	sy
 800361c:	f3bf 8f4f 	dsb	sy
 8003620:	613b      	str	r3, [r7, #16]
}
 8003622:	bf00      	nop
 8003624:	bf00      	nop
 8003626:	e7fd      	b.n	8003624 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003628:	4b3e      	ldr	r3, [pc, #248]	@ (8003724 <xPortStartScheduler+0x124>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a3f      	ldr	r2, [pc, #252]	@ (800372c <xPortStartScheduler+0x12c>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d10b      	bne.n	800364a <xPortStartScheduler+0x4a>
	__asm volatile
 8003632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003636:	f383 8811 	msr	BASEPRI, r3
 800363a:	f3bf 8f6f 	isb	sy
 800363e:	f3bf 8f4f 	dsb	sy
 8003642:	60fb      	str	r3, [r7, #12]
}
 8003644:	bf00      	nop
 8003646:	bf00      	nop
 8003648:	e7fd      	b.n	8003646 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800364a:	4b39      	ldr	r3, [pc, #228]	@ (8003730 <xPortStartScheduler+0x130>)
 800364c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	b2db      	uxtb	r3, r3
 8003654:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	22ff      	movs	r2, #255	@ 0xff
 800365a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	b2db      	uxtb	r3, r3
 8003662:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003664:	78fb      	ldrb	r3, [r7, #3]
 8003666:	b2db      	uxtb	r3, r3
 8003668:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800366c:	b2da      	uxtb	r2, r3
 800366e:	4b31      	ldr	r3, [pc, #196]	@ (8003734 <xPortStartScheduler+0x134>)
 8003670:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003672:	4b31      	ldr	r3, [pc, #196]	@ (8003738 <xPortStartScheduler+0x138>)
 8003674:	2207      	movs	r2, #7
 8003676:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003678:	e009      	b.n	800368e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800367a:	4b2f      	ldr	r3, [pc, #188]	@ (8003738 <xPortStartScheduler+0x138>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	3b01      	subs	r3, #1
 8003680:	4a2d      	ldr	r2, [pc, #180]	@ (8003738 <xPortStartScheduler+0x138>)
 8003682:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003684:	78fb      	ldrb	r3, [r7, #3]
 8003686:	b2db      	uxtb	r3, r3
 8003688:	005b      	lsls	r3, r3, #1
 800368a:	b2db      	uxtb	r3, r3
 800368c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800368e:	78fb      	ldrb	r3, [r7, #3]
 8003690:	b2db      	uxtb	r3, r3
 8003692:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003696:	2b80      	cmp	r3, #128	@ 0x80
 8003698:	d0ef      	beq.n	800367a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800369a:	4b27      	ldr	r3, [pc, #156]	@ (8003738 <xPortStartScheduler+0x138>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f1c3 0307 	rsb	r3, r3, #7
 80036a2:	2b04      	cmp	r3, #4
 80036a4:	d00b      	beq.n	80036be <xPortStartScheduler+0xbe>
	__asm volatile
 80036a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036aa:	f383 8811 	msr	BASEPRI, r3
 80036ae:	f3bf 8f6f 	isb	sy
 80036b2:	f3bf 8f4f 	dsb	sy
 80036b6:	60bb      	str	r3, [r7, #8]
}
 80036b8:	bf00      	nop
 80036ba:	bf00      	nop
 80036bc:	e7fd      	b.n	80036ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80036be:	4b1e      	ldr	r3, [pc, #120]	@ (8003738 <xPortStartScheduler+0x138>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	021b      	lsls	r3, r3, #8
 80036c4:	4a1c      	ldr	r2, [pc, #112]	@ (8003738 <xPortStartScheduler+0x138>)
 80036c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80036c8:	4b1b      	ldr	r3, [pc, #108]	@ (8003738 <xPortStartScheduler+0x138>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80036d0:	4a19      	ldr	r2, [pc, #100]	@ (8003738 <xPortStartScheduler+0x138>)
 80036d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	b2da      	uxtb	r2, r3
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80036dc:	4b17      	ldr	r3, [pc, #92]	@ (800373c <xPortStartScheduler+0x13c>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a16      	ldr	r2, [pc, #88]	@ (800373c <xPortStartScheduler+0x13c>)
 80036e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80036e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80036e8:	4b14      	ldr	r3, [pc, #80]	@ (800373c <xPortStartScheduler+0x13c>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a13      	ldr	r2, [pc, #76]	@ (800373c <xPortStartScheduler+0x13c>)
 80036ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80036f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80036f4:	f000 f8da 	bl	80038ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80036f8:	4b11      	ldr	r3, [pc, #68]	@ (8003740 <xPortStartScheduler+0x140>)
 80036fa:	2200      	movs	r2, #0
 80036fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80036fe:	f000 f8f9 	bl	80038f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003702:	4b10      	ldr	r3, [pc, #64]	@ (8003744 <xPortStartScheduler+0x144>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a0f      	ldr	r2, [pc, #60]	@ (8003744 <xPortStartScheduler+0x144>)
 8003708:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800370c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800370e:	f7ff ff63 	bl	80035d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003712:	f7ff fb9b 	bl	8002e4c <vTaskSwitchContext>
	prvTaskExitError();
 8003716:	f7ff ff1b 	bl	8003550 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800371a:	2300      	movs	r3, #0
}
 800371c:	4618      	mov	r0, r3
 800371e:	3718      	adds	r7, #24
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	e000ed00 	.word	0xe000ed00
 8003728:	410fc271 	.word	0x410fc271
 800372c:	410fc270 	.word	0x410fc270
 8003730:	e000e400 	.word	0xe000e400
 8003734:	20000410 	.word	0x20000410
 8003738:	20000414 	.word	0x20000414
 800373c:	e000ed20 	.word	0xe000ed20
 8003740:	2000000c 	.word	0x2000000c
 8003744:	e000ef34 	.word	0xe000ef34

08003748 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
	__asm volatile
 800374e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003752:	f383 8811 	msr	BASEPRI, r3
 8003756:	f3bf 8f6f 	isb	sy
 800375a:	f3bf 8f4f 	dsb	sy
 800375e:	607b      	str	r3, [r7, #4]
}
 8003760:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003762:	4b10      	ldr	r3, [pc, #64]	@ (80037a4 <vPortEnterCritical+0x5c>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	3301      	adds	r3, #1
 8003768:	4a0e      	ldr	r2, [pc, #56]	@ (80037a4 <vPortEnterCritical+0x5c>)
 800376a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800376c:	4b0d      	ldr	r3, [pc, #52]	@ (80037a4 <vPortEnterCritical+0x5c>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2b01      	cmp	r3, #1
 8003772:	d110      	bne.n	8003796 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003774:	4b0c      	ldr	r3, [pc, #48]	@ (80037a8 <vPortEnterCritical+0x60>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	b2db      	uxtb	r3, r3
 800377a:	2b00      	cmp	r3, #0
 800377c:	d00b      	beq.n	8003796 <vPortEnterCritical+0x4e>
	__asm volatile
 800377e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003782:	f383 8811 	msr	BASEPRI, r3
 8003786:	f3bf 8f6f 	isb	sy
 800378a:	f3bf 8f4f 	dsb	sy
 800378e:	603b      	str	r3, [r7, #0]
}
 8003790:	bf00      	nop
 8003792:	bf00      	nop
 8003794:	e7fd      	b.n	8003792 <vPortEnterCritical+0x4a>
	}
}
 8003796:	bf00      	nop
 8003798:	370c      	adds	r7, #12
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	2000000c 	.word	0x2000000c
 80037a8:	e000ed04 	.word	0xe000ed04

080037ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80037b2:	4b12      	ldr	r3, [pc, #72]	@ (80037fc <vPortExitCritical+0x50>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d10b      	bne.n	80037d2 <vPortExitCritical+0x26>
	__asm volatile
 80037ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037be:	f383 8811 	msr	BASEPRI, r3
 80037c2:	f3bf 8f6f 	isb	sy
 80037c6:	f3bf 8f4f 	dsb	sy
 80037ca:	607b      	str	r3, [r7, #4]
}
 80037cc:	bf00      	nop
 80037ce:	bf00      	nop
 80037d0:	e7fd      	b.n	80037ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80037d2:	4b0a      	ldr	r3, [pc, #40]	@ (80037fc <vPortExitCritical+0x50>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	3b01      	subs	r3, #1
 80037d8:	4a08      	ldr	r2, [pc, #32]	@ (80037fc <vPortExitCritical+0x50>)
 80037da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80037dc:	4b07      	ldr	r3, [pc, #28]	@ (80037fc <vPortExitCritical+0x50>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d105      	bne.n	80037f0 <vPortExitCritical+0x44>
 80037e4:	2300      	movs	r3, #0
 80037e6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80037ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80037f0:	bf00      	nop
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr
 80037fc:	2000000c 	.word	0x2000000c

08003800 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003800:	f3ef 8009 	mrs	r0, PSP
 8003804:	f3bf 8f6f 	isb	sy
 8003808:	4b15      	ldr	r3, [pc, #84]	@ (8003860 <pxCurrentTCBConst>)
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	f01e 0f10 	tst.w	lr, #16
 8003810:	bf08      	it	eq
 8003812:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003816:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800381a:	6010      	str	r0, [r2, #0]
 800381c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003820:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003824:	f380 8811 	msr	BASEPRI, r0
 8003828:	f3bf 8f4f 	dsb	sy
 800382c:	f3bf 8f6f 	isb	sy
 8003830:	f7ff fb0c 	bl	8002e4c <vTaskSwitchContext>
 8003834:	f04f 0000 	mov.w	r0, #0
 8003838:	f380 8811 	msr	BASEPRI, r0
 800383c:	bc09      	pop	{r0, r3}
 800383e:	6819      	ldr	r1, [r3, #0]
 8003840:	6808      	ldr	r0, [r1, #0]
 8003842:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003846:	f01e 0f10 	tst.w	lr, #16
 800384a:	bf08      	it	eq
 800384c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003850:	f380 8809 	msr	PSP, r0
 8003854:	f3bf 8f6f 	isb	sy
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	f3af 8000 	nop.w

08003860 <pxCurrentTCBConst>:
 8003860:	200002e4 	.word	0x200002e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003864:	bf00      	nop
 8003866:	bf00      	nop

08003868 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
	__asm volatile
 800386e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003872:	f383 8811 	msr	BASEPRI, r3
 8003876:	f3bf 8f6f 	isb	sy
 800387a:	f3bf 8f4f 	dsb	sy
 800387e:	607b      	str	r3, [r7, #4]
}
 8003880:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003882:	f7ff fa29 	bl	8002cd8 <xTaskIncrementTick>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d003      	beq.n	8003894 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800388c:	4b06      	ldr	r3, [pc, #24]	@ (80038a8 <xPortSysTickHandler+0x40>)
 800388e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003892:	601a      	str	r2, [r3, #0]
 8003894:	2300      	movs	r3, #0
 8003896:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	f383 8811 	msr	BASEPRI, r3
}
 800389e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80038a0:	bf00      	nop
 80038a2:	3708      	adds	r7, #8
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	e000ed04 	.word	0xe000ed04

080038ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80038ac:	b480      	push	{r7}
 80038ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80038b0:	4b0b      	ldr	r3, [pc, #44]	@ (80038e0 <vPortSetupTimerInterrupt+0x34>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80038b6:	4b0b      	ldr	r3, [pc, #44]	@ (80038e4 <vPortSetupTimerInterrupt+0x38>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80038bc:	4b0a      	ldr	r3, [pc, #40]	@ (80038e8 <vPortSetupTimerInterrupt+0x3c>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a0a      	ldr	r2, [pc, #40]	@ (80038ec <vPortSetupTimerInterrupt+0x40>)
 80038c2:	fba2 2303 	umull	r2, r3, r2, r3
 80038c6:	099b      	lsrs	r3, r3, #6
 80038c8:	4a09      	ldr	r2, [pc, #36]	@ (80038f0 <vPortSetupTimerInterrupt+0x44>)
 80038ca:	3b01      	subs	r3, #1
 80038cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80038ce:	4b04      	ldr	r3, [pc, #16]	@ (80038e0 <vPortSetupTimerInterrupt+0x34>)
 80038d0:	2207      	movs	r2, #7
 80038d2:	601a      	str	r2, [r3, #0]
}
 80038d4:	bf00      	nop
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	e000e010 	.word	0xe000e010
 80038e4:	e000e018 	.word	0xe000e018
 80038e8:	20000000 	.word	0x20000000
 80038ec:	10624dd3 	.word	0x10624dd3
 80038f0:	e000e014 	.word	0xe000e014

080038f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80038f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003904 <vPortEnableVFP+0x10>
 80038f8:	6801      	ldr	r1, [r0, #0]
 80038fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80038fe:	6001      	str	r1, [r0, #0]
 8003900:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003902:	bf00      	nop
 8003904:	e000ed88 	.word	0xe000ed88

08003908 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b08a      	sub	sp, #40	@ 0x28
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003910:	2300      	movs	r3, #0
 8003912:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003914:	f7ff f934 	bl	8002b80 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003918:	4b5c      	ldr	r3, [pc, #368]	@ (8003a8c <pvPortMalloc+0x184>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d101      	bne.n	8003924 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003920:	f000 f924 	bl	8003b6c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003924:	4b5a      	ldr	r3, [pc, #360]	@ (8003a90 <pvPortMalloc+0x188>)
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4013      	ands	r3, r2
 800392c:	2b00      	cmp	r3, #0
 800392e:	f040 8095 	bne.w	8003a5c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d01e      	beq.n	8003976 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8003938:	2208      	movs	r2, #8
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4413      	add	r3, r2
 800393e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f003 0307 	and.w	r3, r3, #7
 8003946:	2b00      	cmp	r3, #0
 8003948:	d015      	beq.n	8003976 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f023 0307 	bic.w	r3, r3, #7
 8003950:	3308      	adds	r3, #8
 8003952:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f003 0307 	and.w	r3, r3, #7
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00b      	beq.n	8003976 <pvPortMalloc+0x6e>
	__asm volatile
 800395e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003962:	f383 8811 	msr	BASEPRI, r3
 8003966:	f3bf 8f6f 	isb	sy
 800396a:	f3bf 8f4f 	dsb	sy
 800396e:	617b      	str	r3, [r7, #20]
}
 8003970:	bf00      	nop
 8003972:	bf00      	nop
 8003974:	e7fd      	b.n	8003972 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d06f      	beq.n	8003a5c <pvPortMalloc+0x154>
 800397c:	4b45      	ldr	r3, [pc, #276]	@ (8003a94 <pvPortMalloc+0x18c>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	429a      	cmp	r2, r3
 8003984:	d86a      	bhi.n	8003a5c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003986:	4b44      	ldr	r3, [pc, #272]	@ (8003a98 <pvPortMalloc+0x190>)
 8003988:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800398a:	4b43      	ldr	r3, [pc, #268]	@ (8003a98 <pvPortMalloc+0x190>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003990:	e004      	b.n	800399c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8003992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003994:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800399c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d903      	bls.n	80039ae <pvPortMalloc+0xa6>
 80039a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d1f1      	bne.n	8003992 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80039ae:	4b37      	ldr	r3, [pc, #220]	@ (8003a8c <pvPortMalloc+0x184>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d051      	beq.n	8003a5c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80039b8:	6a3b      	ldr	r3, [r7, #32]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2208      	movs	r2, #8
 80039be:	4413      	add	r3, r2
 80039c0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80039c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	6a3b      	ldr	r3, [r7, #32]
 80039c8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80039ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039cc:	685a      	ldr	r2, [r3, #4]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	1ad2      	subs	r2, r2, r3
 80039d2:	2308      	movs	r3, #8
 80039d4:	005b      	lsls	r3, r3, #1
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d920      	bls.n	8003a1c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80039da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4413      	add	r3, r2
 80039e0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	f003 0307 	and.w	r3, r3, #7
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d00b      	beq.n	8003a04 <pvPortMalloc+0xfc>
	__asm volatile
 80039ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039f0:	f383 8811 	msr	BASEPRI, r3
 80039f4:	f3bf 8f6f 	isb	sy
 80039f8:	f3bf 8f4f 	dsb	sy
 80039fc:	613b      	str	r3, [r7, #16]
}
 80039fe:	bf00      	nop
 8003a00:	bf00      	nop
 8003a02:	e7fd      	b.n	8003a00 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a06:	685a      	ldr	r2, [r3, #4]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	1ad2      	subs	r2, r2, r3
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003a16:	69b8      	ldr	r0, [r7, #24]
 8003a18:	f000 f90a 	bl	8003c30 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003a1c:	4b1d      	ldr	r3, [pc, #116]	@ (8003a94 <pvPortMalloc+0x18c>)
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	4a1b      	ldr	r2, [pc, #108]	@ (8003a94 <pvPortMalloc+0x18c>)
 8003a28:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003a2a:	4b1a      	ldr	r3, [pc, #104]	@ (8003a94 <pvPortMalloc+0x18c>)
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	4b1b      	ldr	r3, [pc, #108]	@ (8003a9c <pvPortMalloc+0x194>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d203      	bcs.n	8003a3e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003a36:	4b17      	ldr	r3, [pc, #92]	@ (8003a94 <pvPortMalloc+0x18c>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a18      	ldr	r2, [pc, #96]	@ (8003a9c <pvPortMalloc+0x194>)
 8003a3c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a40:	685a      	ldr	r2, [r3, #4]
 8003a42:	4b13      	ldr	r3, [pc, #76]	@ (8003a90 <pvPortMalloc+0x188>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	431a      	orrs	r2, r3
 8003a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a4a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a4e:	2200      	movs	r2, #0
 8003a50:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003a52:	4b13      	ldr	r3, [pc, #76]	@ (8003aa0 <pvPortMalloc+0x198>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	3301      	adds	r3, #1
 8003a58:	4a11      	ldr	r2, [pc, #68]	@ (8003aa0 <pvPortMalloc+0x198>)
 8003a5a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003a5c:	f7ff f89e 	bl	8002b9c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	f003 0307 	and.w	r3, r3, #7
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d00b      	beq.n	8003a82 <pvPortMalloc+0x17a>
	__asm volatile
 8003a6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a6e:	f383 8811 	msr	BASEPRI, r3
 8003a72:	f3bf 8f6f 	isb	sy
 8003a76:	f3bf 8f4f 	dsb	sy
 8003a7a:	60fb      	str	r3, [r7, #12]
}
 8003a7c:	bf00      	nop
 8003a7e:	bf00      	nop
 8003a80:	e7fd      	b.n	8003a7e <pvPortMalloc+0x176>
	return pvReturn;
 8003a82:	69fb      	ldr	r3, [r7, #28]
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3728      	adds	r7, #40	@ 0x28
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	20004020 	.word	0x20004020
 8003a90:	20004034 	.word	0x20004034
 8003a94:	20004024 	.word	0x20004024
 8003a98:	20004018 	.word	0x20004018
 8003a9c:	20004028 	.word	0x20004028
 8003aa0:	2000402c 	.word	0x2000402c

08003aa4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b086      	sub	sp, #24
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d04f      	beq.n	8003b56 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003ab6:	2308      	movs	r3, #8
 8003ab8:	425b      	negs	r3, r3
 8003aba:	697a      	ldr	r2, [r7, #20]
 8003abc:	4413      	add	r3, r2
 8003abe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	685a      	ldr	r2, [r3, #4]
 8003ac8:	4b25      	ldr	r3, [pc, #148]	@ (8003b60 <vPortFree+0xbc>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4013      	ands	r3, r2
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d10b      	bne.n	8003aea <vPortFree+0x46>
	__asm volatile
 8003ad2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ad6:	f383 8811 	msr	BASEPRI, r3
 8003ada:	f3bf 8f6f 	isb	sy
 8003ade:	f3bf 8f4f 	dsb	sy
 8003ae2:	60fb      	str	r3, [r7, #12]
}
 8003ae4:	bf00      	nop
 8003ae6:	bf00      	nop
 8003ae8:	e7fd      	b.n	8003ae6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00b      	beq.n	8003b0a <vPortFree+0x66>
	__asm volatile
 8003af2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003af6:	f383 8811 	msr	BASEPRI, r3
 8003afa:	f3bf 8f6f 	isb	sy
 8003afe:	f3bf 8f4f 	dsb	sy
 8003b02:	60bb      	str	r3, [r7, #8]
}
 8003b04:	bf00      	nop
 8003b06:	bf00      	nop
 8003b08:	e7fd      	b.n	8003b06 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	685a      	ldr	r2, [r3, #4]
 8003b0e:	4b14      	ldr	r3, [pc, #80]	@ (8003b60 <vPortFree+0xbc>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4013      	ands	r3, r2
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d01e      	beq.n	8003b56 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d11a      	bne.n	8003b56 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	685a      	ldr	r2, [r3, #4]
 8003b24:	4b0e      	ldr	r3, [pc, #56]	@ (8003b60 <vPortFree+0xbc>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	43db      	mvns	r3, r3
 8003b2a:	401a      	ands	r2, r3
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003b30:	f7ff f826 	bl	8002b80 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	685a      	ldr	r2, [r3, #4]
 8003b38:	4b0a      	ldr	r3, [pc, #40]	@ (8003b64 <vPortFree+0xc0>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4413      	add	r3, r2
 8003b3e:	4a09      	ldr	r2, [pc, #36]	@ (8003b64 <vPortFree+0xc0>)
 8003b40:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003b42:	6938      	ldr	r0, [r7, #16]
 8003b44:	f000 f874 	bl	8003c30 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003b48:	4b07      	ldr	r3, [pc, #28]	@ (8003b68 <vPortFree+0xc4>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	3301      	adds	r3, #1
 8003b4e:	4a06      	ldr	r2, [pc, #24]	@ (8003b68 <vPortFree+0xc4>)
 8003b50:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003b52:	f7ff f823 	bl	8002b9c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003b56:	bf00      	nop
 8003b58:	3718      	adds	r7, #24
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	20004034 	.word	0x20004034
 8003b64:	20004024 	.word	0x20004024
 8003b68:	20004030 	.word	0x20004030

08003b6c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b085      	sub	sp, #20
 8003b70:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003b72:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8003b76:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003b78:	4b27      	ldr	r3, [pc, #156]	@ (8003c18 <prvHeapInit+0xac>)
 8003b7a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f003 0307 	and.w	r3, r3, #7
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d00c      	beq.n	8003ba0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	3307      	adds	r3, #7
 8003b8a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f023 0307 	bic.w	r3, r3, #7
 8003b92:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003b94:	68ba      	ldr	r2, [r7, #8]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	4a1f      	ldr	r2, [pc, #124]	@ (8003c18 <prvHeapInit+0xac>)
 8003b9c:	4413      	add	r3, r2
 8003b9e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003ba4:	4a1d      	ldr	r2, [pc, #116]	@ (8003c1c <prvHeapInit+0xb0>)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003baa:	4b1c      	ldr	r3, [pc, #112]	@ (8003c1c <prvHeapInit+0xb0>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	68ba      	ldr	r2, [r7, #8]
 8003bb4:	4413      	add	r3, r2
 8003bb6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003bb8:	2208      	movs	r2, #8
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	1a9b      	subs	r3, r3, r2
 8003bbe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f023 0307 	bic.w	r3, r3, #7
 8003bc6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	4a15      	ldr	r2, [pc, #84]	@ (8003c20 <prvHeapInit+0xb4>)
 8003bcc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003bce:	4b14      	ldr	r3, [pc, #80]	@ (8003c20 <prvHeapInit+0xb4>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003bd6:	4b12      	ldr	r3, [pc, #72]	@ (8003c20 <prvHeapInit+0xb4>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	68fa      	ldr	r2, [r7, #12]
 8003be6:	1ad2      	subs	r2, r2, r3
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003bec:	4b0c      	ldr	r3, [pc, #48]	@ (8003c20 <prvHeapInit+0xb4>)
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	4a0a      	ldr	r2, [pc, #40]	@ (8003c24 <prvHeapInit+0xb8>)
 8003bfa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	4a09      	ldr	r2, [pc, #36]	@ (8003c28 <prvHeapInit+0xbc>)
 8003c02:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003c04:	4b09      	ldr	r3, [pc, #36]	@ (8003c2c <prvHeapInit+0xc0>)
 8003c06:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003c0a:	601a      	str	r2, [r3, #0]
}
 8003c0c:	bf00      	nop
 8003c0e:	3714      	adds	r7, #20
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr
 8003c18:	20000418 	.word	0x20000418
 8003c1c:	20004018 	.word	0x20004018
 8003c20:	20004020 	.word	0x20004020
 8003c24:	20004028 	.word	0x20004028
 8003c28:	20004024 	.word	0x20004024
 8003c2c:	20004034 	.word	0x20004034

08003c30 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003c30:	b480      	push	{r7}
 8003c32:	b085      	sub	sp, #20
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003c38:	4b28      	ldr	r3, [pc, #160]	@ (8003cdc <prvInsertBlockIntoFreeList+0xac>)
 8003c3a:	60fb      	str	r3, [r7, #12]
 8003c3c:	e002      	b.n	8003c44 <prvInsertBlockIntoFreeList+0x14>
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	60fb      	str	r3, [r7, #12]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d8f7      	bhi.n	8003c3e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	68ba      	ldr	r2, [r7, #8]
 8003c58:	4413      	add	r3, r2
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d108      	bne.n	8003c72 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	685a      	ldr	r2, [r3, #4]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	441a      	add	r2, r3
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	68ba      	ldr	r2, [r7, #8]
 8003c7c:	441a      	add	r2, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d118      	bne.n	8003cb8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	4b15      	ldr	r3, [pc, #84]	@ (8003ce0 <prvInsertBlockIntoFreeList+0xb0>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d00d      	beq.n	8003cae <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685a      	ldr	r2, [r3, #4]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	441a      	add	r2, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	601a      	str	r2, [r3, #0]
 8003cac:	e008      	b.n	8003cc0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003cae:	4b0c      	ldr	r3, [pc, #48]	@ (8003ce0 <prvInsertBlockIntoFreeList+0xb0>)
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	601a      	str	r2, [r3, #0]
 8003cb6:	e003      	b.n	8003cc0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d002      	beq.n	8003cce <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003cce:	bf00      	nop
 8003cd0:	3714      	adds	r7, #20
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	20004018 	.word	0x20004018
 8003ce0:	20004020 	.word	0x20004020

08003ce4 <memset>:
 8003ce4:	4402      	add	r2, r0
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d100      	bne.n	8003cee <memset+0xa>
 8003cec:	4770      	bx	lr
 8003cee:	f803 1b01 	strb.w	r1, [r3], #1
 8003cf2:	e7f9      	b.n	8003ce8 <memset+0x4>

08003cf4 <__libc_init_array>:
 8003cf4:	b570      	push	{r4, r5, r6, lr}
 8003cf6:	4d0d      	ldr	r5, [pc, #52]	@ (8003d2c <__libc_init_array+0x38>)
 8003cf8:	4c0d      	ldr	r4, [pc, #52]	@ (8003d30 <__libc_init_array+0x3c>)
 8003cfa:	1b64      	subs	r4, r4, r5
 8003cfc:	10a4      	asrs	r4, r4, #2
 8003cfe:	2600      	movs	r6, #0
 8003d00:	42a6      	cmp	r6, r4
 8003d02:	d109      	bne.n	8003d18 <__libc_init_array+0x24>
 8003d04:	4d0b      	ldr	r5, [pc, #44]	@ (8003d34 <__libc_init_array+0x40>)
 8003d06:	4c0c      	ldr	r4, [pc, #48]	@ (8003d38 <__libc_init_array+0x44>)
 8003d08:	f000 f826 	bl	8003d58 <_init>
 8003d0c:	1b64      	subs	r4, r4, r5
 8003d0e:	10a4      	asrs	r4, r4, #2
 8003d10:	2600      	movs	r6, #0
 8003d12:	42a6      	cmp	r6, r4
 8003d14:	d105      	bne.n	8003d22 <__libc_init_array+0x2e>
 8003d16:	bd70      	pop	{r4, r5, r6, pc}
 8003d18:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d1c:	4798      	blx	r3
 8003d1e:	3601      	adds	r6, #1
 8003d20:	e7ee      	b.n	8003d00 <__libc_init_array+0xc>
 8003d22:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d26:	4798      	blx	r3
 8003d28:	3601      	adds	r6, #1
 8003d2a:	e7f2      	b.n	8003d12 <__libc_init_array+0x1e>
 8003d2c:	08003e40 	.word	0x08003e40
 8003d30:	08003e40 	.word	0x08003e40
 8003d34:	08003e40 	.word	0x08003e40
 8003d38:	08003e44 	.word	0x08003e44

08003d3c <memcpy>:
 8003d3c:	440a      	add	r2, r1
 8003d3e:	4291      	cmp	r1, r2
 8003d40:	f100 33ff 	add.w	r3, r0, #4294967295
 8003d44:	d100      	bne.n	8003d48 <memcpy+0xc>
 8003d46:	4770      	bx	lr
 8003d48:	b510      	push	{r4, lr}
 8003d4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003d52:	4291      	cmp	r1, r2
 8003d54:	d1f9      	bne.n	8003d4a <memcpy+0xe>
 8003d56:	bd10      	pop	{r4, pc}

08003d58 <_init>:
 8003d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d5a:	bf00      	nop
 8003d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d5e:	bc08      	pop	{r3}
 8003d60:	469e      	mov	lr, r3
 8003d62:	4770      	bx	lr

08003d64 <_fini>:
 8003d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d66:	bf00      	nop
 8003d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d6a:	bc08      	pop	{r3}
 8003d6c:	469e      	mov	lr, r3
 8003d6e:	4770      	bx	lr
