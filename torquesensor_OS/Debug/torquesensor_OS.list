
torquesensor_OS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad74  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c8  0800af48  0800af48  0000bf48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b410  0800b410  0000d1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b410  0800b410  0000c410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b418  0800b418  0000d1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b418  0800b418  0000c418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b41c  0800b41c  0000c41c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800b420  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000041f0  200001d8  0800b5f8  0000d1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200043c8  0800b5f8  0000d3c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010d38  00000000  00000000  0000d208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b2a  00000000  00000000  0001df40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e18  00000000  00000000  00020a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ac5  00000000  00000000  00021888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000280ab  00000000  00000000  0002234d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011c6a  00000000  00000000  0004a3f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5890  00000000  00000000  0005c062  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001518f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e44  00000000  00000000  00151938  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0015677c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800af2c 	.word	0x0800af2c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	0800af2c 	.word	0x0800af2c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a0 	b.w	8001020 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d14e      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d70:	4694      	mov	ip, r2
 8000d72:	458c      	cmp	ip, r1
 8000d74:	4686      	mov	lr, r0
 8000d76:	fab2 f282 	clz	r2, r2
 8000d7a:	d962      	bls.n	8000e42 <__udivmoddi4+0xde>
 8000d7c:	b14a      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d7e:	f1c2 0320 	rsb	r3, r2, #32
 8000d82:	4091      	lsls	r1, r2
 8000d84:	fa20 f303 	lsr.w	r3, r0, r3
 8000d88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8c:	4319      	orrs	r1, r3
 8000d8e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f f68c 	uxth.w	r6, ip
 8000d9a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb07 1114 	mls	r1, r7, r4, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb04 f106 	mul.w	r1, r4, r6
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dba:	f080 8112 	bcs.w	8000fe2 <__udivmoddi4+0x27e>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 810f 	bls.w	8000fe2 <__udivmoddi4+0x27e>
 8000dc4:	3c02      	subs	r4, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a59      	subs	r1, r3, r1
 8000dca:	fa1f f38e 	uxth.w	r3, lr
 8000dce:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb00 f606 	mul.w	r6, r0, r6
 8000dde:	429e      	cmp	r6, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x94>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dea:	f080 80fc 	bcs.w	8000fe6 <__udivmoddi4+0x282>
 8000dee:	429e      	cmp	r6, r3
 8000df0:	f240 80f9 	bls.w	8000fe6 <__udivmoddi4+0x282>
 8000df4:	4463      	add	r3, ip
 8000df6:	3802      	subs	r0, #2
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dfe:	2100      	movs	r1, #0
 8000e00:	b11d      	cbz	r5, 8000e0a <__udivmoddi4+0xa6>
 8000e02:	40d3      	lsrs	r3, r2
 8000e04:	2200      	movs	r2, #0
 8000e06:	e9c5 3200 	strd	r3, r2, [r5]
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d905      	bls.n	8000e1e <__udivmoddi4+0xba>
 8000e12:	b10d      	cbz	r5, 8000e18 <__udivmoddi4+0xb4>
 8000e14:	e9c5 0100 	strd	r0, r1, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e7f5      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e1e:	fab3 f183 	clz	r1, r3
 8000e22:	2900      	cmp	r1, #0
 8000e24:	d146      	bne.n	8000eb4 <__udivmoddi4+0x150>
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	d302      	bcc.n	8000e30 <__udivmoddi4+0xcc>
 8000e2a:	4290      	cmp	r0, r2
 8000e2c:	f0c0 80f0 	bcc.w	8001010 <__udivmoddi4+0x2ac>
 8000e30:	1a86      	subs	r6, r0, r2
 8000e32:	eb64 0303 	sbc.w	r3, r4, r3
 8000e36:	2001      	movs	r0, #1
 8000e38:	2d00      	cmp	r5, #0
 8000e3a:	d0e6      	beq.n	8000e0a <__udivmoddi4+0xa6>
 8000e3c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e40:	e7e3      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x204>
 8000e48:	eba1 040c 	sub.w	r4, r1, ip
 8000e4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e50:	fa1f f78c 	uxth.w	r7, ip
 8000e54:	2101      	movs	r1, #1
 8000e56:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb07 f006 	mul.w	r0, r7, r6
 8000e6a:	4298      	cmp	r0, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x11c>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x11a>
 8000e78:	4298      	cmp	r0, r3
 8000e7a:	f200 80cd 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e7e:	4626      	mov	r6, r4
 8000e80:	1a1c      	subs	r4, r3, r0
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e8a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e92:	fb00 f707 	mul.w	r7, r0, r7
 8000e96:	429f      	cmp	r7, r3
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x148>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea2:	d202      	bcs.n	8000eaa <__udivmoddi4+0x146>
 8000ea4:	429f      	cmp	r7, r3
 8000ea6:	f200 80b0 	bhi.w	800100a <__udivmoddi4+0x2a6>
 8000eaa:	4620      	mov	r0, r4
 8000eac:	1bdb      	subs	r3, r3, r7
 8000eae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eb2:	e7a5      	b.n	8000e00 <__udivmoddi4+0x9c>
 8000eb4:	f1c1 0620 	rsb	r6, r1, #32
 8000eb8:	408b      	lsls	r3, r1
 8000eba:	fa22 f706 	lsr.w	r7, r2, r6
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ec4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ec8:	ea43 030c 	orr.w	r3, r3, ip
 8000ecc:	40f4      	lsrs	r4, r6
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	0c38      	lsrs	r0, r7, #16
 8000ed4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed8:	fbb4 fef0 	udiv	lr, r4, r0
 8000edc:	fa1f fc87 	uxth.w	ip, r7
 8000ee0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ee4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eec:	45a1      	cmp	r9, r4
 8000eee:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef2:	d90a      	bls.n	8000f0a <__udivmoddi4+0x1a6>
 8000ef4:	193c      	adds	r4, r7, r4
 8000ef6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000efa:	f080 8084 	bcs.w	8001006 <__udivmoddi4+0x2a2>
 8000efe:	45a1      	cmp	r9, r4
 8000f00:	f240 8081 	bls.w	8001006 <__udivmoddi4+0x2a2>
 8000f04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	eba4 0409 	sub.w	r4, r4, r9
 8000f0e:	fa1f f983 	uxth.w	r9, r3
 8000f12:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f16:	fb00 4413 	mls	r4, r0, r3, r4
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x1d2>
 8000f26:	193c      	adds	r4, r7, r4
 8000f28:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f2c:	d267      	bcs.n	8000ffe <__udivmoddi4+0x29a>
 8000f2e:	45a4      	cmp	ip, r4
 8000f30:	d965      	bls.n	8000ffe <__udivmoddi4+0x29a>
 8000f32:	3b02      	subs	r3, #2
 8000f34:	443c      	add	r4, r7
 8000f36:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f3a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f3e:	eba4 040c 	sub.w	r4, r4, ip
 8000f42:	429c      	cmp	r4, r3
 8000f44:	46ce      	mov	lr, r9
 8000f46:	469c      	mov	ip, r3
 8000f48:	d351      	bcc.n	8000fee <__udivmoddi4+0x28a>
 8000f4a:	d04e      	beq.n	8000fea <__udivmoddi4+0x286>
 8000f4c:	b155      	cbz	r5, 8000f64 <__udivmoddi4+0x200>
 8000f4e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f52:	eb64 040c 	sbc.w	r4, r4, ip
 8000f56:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5a:	40cb      	lsrs	r3, r1
 8000f5c:	431e      	orrs	r6, r3
 8000f5e:	40cc      	lsrs	r4, r1
 8000f60:	e9c5 6400 	strd	r6, r4, [r5]
 8000f64:	2100      	movs	r1, #0
 8000f66:	e750      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f74:	fa24 f303 	lsr.w	r3, r4, r3
 8000f78:	4094      	lsls	r4, r2
 8000f7a:	430c      	orrs	r4, r1
 8000f7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f80:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f84:	fa1f f78c 	uxth.w	r7, ip
 8000f88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f8c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f90:	0c23      	lsrs	r3, r4, #16
 8000f92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f96:	fb00 f107 	mul.w	r1, r0, r7
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x24c>
 8000f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fa6:	d22c      	bcs.n	8001002 <__udivmoddi4+0x29e>
 8000fa8:	4299      	cmp	r1, r3
 8000faa:	d92a      	bls.n	8001002 <__udivmoddi4+0x29e>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	1a5b      	subs	r3, r3, r1
 8000fb2:	b2a4      	uxth	r4, r4
 8000fb4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fb8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fc0:	fb01 f307 	mul.w	r3, r1, r7
 8000fc4:	42a3      	cmp	r3, r4
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x276>
 8000fc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fcc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fd0:	d213      	bcs.n	8000ffa <__udivmoddi4+0x296>
 8000fd2:	42a3      	cmp	r3, r4
 8000fd4:	d911      	bls.n	8000ffa <__udivmoddi4+0x296>
 8000fd6:	3902      	subs	r1, #2
 8000fd8:	4464      	add	r4, ip
 8000fda:	1ae4      	subs	r4, r4, r3
 8000fdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fe0:	e739      	b.n	8000e56 <__udivmoddi4+0xf2>
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	e6f0      	b.n	8000dc8 <__udivmoddi4+0x64>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e706      	b.n	8000df8 <__udivmoddi4+0x94>
 8000fea:	45c8      	cmp	r8, r9
 8000fec:	d2ae      	bcs.n	8000f4c <__udivmoddi4+0x1e8>
 8000fee:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ff2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e7a8      	b.n	8000f4c <__udivmoddi4+0x1e8>
 8000ffa:	4631      	mov	r1, r6
 8000ffc:	e7ed      	b.n	8000fda <__udivmoddi4+0x276>
 8000ffe:	4603      	mov	r3, r0
 8001000:	e799      	b.n	8000f36 <__udivmoddi4+0x1d2>
 8001002:	4630      	mov	r0, r6
 8001004:	e7d4      	b.n	8000fb0 <__udivmoddi4+0x24c>
 8001006:	46d6      	mov	lr, sl
 8001008:	e77f      	b.n	8000f0a <__udivmoddi4+0x1a6>
 800100a:	4463      	add	r3, ip
 800100c:	3802      	subs	r0, #2
 800100e:	e74d      	b.n	8000eac <__udivmoddi4+0x148>
 8001010:	4606      	mov	r6, r0
 8001012:	4623      	mov	r3, r4
 8001014:	4608      	mov	r0, r1
 8001016:	e70f      	b.n	8000e38 <__udivmoddi4+0xd4>
 8001018:	3e02      	subs	r6, #2
 800101a:	4463      	add	r3, ip
 800101c:	e730      	b.n	8000e80 <__udivmoddi4+0x11c>
 800101e:	bf00      	nop

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	4a07      	ldr	r2, [pc, #28]	@ (8001050 <vApplicationGetIdleTaskMemory+0x2c>)
 8001034:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	4a06      	ldr	r2, [pc, #24]	@ (8001054 <vApplicationGetIdleTaskMemory+0x30>)
 800103a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2280      	movs	r2, #128	@ 0x80
 8001040:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001042:	bf00      	nop
 8001044:	3714      	adds	r7, #20
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	200001f4 	.word	0x200001f4
 8001054:	20000248 	.word	0x20000248

08001058 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001058:	b5b0      	push	{r4, r5, r7, lr}
 800105a:	b094      	sub	sp, #80	@ 0x50
 800105c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800105e:	f000 f9d3 	bl	8001408 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001062:	f000 fbf2 	bl	800184a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001066:	f000 f859 	bl	800111c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800106a:	f000 f935 	bl	80012d8 <MX_GPIO_Init>
  MX_ADC1_Init();
 800106e:	f000 f8b1 	bl	80011d4 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8001072:	f000 f901 	bl	8001278 <MX_USART2_UART_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of myBinarySem01 */
  osSemaphoreDef(myBinarySem01);
 8001076:	2300      	movs	r3, #0
 8001078:	64bb      	str	r3, [r7, #72]	@ 0x48
 800107a:	2300      	movs	r3, #0
 800107c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  myBinarySem01Handle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
 800107e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001082:	2101      	movs	r1, #1
 8001084:	4618      	mov	r0, r3
 8001086:	f003 f8ff 	bl	8004288 <osSemaphoreCreate>
 800108a:	4603      	mov	r3, r0
 800108c:	4a1c      	ldr	r2, [pc, #112]	@ (8001100 <main+0xa8>)
 800108e:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of xTorqueSensorQueue */
  osMessageQDef(xTorqueSensorQueue, 10, float);
 8001090:	4b1c      	ldr	r3, [pc, #112]	@ (8001104 <main+0xac>)
 8001092:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8001096:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001098:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  xTorqueSensorQueueHandle = osMessageCreate(osMessageQ(xTorqueSensorQueue), NULL);
 800109c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80010a0:	2100      	movs	r1, #0
 80010a2:	4618      	mov	r0, r3
 80010a4:	f003 f922 	bl	80042ec <osMessageCreate>
 80010a8:	4603      	mov	r3, r0
 80010aa:	4a17      	ldr	r2, [pc, #92]	@ (8001108 <main+0xb0>)
 80010ac:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of vTaskReadTorque */
  osThreadDef(vTaskReadTorque, TaskReadTorqueSensor, osPriorityNormal, 0, 128);
 80010ae:	4b17      	ldr	r3, [pc, #92]	@ (800110c <main+0xb4>)
 80010b0:	f107 041c 	add.w	r4, r7, #28
 80010b4:	461d      	mov	r5, r3
 80010b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010ba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  vTaskReadTorqueHandle = osThreadCreate(osThread(vTaskReadTorque), NULL);
 80010c2:	f107 031c 	add.w	r3, r7, #28
 80010c6:	2100      	movs	r1, #0
 80010c8:	4618      	mov	r0, r3
 80010ca:	f003 f891 	bl	80041f0 <osThreadCreate>
 80010ce:	4603      	mov	r3, r0
 80010d0:	4a0f      	ldr	r2, [pc, #60]	@ (8001110 <main+0xb8>)
 80010d2:	6013      	str	r3, [r2, #0]

  /* definition and creation of vTaskMain */
  osThreadDef(vTaskMain, TaskMain, osPriorityNormal, 0, 128);
 80010d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001114 <main+0xbc>)
 80010d6:	463c      	mov	r4, r7
 80010d8:	461d      	mov	r5, r3
 80010da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  vTaskMainHandle = osThreadCreate(osThread(vTaskMain), NULL);
 80010e6:	463b      	mov	r3, r7
 80010e8:	2100      	movs	r1, #0
 80010ea:	4618      	mov	r0, r3
 80010ec:	f003 f880 	bl	80041f0 <osThreadCreate>
 80010f0:	4603      	mov	r3, r0
 80010f2:	4a09      	ldr	r2, [pc, #36]	@ (8001118 <main+0xc0>)
 80010f4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80010f6:	f003 f874 	bl	80041e2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010fa:	bf00      	nop
 80010fc:	e7fd      	b.n	80010fa <main+0xa2>
 80010fe:	bf00      	nop
 8001100:	20000524 	.word	0x20000524
 8001104:	0800af48 	.word	0x0800af48
 8001108:	20000520 	.word	0x20000520
 800110c:	0800af68 	.word	0x0800af68
 8001110:	20000518 	.word	0x20000518
 8001114:	0800af90 	.word	0x0800af90
 8001118:	2000051c 	.word	0x2000051c

0800111c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b094      	sub	sp, #80	@ 0x50
 8001120:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001122:	f107 0320 	add.w	r3, r7, #32
 8001126:	2230      	movs	r2, #48	@ 0x30
 8001128:	2100      	movs	r1, #0
 800112a:	4618      	mov	r0, r3
 800112c:	f006 fb25 	bl	800777a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001130:	f107 030c 	add.w	r3, r7, #12
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	609a      	str	r2, [r3, #8]
 800113c:	60da      	str	r2, [r3, #12]
 800113e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001140:	4b22      	ldr	r3, [pc, #136]	@ (80011cc <SystemClock_Config+0xb0>)
 8001142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001144:	4a21      	ldr	r2, [pc, #132]	@ (80011cc <SystemClock_Config+0xb0>)
 8001146:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800114a:	6413      	str	r3, [r2, #64]	@ 0x40
 800114c:	4b1f      	ldr	r3, [pc, #124]	@ (80011cc <SystemClock_Config+0xb0>)
 800114e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001150:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001154:	60bb      	str	r3, [r7, #8]
 8001156:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001158:	4b1d      	ldr	r3, [pc, #116]	@ (80011d0 <SystemClock_Config+0xb4>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001160:	4a1b      	ldr	r2, [pc, #108]	@ (80011d0 <SystemClock_Config+0xb4>)
 8001162:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001166:	6013      	str	r3, [r2, #0]
 8001168:	4b19      	ldr	r3, [pc, #100]	@ (80011d0 <SystemClock_Config+0xb4>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001170:	607b      	str	r3, [r7, #4]
 8001172:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001174:	2302      	movs	r3, #2
 8001176:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001178:	2301      	movs	r3, #1
 800117a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800117c:	2310      	movs	r3, #16
 800117e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001180:	2300      	movs	r3, #0
 8001182:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001184:	f107 0320 	add.w	r3, r7, #32
 8001188:	4618      	mov	r0, r3
 800118a:	f001 fac3 	bl	8002714 <HAL_RCC_OscConfig>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8001194:	f000 f964 	bl	8001460 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001198:	230f      	movs	r3, #15
 800119a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800119c:	2300      	movs	r3, #0
 800119e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011a4:	2300      	movs	r3, #0
 80011a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011a8:	2300      	movs	r3, #0
 80011aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011ac:	f107 030c 	add.w	r3, r7, #12
 80011b0:	2100      	movs	r1, #0
 80011b2:	4618      	mov	r0, r3
 80011b4:	f001 fd52 	bl	8002c5c <HAL_RCC_ClockConfig>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80011be:	f000 f94f 	bl	8001460 <Error_Handler>
  }
}
 80011c2:	bf00      	nop
 80011c4:	3750      	adds	r7, #80	@ 0x50
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40023800 	.word	0x40023800
 80011d0:	40007000 	.word	0x40007000

080011d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011da:	463b      	mov	r3, r7
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80011e6:	4b21      	ldr	r3, [pc, #132]	@ (800126c <MX_ADC1_Init+0x98>)
 80011e8:	4a21      	ldr	r2, [pc, #132]	@ (8001270 <MX_ADC1_Init+0x9c>)
 80011ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80011ec:	4b1f      	ldr	r3, [pc, #124]	@ (800126c <MX_ADC1_Init+0x98>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011f2:	4b1e      	ldr	r3, [pc, #120]	@ (800126c <MX_ADC1_Init+0x98>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011f8:	4b1c      	ldr	r3, [pc, #112]	@ (800126c <MX_ADC1_Init+0x98>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011fe:	4b1b      	ldr	r3, [pc, #108]	@ (800126c <MX_ADC1_Init+0x98>)
 8001200:	2200      	movs	r2, #0
 8001202:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001204:	4b19      	ldr	r3, [pc, #100]	@ (800126c <MX_ADC1_Init+0x98>)
 8001206:	2200      	movs	r2, #0
 8001208:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800120c:	4b17      	ldr	r3, [pc, #92]	@ (800126c <MX_ADC1_Init+0x98>)
 800120e:	2200      	movs	r2, #0
 8001210:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001212:	4b16      	ldr	r3, [pc, #88]	@ (800126c <MX_ADC1_Init+0x98>)
 8001214:	4a17      	ldr	r2, [pc, #92]	@ (8001274 <MX_ADC1_Init+0xa0>)
 8001216:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001218:	4b14      	ldr	r3, [pc, #80]	@ (800126c <MX_ADC1_Init+0x98>)
 800121a:	2200      	movs	r2, #0
 800121c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800121e:	4b13      	ldr	r3, [pc, #76]	@ (800126c <MX_ADC1_Init+0x98>)
 8001220:	2201      	movs	r2, #1
 8001222:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001224:	4b11      	ldr	r3, [pc, #68]	@ (800126c <MX_ADC1_Init+0x98>)
 8001226:	2200      	movs	r2, #0
 8001228:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800122c:	4b0f      	ldr	r3, [pc, #60]	@ (800126c <MX_ADC1_Init+0x98>)
 800122e:	2201      	movs	r2, #1
 8001230:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001232:	480e      	ldr	r0, [pc, #56]	@ (800126c <MX_ADC1_Init+0x98>)
 8001234:	f000 fb66 	bl	8001904 <HAL_ADC_Init>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800123e:	f000 f90f 	bl	8001460 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001242:	2301      	movs	r3, #1
 8001244:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001246:	2301      	movs	r3, #1
 8001248:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800124a:	2300      	movs	r3, #0
 800124c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800124e:	463b      	mov	r3, r7
 8001250:	4619      	mov	r1, r3
 8001252:	4806      	ldr	r0, [pc, #24]	@ (800126c <MX_ADC1_Init+0x98>)
 8001254:	f000 fd00 	bl	8001c58 <HAL_ADC_ConfigChannel>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800125e:	f000 f8ff 	bl	8001460 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001262:	bf00      	nop
 8001264:	3710      	adds	r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20000448 	.word	0x20000448
 8001270:	40012000 	.word	0x40012000
 8001274:	0f000001 	.word	0x0f000001

08001278 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800127c:	4b14      	ldr	r3, [pc, #80]	@ (80012d0 <MX_USART2_UART_Init+0x58>)
 800127e:	4a15      	ldr	r2, [pc, #84]	@ (80012d4 <MX_USART2_UART_Init+0x5c>)
 8001280:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001282:	4b13      	ldr	r3, [pc, #76]	@ (80012d0 <MX_USART2_UART_Init+0x58>)
 8001284:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001288:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800128a:	4b11      	ldr	r3, [pc, #68]	@ (80012d0 <MX_USART2_UART_Init+0x58>)
 800128c:	2200      	movs	r2, #0
 800128e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001290:	4b0f      	ldr	r3, [pc, #60]	@ (80012d0 <MX_USART2_UART_Init+0x58>)
 8001292:	2200      	movs	r2, #0
 8001294:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001296:	4b0e      	ldr	r3, [pc, #56]	@ (80012d0 <MX_USART2_UART_Init+0x58>)
 8001298:	2200      	movs	r2, #0
 800129a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800129c:	4b0c      	ldr	r3, [pc, #48]	@ (80012d0 <MX_USART2_UART_Init+0x58>)
 800129e:	220c      	movs	r2, #12
 80012a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012a2:	4b0b      	ldr	r3, [pc, #44]	@ (80012d0 <MX_USART2_UART_Init+0x58>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012a8:	4b09      	ldr	r3, [pc, #36]	@ (80012d0 <MX_USART2_UART_Init+0x58>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012ae:	4b08      	ldr	r3, [pc, #32]	@ (80012d0 <MX_USART2_UART_Init+0x58>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012b4:	4b06      	ldr	r3, [pc, #24]	@ (80012d0 <MX_USART2_UART_Init+0x58>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012ba:	4805      	ldr	r0, [pc, #20]	@ (80012d0 <MX_USART2_UART_Init+0x58>)
 80012bc:	f002 faa4 	bl	8003808 <HAL_UART_Init>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80012c6:	f000 f8cb 	bl	8001460 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	20000490 	.word	0x20000490
 80012d4:	40004400 	.word	0x40004400

080012d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012de:	4b09      	ldr	r3, [pc, #36]	@ (8001304 <MX_GPIO_Init+0x2c>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e2:	4a08      	ldr	r2, [pc, #32]	@ (8001304 <MX_GPIO_Init+0x2c>)
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ea:	4b06      	ldr	r3, [pc, #24]	@ (8001304 <MX_GPIO_Init+0x2c>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	607b      	str	r3, [r7, #4]
 80012f4:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012f6:	bf00      	nop
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	40023800 	.word	0x40023800

08001308 <TaskReadTorqueSensor>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_TaskReadTorqueSensor */
void TaskReadTorqueSensor(void const * argument)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
	  uint16_t adcValue;
	  float torqueValue;

	  for (;;) {
	    if (HAL_ADC_Start(&hadc1) != HAL_OK) {
 8001310:	481b      	ldr	r0, [pc, #108]	@ (8001380 <TaskReadTorqueSensor+0x78>)
 8001312:	f000 fb3b 	bl	800198c <HAL_ADC_Start>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d12c      	bne.n	8001376 <TaskReadTorqueSensor+0x6e>
	      // Handle ADC start error
	      continue;
	    }

	    if (HAL_ADC_PollForConversion(&hadc1, portMAX_DELAY) != HAL_OK) {
 800131c:	f04f 31ff 	mov.w	r1, #4294967295
 8001320:	4817      	ldr	r0, [pc, #92]	@ (8001380 <TaskReadTorqueSensor+0x78>)
 8001322:	f000 fc01 	bl	8001b28 <HAL_ADC_PollForConversion>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d126      	bne.n	800137a <TaskReadTorqueSensor+0x72>
	      // Handle ADC conversion error or timeout
	      continue;
	    }

	    adcValue = HAL_ADC_GetValue(&hadc1);
 800132c:	4814      	ldr	r0, [pc, #80]	@ (8001380 <TaskReadTorqueSensor+0x78>)
 800132e:	f000 fc86 	bl	8001c3e <HAL_ADC_GetValue>
 8001332:	4603      	mov	r3, r0
 8001334:	81fb      	strh	r3, [r7, #14]

	    // Convert ADC value to torque value (replace with your conversion logic)
	    torqueValue = (float)adcValue * (10.0f / 4095.0f);
 8001336:	89fb      	ldrh	r3, [r7, #14]
 8001338:	ee07 3a90 	vmov	s15, r3
 800133c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001340:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8001384 <TaskReadTorqueSensor+0x7c>
 8001344:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001348:	edc7 7a02 	vstr	s15, [r7, #8]

	    xQueueSend(xTorqueSensorQueueHandle, &torqueValue, portMAX_DELAY);
 800134c:	4b0e      	ldr	r3, [pc, #56]	@ (8001388 <TaskReadTorqueSensor+0x80>)
 800134e:	6818      	ldr	r0, [r3, #0]
 8001350:	f107 0108 	add.w	r1, r7, #8
 8001354:	2300      	movs	r3, #0
 8001356:	f04f 32ff 	mov.w	r2, #4294967295
 800135a:	f003 f9f9 	bl	8004750 <xQueueGenericSend>

	    xSemaphoreGive(myBinarySem01Handle);
 800135e:	4b0b      	ldr	r3, [pc, #44]	@ (800138c <TaskReadTorqueSensor+0x84>)
 8001360:	6818      	ldr	r0, [r3, #0]
 8001362:	2300      	movs	r3, #0
 8001364:	2200      	movs	r2, #0
 8001366:	2100      	movs	r1, #0
 8001368:	f003 f9f2 	bl	8004750 <xQueueGenericSend>

	    vTaskDelay(pdMS_TO_TICKS(1000)); // Delay for 1000ms (1 second)
 800136c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001370:	f003 ffc0 	bl	80052f4 <vTaskDelay>
 8001374:	e7cc      	b.n	8001310 <TaskReadTorqueSensor+0x8>
	      continue;
 8001376:	bf00      	nop
 8001378:	e7ca      	b.n	8001310 <TaskReadTorqueSensor+0x8>
	      continue;
 800137a:	bf00      	nop
	    if (HAL_ADC_Start(&hadc1) != HAL_OK) {
 800137c:	e7c8      	b.n	8001310 <TaskReadTorqueSensor+0x8>
 800137e:	bf00      	nop
 8001380:	20000448 	.word	0x20000448
 8001384:	3b200a01 	.word	0x3b200a01
 8001388:	20000520 	.word	0x20000520
 800138c:	20000524 	.word	0x20000524

08001390 <TaskMain>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskMain */
void TaskMain(void const * argument)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b092      	sub	sp, #72	@ 0x48
 8001394:	af02      	add	r7, sp, #8
 8001396:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskMain */
  /* Infinite loop */
	float receivedTorqueValue;

	  for (;;) {
	    xSemaphoreTake(myBinarySem01Handle, portMAX_DELAY);
 8001398:	4b17      	ldr	r3, [pc, #92]	@ (80013f8 <TaskMain+0x68>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f04f 31ff 	mov.w	r1, #4294967295
 80013a0:	4618      	mov	r0, r3
 80013a2:	f003 fbc7 	bl	8004b34 <xQueueSemaphoreTake>

	    if (xQueueReceive(xTorqueSensorQueueHandle, &receivedTorqueValue, portMAX_DELAY) == pdTRUE) {
 80013a6:	4b15      	ldr	r3, [pc, #84]	@ (80013fc <TaskMain+0x6c>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 80013ae:	f04f 32ff 	mov.w	r2, #4294967295
 80013b2:	4618      	mov	r0, r3
 80013b4:	f003 fad6 	bl	8004964 <xQueueReceive>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d1ec      	bne.n	8001398 <TaskMain+0x8>
	      char uartTxBuffer[50];
	      snprintf(uartTxBuffer, sizeof(uartTxBuffer), "Torque Value: %.2f Nm\r\n", receivedTorqueValue);
 80013be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff f8e1 	bl	8000588 <__aeabi_f2d>
 80013c6:	4602      	mov	r2, r0
 80013c8:	460b      	mov	r3, r1
 80013ca:	f107 0008 	add.w	r0, r7, #8
 80013ce:	e9cd 2300 	strd	r2, r3, [sp]
 80013d2:	4a0b      	ldr	r2, [pc, #44]	@ (8001400 <TaskMain+0x70>)
 80013d4:	2132      	movs	r1, #50	@ 0x32
 80013d6:	f006 f939 	bl	800764c <sniprintf>
	      HAL_UART_Transmit(&huart2, (uint8_t *)uartTxBuffer, strlen(uartTxBuffer), HAL_MAX_DELAY);
 80013da:	f107 0308 	add.w	r3, r7, #8
 80013de:	4618      	mov	r0, r3
 80013e0:	f7fe ff66 	bl	80002b0 <strlen>
 80013e4:	4603      	mov	r3, r0
 80013e6:	b29a      	uxth	r2, r3
 80013e8:	f107 0108 	add.w	r1, r7, #8
 80013ec:	f04f 33ff 	mov.w	r3, #4294967295
 80013f0:	4804      	ldr	r0, [pc, #16]	@ (8001404 <TaskMain+0x74>)
 80013f2:	f002 fa57 	bl	80038a4 <HAL_UART_Transmit>
	    xSemaphoreTake(myBinarySem01Handle, portMAX_DELAY);
 80013f6:	e7cf      	b.n	8001398 <TaskMain+0x8>
 80013f8:	20000524 	.word	0x20000524
 80013fc:	20000520 	.word	0x20000520
 8001400:	0800afac 	.word	0x0800afac
 8001404:	20000490 	.word	0x20000490

08001408 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800140e:	463b      	mov	r3, r7
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	609a      	str	r2, [r3, #8]
 8001418:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800141a:	f000 ff53 	bl	80022c4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800141e:	2301      	movs	r3, #1
 8001420:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001422:	2300      	movs	r3, #0
 8001424:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001426:	2300      	movs	r3, #0
 8001428:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800142a:	231f      	movs	r3, #31
 800142c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800142e:	2387      	movs	r3, #135	@ 0x87
 8001430:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001432:	2300      	movs	r3, #0
 8001434:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001436:	2300      	movs	r3, #0
 8001438:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800143a:	2301      	movs	r3, #1
 800143c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800143e:	2301      	movs	r3, #1
 8001440:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001442:	2300      	movs	r3, #0
 8001444:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001446:	2300      	movs	r3, #0
 8001448:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800144a:	463b      	mov	r3, r7
 800144c:	4618      	mov	r0, r3
 800144e:	f000 ff71 	bl	8002334 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001452:	2004      	movs	r0, #4
 8001454:	f000 ff4e 	bl	80022f4 <HAL_MPU_Enable>

}
 8001458:	bf00      	nop
 800145a:	3710      	adds	r7, #16
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}

08001460 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001464:	b672      	cpsid	i
}
 8001466:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001468:	bf00      	nop
 800146a:	e7fd      	b.n	8001468 <Error_Handler+0x8>

0800146c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001472:	4b11      	ldr	r3, [pc, #68]	@ (80014b8 <HAL_MspInit+0x4c>)
 8001474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001476:	4a10      	ldr	r2, [pc, #64]	@ (80014b8 <HAL_MspInit+0x4c>)
 8001478:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800147c:	6413      	str	r3, [r2, #64]	@ 0x40
 800147e:	4b0e      	ldr	r3, [pc, #56]	@ (80014b8 <HAL_MspInit+0x4c>)
 8001480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001482:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001486:	607b      	str	r3, [r7, #4]
 8001488:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800148a:	4b0b      	ldr	r3, [pc, #44]	@ (80014b8 <HAL_MspInit+0x4c>)
 800148c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800148e:	4a0a      	ldr	r2, [pc, #40]	@ (80014b8 <HAL_MspInit+0x4c>)
 8001490:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001494:	6453      	str	r3, [r2, #68]	@ 0x44
 8001496:	4b08      	ldr	r3, [pc, #32]	@ (80014b8 <HAL_MspInit+0x4c>)
 8001498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800149a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800149e:	603b      	str	r3, [r7, #0]
 80014a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014a2:	2200      	movs	r2, #0
 80014a4:	210f      	movs	r1, #15
 80014a6:	f06f 0001 	mvn.w	r0, #1
 80014aa:	f000 fee2 	bl	8002272 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ae:	bf00      	nop
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40023800 	.word	0x40023800

080014bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b08a      	sub	sp, #40	@ 0x28
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c4:	f107 0314 	add.w	r3, r7, #20
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
 80014d2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a15      	ldr	r2, [pc, #84]	@ (8001530 <HAL_ADC_MspInit+0x74>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d123      	bne.n	8001526 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014de:	4b15      	ldr	r3, [pc, #84]	@ (8001534 <HAL_ADC_MspInit+0x78>)
 80014e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014e2:	4a14      	ldr	r2, [pc, #80]	@ (8001534 <HAL_ADC_MspInit+0x78>)
 80014e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80014ea:	4b12      	ldr	r3, [pc, #72]	@ (8001534 <HAL_ADC_MspInit+0x78>)
 80014ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014f2:	613b      	str	r3, [r7, #16]
 80014f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001534 <HAL_ADC_MspInit+0x78>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fa:	4a0e      	ldr	r2, [pc, #56]	@ (8001534 <HAL_ADC_MspInit+0x78>)
 80014fc:	f043 0301 	orr.w	r3, r3, #1
 8001500:	6313      	str	r3, [r2, #48]	@ 0x30
 8001502:	4b0c      	ldr	r3, [pc, #48]	@ (8001534 <HAL_ADC_MspInit+0x78>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800150e:	2302      	movs	r3, #2
 8001510:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001512:	2303      	movs	r3, #3
 8001514:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151a:	f107 0314 	add.w	r3, r7, #20
 800151e:	4619      	mov	r1, r3
 8001520:	4805      	ldr	r0, [pc, #20]	@ (8001538 <HAL_ADC_MspInit+0x7c>)
 8001522:	f000 ff4b 	bl	80023bc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001526:	bf00      	nop
 8001528:	3728      	adds	r7, #40	@ 0x28
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40012000 	.word	0x40012000
 8001534:	40023800 	.word	0x40023800
 8001538:	40020000 	.word	0x40020000

0800153c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b0aa      	sub	sp, #168	@ 0xa8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001544:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]
 8001552:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001554:	f107 0310 	add.w	r3, r7, #16
 8001558:	2284      	movs	r2, #132	@ 0x84
 800155a:	2100      	movs	r1, #0
 800155c:	4618      	mov	r0, r3
 800155e:	f006 f90c 	bl	800777a <memset>
  if(huart->Instance==USART2)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a21      	ldr	r2, [pc, #132]	@ (80015ec <HAL_UART_MspInit+0xb0>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d13a      	bne.n	80015e2 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800156c:	2380      	movs	r3, #128	@ 0x80
 800156e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001570:	2300      	movs	r3, #0
 8001572:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001574:	f107 0310 	add.w	r3, r7, #16
 8001578:	4618      	mov	r0, r3
 800157a:	f001 fd55 	bl	8003028 <HAL_RCCEx_PeriphCLKConfig>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001584:	f7ff ff6c 	bl	8001460 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001588:	4b19      	ldr	r3, [pc, #100]	@ (80015f0 <HAL_UART_MspInit+0xb4>)
 800158a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800158c:	4a18      	ldr	r2, [pc, #96]	@ (80015f0 <HAL_UART_MspInit+0xb4>)
 800158e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001592:	6413      	str	r3, [r2, #64]	@ 0x40
 8001594:	4b16      	ldr	r3, [pc, #88]	@ (80015f0 <HAL_UART_MspInit+0xb4>)
 8001596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001598:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800159c:	60fb      	str	r3, [r7, #12]
 800159e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a0:	4b13      	ldr	r3, [pc, #76]	@ (80015f0 <HAL_UART_MspInit+0xb4>)
 80015a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a4:	4a12      	ldr	r2, [pc, #72]	@ (80015f0 <HAL_UART_MspInit+0xb4>)
 80015a6:	f043 0301 	orr.w	r3, r3, #1
 80015aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ac:	4b10      	ldr	r3, [pc, #64]	@ (80015f0 <HAL_UART_MspInit+0xb4>)
 80015ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b0:	f003 0301 	and.w	r3, r3, #1
 80015b4:	60bb      	str	r3, [r7, #8]
 80015b6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80015b8:	230c      	movs	r3, #12
 80015ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015be:	2302      	movs	r3, #2
 80015c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c4:	2300      	movs	r3, #0
 80015c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ca:	2303      	movs	r3, #3
 80015cc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015d0:	2307      	movs	r3, #7
 80015d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d6:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80015da:	4619      	mov	r1, r3
 80015dc:	4805      	ldr	r0, [pc, #20]	@ (80015f4 <HAL_UART_MspInit+0xb8>)
 80015de:	f000 feed 	bl	80023bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015e2:	bf00      	nop
 80015e4:	37a8      	adds	r7, #168	@ 0xa8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40004400 	.word	0x40004400
 80015f0:	40023800 	.word	0x40023800
 80015f4:	40020000 	.word	0x40020000

080015f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015fc:	bf00      	nop
 80015fe:	e7fd      	b.n	80015fc <NMI_Handler+0x4>

08001600 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001604:	bf00      	nop
 8001606:	e7fd      	b.n	8001604 <HardFault_Handler+0x4>

08001608 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800160c:	bf00      	nop
 800160e:	e7fd      	b.n	800160c <MemManage_Handler+0x4>

08001610 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001614:	bf00      	nop
 8001616:	e7fd      	b.n	8001614 <BusFault_Handler+0x4>

08001618 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800161c:	bf00      	nop
 800161e:	e7fd      	b.n	800161c <UsageFault_Handler+0x4>

08001620 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001624:	bf00      	nop
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr

0800162e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001632:	f000 f947 	bl	80018c4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001636:	f004 fab3 	bl	8005ba0 <xTaskGetSchedulerState>
 800163a:	4603      	mov	r3, r0
 800163c:	2b01      	cmp	r3, #1
 800163e:	d001      	beq.n	8001644 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001640:	f004 fe9a 	bl	8006378 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001644:	bf00      	nop
 8001646:	bd80      	pop	{r7, pc}

08001648 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  return 1;
 800164c:	2301      	movs	r3, #1
}
 800164e:	4618      	mov	r0, r3
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <_kill>:

int _kill(int pid, int sig)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001662:	f006 f8dd 	bl	8007820 <__errno>
 8001666:	4603      	mov	r3, r0
 8001668:	2216      	movs	r2, #22
 800166a:	601a      	str	r2, [r3, #0]
  return -1;
 800166c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001670:	4618      	mov	r0, r3
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <_exit>:

void _exit (int status)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001680:	f04f 31ff 	mov.w	r1, #4294967295
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f7ff ffe7 	bl	8001658 <_kill>
  while (1) {}    /* Make sure we hang here */
 800168a:	bf00      	nop
 800168c:	e7fd      	b.n	800168a <_exit+0x12>

0800168e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	b086      	sub	sp, #24
 8001692:	af00      	add	r7, sp, #0
 8001694:	60f8      	str	r0, [r7, #12]
 8001696:	60b9      	str	r1, [r7, #8]
 8001698:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800169a:	2300      	movs	r3, #0
 800169c:	617b      	str	r3, [r7, #20]
 800169e:	e00a      	b.n	80016b6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016a0:	f3af 8000 	nop.w
 80016a4:	4601      	mov	r1, r0
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	1c5a      	adds	r2, r3, #1
 80016aa:	60ba      	str	r2, [r7, #8]
 80016ac:	b2ca      	uxtb	r2, r1
 80016ae:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	3301      	adds	r3, #1
 80016b4:	617b      	str	r3, [r7, #20]
 80016b6:	697a      	ldr	r2, [r7, #20]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	429a      	cmp	r2, r3
 80016bc:	dbf0      	blt.n	80016a0 <_read+0x12>
  }

  return len;
 80016be:	687b      	ldr	r3, [r7, #4]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3718      	adds	r7, #24
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	60b9      	str	r1, [r7, #8]
 80016d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d4:	2300      	movs	r3, #0
 80016d6:	617b      	str	r3, [r7, #20]
 80016d8:	e009      	b.n	80016ee <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	1c5a      	adds	r2, r3, #1
 80016de:	60ba      	str	r2, [r7, #8]
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	3301      	adds	r3, #1
 80016ec:	617b      	str	r3, [r7, #20]
 80016ee:	697a      	ldr	r2, [r7, #20]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	dbf1      	blt.n	80016da <_write+0x12>
  }
  return len;
 80016f6:	687b      	ldr	r3, [r7, #4]
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3718      	adds	r7, #24
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}

08001700 <_close>:

int _close(int file)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001708:	f04f 33ff 	mov.w	r3, #4294967295
}
 800170c:	4618      	mov	r0, r3
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001728:	605a      	str	r2, [r3, #4]
  return 0;
 800172a:	2300      	movs	r3, #0
}
 800172c:	4618      	mov	r0, r3
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <_isatty>:

int _isatty(int file)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001740:	2301      	movs	r3, #1
}
 8001742:	4618      	mov	r0, r3
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr

0800174e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800174e:	b480      	push	{r7}
 8001750:	b085      	sub	sp, #20
 8001752:	af00      	add	r7, sp, #0
 8001754:	60f8      	str	r0, [r7, #12]
 8001756:	60b9      	str	r1, [r7, #8]
 8001758:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800175a:	2300      	movs	r3, #0
}
 800175c:	4618      	mov	r0, r3
 800175e:	3714      	adds	r7, #20
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b086      	sub	sp, #24
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001770:	4a14      	ldr	r2, [pc, #80]	@ (80017c4 <_sbrk+0x5c>)
 8001772:	4b15      	ldr	r3, [pc, #84]	@ (80017c8 <_sbrk+0x60>)
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800177c:	4b13      	ldr	r3, [pc, #76]	@ (80017cc <_sbrk+0x64>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d102      	bne.n	800178a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001784:	4b11      	ldr	r3, [pc, #68]	@ (80017cc <_sbrk+0x64>)
 8001786:	4a12      	ldr	r2, [pc, #72]	@ (80017d0 <_sbrk+0x68>)
 8001788:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800178a:	4b10      	ldr	r3, [pc, #64]	@ (80017cc <_sbrk+0x64>)
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4413      	add	r3, r2
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	429a      	cmp	r2, r3
 8001796:	d207      	bcs.n	80017a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001798:	f006 f842 	bl	8007820 <__errno>
 800179c:	4603      	mov	r3, r0
 800179e:	220c      	movs	r2, #12
 80017a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017a2:	f04f 33ff 	mov.w	r3, #4294967295
 80017a6:	e009      	b.n	80017bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017a8:	4b08      	ldr	r3, [pc, #32]	@ (80017cc <_sbrk+0x64>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017ae:	4b07      	ldr	r3, [pc, #28]	@ (80017cc <_sbrk+0x64>)
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4413      	add	r3, r2
 80017b6:	4a05      	ldr	r2, [pc, #20]	@ (80017cc <_sbrk+0x64>)
 80017b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017ba:	68fb      	ldr	r3, [r7, #12]
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3718      	adds	r7, #24
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	20050000 	.word	0x20050000
 80017c8:	00000400 	.word	0x00000400
 80017cc:	20000528 	.word	0x20000528
 80017d0:	200043c8 	.word	0x200043c8

080017d4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017d8:	4b06      	ldr	r3, [pc, #24]	@ (80017f4 <SystemInit+0x20>)
 80017da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017de:	4a05      	ldr	r2, [pc, #20]	@ (80017f4 <SystemInit+0x20>)
 80017e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017e8:	bf00      	nop
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	e000ed00 	.word	0xe000ed00

080017f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001830 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017fc:	480d      	ldr	r0, [pc, #52]	@ (8001834 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017fe:	490e      	ldr	r1, [pc, #56]	@ (8001838 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001800:	4a0e      	ldr	r2, [pc, #56]	@ (800183c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001802:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001804:	e002      	b.n	800180c <LoopCopyDataInit>

08001806 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001806:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001808:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800180a:	3304      	adds	r3, #4

0800180c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800180c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800180e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001810:	d3f9      	bcc.n	8001806 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001812:	4a0b      	ldr	r2, [pc, #44]	@ (8001840 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001814:	4c0b      	ldr	r4, [pc, #44]	@ (8001844 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001816:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001818:	e001      	b.n	800181e <LoopFillZerobss>

0800181a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800181a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800181c:	3204      	adds	r2, #4

0800181e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800181e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001820:	d3fb      	bcc.n	800181a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001822:	f7ff ffd7 	bl	80017d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001826:	f006 f801 	bl	800782c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800182a:	f7ff fc15 	bl	8001058 <main>
  bx  lr    
 800182e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001830:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001834:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001838:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 800183c:	0800b420 	.word	0x0800b420
  ldr r2, =_sbss
 8001840:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001844:	200043c8 	.word	0x200043c8

08001848 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001848:	e7fe      	b.n	8001848 <ADC_IRQHandler>

0800184a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800184e:	2003      	movs	r0, #3
 8001850:	f000 fd04 	bl	800225c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001854:	200f      	movs	r0, #15
 8001856:	f000 f805 	bl	8001864 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800185a:	f7ff fe07 	bl	800146c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800185e:	2300      	movs	r3, #0
}
 8001860:	4618      	mov	r0, r3
 8001862:	bd80      	pop	{r7, pc}

08001864 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800186c:	4b12      	ldr	r3, [pc, #72]	@ (80018b8 <HAL_InitTick+0x54>)
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	4b12      	ldr	r3, [pc, #72]	@ (80018bc <HAL_InitTick+0x58>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	4619      	mov	r1, r3
 8001876:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800187a:	fbb3 f3f1 	udiv	r3, r3, r1
 800187e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001882:	4618      	mov	r0, r3
 8001884:	f000 fd11 	bl	80022aa <HAL_SYSTICK_Config>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e00e      	b.n	80018b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2b0f      	cmp	r3, #15
 8001896:	d80a      	bhi.n	80018ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001898:	2200      	movs	r2, #0
 800189a:	6879      	ldr	r1, [r7, #4]
 800189c:	f04f 30ff 	mov.w	r0, #4294967295
 80018a0:	f000 fce7 	bl	8002272 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018a4:	4a06      	ldr	r2, [pc, #24]	@ (80018c0 <HAL_InitTick+0x5c>)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018aa:	2300      	movs	r3, #0
 80018ac:	e000      	b.n	80018b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3708      	adds	r7, #8
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	20000000 	.word	0x20000000
 80018bc:	20000008 	.word	0x20000008
 80018c0:	20000004 	.word	0x20000004

080018c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018c8:	4b06      	ldr	r3, [pc, #24]	@ (80018e4 <HAL_IncTick+0x20>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	461a      	mov	r2, r3
 80018ce:	4b06      	ldr	r3, [pc, #24]	@ (80018e8 <HAL_IncTick+0x24>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4413      	add	r3, r2
 80018d4:	4a04      	ldr	r2, [pc, #16]	@ (80018e8 <HAL_IncTick+0x24>)
 80018d6:	6013      	str	r3, [r2, #0]
}
 80018d8:	bf00      	nop
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	20000008 	.word	0x20000008
 80018e8:	2000052c 	.word	0x2000052c

080018ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  return uwTick;
 80018f0:	4b03      	ldr	r3, [pc, #12]	@ (8001900 <HAL_GetTick+0x14>)
 80018f2:	681b      	ldr	r3, [r3, #0]
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	2000052c 	.word	0x2000052c

08001904 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800190c:	2300      	movs	r3, #0
 800190e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d101      	bne.n	800191a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e031      	b.n	800197e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800191e:	2b00      	cmp	r3, #0
 8001920:	d109      	bne.n	8001936 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f7ff fdca 	bl	80014bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2200      	movs	r2, #0
 800192c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2200      	movs	r2, #0
 8001932:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800193a:	f003 0310 	and.w	r3, r3, #16
 800193e:	2b00      	cmp	r3, #0
 8001940:	d116      	bne.n	8001970 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001946:	4b10      	ldr	r3, [pc, #64]	@ (8001988 <HAL_ADC_Init+0x84>)
 8001948:	4013      	ands	r3, r2
 800194a:	f043 0202 	orr.w	r2, r3, #2
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f000 fad6 	bl	8001f04 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001962:	f023 0303 	bic.w	r3, r3, #3
 8001966:	f043 0201 	orr.w	r2, r3, #1
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	641a      	str	r2, [r3, #64]	@ 0x40
 800196e:	e001      	b.n	8001974 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2200      	movs	r2, #0
 8001978:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800197c:	7bfb      	ldrb	r3, [r7, #15]
}
 800197e:	4618      	mov	r0, r3
 8001980:	3710      	adds	r7, #16
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	ffffeefd 	.word	0xffffeefd

0800198c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001994:	2300      	movs	r3, #0
 8001996:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d101      	bne.n	80019a6 <HAL_ADC_Start+0x1a>
 80019a2:	2302      	movs	r3, #2
 80019a4:	e0ad      	b.n	8001b02 <HAL_ADC_Start+0x176>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2201      	movs	r2, #1
 80019aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	f003 0301 	and.w	r3, r3, #1
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d018      	beq.n	80019ee <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	689a      	ldr	r2, [r3, #8]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f042 0201 	orr.w	r2, r2, #1
 80019ca:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80019cc:	4b50      	ldr	r3, [pc, #320]	@ (8001b10 <HAL_ADC_Start+0x184>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a50      	ldr	r2, [pc, #320]	@ (8001b14 <HAL_ADC_Start+0x188>)
 80019d2:	fba2 2303 	umull	r2, r3, r2, r3
 80019d6:	0c9a      	lsrs	r2, r3, #18
 80019d8:	4613      	mov	r3, r2
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	4413      	add	r3, r2
 80019de:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80019e0:	e002      	b.n	80019e8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	3b01      	subs	r3, #1
 80019e6:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d1f9      	bne.n	80019e2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	f003 0301 	and.w	r3, r3, #1
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d175      	bne.n	8001ae8 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a00:	4b45      	ldr	r3, [pc, #276]	@ (8001b18 <HAL_ADC_Start+0x18c>)
 8001a02:	4013      	ands	r3, r2
 8001a04:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d007      	beq.n	8001a2a <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a1e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001a22:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a2e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a36:	d106      	bne.n	8001a46 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a3c:	f023 0206 	bic.w	r2, r3, #6
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	645a      	str	r2, [r3, #68]	@ 0x44
 8001a44:	e002      	b.n	8001a4c <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001a5c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001a5e:	4b2f      	ldr	r3, [pc, #188]	@ (8001b1c <HAL_ADC_Start+0x190>)
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f003 031f 	and.w	r3, r3, #31
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d10f      	bne.n	8001a8a <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d143      	bne.n	8001b00 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	689a      	ldr	r2, [r3, #8]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001a86:	609a      	str	r2, [r3, #8]
 8001a88:	e03a      	b.n	8001b00 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a24      	ldr	r2, [pc, #144]	@ (8001b20 <HAL_ADC_Start+0x194>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d10e      	bne.n	8001ab2 <HAL_ADC_Start+0x126>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d107      	bne.n	8001ab2 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	689a      	ldr	r2, [r3, #8]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001ab0:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001ab2:	4b1a      	ldr	r3, [pc, #104]	@ (8001b1c <HAL_ADC_Start+0x190>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f003 0310 	and.w	r3, r3, #16
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d120      	bne.n	8001b00 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a18      	ldr	r2, [pc, #96]	@ (8001b24 <HAL_ADC_Start+0x198>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d11b      	bne.n	8001b00 <HAL_ADC_Start+0x174>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d114      	bne.n	8001b00 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	689a      	ldr	r2, [r3, #8]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001ae4:	609a      	str	r2, [r3, #8]
 8001ae6:	e00b      	b.n	8001b00 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aec:	f043 0210 	orr.w	r2, r3, #16
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001af8:	f043 0201 	orr.w	r2, r3, #1
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3714      	adds	r7, #20
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	20000000 	.word	0x20000000
 8001b14:	431bde83 	.word	0x431bde83
 8001b18:	fffff8fe 	.word	0xfffff8fe
 8001b1c:	40012300 	.word	0x40012300
 8001b20:	40012000 	.word	0x40012000
 8001b24:	40012200 	.word	0x40012200

08001b28 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001b32:	2300      	movs	r3, #0
 8001b34:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b44:	d113      	bne.n	8001b6e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001b50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001b54:	d10b      	bne.n	8001b6e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b5a:	f043 0220 	orr.w	r2, r3, #32
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e063      	b.n	8001c36 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001b6e:	f7ff febd 	bl	80018ec <HAL_GetTick>
 8001b72:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001b74:	e021      	b.n	8001bba <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b7c:	d01d      	beq.n	8001bba <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d007      	beq.n	8001b94 <HAL_ADC_PollForConversion+0x6c>
 8001b84:	f7ff feb2 	bl	80018ec <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	683a      	ldr	r2, [r7, #0]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d212      	bcs.n	8001bba <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d00b      	beq.n	8001bba <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba6:	f043 0204 	orr.w	r2, r3, #4
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e03d      	b.n	8001c36 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0302 	and.w	r3, r3, #2
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d1d6      	bne.n	8001b76 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f06f 0212 	mvn.w	r2, #18
 8001bd0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d123      	bne.n	8001c34 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d11f      	bne.n	8001c34 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bfa:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d006      	beq.n	8001c10 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d111      	bne.n	8001c34 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c14:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c20:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d105      	bne.n	8001c34 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2c:	f043 0201 	orr.w	r2, r3, #1
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001c3e:	b480      	push	{r7}
 8001c40:	b083      	sub	sp, #12
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001c62:	2300      	movs	r3, #0
 8001c64:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d101      	bne.n	8001c74 <HAL_ADC_ConfigChannel+0x1c>
 8001c70:	2302      	movs	r3, #2
 8001c72:	e136      	b.n	8001ee2 <HAL_ADC_ConfigChannel+0x28a>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2b09      	cmp	r3, #9
 8001c82:	d93a      	bls.n	8001cfa <HAL_ADC_ConfigChannel+0xa2>
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001c8c:	d035      	beq.n	8001cfa <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	68d9      	ldr	r1, [r3, #12]
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	4413      	add	r3, r2
 8001ca2:	3b1e      	subs	r3, #30
 8001ca4:	2207      	movs	r2, #7
 8001ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8001caa:	43da      	mvns	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	400a      	ands	r2, r1
 8001cb2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a8d      	ldr	r2, [pc, #564]	@ (8001ef0 <HAL_ADC_ConfigChannel+0x298>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d10a      	bne.n	8001cd4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	68d9      	ldr	r1, [r3, #12]
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	061a      	lsls	r2, r3, #24
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	430a      	orrs	r2, r1
 8001cd0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cd2:	e035      	b.n	8001d40 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	68d9      	ldr	r1, [r3, #12]
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	689a      	ldr	r2, [r3, #8]
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	4403      	add	r3, r0
 8001cec:	3b1e      	subs	r3, #30
 8001cee:	409a      	lsls	r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	430a      	orrs	r2, r1
 8001cf6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cf8:	e022      	b.n	8001d40 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	6919      	ldr	r1, [r3, #16]
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	461a      	mov	r2, r3
 8001d08:	4613      	mov	r3, r2
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	4413      	add	r3, r2
 8001d0e:	2207      	movs	r2, #7
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	43da      	mvns	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	400a      	ands	r2, r1
 8001d1c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	6919      	ldr	r1, [r3, #16]
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	689a      	ldr	r2, [r3, #8]
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	4618      	mov	r0, r3
 8001d30:	4603      	mov	r3, r0
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	4403      	add	r3, r0
 8001d36:	409a      	lsls	r2, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	2b06      	cmp	r3, #6
 8001d46:	d824      	bhi.n	8001d92 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685a      	ldr	r2, [r3, #4]
 8001d52:	4613      	mov	r3, r2
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	4413      	add	r3, r2
 8001d58:	3b05      	subs	r3, #5
 8001d5a:	221f      	movs	r2, #31
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	43da      	mvns	r2, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	400a      	ands	r2, r1
 8001d68:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	4618      	mov	r0, r3
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685a      	ldr	r2, [r3, #4]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	4413      	add	r3, r2
 8001d82:	3b05      	subs	r3, #5
 8001d84:	fa00 f203 	lsl.w	r2, r0, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d90:	e04c      	b.n	8001e2c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	2b0c      	cmp	r3, #12
 8001d98:	d824      	bhi.n	8001de4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685a      	ldr	r2, [r3, #4]
 8001da4:	4613      	mov	r3, r2
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	4413      	add	r3, r2
 8001daa:	3b23      	subs	r3, #35	@ 0x23
 8001dac:	221f      	movs	r2, #31
 8001dae:	fa02 f303 	lsl.w	r3, r2, r3
 8001db2:	43da      	mvns	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	400a      	ands	r2, r1
 8001dba:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	4618      	mov	r0, r3
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685a      	ldr	r2, [r3, #4]
 8001dce:	4613      	mov	r3, r2
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	4413      	add	r3, r2
 8001dd4:	3b23      	subs	r3, #35	@ 0x23
 8001dd6:	fa00 f203 	lsl.w	r2, r0, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	430a      	orrs	r2, r1
 8001de0:	631a      	str	r2, [r3, #48]	@ 0x30
 8001de2:	e023      	b.n	8001e2c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685a      	ldr	r2, [r3, #4]
 8001dee:	4613      	mov	r3, r2
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	4413      	add	r3, r2
 8001df4:	3b41      	subs	r3, #65	@ 0x41
 8001df6:	221f      	movs	r2, #31
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	43da      	mvns	r2, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	400a      	ands	r2, r1
 8001e04:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	4618      	mov	r0, r3
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685a      	ldr	r2, [r3, #4]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	4413      	add	r3, r2
 8001e1e:	3b41      	subs	r3, #65	@ 0x41
 8001e20:	fa00 f203 	lsl.w	r2, r0, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a30      	ldr	r2, [pc, #192]	@ (8001ef4 <HAL_ADC_ConfigChannel+0x29c>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d10a      	bne.n	8001e4c <HAL_ADC_ConfigChannel+0x1f4>
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001e3e:	d105      	bne.n	8001e4c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001e40:	4b2d      	ldr	r3, [pc, #180]	@ (8001ef8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	4a2c      	ldr	r2, [pc, #176]	@ (8001ef8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001e46:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001e4a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a28      	ldr	r2, [pc, #160]	@ (8001ef4 <HAL_ADC_ConfigChannel+0x29c>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d10f      	bne.n	8001e76 <HAL_ADC_ConfigChannel+0x21e>
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2b12      	cmp	r3, #18
 8001e5c:	d10b      	bne.n	8001e76 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001e5e:	4b26      	ldr	r3, [pc, #152]	@ (8001ef8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	4a25      	ldr	r2, [pc, #148]	@ (8001ef8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001e64:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001e68:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001e6a:	4b23      	ldr	r3, [pc, #140]	@ (8001ef8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	4a22      	ldr	r2, [pc, #136]	@ (8001ef8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001e70:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001e74:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a1e      	ldr	r2, [pc, #120]	@ (8001ef4 <HAL_ADC_ConfigChannel+0x29c>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d12b      	bne.n	8001ed8 <HAL_ADC_ConfigChannel+0x280>
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a1a      	ldr	r2, [pc, #104]	@ (8001ef0 <HAL_ADC_ConfigChannel+0x298>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d003      	beq.n	8001e92 <HAL_ADC_ConfigChannel+0x23a>
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2b11      	cmp	r3, #17
 8001e90:	d122      	bne.n	8001ed8 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001e92:	4b19      	ldr	r3, [pc, #100]	@ (8001ef8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	4a18      	ldr	r2, [pc, #96]	@ (8001ef8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001e98:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001e9c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001e9e:	4b16      	ldr	r3, [pc, #88]	@ (8001ef8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	4a15      	ldr	r2, [pc, #84]	@ (8001ef8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001ea4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001ea8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a10      	ldr	r2, [pc, #64]	@ (8001ef0 <HAL_ADC_ConfigChannel+0x298>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d111      	bne.n	8001ed8 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001eb4:	4b11      	ldr	r3, [pc, #68]	@ (8001efc <HAL_ADC_ConfigChannel+0x2a4>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a11      	ldr	r2, [pc, #68]	@ (8001f00 <HAL_ADC_ConfigChannel+0x2a8>)
 8001eba:	fba2 2303 	umull	r2, r3, r2, r3
 8001ebe:	0c9a      	lsrs	r2, r3, #18
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	4413      	add	r3, r2
 8001ec6:	005b      	lsls	r3, r3, #1
 8001ec8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001eca:	e002      	b.n	8001ed2 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d1f9      	bne.n	8001ecc <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3714      	adds	r7, #20
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	10000012 	.word	0x10000012
 8001ef4:	40012000 	.word	0x40012000
 8001ef8:	40012300 	.word	0x40012300
 8001efc:	20000000 	.word	0x20000000
 8001f00:	431bde83 	.word	0x431bde83

08001f04 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001f0c:	4b78      	ldr	r3, [pc, #480]	@ (80020f0 <ADC_Init+0x1ec>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	4a77      	ldr	r2, [pc, #476]	@ (80020f0 <ADC_Init+0x1ec>)
 8001f12:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8001f16:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001f18:	4b75      	ldr	r3, [pc, #468]	@ (80020f0 <ADC_Init+0x1ec>)
 8001f1a:	685a      	ldr	r2, [r3, #4]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	4973      	ldr	r1, [pc, #460]	@ (80020f0 <ADC_Init+0x1ec>)
 8001f22:	4313      	orrs	r3, r2
 8001f24:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	685a      	ldr	r2, [r3, #4]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001f34:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	6859      	ldr	r1, [r3, #4]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	691b      	ldr	r3, [r3, #16]
 8001f40:	021a      	lsls	r2, r3, #8
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	430a      	orrs	r2, r1
 8001f48:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	685a      	ldr	r2, [r3, #4]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001f58:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	6859      	ldr	r1, [r3, #4]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	689a      	ldr	r2, [r3, #8]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	430a      	orrs	r2, r1
 8001f6a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	689a      	ldr	r2, [r3, #8]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f7a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	6899      	ldr	r1, [r3, #8]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	68da      	ldr	r2, [r3, #12]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	430a      	orrs	r2, r1
 8001f8c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f92:	4a58      	ldr	r2, [pc, #352]	@ (80020f4 <ADC_Init+0x1f0>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d022      	beq.n	8001fde <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	689a      	ldr	r2, [r3, #8]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001fa6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6899      	ldr	r1, [r3, #8]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	689a      	ldr	r2, [r3, #8]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001fc8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	6899      	ldr	r1, [r3, #8]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	609a      	str	r2, [r3, #8]
 8001fdc:	e00f      	b.n	8001ffe <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	689a      	ldr	r2, [r3, #8]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001fec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	689a      	ldr	r2, [r3, #8]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001ffc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	689a      	ldr	r2, [r3, #8]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f022 0202 	bic.w	r2, r2, #2
 800200c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	6899      	ldr	r1, [r3, #8]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	005a      	lsls	r2, r3, #1
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	430a      	orrs	r2, r1
 8002020:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d01b      	beq.n	8002064 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	685a      	ldr	r2, [r3, #4]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800203a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	685a      	ldr	r2, [r3, #4]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800204a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6859      	ldr	r1, [r3, #4]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002056:	3b01      	subs	r3, #1
 8002058:	035a      	lsls	r2, r3, #13
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	430a      	orrs	r2, r1
 8002060:	605a      	str	r2, [r3, #4]
 8002062:	e007      	b.n	8002074 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	685a      	ldr	r2, [r3, #4]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002072:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002082:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	69db      	ldr	r3, [r3, #28]
 800208e:	3b01      	subs	r3, #1
 8002090:	051a      	lsls	r2, r3, #20
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	430a      	orrs	r2, r1
 8002098:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	689a      	ldr	r2, [r3, #8]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80020a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	6899      	ldr	r1, [r3, #8]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80020b6:	025a      	lsls	r2, r3, #9
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	430a      	orrs	r2, r1
 80020be:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	689a      	ldr	r2, [r3, #8]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80020ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	6899      	ldr	r1, [r3, #8]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	695b      	ldr	r3, [r3, #20]
 80020da:	029a      	lsls	r2, r3, #10
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	430a      	orrs	r2, r1
 80020e2:	609a      	str	r2, [r3, #8]
}
 80020e4:	bf00      	nop
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr
 80020f0:	40012300 	.word	0x40012300
 80020f4:	0f000001 	.word	0x0f000001

080020f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f003 0307 	and.w	r3, r3, #7
 8002106:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002108:	4b0b      	ldr	r3, [pc, #44]	@ (8002138 <__NVIC_SetPriorityGrouping+0x40>)
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800210e:	68ba      	ldr	r2, [r7, #8]
 8002110:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002114:	4013      	ands	r3, r2
 8002116:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002120:	4b06      	ldr	r3, [pc, #24]	@ (800213c <__NVIC_SetPriorityGrouping+0x44>)
 8002122:	4313      	orrs	r3, r2
 8002124:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002126:	4a04      	ldr	r2, [pc, #16]	@ (8002138 <__NVIC_SetPriorityGrouping+0x40>)
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	60d3      	str	r3, [r2, #12]
}
 800212c:	bf00      	nop
 800212e:	3714      	adds	r7, #20
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr
 8002138:	e000ed00 	.word	0xe000ed00
 800213c:	05fa0000 	.word	0x05fa0000

08002140 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002144:	4b04      	ldr	r3, [pc, #16]	@ (8002158 <__NVIC_GetPriorityGrouping+0x18>)
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	0a1b      	lsrs	r3, r3, #8
 800214a:	f003 0307 	and.w	r3, r3, #7
}
 800214e:	4618      	mov	r0, r3
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	e000ed00 	.word	0xe000ed00

0800215c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	4603      	mov	r3, r0
 8002164:	6039      	str	r1, [r7, #0]
 8002166:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216c:	2b00      	cmp	r3, #0
 800216e:	db0a      	blt.n	8002186 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	b2da      	uxtb	r2, r3
 8002174:	490c      	ldr	r1, [pc, #48]	@ (80021a8 <__NVIC_SetPriority+0x4c>)
 8002176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217a:	0112      	lsls	r2, r2, #4
 800217c:	b2d2      	uxtb	r2, r2
 800217e:	440b      	add	r3, r1
 8002180:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002184:	e00a      	b.n	800219c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	b2da      	uxtb	r2, r3
 800218a:	4908      	ldr	r1, [pc, #32]	@ (80021ac <__NVIC_SetPriority+0x50>)
 800218c:	79fb      	ldrb	r3, [r7, #7]
 800218e:	f003 030f 	and.w	r3, r3, #15
 8002192:	3b04      	subs	r3, #4
 8002194:	0112      	lsls	r2, r2, #4
 8002196:	b2d2      	uxtb	r2, r2
 8002198:	440b      	add	r3, r1
 800219a:	761a      	strb	r2, [r3, #24]
}
 800219c:	bf00      	nop
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr
 80021a8:	e000e100 	.word	0xe000e100
 80021ac:	e000ed00 	.word	0xe000ed00

080021b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b089      	sub	sp, #36	@ 0x24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f003 0307 	and.w	r3, r3, #7
 80021c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	f1c3 0307 	rsb	r3, r3, #7
 80021ca:	2b04      	cmp	r3, #4
 80021cc:	bf28      	it	cs
 80021ce:	2304      	movcs	r3, #4
 80021d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	3304      	adds	r3, #4
 80021d6:	2b06      	cmp	r3, #6
 80021d8:	d902      	bls.n	80021e0 <NVIC_EncodePriority+0x30>
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	3b03      	subs	r3, #3
 80021de:	e000      	b.n	80021e2 <NVIC_EncodePriority+0x32>
 80021e0:	2300      	movs	r3, #0
 80021e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e4:	f04f 32ff 	mov.w	r2, #4294967295
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	43da      	mvns	r2, r3
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	401a      	ands	r2, r3
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021f8:	f04f 31ff 	mov.w	r1, #4294967295
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002202:	43d9      	mvns	r1, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002208:	4313      	orrs	r3, r2
         );
}
 800220a:	4618      	mov	r0, r3
 800220c:	3724      	adds	r7, #36	@ 0x24
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
	...

08002218 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	3b01      	subs	r3, #1
 8002224:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002228:	d301      	bcc.n	800222e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800222a:	2301      	movs	r3, #1
 800222c:	e00f      	b.n	800224e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800222e:	4a0a      	ldr	r2, [pc, #40]	@ (8002258 <SysTick_Config+0x40>)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	3b01      	subs	r3, #1
 8002234:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002236:	210f      	movs	r1, #15
 8002238:	f04f 30ff 	mov.w	r0, #4294967295
 800223c:	f7ff ff8e 	bl	800215c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002240:	4b05      	ldr	r3, [pc, #20]	@ (8002258 <SysTick_Config+0x40>)
 8002242:	2200      	movs	r2, #0
 8002244:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002246:	4b04      	ldr	r3, [pc, #16]	@ (8002258 <SysTick_Config+0x40>)
 8002248:	2207      	movs	r2, #7
 800224a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	e000e010 	.word	0xe000e010

0800225c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f7ff ff47 	bl	80020f8 <__NVIC_SetPriorityGrouping>
}
 800226a:	bf00      	nop
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002272:	b580      	push	{r7, lr}
 8002274:	b086      	sub	sp, #24
 8002276:	af00      	add	r7, sp, #0
 8002278:	4603      	mov	r3, r0
 800227a:	60b9      	str	r1, [r7, #8]
 800227c:	607a      	str	r2, [r7, #4]
 800227e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002280:	2300      	movs	r3, #0
 8002282:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002284:	f7ff ff5c 	bl	8002140 <__NVIC_GetPriorityGrouping>
 8002288:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	68b9      	ldr	r1, [r7, #8]
 800228e:	6978      	ldr	r0, [r7, #20]
 8002290:	f7ff ff8e 	bl	80021b0 <NVIC_EncodePriority>
 8002294:	4602      	mov	r2, r0
 8002296:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800229a:	4611      	mov	r1, r2
 800229c:	4618      	mov	r0, r3
 800229e:	f7ff ff5d 	bl	800215c <__NVIC_SetPriority>
}
 80022a2:	bf00      	nop
 80022a4:	3718      	adds	r7, #24
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}

080022aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022aa:	b580      	push	{r7, lr}
 80022ac:	b082      	sub	sp, #8
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f7ff ffb0 	bl	8002218 <SysTick_Config>
 80022b8:	4603      	mov	r3, r0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
	...

080022c4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80022c8:	f3bf 8f5f 	dmb	sy
}
 80022cc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80022ce:	4b07      	ldr	r3, [pc, #28]	@ (80022ec <HAL_MPU_Disable+0x28>)
 80022d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d2:	4a06      	ldr	r2, [pc, #24]	@ (80022ec <HAL_MPU_Disable+0x28>)
 80022d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022d8:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80022da:	4b05      	ldr	r3, [pc, #20]	@ (80022f0 <HAL_MPU_Disable+0x2c>)
 80022dc:	2200      	movs	r2, #0
 80022de:	605a      	str	r2, [r3, #4]
}
 80022e0:	bf00      	nop
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	e000ed00 	.word	0xe000ed00
 80022f0:	e000ed90 	.word	0xe000ed90

080022f4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80022fc:	4a0b      	ldr	r2, [pc, #44]	@ (800232c <HAL_MPU_Enable+0x38>)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f043 0301 	orr.w	r3, r3, #1
 8002304:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002306:	4b0a      	ldr	r3, [pc, #40]	@ (8002330 <HAL_MPU_Enable+0x3c>)
 8002308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800230a:	4a09      	ldr	r2, [pc, #36]	@ (8002330 <HAL_MPU_Enable+0x3c>)
 800230c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002310:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002312:	f3bf 8f4f 	dsb	sy
}
 8002316:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002318:	f3bf 8f6f 	isb	sy
}
 800231c:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800231e:	bf00      	nop
 8002320:	370c      	adds	r7, #12
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	e000ed90 	.word	0xe000ed90
 8002330:	e000ed00 	.word	0xe000ed00

08002334 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	785a      	ldrb	r2, [r3, #1]
 8002340:	4b1d      	ldr	r3, [pc, #116]	@ (80023b8 <HAL_MPU_ConfigRegion+0x84>)
 8002342:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d029      	beq.n	80023a0 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 800234c:	4a1a      	ldr	r2, [pc, #104]	@ (80023b8 <HAL_MPU_ConfigRegion+0x84>)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	7b1b      	ldrb	r3, [r3, #12]
 8002358:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	7adb      	ldrb	r3, [r3, #11]
 800235e:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002360:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	7a9b      	ldrb	r3, [r3, #10]
 8002366:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002368:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	7b5b      	ldrb	r3, [r3, #13]
 800236e:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002370:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	7b9b      	ldrb	r3, [r3, #14]
 8002376:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002378:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	7bdb      	ldrb	r3, [r3, #15]
 800237e:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002380:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	7a5b      	ldrb	r3, [r3, #9]
 8002386:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002388:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	7a1b      	ldrb	r3, [r3, #8]
 800238e:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002390:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	7812      	ldrb	r2, [r2, #0]
 8002396:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002398:	4a07      	ldr	r2, [pc, #28]	@ (80023b8 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800239a:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800239c:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800239e:	e005      	b.n	80023ac <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80023a0:	4b05      	ldr	r3, [pc, #20]	@ (80023b8 <HAL_MPU_ConfigRegion+0x84>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80023a6:	4b04      	ldr	r3, [pc, #16]	@ (80023b8 <HAL_MPU_ConfigRegion+0x84>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	611a      	str	r2, [r3, #16]
}
 80023ac:	bf00      	nop
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr
 80023b8:	e000ed90 	.word	0xe000ed90

080023bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023bc:	b480      	push	{r7}
 80023be:	b089      	sub	sp, #36	@ 0x24
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80023c6:	2300      	movs	r3, #0
 80023c8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80023ca:	2300      	movs	r3, #0
 80023cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80023ce:	2300      	movs	r3, #0
 80023d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80023d2:	2300      	movs	r3, #0
 80023d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80023d6:	2300      	movs	r3, #0
 80023d8:	61fb      	str	r3, [r7, #28]
 80023da:	e175      	b.n	80026c8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80023dc:	2201      	movs	r2, #1
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	697a      	ldr	r2, [r7, #20]
 80023ec:	4013      	ands	r3, r2
 80023ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023f0:	693a      	ldr	r2, [r7, #16]
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	f040 8164 	bne.w	80026c2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f003 0303 	and.w	r3, r3, #3
 8002402:	2b01      	cmp	r3, #1
 8002404:	d005      	beq.n	8002412 <HAL_GPIO_Init+0x56>
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f003 0303 	and.w	r3, r3, #3
 800240e:	2b02      	cmp	r3, #2
 8002410:	d130      	bne.n	8002474 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	2203      	movs	r2, #3
 800241e:	fa02 f303 	lsl.w	r3, r2, r3
 8002422:	43db      	mvns	r3, r3
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	4013      	ands	r3, r2
 8002428:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	68da      	ldr	r2, [r3, #12]
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	fa02 f303 	lsl.w	r3, r2, r3
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	4313      	orrs	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002448:	2201      	movs	r2, #1
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	43db      	mvns	r3, r3
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	4013      	ands	r3, r2
 8002456:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	091b      	lsrs	r3, r3, #4
 800245e:	f003 0201 	and.w	r2, r3, #1
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	4313      	orrs	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f003 0303 	and.w	r3, r3, #3
 800247c:	2b03      	cmp	r3, #3
 800247e:	d017      	beq.n	80024b0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	2203      	movs	r2, #3
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	43db      	mvns	r3, r3
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	4013      	ands	r3, r2
 8002496:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	689a      	ldr	r2, [r3, #8]
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f003 0303 	and.w	r3, r3, #3
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d123      	bne.n	8002504 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	08da      	lsrs	r2, r3, #3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	3208      	adds	r2, #8
 80024c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	f003 0307 	and.w	r3, r3, #7
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	220f      	movs	r2, #15
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	43db      	mvns	r3, r3
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	4013      	ands	r3, r2
 80024de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	691a      	ldr	r2, [r3, #16]
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	f003 0307 	and.w	r3, r3, #7
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	08da      	lsrs	r2, r3, #3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	3208      	adds	r2, #8
 80024fe:	69b9      	ldr	r1, [r7, #24]
 8002500:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	2203      	movs	r2, #3
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	43db      	mvns	r3, r3
 8002516:	69ba      	ldr	r2, [r7, #24]
 8002518:	4013      	ands	r3, r2
 800251a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f003 0203 	and.w	r2, r3, #3
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	4313      	orrs	r3, r2
 8002530:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002540:	2b00      	cmp	r3, #0
 8002542:	f000 80be 	beq.w	80026c2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002546:	4b66      	ldr	r3, [pc, #408]	@ (80026e0 <HAL_GPIO_Init+0x324>)
 8002548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800254a:	4a65      	ldr	r2, [pc, #404]	@ (80026e0 <HAL_GPIO_Init+0x324>)
 800254c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002550:	6453      	str	r3, [r2, #68]	@ 0x44
 8002552:	4b63      	ldr	r3, [pc, #396]	@ (80026e0 <HAL_GPIO_Init+0x324>)
 8002554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002556:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800255a:	60fb      	str	r3, [r7, #12]
 800255c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800255e:	4a61      	ldr	r2, [pc, #388]	@ (80026e4 <HAL_GPIO_Init+0x328>)
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	089b      	lsrs	r3, r3, #2
 8002564:	3302      	adds	r3, #2
 8002566:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800256a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	f003 0303 	and.w	r3, r3, #3
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	220f      	movs	r2, #15
 8002576:	fa02 f303 	lsl.w	r3, r2, r3
 800257a:	43db      	mvns	r3, r3
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	4013      	ands	r3, r2
 8002580:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a58      	ldr	r2, [pc, #352]	@ (80026e8 <HAL_GPIO_Init+0x32c>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d037      	beq.n	80025fa <HAL_GPIO_Init+0x23e>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a57      	ldr	r2, [pc, #348]	@ (80026ec <HAL_GPIO_Init+0x330>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d031      	beq.n	80025f6 <HAL_GPIO_Init+0x23a>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a56      	ldr	r2, [pc, #344]	@ (80026f0 <HAL_GPIO_Init+0x334>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d02b      	beq.n	80025f2 <HAL_GPIO_Init+0x236>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a55      	ldr	r2, [pc, #340]	@ (80026f4 <HAL_GPIO_Init+0x338>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d025      	beq.n	80025ee <HAL_GPIO_Init+0x232>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a54      	ldr	r2, [pc, #336]	@ (80026f8 <HAL_GPIO_Init+0x33c>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d01f      	beq.n	80025ea <HAL_GPIO_Init+0x22e>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a53      	ldr	r2, [pc, #332]	@ (80026fc <HAL_GPIO_Init+0x340>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d019      	beq.n	80025e6 <HAL_GPIO_Init+0x22a>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a52      	ldr	r2, [pc, #328]	@ (8002700 <HAL_GPIO_Init+0x344>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d013      	beq.n	80025e2 <HAL_GPIO_Init+0x226>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a51      	ldr	r2, [pc, #324]	@ (8002704 <HAL_GPIO_Init+0x348>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d00d      	beq.n	80025de <HAL_GPIO_Init+0x222>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a50      	ldr	r2, [pc, #320]	@ (8002708 <HAL_GPIO_Init+0x34c>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d007      	beq.n	80025da <HAL_GPIO_Init+0x21e>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a4f      	ldr	r2, [pc, #316]	@ (800270c <HAL_GPIO_Init+0x350>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d101      	bne.n	80025d6 <HAL_GPIO_Init+0x21a>
 80025d2:	2309      	movs	r3, #9
 80025d4:	e012      	b.n	80025fc <HAL_GPIO_Init+0x240>
 80025d6:	230a      	movs	r3, #10
 80025d8:	e010      	b.n	80025fc <HAL_GPIO_Init+0x240>
 80025da:	2308      	movs	r3, #8
 80025dc:	e00e      	b.n	80025fc <HAL_GPIO_Init+0x240>
 80025de:	2307      	movs	r3, #7
 80025e0:	e00c      	b.n	80025fc <HAL_GPIO_Init+0x240>
 80025e2:	2306      	movs	r3, #6
 80025e4:	e00a      	b.n	80025fc <HAL_GPIO_Init+0x240>
 80025e6:	2305      	movs	r3, #5
 80025e8:	e008      	b.n	80025fc <HAL_GPIO_Init+0x240>
 80025ea:	2304      	movs	r3, #4
 80025ec:	e006      	b.n	80025fc <HAL_GPIO_Init+0x240>
 80025ee:	2303      	movs	r3, #3
 80025f0:	e004      	b.n	80025fc <HAL_GPIO_Init+0x240>
 80025f2:	2302      	movs	r3, #2
 80025f4:	e002      	b.n	80025fc <HAL_GPIO_Init+0x240>
 80025f6:	2301      	movs	r3, #1
 80025f8:	e000      	b.n	80025fc <HAL_GPIO_Init+0x240>
 80025fa:	2300      	movs	r3, #0
 80025fc:	69fa      	ldr	r2, [r7, #28]
 80025fe:	f002 0203 	and.w	r2, r2, #3
 8002602:	0092      	lsls	r2, r2, #2
 8002604:	4093      	lsls	r3, r2
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	4313      	orrs	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800260c:	4935      	ldr	r1, [pc, #212]	@ (80026e4 <HAL_GPIO_Init+0x328>)
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	089b      	lsrs	r3, r3, #2
 8002612:	3302      	adds	r3, #2
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800261a:	4b3d      	ldr	r3, [pc, #244]	@ (8002710 <HAL_GPIO_Init+0x354>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	43db      	mvns	r3, r3
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	4013      	ands	r3, r2
 8002628:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d003      	beq.n	800263e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	4313      	orrs	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800263e:	4a34      	ldr	r2, [pc, #208]	@ (8002710 <HAL_GPIO_Init+0x354>)
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002644:	4b32      	ldr	r3, [pc, #200]	@ (8002710 <HAL_GPIO_Init+0x354>)
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	43db      	mvns	r3, r3
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	4013      	ands	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d003      	beq.n	8002668 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	4313      	orrs	r3, r2
 8002666:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002668:	4a29      	ldr	r2, [pc, #164]	@ (8002710 <HAL_GPIO_Init+0x354>)
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800266e:	4b28      	ldr	r3, [pc, #160]	@ (8002710 <HAL_GPIO_Init+0x354>)
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	43db      	mvns	r3, r3
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	4013      	ands	r3, r2
 800267c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d003      	beq.n	8002692 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800268a:	69ba      	ldr	r2, [r7, #24]
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	4313      	orrs	r3, r2
 8002690:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002692:	4a1f      	ldr	r2, [pc, #124]	@ (8002710 <HAL_GPIO_Init+0x354>)
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002698:	4b1d      	ldr	r3, [pc, #116]	@ (8002710 <HAL_GPIO_Init+0x354>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	43db      	mvns	r3, r3
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	4013      	ands	r3, r2
 80026a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d003      	beq.n	80026bc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026bc:	4a14      	ldr	r2, [pc, #80]	@ (8002710 <HAL_GPIO_Init+0x354>)
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	3301      	adds	r3, #1
 80026c6:	61fb      	str	r3, [r7, #28]
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	2b0f      	cmp	r3, #15
 80026cc:	f67f ae86 	bls.w	80023dc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80026d0:	bf00      	nop
 80026d2:	bf00      	nop
 80026d4:	3724      	adds	r7, #36	@ 0x24
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	40023800 	.word	0x40023800
 80026e4:	40013800 	.word	0x40013800
 80026e8:	40020000 	.word	0x40020000
 80026ec:	40020400 	.word	0x40020400
 80026f0:	40020800 	.word	0x40020800
 80026f4:	40020c00 	.word	0x40020c00
 80026f8:	40021000 	.word	0x40021000
 80026fc:	40021400 	.word	0x40021400
 8002700:	40021800 	.word	0x40021800
 8002704:	40021c00 	.word	0x40021c00
 8002708:	40022000 	.word	0x40022000
 800270c:	40022400 	.word	0x40022400
 8002710:	40013c00 	.word	0x40013c00

08002714 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b086      	sub	sp, #24
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800271c:	2300      	movs	r3, #0
 800271e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d101      	bne.n	800272a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e291      	b.n	8002c4e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	2b00      	cmp	r3, #0
 8002734:	f000 8087 	beq.w	8002846 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002738:	4b96      	ldr	r3, [pc, #600]	@ (8002994 <HAL_RCC_OscConfig+0x280>)
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f003 030c 	and.w	r3, r3, #12
 8002740:	2b04      	cmp	r3, #4
 8002742:	d00c      	beq.n	800275e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002744:	4b93      	ldr	r3, [pc, #588]	@ (8002994 <HAL_RCC_OscConfig+0x280>)
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f003 030c 	and.w	r3, r3, #12
 800274c:	2b08      	cmp	r3, #8
 800274e:	d112      	bne.n	8002776 <HAL_RCC_OscConfig+0x62>
 8002750:	4b90      	ldr	r3, [pc, #576]	@ (8002994 <HAL_RCC_OscConfig+0x280>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002758:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800275c:	d10b      	bne.n	8002776 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800275e:	4b8d      	ldr	r3, [pc, #564]	@ (8002994 <HAL_RCC_OscConfig+0x280>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d06c      	beq.n	8002844 <HAL_RCC_OscConfig+0x130>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d168      	bne.n	8002844 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e26b      	b.n	8002c4e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800277e:	d106      	bne.n	800278e <HAL_RCC_OscConfig+0x7a>
 8002780:	4b84      	ldr	r3, [pc, #528]	@ (8002994 <HAL_RCC_OscConfig+0x280>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a83      	ldr	r2, [pc, #524]	@ (8002994 <HAL_RCC_OscConfig+0x280>)
 8002786:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800278a:	6013      	str	r3, [r2, #0]
 800278c:	e02e      	b.n	80027ec <HAL_RCC_OscConfig+0xd8>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d10c      	bne.n	80027b0 <HAL_RCC_OscConfig+0x9c>
 8002796:	4b7f      	ldr	r3, [pc, #508]	@ (8002994 <HAL_RCC_OscConfig+0x280>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a7e      	ldr	r2, [pc, #504]	@ (8002994 <HAL_RCC_OscConfig+0x280>)
 800279c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027a0:	6013      	str	r3, [r2, #0]
 80027a2:	4b7c      	ldr	r3, [pc, #496]	@ (8002994 <HAL_RCC_OscConfig+0x280>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a7b      	ldr	r2, [pc, #492]	@ (8002994 <HAL_RCC_OscConfig+0x280>)
 80027a8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027ac:	6013      	str	r3, [r2, #0]
 80027ae:	e01d      	b.n	80027ec <HAL_RCC_OscConfig+0xd8>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80027b8:	d10c      	bne.n	80027d4 <HAL_RCC_OscConfig+0xc0>
 80027ba:	4b76      	ldr	r3, [pc, #472]	@ (8002994 <HAL_RCC_OscConfig+0x280>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a75      	ldr	r2, [pc, #468]	@ (8002994 <HAL_RCC_OscConfig+0x280>)
 80027c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027c4:	6013      	str	r3, [r2, #0]
 80027c6:	4b73      	ldr	r3, [pc, #460]	@ (8002994 <HAL_RCC_OscConfig+0x280>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a72      	ldr	r2, [pc, #456]	@ (8002994 <HAL_RCC_OscConfig+0x280>)
 80027cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027d0:	6013      	str	r3, [r2, #0]
 80027d2:	e00b      	b.n	80027ec <HAL_RCC_OscConfig+0xd8>
 80027d4:	4b6f      	ldr	r3, [pc, #444]	@ (8002994 <HAL_RCC_OscConfig+0x280>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a6e      	ldr	r2, [pc, #440]	@ (8002994 <HAL_RCC_OscConfig+0x280>)
 80027da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027de:	6013      	str	r3, [r2, #0]
 80027e0:	4b6c      	ldr	r3, [pc, #432]	@ (8002994 <HAL_RCC_OscConfig+0x280>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a6b      	ldr	r2, [pc, #428]	@ (8002994 <HAL_RCC_OscConfig+0x280>)
 80027e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d013      	beq.n	800281c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f4:	f7ff f87a 	bl	80018ec <HAL_GetTick>
 80027f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027fa:	e008      	b.n	800280e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027fc:	f7ff f876 	bl	80018ec <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b64      	cmp	r3, #100	@ 0x64
 8002808:	d901      	bls.n	800280e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e21f      	b.n	8002c4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800280e:	4b61      	ldr	r3, [pc, #388]	@ (8002994 <HAL_RCC_OscConfig+0x280>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d0f0      	beq.n	80027fc <HAL_RCC_OscConfig+0xe8>
 800281a:	e014      	b.n	8002846 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800281c:	f7ff f866 	bl	80018ec <HAL_GetTick>
 8002820:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002822:	e008      	b.n	8002836 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002824:	f7ff f862 	bl	80018ec <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b64      	cmp	r3, #100	@ 0x64
 8002830:	d901      	bls.n	8002836 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e20b      	b.n	8002c4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002836:	4b57      	ldr	r3, [pc, #348]	@ (8002994 <HAL_RCC_OscConfig+0x280>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d1f0      	bne.n	8002824 <HAL_RCC_OscConfig+0x110>
 8002842:	e000      	b.n	8002846 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002844:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d069      	beq.n	8002926 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002852:	4b50      	ldr	r3, [pc, #320]	@ (8002994 <HAL_RCC_OscConfig+0x280>)
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f003 030c 	and.w	r3, r3, #12
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00b      	beq.n	8002876 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800285e:	4b4d      	ldr	r3, [pc, #308]	@ (8002994 <HAL_RCC_OscConfig+0x280>)
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f003 030c 	and.w	r3, r3, #12
 8002866:	2b08      	cmp	r3, #8
 8002868:	d11c      	bne.n	80028a4 <HAL_RCC_OscConfig+0x190>
 800286a:	4b4a      	ldr	r3, [pc, #296]	@ (8002994 <HAL_RCC_OscConfig+0x280>)
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d116      	bne.n	80028a4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002876:	4b47      	ldr	r3, [pc, #284]	@ (8002994 <HAL_RCC_OscConfig+0x280>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	2b00      	cmp	r3, #0
 8002880:	d005      	beq.n	800288e <HAL_RCC_OscConfig+0x17a>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	2b01      	cmp	r3, #1
 8002888:	d001      	beq.n	800288e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e1df      	b.n	8002c4e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800288e:	4b41      	ldr	r3, [pc, #260]	@ (8002994 <HAL_RCC_OscConfig+0x280>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	00db      	lsls	r3, r3, #3
 800289c:	493d      	ldr	r1, [pc, #244]	@ (8002994 <HAL_RCC_OscConfig+0x280>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028a2:	e040      	b.n	8002926 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d023      	beq.n	80028f4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028ac:	4b39      	ldr	r3, [pc, #228]	@ (8002994 <HAL_RCC_OscConfig+0x280>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a38      	ldr	r2, [pc, #224]	@ (8002994 <HAL_RCC_OscConfig+0x280>)
 80028b2:	f043 0301 	orr.w	r3, r3, #1
 80028b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b8:	f7ff f818 	bl	80018ec <HAL_GetTick>
 80028bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028be:	e008      	b.n	80028d2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028c0:	f7ff f814 	bl	80018ec <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e1bd      	b.n	8002c4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028d2:	4b30      	ldr	r3, [pc, #192]	@ (8002994 <HAL_RCC_OscConfig+0x280>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0302 	and.w	r3, r3, #2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d0f0      	beq.n	80028c0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028de:	4b2d      	ldr	r3, [pc, #180]	@ (8002994 <HAL_RCC_OscConfig+0x280>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	4929      	ldr	r1, [pc, #164]	@ (8002994 <HAL_RCC_OscConfig+0x280>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	600b      	str	r3, [r1, #0]
 80028f2:	e018      	b.n	8002926 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028f4:	4b27      	ldr	r3, [pc, #156]	@ (8002994 <HAL_RCC_OscConfig+0x280>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a26      	ldr	r2, [pc, #152]	@ (8002994 <HAL_RCC_OscConfig+0x280>)
 80028fa:	f023 0301 	bic.w	r3, r3, #1
 80028fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002900:	f7fe fff4 	bl	80018ec <HAL_GetTick>
 8002904:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002906:	e008      	b.n	800291a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002908:	f7fe fff0 	bl	80018ec <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b02      	cmp	r3, #2
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e199      	b.n	8002c4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800291a:	4b1e      	ldr	r3, [pc, #120]	@ (8002994 <HAL_RCC_OscConfig+0x280>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	2b00      	cmp	r3, #0
 8002924:	d1f0      	bne.n	8002908 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0308 	and.w	r3, r3, #8
 800292e:	2b00      	cmp	r3, #0
 8002930:	d038      	beq.n	80029a4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	695b      	ldr	r3, [r3, #20]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d019      	beq.n	800296e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800293a:	4b16      	ldr	r3, [pc, #88]	@ (8002994 <HAL_RCC_OscConfig+0x280>)
 800293c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800293e:	4a15      	ldr	r2, [pc, #84]	@ (8002994 <HAL_RCC_OscConfig+0x280>)
 8002940:	f043 0301 	orr.w	r3, r3, #1
 8002944:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002946:	f7fe ffd1 	bl	80018ec <HAL_GetTick>
 800294a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800294c:	e008      	b.n	8002960 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800294e:	f7fe ffcd 	bl	80018ec <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	2b02      	cmp	r3, #2
 800295a:	d901      	bls.n	8002960 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e176      	b.n	8002c4e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002960:	4b0c      	ldr	r3, [pc, #48]	@ (8002994 <HAL_RCC_OscConfig+0x280>)
 8002962:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	2b00      	cmp	r3, #0
 800296a:	d0f0      	beq.n	800294e <HAL_RCC_OscConfig+0x23a>
 800296c:	e01a      	b.n	80029a4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800296e:	4b09      	ldr	r3, [pc, #36]	@ (8002994 <HAL_RCC_OscConfig+0x280>)
 8002970:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002972:	4a08      	ldr	r2, [pc, #32]	@ (8002994 <HAL_RCC_OscConfig+0x280>)
 8002974:	f023 0301 	bic.w	r3, r3, #1
 8002978:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800297a:	f7fe ffb7 	bl	80018ec <HAL_GetTick>
 800297e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002980:	e00a      	b.n	8002998 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002982:	f7fe ffb3 	bl	80018ec <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	2b02      	cmp	r3, #2
 800298e:	d903      	bls.n	8002998 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e15c      	b.n	8002c4e <HAL_RCC_OscConfig+0x53a>
 8002994:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002998:	4b91      	ldr	r3, [pc, #580]	@ (8002be0 <HAL_RCC_OscConfig+0x4cc>)
 800299a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800299c:	f003 0302 	and.w	r3, r3, #2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d1ee      	bne.n	8002982 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0304 	and.w	r3, r3, #4
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	f000 80a4 	beq.w	8002afa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029b2:	4b8b      	ldr	r3, [pc, #556]	@ (8002be0 <HAL_RCC_OscConfig+0x4cc>)
 80029b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d10d      	bne.n	80029da <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80029be:	4b88      	ldr	r3, [pc, #544]	@ (8002be0 <HAL_RCC_OscConfig+0x4cc>)
 80029c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c2:	4a87      	ldr	r2, [pc, #540]	@ (8002be0 <HAL_RCC_OscConfig+0x4cc>)
 80029c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80029ca:	4b85      	ldr	r3, [pc, #532]	@ (8002be0 <HAL_RCC_OscConfig+0x4cc>)
 80029cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029d2:	60bb      	str	r3, [r7, #8]
 80029d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029d6:	2301      	movs	r3, #1
 80029d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029da:	4b82      	ldr	r3, [pc, #520]	@ (8002be4 <HAL_RCC_OscConfig+0x4d0>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d118      	bne.n	8002a18 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80029e6:	4b7f      	ldr	r3, [pc, #508]	@ (8002be4 <HAL_RCC_OscConfig+0x4d0>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a7e      	ldr	r2, [pc, #504]	@ (8002be4 <HAL_RCC_OscConfig+0x4d0>)
 80029ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029f2:	f7fe ff7b 	bl	80018ec <HAL_GetTick>
 80029f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029f8:	e008      	b.n	8002a0c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029fa:	f7fe ff77 	bl	80018ec <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	2b64      	cmp	r3, #100	@ 0x64
 8002a06:	d901      	bls.n	8002a0c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e120      	b.n	8002c4e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a0c:	4b75      	ldr	r3, [pc, #468]	@ (8002be4 <HAL_RCC_OscConfig+0x4d0>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d0f0      	beq.n	80029fa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d106      	bne.n	8002a2e <HAL_RCC_OscConfig+0x31a>
 8002a20:	4b6f      	ldr	r3, [pc, #444]	@ (8002be0 <HAL_RCC_OscConfig+0x4cc>)
 8002a22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a24:	4a6e      	ldr	r2, [pc, #440]	@ (8002be0 <HAL_RCC_OscConfig+0x4cc>)
 8002a26:	f043 0301 	orr.w	r3, r3, #1
 8002a2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a2c:	e02d      	b.n	8002a8a <HAL_RCC_OscConfig+0x376>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d10c      	bne.n	8002a50 <HAL_RCC_OscConfig+0x33c>
 8002a36:	4b6a      	ldr	r3, [pc, #424]	@ (8002be0 <HAL_RCC_OscConfig+0x4cc>)
 8002a38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a3a:	4a69      	ldr	r2, [pc, #420]	@ (8002be0 <HAL_RCC_OscConfig+0x4cc>)
 8002a3c:	f023 0301 	bic.w	r3, r3, #1
 8002a40:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a42:	4b67      	ldr	r3, [pc, #412]	@ (8002be0 <HAL_RCC_OscConfig+0x4cc>)
 8002a44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a46:	4a66      	ldr	r2, [pc, #408]	@ (8002be0 <HAL_RCC_OscConfig+0x4cc>)
 8002a48:	f023 0304 	bic.w	r3, r3, #4
 8002a4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a4e:	e01c      	b.n	8002a8a <HAL_RCC_OscConfig+0x376>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	2b05      	cmp	r3, #5
 8002a56:	d10c      	bne.n	8002a72 <HAL_RCC_OscConfig+0x35e>
 8002a58:	4b61      	ldr	r3, [pc, #388]	@ (8002be0 <HAL_RCC_OscConfig+0x4cc>)
 8002a5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a5c:	4a60      	ldr	r2, [pc, #384]	@ (8002be0 <HAL_RCC_OscConfig+0x4cc>)
 8002a5e:	f043 0304 	orr.w	r3, r3, #4
 8002a62:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a64:	4b5e      	ldr	r3, [pc, #376]	@ (8002be0 <HAL_RCC_OscConfig+0x4cc>)
 8002a66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a68:	4a5d      	ldr	r2, [pc, #372]	@ (8002be0 <HAL_RCC_OscConfig+0x4cc>)
 8002a6a:	f043 0301 	orr.w	r3, r3, #1
 8002a6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a70:	e00b      	b.n	8002a8a <HAL_RCC_OscConfig+0x376>
 8002a72:	4b5b      	ldr	r3, [pc, #364]	@ (8002be0 <HAL_RCC_OscConfig+0x4cc>)
 8002a74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a76:	4a5a      	ldr	r2, [pc, #360]	@ (8002be0 <HAL_RCC_OscConfig+0x4cc>)
 8002a78:	f023 0301 	bic.w	r3, r3, #1
 8002a7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a7e:	4b58      	ldr	r3, [pc, #352]	@ (8002be0 <HAL_RCC_OscConfig+0x4cc>)
 8002a80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a82:	4a57      	ldr	r2, [pc, #348]	@ (8002be0 <HAL_RCC_OscConfig+0x4cc>)
 8002a84:	f023 0304 	bic.w	r3, r3, #4
 8002a88:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d015      	beq.n	8002abe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a92:	f7fe ff2b 	bl	80018ec <HAL_GetTick>
 8002a96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a98:	e00a      	b.n	8002ab0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a9a:	f7fe ff27 	bl	80018ec <HAL_GetTick>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d901      	bls.n	8002ab0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e0ce      	b.n	8002c4e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ab0:	4b4b      	ldr	r3, [pc, #300]	@ (8002be0 <HAL_RCC_OscConfig+0x4cc>)
 8002ab2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ab4:	f003 0302 	and.w	r3, r3, #2
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d0ee      	beq.n	8002a9a <HAL_RCC_OscConfig+0x386>
 8002abc:	e014      	b.n	8002ae8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002abe:	f7fe ff15 	bl	80018ec <HAL_GetTick>
 8002ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ac4:	e00a      	b.n	8002adc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ac6:	f7fe ff11 	bl	80018ec <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d901      	bls.n	8002adc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e0b8      	b.n	8002c4e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002adc:	4b40      	ldr	r3, [pc, #256]	@ (8002be0 <HAL_RCC_OscConfig+0x4cc>)
 8002ade:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ae0:	f003 0302 	and.w	r3, r3, #2
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d1ee      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ae8:	7dfb      	ldrb	r3, [r7, #23]
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d105      	bne.n	8002afa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aee:	4b3c      	ldr	r3, [pc, #240]	@ (8002be0 <HAL_RCC_OscConfig+0x4cc>)
 8002af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af2:	4a3b      	ldr	r2, [pc, #236]	@ (8002be0 <HAL_RCC_OscConfig+0x4cc>)
 8002af4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002af8:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	f000 80a4 	beq.w	8002c4c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b04:	4b36      	ldr	r3, [pc, #216]	@ (8002be0 <HAL_RCC_OscConfig+0x4cc>)
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f003 030c 	and.w	r3, r3, #12
 8002b0c:	2b08      	cmp	r3, #8
 8002b0e:	d06b      	beq.n	8002be8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	699b      	ldr	r3, [r3, #24]
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d149      	bne.n	8002bac <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b18:	4b31      	ldr	r3, [pc, #196]	@ (8002be0 <HAL_RCC_OscConfig+0x4cc>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a30      	ldr	r2, [pc, #192]	@ (8002be0 <HAL_RCC_OscConfig+0x4cc>)
 8002b1e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b24:	f7fe fee2 	bl	80018ec <HAL_GetTick>
 8002b28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b2a:	e008      	b.n	8002b3e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b2c:	f7fe fede 	bl	80018ec <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e087      	b.n	8002c4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b3e:	4b28      	ldr	r3, [pc, #160]	@ (8002be0 <HAL_RCC_OscConfig+0x4cc>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1f0      	bne.n	8002b2c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	69da      	ldr	r2, [r3, #28]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	431a      	orrs	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b58:	019b      	lsls	r3, r3, #6
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b60:	085b      	lsrs	r3, r3, #1
 8002b62:	3b01      	subs	r3, #1
 8002b64:	041b      	lsls	r3, r3, #16
 8002b66:	431a      	orrs	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b6c:	061b      	lsls	r3, r3, #24
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	4a1b      	ldr	r2, [pc, #108]	@ (8002be0 <HAL_RCC_OscConfig+0x4cc>)
 8002b72:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002b76:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b78:	4b19      	ldr	r3, [pc, #100]	@ (8002be0 <HAL_RCC_OscConfig+0x4cc>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a18      	ldr	r2, [pc, #96]	@ (8002be0 <HAL_RCC_OscConfig+0x4cc>)
 8002b7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b84:	f7fe feb2 	bl	80018ec <HAL_GetTick>
 8002b88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b8a:	e008      	b.n	8002b9e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b8c:	f7fe feae 	bl	80018ec <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d901      	bls.n	8002b9e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e057      	b.n	8002c4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b9e:	4b10      	ldr	r3, [pc, #64]	@ (8002be0 <HAL_RCC_OscConfig+0x4cc>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d0f0      	beq.n	8002b8c <HAL_RCC_OscConfig+0x478>
 8002baa:	e04f      	b.n	8002c4c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bac:	4b0c      	ldr	r3, [pc, #48]	@ (8002be0 <HAL_RCC_OscConfig+0x4cc>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a0b      	ldr	r2, [pc, #44]	@ (8002be0 <HAL_RCC_OscConfig+0x4cc>)
 8002bb2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002bb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb8:	f7fe fe98 	bl	80018ec <HAL_GetTick>
 8002bbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bbe:	e008      	b.n	8002bd2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bc0:	f7fe fe94 	bl	80018ec <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e03d      	b.n	8002c4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bd2:	4b03      	ldr	r3, [pc, #12]	@ (8002be0 <HAL_RCC_OscConfig+0x4cc>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1f0      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x4ac>
 8002bde:	e035      	b.n	8002c4c <HAL_RCC_OscConfig+0x538>
 8002be0:	40023800 	.word	0x40023800
 8002be4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002be8:	4b1b      	ldr	r3, [pc, #108]	@ (8002c58 <HAL_RCC_OscConfig+0x544>)
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	699b      	ldr	r3, [r3, #24]
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d028      	beq.n	8002c48 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d121      	bne.n	8002c48 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d11a      	bne.n	8002c48 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002c18:	4013      	ands	r3, r2
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002c1e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d111      	bne.n	8002c48 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c2e:	085b      	lsrs	r3, r3, #1
 8002c30:	3b01      	subs	r3, #1
 8002c32:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d107      	bne.n	8002c48 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c42:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d001      	beq.n	8002c4c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e000      	b.n	8002c4e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3718      	adds	r7, #24
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	40023800 	.word	0x40023800

08002c5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002c66:	2300      	movs	r3, #0
 8002c68:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d101      	bne.n	8002c74 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e0d0      	b.n	8002e16 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c74:	4b6a      	ldr	r3, [pc, #424]	@ (8002e20 <HAL_RCC_ClockConfig+0x1c4>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 030f 	and.w	r3, r3, #15
 8002c7c:	683a      	ldr	r2, [r7, #0]
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d910      	bls.n	8002ca4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c82:	4b67      	ldr	r3, [pc, #412]	@ (8002e20 <HAL_RCC_ClockConfig+0x1c4>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f023 020f 	bic.w	r2, r3, #15
 8002c8a:	4965      	ldr	r1, [pc, #404]	@ (8002e20 <HAL_RCC_ClockConfig+0x1c4>)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c92:	4b63      	ldr	r3, [pc, #396]	@ (8002e20 <HAL_RCC_ClockConfig+0x1c4>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 030f 	and.w	r3, r3, #15
 8002c9a:	683a      	ldr	r2, [r7, #0]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d001      	beq.n	8002ca4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e0b8      	b.n	8002e16 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0302 	and.w	r3, r3, #2
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d020      	beq.n	8002cf2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0304 	and.w	r3, r3, #4
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d005      	beq.n	8002cc8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cbc:	4b59      	ldr	r3, [pc, #356]	@ (8002e24 <HAL_RCC_ClockConfig+0x1c8>)
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	4a58      	ldr	r2, [pc, #352]	@ (8002e24 <HAL_RCC_ClockConfig+0x1c8>)
 8002cc2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002cc6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0308 	and.w	r3, r3, #8
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d005      	beq.n	8002ce0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cd4:	4b53      	ldr	r3, [pc, #332]	@ (8002e24 <HAL_RCC_ClockConfig+0x1c8>)
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	4a52      	ldr	r2, [pc, #328]	@ (8002e24 <HAL_RCC_ClockConfig+0x1c8>)
 8002cda:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002cde:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ce0:	4b50      	ldr	r3, [pc, #320]	@ (8002e24 <HAL_RCC_ClockConfig+0x1c8>)
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	494d      	ldr	r1, [pc, #308]	@ (8002e24 <HAL_RCC_ClockConfig+0x1c8>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0301 	and.w	r3, r3, #1
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d040      	beq.n	8002d80 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d107      	bne.n	8002d16 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d06:	4b47      	ldr	r3, [pc, #284]	@ (8002e24 <HAL_RCC_ClockConfig+0x1c8>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d115      	bne.n	8002d3e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e07f      	b.n	8002e16 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d107      	bne.n	8002d2e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d1e:	4b41      	ldr	r3, [pc, #260]	@ (8002e24 <HAL_RCC_ClockConfig+0x1c8>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d109      	bne.n	8002d3e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e073      	b.n	8002e16 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d2e:	4b3d      	ldr	r3, [pc, #244]	@ (8002e24 <HAL_RCC_ClockConfig+0x1c8>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d101      	bne.n	8002d3e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e06b      	b.n	8002e16 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d3e:	4b39      	ldr	r3, [pc, #228]	@ (8002e24 <HAL_RCC_ClockConfig+0x1c8>)
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f023 0203 	bic.w	r2, r3, #3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	4936      	ldr	r1, [pc, #216]	@ (8002e24 <HAL_RCC_ClockConfig+0x1c8>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d50:	f7fe fdcc 	bl	80018ec <HAL_GetTick>
 8002d54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d56:	e00a      	b.n	8002d6e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d58:	f7fe fdc8 	bl	80018ec <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e053      	b.n	8002e16 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d6e:	4b2d      	ldr	r3, [pc, #180]	@ (8002e24 <HAL_RCC_ClockConfig+0x1c8>)
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f003 020c 	and.w	r2, r3, #12
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d1eb      	bne.n	8002d58 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d80:	4b27      	ldr	r3, [pc, #156]	@ (8002e20 <HAL_RCC_ClockConfig+0x1c4>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 030f 	and.w	r3, r3, #15
 8002d88:	683a      	ldr	r2, [r7, #0]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d210      	bcs.n	8002db0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d8e:	4b24      	ldr	r3, [pc, #144]	@ (8002e20 <HAL_RCC_ClockConfig+0x1c4>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f023 020f 	bic.w	r2, r3, #15
 8002d96:	4922      	ldr	r1, [pc, #136]	@ (8002e20 <HAL_RCC_ClockConfig+0x1c4>)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d9e:	4b20      	ldr	r3, [pc, #128]	@ (8002e20 <HAL_RCC_ClockConfig+0x1c4>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 030f 	and.w	r3, r3, #15
 8002da6:	683a      	ldr	r2, [r7, #0]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d001      	beq.n	8002db0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e032      	b.n	8002e16 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0304 	and.w	r3, r3, #4
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d008      	beq.n	8002dce <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dbc:	4b19      	ldr	r3, [pc, #100]	@ (8002e24 <HAL_RCC_ClockConfig+0x1c8>)
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	4916      	ldr	r1, [pc, #88]	@ (8002e24 <HAL_RCC_ClockConfig+0x1c8>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0308 	and.w	r3, r3, #8
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d009      	beq.n	8002dee <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002dda:	4b12      	ldr	r3, [pc, #72]	@ (8002e24 <HAL_RCC_ClockConfig+0x1c8>)
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	00db      	lsls	r3, r3, #3
 8002de8:	490e      	ldr	r1, [pc, #56]	@ (8002e24 <HAL_RCC_ClockConfig+0x1c8>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002dee:	f000 f821 	bl	8002e34 <HAL_RCC_GetSysClockFreq>
 8002df2:	4602      	mov	r2, r0
 8002df4:	4b0b      	ldr	r3, [pc, #44]	@ (8002e24 <HAL_RCC_ClockConfig+0x1c8>)
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	091b      	lsrs	r3, r3, #4
 8002dfa:	f003 030f 	and.w	r3, r3, #15
 8002dfe:	490a      	ldr	r1, [pc, #40]	@ (8002e28 <HAL_RCC_ClockConfig+0x1cc>)
 8002e00:	5ccb      	ldrb	r3, [r1, r3]
 8002e02:	fa22 f303 	lsr.w	r3, r2, r3
 8002e06:	4a09      	ldr	r2, [pc, #36]	@ (8002e2c <HAL_RCC_ClockConfig+0x1d0>)
 8002e08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e0a:	4b09      	ldr	r3, [pc, #36]	@ (8002e30 <HAL_RCC_ClockConfig+0x1d4>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7fe fd28 	bl	8001864 <HAL_InitTick>

  return HAL_OK;
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3710      	adds	r7, #16
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	40023c00 	.word	0x40023c00
 8002e24:	40023800 	.word	0x40023800
 8002e28:	0800afcc 	.word	0x0800afcc
 8002e2c:	20000000 	.word	0x20000000
 8002e30:	20000004 	.word	0x20000004

08002e34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e38:	b090      	sub	sp, #64	@ 0x40
 8002e3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e40:	2300      	movs	r3, #0
 8002e42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e44:	2300      	movs	r3, #0
 8002e46:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e4c:	4b59      	ldr	r3, [pc, #356]	@ (8002fb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f003 030c 	and.w	r3, r3, #12
 8002e54:	2b08      	cmp	r3, #8
 8002e56:	d00d      	beq.n	8002e74 <HAL_RCC_GetSysClockFreq+0x40>
 8002e58:	2b08      	cmp	r3, #8
 8002e5a:	f200 80a1 	bhi.w	8002fa0 <HAL_RCC_GetSysClockFreq+0x16c>
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d002      	beq.n	8002e68 <HAL_RCC_GetSysClockFreq+0x34>
 8002e62:	2b04      	cmp	r3, #4
 8002e64:	d003      	beq.n	8002e6e <HAL_RCC_GetSysClockFreq+0x3a>
 8002e66:	e09b      	b.n	8002fa0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e68:	4b53      	ldr	r3, [pc, #332]	@ (8002fb8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002e6a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002e6c:	e09b      	b.n	8002fa6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e6e:	4b53      	ldr	r3, [pc, #332]	@ (8002fbc <HAL_RCC_GetSysClockFreq+0x188>)
 8002e70:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002e72:	e098      	b.n	8002fa6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e74:	4b4f      	ldr	r3, [pc, #316]	@ (8002fb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e7c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002e7e:	4b4d      	ldr	r3, [pc, #308]	@ (8002fb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d028      	beq.n	8002edc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e8a:	4b4a      	ldr	r3, [pc, #296]	@ (8002fb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	099b      	lsrs	r3, r3, #6
 8002e90:	2200      	movs	r2, #0
 8002e92:	623b      	str	r3, [r7, #32]
 8002e94:	627a      	str	r2, [r7, #36]	@ 0x24
 8002e96:	6a3b      	ldr	r3, [r7, #32]
 8002e98:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002e9c:	2100      	movs	r1, #0
 8002e9e:	4b47      	ldr	r3, [pc, #284]	@ (8002fbc <HAL_RCC_GetSysClockFreq+0x188>)
 8002ea0:	fb03 f201 	mul.w	r2, r3, r1
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	fb00 f303 	mul.w	r3, r0, r3
 8002eaa:	4413      	add	r3, r2
 8002eac:	4a43      	ldr	r2, [pc, #268]	@ (8002fbc <HAL_RCC_GetSysClockFreq+0x188>)
 8002eae:	fba0 1202 	umull	r1, r2, r0, r2
 8002eb2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002eb4:	460a      	mov	r2, r1
 8002eb6:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002eb8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002eba:	4413      	add	r3, r2
 8002ebc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ebe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	61bb      	str	r3, [r7, #24]
 8002ec4:	61fa      	str	r2, [r7, #28]
 8002ec6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002eca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002ece:	f7fd fefb 	bl	8000cc8 <__aeabi_uldivmod>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002eda:	e053      	b.n	8002f84 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002edc:	4b35      	ldr	r3, [pc, #212]	@ (8002fb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	099b      	lsrs	r3, r3, #6
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	613b      	str	r3, [r7, #16]
 8002ee6:	617a      	str	r2, [r7, #20]
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002eee:	f04f 0b00 	mov.w	fp, #0
 8002ef2:	4652      	mov	r2, sl
 8002ef4:	465b      	mov	r3, fp
 8002ef6:	f04f 0000 	mov.w	r0, #0
 8002efa:	f04f 0100 	mov.w	r1, #0
 8002efe:	0159      	lsls	r1, r3, #5
 8002f00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f04:	0150      	lsls	r0, r2, #5
 8002f06:	4602      	mov	r2, r0
 8002f08:	460b      	mov	r3, r1
 8002f0a:	ebb2 080a 	subs.w	r8, r2, sl
 8002f0e:	eb63 090b 	sbc.w	r9, r3, fp
 8002f12:	f04f 0200 	mov.w	r2, #0
 8002f16:	f04f 0300 	mov.w	r3, #0
 8002f1a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002f1e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002f22:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002f26:	ebb2 0408 	subs.w	r4, r2, r8
 8002f2a:	eb63 0509 	sbc.w	r5, r3, r9
 8002f2e:	f04f 0200 	mov.w	r2, #0
 8002f32:	f04f 0300 	mov.w	r3, #0
 8002f36:	00eb      	lsls	r3, r5, #3
 8002f38:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f3c:	00e2      	lsls	r2, r4, #3
 8002f3e:	4614      	mov	r4, r2
 8002f40:	461d      	mov	r5, r3
 8002f42:	eb14 030a 	adds.w	r3, r4, sl
 8002f46:	603b      	str	r3, [r7, #0]
 8002f48:	eb45 030b 	adc.w	r3, r5, fp
 8002f4c:	607b      	str	r3, [r7, #4]
 8002f4e:	f04f 0200 	mov.w	r2, #0
 8002f52:	f04f 0300 	mov.w	r3, #0
 8002f56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f5a:	4629      	mov	r1, r5
 8002f5c:	028b      	lsls	r3, r1, #10
 8002f5e:	4621      	mov	r1, r4
 8002f60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f64:	4621      	mov	r1, r4
 8002f66:	028a      	lsls	r2, r1, #10
 8002f68:	4610      	mov	r0, r2
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f6e:	2200      	movs	r2, #0
 8002f70:	60bb      	str	r3, [r7, #8]
 8002f72:	60fa      	str	r2, [r7, #12]
 8002f74:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f78:	f7fd fea6 	bl	8000cc8 <__aeabi_uldivmod>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	460b      	mov	r3, r1
 8002f80:	4613      	mov	r3, r2
 8002f82:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002f84:	4b0b      	ldr	r3, [pc, #44]	@ (8002fb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	0c1b      	lsrs	r3, r3, #16
 8002f8a:	f003 0303 	and.w	r3, r3, #3
 8002f8e:	3301      	adds	r3, #1
 8002f90:	005b      	lsls	r3, r3, #1
 8002f92:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002f94:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f9c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002f9e:	e002      	b.n	8002fa6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002fa0:	4b05      	ldr	r3, [pc, #20]	@ (8002fb8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002fa2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002fa4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3740      	adds	r7, #64	@ 0x40
 8002fac:	46bd      	mov	sp, r7
 8002fae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fb2:	bf00      	nop
 8002fb4:	40023800 	.word	0x40023800
 8002fb8:	00f42400 	.word	0x00f42400
 8002fbc:	017d7840 	.word	0x017d7840

08002fc0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fc4:	4b03      	ldr	r3, [pc, #12]	@ (8002fd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	20000000 	.word	0x20000000

08002fd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002fdc:	f7ff fff0 	bl	8002fc0 <HAL_RCC_GetHCLKFreq>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	4b05      	ldr	r3, [pc, #20]	@ (8002ff8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	0a9b      	lsrs	r3, r3, #10
 8002fe8:	f003 0307 	and.w	r3, r3, #7
 8002fec:	4903      	ldr	r1, [pc, #12]	@ (8002ffc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fee:	5ccb      	ldrb	r3, [r1, r3]
 8002ff0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	40023800 	.word	0x40023800
 8002ffc:	0800afdc 	.word	0x0800afdc

08003000 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003004:	f7ff ffdc 	bl	8002fc0 <HAL_RCC_GetHCLKFreq>
 8003008:	4602      	mov	r2, r0
 800300a:	4b05      	ldr	r3, [pc, #20]	@ (8003020 <HAL_RCC_GetPCLK2Freq+0x20>)
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	0b5b      	lsrs	r3, r3, #13
 8003010:	f003 0307 	and.w	r3, r3, #7
 8003014:	4903      	ldr	r1, [pc, #12]	@ (8003024 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003016:	5ccb      	ldrb	r3, [r1, r3]
 8003018:	fa22 f303 	lsr.w	r3, r2, r3
}
 800301c:	4618      	mov	r0, r3
 800301e:	bd80      	pop	{r7, pc}
 8003020:	40023800 	.word	0x40023800
 8003024:	0800afdc 	.word	0x0800afdc

08003028 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b088      	sub	sp, #32
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003030:	2300      	movs	r3, #0
 8003032:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003034:	2300      	movs	r3, #0
 8003036:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003038:	2300      	movs	r3, #0
 800303a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800303c:	2300      	movs	r3, #0
 800303e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003040:	2300      	movs	r3, #0
 8003042:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0301 	and.w	r3, r3, #1
 800304c:	2b00      	cmp	r3, #0
 800304e:	d012      	beq.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003050:	4b69      	ldr	r3, [pc, #420]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	4a68      	ldr	r2, [pc, #416]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003056:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800305a:	6093      	str	r3, [r2, #8]
 800305c:	4b66      	ldr	r3, [pc, #408]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800305e:	689a      	ldr	r2, [r3, #8]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003064:	4964      	ldr	r1, [pc, #400]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003066:	4313      	orrs	r3, r2
 8003068:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800306e:	2b00      	cmp	r3, #0
 8003070:	d101      	bne.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003072:	2301      	movs	r3, #1
 8003074:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d017      	beq.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003082:	4b5d      	ldr	r3, [pc, #372]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003084:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003088:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003090:	4959      	ldr	r1, [pc, #356]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003092:	4313      	orrs	r3, r2
 8003094:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800309c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80030a0:	d101      	bne.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80030a2:	2301      	movs	r3, #1
 80030a4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d101      	bne.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80030ae:	2301      	movs	r3, #1
 80030b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d017      	beq.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80030be:	4b4e      	ldr	r3, [pc, #312]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80030c4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030cc:	494a      	ldr	r1, [pc, #296]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80030dc:	d101      	bne.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80030de:	2301      	movs	r3, #1
 80030e0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d101      	bne.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80030ea:	2301      	movs	r3, #1
 80030ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80030fa:	2301      	movs	r3, #1
 80030fc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0320 	and.w	r3, r3, #32
 8003106:	2b00      	cmp	r3, #0
 8003108:	f000 808b 	beq.w	8003222 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800310c:	4b3a      	ldr	r3, [pc, #232]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800310e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003110:	4a39      	ldr	r2, [pc, #228]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003112:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003116:	6413      	str	r3, [r2, #64]	@ 0x40
 8003118:	4b37      	ldr	r3, [pc, #220]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800311a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800311c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003120:	60bb      	str	r3, [r7, #8]
 8003122:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003124:	4b35      	ldr	r3, [pc, #212]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a34      	ldr	r2, [pc, #208]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800312a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800312e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003130:	f7fe fbdc 	bl	80018ec <HAL_GetTick>
 8003134:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003136:	e008      	b.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003138:	f7fe fbd8 	bl	80018ec <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b64      	cmp	r3, #100	@ 0x64
 8003144:	d901      	bls.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e357      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800314a:	4b2c      	ldr	r3, [pc, #176]	@ (80031fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003152:	2b00      	cmp	r3, #0
 8003154:	d0f0      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003156:	4b28      	ldr	r3, [pc, #160]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003158:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800315a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800315e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d035      	beq.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800316a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800316e:	693a      	ldr	r2, [r7, #16]
 8003170:	429a      	cmp	r2, r3
 8003172:	d02e      	beq.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003174:	4b20      	ldr	r3, [pc, #128]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003176:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003178:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800317c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800317e:	4b1e      	ldr	r3, [pc, #120]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003180:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003182:	4a1d      	ldr	r2, [pc, #116]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003184:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003188:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800318a:	4b1b      	ldr	r3, [pc, #108]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800318c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800318e:	4a1a      	ldr	r2, [pc, #104]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003190:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003194:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003196:	4a18      	ldr	r2, [pc, #96]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800319c:	4b16      	ldr	r3, [pc, #88]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800319e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031a0:	f003 0301 	and.w	r3, r3, #1
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d114      	bne.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a8:	f7fe fba0 	bl	80018ec <HAL_GetTick>
 80031ac:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ae:	e00a      	b.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031b0:	f7fe fb9c 	bl	80018ec <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031be:	4293      	cmp	r3, r2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e319      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031c6:	4b0c      	ldr	r3, [pc, #48]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d0ee      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80031de:	d111      	bne.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80031e0:	4b05      	ldr	r3, [pc, #20]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80031ec:	4b04      	ldr	r3, [pc, #16]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80031ee:	400b      	ands	r3, r1
 80031f0:	4901      	ldr	r1, [pc, #4]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	608b      	str	r3, [r1, #8]
 80031f6:	e00b      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80031f8:	40023800 	.word	0x40023800
 80031fc:	40007000 	.word	0x40007000
 8003200:	0ffffcff 	.word	0x0ffffcff
 8003204:	4baa      	ldr	r3, [pc, #680]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	4aa9      	ldr	r2, [pc, #676]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800320a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800320e:	6093      	str	r3, [r2, #8]
 8003210:	4ba7      	ldr	r3, [pc, #668]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003212:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003218:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800321c:	49a4      	ldr	r1, [pc, #656]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800321e:	4313      	orrs	r3, r2
 8003220:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0310 	and.w	r3, r3, #16
 800322a:	2b00      	cmp	r3, #0
 800322c:	d010      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800322e:	4ba0      	ldr	r3, [pc, #640]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003230:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003234:	4a9e      	ldr	r2, [pc, #632]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003236:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800323a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800323e:	4b9c      	ldr	r3, [pc, #624]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003240:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003248:	4999      	ldr	r1, [pc, #612]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800324a:	4313      	orrs	r3, r2
 800324c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003258:	2b00      	cmp	r3, #0
 800325a:	d00a      	beq.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800325c:	4b94      	ldr	r3, [pc, #592]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800325e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003262:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800326a:	4991      	ldr	r1, [pc, #580]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800326c:	4313      	orrs	r3, r2
 800326e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00a      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800327e:	4b8c      	ldr	r3, [pc, #560]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003280:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003284:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800328c:	4988      	ldr	r1, [pc, #544]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800328e:	4313      	orrs	r3, r2
 8003290:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d00a      	beq.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80032a0:	4b83      	ldr	r3, [pc, #524]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032a6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80032ae:	4980      	ldr	r1, [pc, #512]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d00a      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80032c2:	4b7b      	ldr	r3, [pc, #492]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032c8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032d0:	4977      	ldr	r1, [pc, #476]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032d2:	4313      	orrs	r3, r2
 80032d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d00a      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032e4:	4b72      	ldr	r3, [pc, #456]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032ea:	f023 0203 	bic.w	r2, r3, #3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032f2:	496f      	ldr	r1, [pc, #444]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032f4:	4313      	orrs	r3, r2
 80032f6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00a      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003306:	4b6a      	ldr	r3, [pc, #424]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003308:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800330c:	f023 020c 	bic.w	r2, r3, #12
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003314:	4966      	ldr	r1, [pc, #408]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003316:	4313      	orrs	r3, r2
 8003318:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003324:	2b00      	cmp	r3, #0
 8003326:	d00a      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003328:	4b61      	ldr	r3, [pc, #388]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800332a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800332e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003336:	495e      	ldr	r1, [pc, #376]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003338:	4313      	orrs	r3, r2
 800333a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003346:	2b00      	cmp	r3, #0
 8003348:	d00a      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800334a:	4b59      	ldr	r3, [pc, #356]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800334c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003350:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003358:	4955      	ldr	r1, [pc, #340]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800335a:	4313      	orrs	r3, r2
 800335c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003368:	2b00      	cmp	r3, #0
 800336a:	d00a      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800336c:	4b50      	ldr	r3, [pc, #320]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800336e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003372:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800337a:	494d      	ldr	r1, [pc, #308]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800337c:	4313      	orrs	r3, r2
 800337e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800338a:	2b00      	cmp	r3, #0
 800338c:	d00a      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800338e:	4b48      	ldr	r3, [pc, #288]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003390:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003394:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800339c:	4944      	ldr	r1, [pc, #272]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d00a      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80033b0:	4b3f      	ldr	r3, [pc, #252]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033b6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033be:	493c      	ldr	r1, [pc, #240]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00a      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80033d2:	4b37      	ldr	r3, [pc, #220]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033d8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033e0:	4933      	ldr	r1, [pc, #204]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00a      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80033f4:	4b2e      	ldr	r3, [pc, #184]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033fa:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003402:	492b      	ldr	r1, [pc, #172]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003404:	4313      	orrs	r3, r2
 8003406:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d011      	beq.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003416:	4b26      	ldr	r3, [pc, #152]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003418:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800341c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003424:	4922      	ldr	r1, [pc, #136]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003426:	4313      	orrs	r3, r2
 8003428:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003430:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003434:	d101      	bne.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003436:	2301      	movs	r3, #1
 8003438:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0308 	and.w	r3, r3, #8
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003446:	2301      	movs	r3, #1
 8003448:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00a      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003456:	4b16      	ldr	r3, [pc, #88]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003458:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800345c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003464:	4912      	ldr	r1, [pc, #72]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003466:	4313      	orrs	r3, r2
 8003468:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d00b      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003478:	4b0d      	ldr	r3, [pc, #52]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800347a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800347e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003488:	4909      	ldr	r1, [pc, #36]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800348a:	4313      	orrs	r3, r2
 800348c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	2b01      	cmp	r3, #1
 8003494:	d006      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	f000 80d9 	beq.w	8003656 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80034a4:	4b02      	ldr	r3, [pc, #8]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a01      	ldr	r2, [pc, #4]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034aa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80034ae:	e001      	b.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80034b0:	40023800 	.word	0x40023800
 80034b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034b6:	f7fe fa19 	bl	80018ec <HAL_GetTick>
 80034ba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80034bc:	e008      	b.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80034be:	f7fe fa15 	bl	80018ec <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	2b64      	cmp	r3, #100	@ 0x64
 80034ca:	d901      	bls.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e194      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80034d0:	4b6c      	ldr	r3, [pc, #432]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d1f0      	bne.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0301 	and.w	r3, r3, #1
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d021      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x504>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d11d      	bne.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80034f0:	4b64      	ldr	r3, [pc, #400]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034f6:	0c1b      	lsrs	r3, r3, #16
 80034f8:	f003 0303 	and.w	r3, r3, #3
 80034fc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80034fe:	4b61      	ldr	r3, [pc, #388]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003500:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003504:	0e1b      	lsrs	r3, r3, #24
 8003506:	f003 030f 	and.w	r3, r3, #15
 800350a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	019a      	lsls	r2, r3, #6
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	041b      	lsls	r3, r3, #16
 8003516:	431a      	orrs	r2, r3
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	061b      	lsls	r3, r3, #24
 800351c:	431a      	orrs	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	071b      	lsls	r3, r3, #28
 8003524:	4957      	ldr	r1, [pc, #348]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003526:	4313      	orrs	r3, r2
 8003528:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d004      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800353c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003540:	d00a      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800354a:	2b00      	cmp	r3, #0
 800354c:	d02e      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003552:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003556:	d129      	bne.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003558:	4b4a      	ldr	r3, [pc, #296]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800355a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800355e:	0c1b      	lsrs	r3, r3, #16
 8003560:	f003 0303 	and.w	r3, r3, #3
 8003564:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003566:	4b47      	ldr	r3, [pc, #284]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003568:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800356c:	0f1b      	lsrs	r3, r3, #28
 800356e:	f003 0307 	and.w	r3, r3, #7
 8003572:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	019a      	lsls	r2, r3, #6
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	041b      	lsls	r3, r3, #16
 800357e:	431a      	orrs	r2, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	061b      	lsls	r3, r3, #24
 8003586:	431a      	orrs	r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	071b      	lsls	r3, r3, #28
 800358c:	493d      	ldr	r1, [pc, #244]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800358e:	4313      	orrs	r3, r2
 8003590:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003594:	4b3b      	ldr	r3, [pc, #236]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003596:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800359a:	f023 021f 	bic.w	r2, r3, #31
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a2:	3b01      	subs	r3, #1
 80035a4:	4937      	ldr	r1, [pc, #220]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d01d      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80035b8:	4b32      	ldr	r3, [pc, #200]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035be:	0e1b      	lsrs	r3, r3, #24
 80035c0:	f003 030f 	and.w	r3, r3, #15
 80035c4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80035c6:	4b2f      	ldr	r3, [pc, #188]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035cc:	0f1b      	lsrs	r3, r3, #28
 80035ce:	f003 0307 	and.w	r3, r3, #7
 80035d2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	019a      	lsls	r2, r3, #6
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	041b      	lsls	r3, r3, #16
 80035e0:	431a      	orrs	r2, r3
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	061b      	lsls	r3, r3, #24
 80035e6:	431a      	orrs	r2, r3
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	071b      	lsls	r3, r3, #28
 80035ec:	4925      	ldr	r1, [pc, #148]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035ee:	4313      	orrs	r3, r2
 80035f0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d011      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	019a      	lsls	r2, r3, #6
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	041b      	lsls	r3, r3, #16
 800360c:	431a      	orrs	r2, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	061b      	lsls	r3, r3, #24
 8003614:	431a      	orrs	r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	071b      	lsls	r3, r3, #28
 800361c:	4919      	ldr	r1, [pc, #100]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800361e:	4313      	orrs	r3, r2
 8003620:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003624:	4b17      	ldr	r3, [pc, #92]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a16      	ldr	r2, [pc, #88]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800362a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800362e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003630:	f7fe f95c 	bl	80018ec <HAL_GetTick>
 8003634:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003636:	e008      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003638:	f7fe f958 	bl	80018ec <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	2b64      	cmp	r3, #100	@ 0x64
 8003644:	d901      	bls.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e0d7      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800364a:	4b0e      	ldr	r3, [pc, #56]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d0f0      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	2b01      	cmp	r3, #1
 800365a:	f040 80cd 	bne.w	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800365e:	4b09      	ldr	r3, [pc, #36]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a08      	ldr	r2, [pc, #32]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003664:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003668:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800366a:	f7fe f93f 	bl	80018ec <HAL_GetTick>
 800366e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003670:	e00a      	b.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003672:	f7fe f93b 	bl	80018ec <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	2b64      	cmp	r3, #100	@ 0x64
 800367e:	d903      	bls.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e0ba      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003684:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003688:	4b5e      	ldr	r3, [pc, #376]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003690:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003694:	d0ed      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d003      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x682>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d009      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d02e      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d12a      	bne.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80036be:	4b51      	ldr	r3, [pc, #324]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80036c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036c4:	0c1b      	lsrs	r3, r3, #16
 80036c6:	f003 0303 	and.w	r3, r3, #3
 80036ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80036cc:	4b4d      	ldr	r3, [pc, #308]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80036ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036d2:	0f1b      	lsrs	r3, r3, #28
 80036d4:	f003 0307 	and.w	r3, r3, #7
 80036d8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	695b      	ldr	r3, [r3, #20]
 80036de:	019a      	lsls	r2, r3, #6
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	041b      	lsls	r3, r3, #16
 80036e4:	431a      	orrs	r2, r3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	061b      	lsls	r3, r3, #24
 80036ec:	431a      	orrs	r2, r3
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	071b      	lsls	r3, r3, #28
 80036f2:	4944      	ldr	r1, [pc, #272]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80036fa:	4b42      	ldr	r3, [pc, #264]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80036fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003700:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003708:	3b01      	subs	r3, #1
 800370a:	021b      	lsls	r3, r3, #8
 800370c:	493d      	ldr	r1, [pc, #244]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800370e:	4313      	orrs	r3, r2
 8003710:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d022      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003724:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003728:	d11d      	bne.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800372a:	4b36      	ldr	r3, [pc, #216]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800372c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003730:	0e1b      	lsrs	r3, r3, #24
 8003732:	f003 030f 	and.w	r3, r3, #15
 8003736:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003738:	4b32      	ldr	r3, [pc, #200]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800373a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800373e:	0f1b      	lsrs	r3, r3, #28
 8003740:	f003 0307 	and.w	r3, r3, #7
 8003744:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	019a      	lsls	r2, r3, #6
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a1b      	ldr	r3, [r3, #32]
 8003750:	041b      	lsls	r3, r3, #16
 8003752:	431a      	orrs	r2, r3
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	061b      	lsls	r3, r3, #24
 8003758:	431a      	orrs	r2, r3
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	071b      	lsls	r3, r3, #28
 800375e:	4929      	ldr	r1, [pc, #164]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003760:	4313      	orrs	r3, r2
 8003762:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0308 	and.w	r3, r3, #8
 800376e:	2b00      	cmp	r3, #0
 8003770:	d028      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003772:	4b24      	ldr	r3, [pc, #144]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003774:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003778:	0e1b      	lsrs	r3, r3, #24
 800377a:	f003 030f 	and.w	r3, r3, #15
 800377e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003780:	4b20      	ldr	r3, [pc, #128]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003782:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003786:	0c1b      	lsrs	r3, r3, #16
 8003788:	f003 0303 	and.w	r3, r3, #3
 800378c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	695b      	ldr	r3, [r3, #20]
 8003792:	019a      	lsls	r2, r3, #6
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	041b      	lsls	r3, r3, #16
 8003798:	431a      	orrs	r2, r3
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	061b      	lsls	r3, r3, #24
 800379e:	431a      	orrs	r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	69db      	ldr	r3, [r3, #28]
 80037a4:	071b      	lsls	r3, r3, #28
 80037a6:	4917      	ldr	r1, [pc, #92]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037a8:	4313      	orrs	r3, r2
 80037aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80037ae:	4b15      	ldr	r3, [pc, #84]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80037b4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037bc:	4911      	ldr	r1, [pc, #68]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037be:	4313      	orrs	r3, r2
 80037c0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80037c4:	4b0f      	ldr	r3, [pc, #60]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a0e      	ldr	r2, [pc, #56]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037d0:	f7fe f88c 	bl	80018ec <HAL_GetTick>
 80037d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80037d6:	e008      	b.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80037d8:	f7fe f888 	bl	80018ec <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	2b64      	cmp	r3, #100	@ 0x64
 80037e4:	d901      	bls.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e007      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80037ea:	4b06      	ldr	r3, [pc, #24]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80037f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80037f6:	d1ef      	bne.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3720      	adds	r7, #32
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	40023800 	.word	0x40023800

08003808 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d101      	bne.n	800381a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e040      	b.n	800389c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800381e:	2b00      	cmp	r3, #0
 8003820:	d106      	bne.n	8003830 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f7fd fe86 	bl	800153c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2224      	movs	r2, #36	@ 0x24
 8003834:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f022 0201 	bic.w	r2, r2, #1
 8003844:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 f8b0 	bl	80039ac <UART_SetConfig>
 800384c:	4603      	mov	r3, r0
 800384e:	2b01      	cmp	r3, #1
 8003850:	d101      	bne.n	8003856 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e022      	b.n	800389c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800385a:	2b00      	cmp	r3, #0
 800385c:	d002      	beq.n	8003864 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 fb08 	bl	8003e74 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	685a      	ldr	r2, [r3, #4]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003872:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	689a      	ldr	r2, [r3, #8]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003882:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f042 0201 	orr.w	r2, r2, #1
 8003892:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f000 fb8f 	bl	8003fb8 <UART_CheckIdleState>
 800389a:	4603      	mov	r3, r0
}
 800389c:	4618      	mov	r0, r3
 800389e:	3708      	adds	r7, #8
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b08a      	sub	sp, #40	@ 0x28
 80038a8:	af02      	add	r7, sp, #8
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	603b      	str	r3, [r7, #0]
 80038b0:	4613      	mov	r3, r2
 80038b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80038b8:	2b20      	cmp	r3, #32
 80038ba:	d171      	bne.n	80039a0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d002      	beq.n	80038c8 <HAL_UART_Transmit+0x24>
 80038c2:	88fb      	ldrh	r3, [r7, #6]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d101      	bne.n	80038cc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e06a      	b.n	80039a2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2221      	movs	r2, #33	@ 0x21
 80038d8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038da:	f7fe f807 	bl	80018ec <HAL_GetTick>
 80038de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	88fa      	ldrh	r2, [r7, #6]
 80038e4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	88fa      	ldrh	r2, [r7, #6]
 80038ec:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038f8:	d108      	bne.n	800390c <HAL_UART_Transmit+0x68>
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d104      	bne.n	800390c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003902:	2300      	movs	r3, #0
 8003904:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	61bb      	str	r3, [r7, #24]
 800390a:	e003      	b.n	8003914 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003910:	2300      	movs	r3, #0
 8003912:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003914:	e02c      	b.n	8003970 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	9300      	str	r3, [sp, #0]
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	2200      	movs	r2, #0
 800391e:	2180      	movs	r1, #128	@ 0x80
 8003920:	68f8      	ldr	r0, [r7, #12]
 8003922:	f000 fb80 	bl	8004026 <UART_WaitOnFlagUntilTimeout>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d001      	beq.n	8003930 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e038      	b.n	80039a2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d10b      	bne.n	800394e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	881b      	ldrh	r3, [r3, #0]
 800393a:	461a      	mov	r2, r3
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003944:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	3302      	adds	r3, #2
 800394a:	61bb      	str	r3, [r7, #24]
 800394c:	e007      	b.n	800395e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	781a      	ldrb	r2, [r3, #0]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	3301      	adds	r3, #1
 800395c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003964:	b29b      	uxth	r3, r3
 8003966:	3b01      	subs	r3, #1
 8003968:	b29a      	uxth	r2, r3
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003976:	b29b      	uxth	r3, r3
 8003978:	2b00      	cmp	r3, #0
 800397a:	d1cc      	bne.n	8003916 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	9300      	str	r3, [sp, #0]
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	2200      	movs	r2, #0
 8003984:	2140      	movs	r1, #64	@ 0x40
 8003986:	68f8      	ldr	r0, [r7, #12]
 8003988:	f000 fb4d 	bl	8004026 <UART_WaitOnFlagUntilTimeout>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d001      	beq.n	8003996 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e005      	b.n	80039a2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2220      	movs	r2, #32
 800399a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800399c:	2300      	movs	r3, #0
 800399e:	e000      	b.n	80039a2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80039a0:	2302      	movs	r3, #2
  }
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3720      	adds	r7, #32
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
	...

080039ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b088      	sub	sp, #32
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80039b4:	2300      	movs	r3, #0
 80039b6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	689a      	ldr	r2, [r3, #8]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	691b      	ldr	r3, [r3, #16]
 80039c0:	431a      	orrs	r2, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	695b      	ldr	r3, [r3, #20]
 80039c6:	431a      	orrs	r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	69db      	ldr	r3, [r3, #28]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	4ba6      	ldr	r3, [pc, #664]	@ (8003c70 <UART_SetConfig+0x2c4>)
 80039d8:	4013      	ands	r3, r2
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	6812      	ldr	r2, [r2, #0]
 80039de:	6979      	ldr	r1, [r7, #20]
 80039e0:	430b      	orrs	r3, r1
 80039e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	68da      	ldr	r2, [r3, #12]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	430a      	orrs	r2, r1
 80039f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	699b      	ldr	r3, [r3, #24]
 80039fe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a1b      	ldr	r3, [r3, #32]
 8003a04:	697a      	ldr	r2, [r7, #20]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	697a      	ldr	r2, [r7, #20]
 8003a1a:	430a      	orrs	r2, r1
 8003a1c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a94      	ldr	r2, [pc, #592]	@ (8003c74 <UART_SetConfig+0x2c8>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d120      	bne.n	8003a6a <UART_SetConfig+0xbe>
 8003a28:	4b93      	ldr	r3, [pc, #588]	@ (8003c78 <UART_SetConfig+0x2cc>)
 8003a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a2e:	f003 0303 	and.w	r3, r3, #3
 8003a32:	2b03      	cmp	r3, #3
 8003a34:	d816      	bhi.n	8003a64 <UART_SetConfig+0xb8>
 8003a36:	a201      	add	r2, pc, #4	@ (adr r2, 8003a3c <UART_SetConfig+0x90>)
 8003a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a3c:	08003a4d 	.word	0x08003a4d
 8003a40:	08003a59 	.word	0x08003a59
 8003a44:	08003a53 	.word	0x08003a53
 8003a48:	08003a5f 	.word	0x08003a5f
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	77fb      	strb	r3, [r7, #31]
 8003a50:	e150      	b.n	8003cf4 <UART_SetConfig+0x348>
 8003a52:	2302      	movs	r3, #2
 8003a54:	77fb      	strb	r3, [r7, #31]
 8003a56:	e14d      	b.n	8003cf4 <UART_SetConfig+0x348>
 8003a58:	2304      	movs	r3, #4
 8003a5a:	77fb      	strb	r3, [r7, #31]
 8003a5c:	e14a      	b.n	8003cf4 <UART_SetConfig+0x348>
 8003a5e:	2308      	movs	r3, #8
 8003a60:	77fb      	strb	r3, [r7, #31]
 8003a62:	e147      	b.n	8003cf4 <UART_SetConfig+0x348>
 8003a64:	2310      	movs	r3, #16
 8003a66:	77fb      	strb	r3, [r7, #31]
 8003a68:	e144      	b.n	8003cf4 <UART_SetConfig+0x348>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a83      	ldr	r2, [pc, #524]	@ (8003c7c <UART_SetConfig+0x2d0>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d132      	bne.n	8003ada <UART_SetConfig+0x12e>
 8003a74:	4b80      	ldr	r3, [pc, #512]	@ (8003c78 <UART_SetConfig+0x2cc>)
 8003a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a7a:	f003 030c 	and.w	r3, r3, #12
 8003a7e:	2b0c      	cmp	r3, #12
 8003a80:	d828      	bhi.n	8003ad4 <UART_SetConfig+0x128>
 8003a82:	a201      	add	r2, pc, #4	@ (adr r2, 8003a88 <UART_SetConfig+0xdc>)
 8003a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a88:	08003abd 	.word	0x08003abd
 8003a8c:	08003ad5 	.word	0x08003ad5
 8003a90:	08003ad5 	.word	0x08003ad5
 8003a94:	08003ad5 	.word	0x08003ad5
 8003a98:	08003ac9 	.word	0x08003ac9
 8003a9c:	08003ad5 	.word	0x08003ad5
 8003aa0:	08003ad5 	.word	0x08003ad5
 8003aa4:	08003ad5 	.word	0x08003ad5
 8003aa8:	08003ac3 	.word	0x08003ac3
 8003aac:	08003ad5 	.word	0x08003ad5
 8003ab0:	08003ad5 	.word	0x08003ad5
 8003ab4:	08003ad5 	.word	0x08003ad5
 8003ab8:	08003acf 	.word	0x08003acf
 8003abc:	2300      	movs	r3, #0
 8003abe:	77fb      	strb	r3, [r7, #31]
 8003ac0:	e118      	b.n	8003cf4 <UART_SetConfig+0x348>
 8003ac2:	2302      	movs	r3, #2
 8003ac4:	77fb      	strb	r3, [r7, #31]
 8003ac6:	e115      	b.n	8003cf4 <UART_SetConfig+0x348>
 8003ac8:	2304      	movs	r3, #4
 8003aca:	77fb      	strb	r3, [r7, #31]
 8003acc:	e112      	b.n	8003cf4 <UART_SetConfig+0x348>
 8003ace:	2308      	movs	r3, #8
 8003ad0:	77fb      	strb	r3, [r7, #31]
 8003ad2:	e10f      	b.n	8003cf4 <UART_SetConfig+0x348>
 8003ad4:	2310      	movs	r3, #16
 8003ad6:	77fb      	strb	r3, [r7, #31]
 8003ad8:	e10c      	b.n	8003cf4 <UART_SetConfig+0x348>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a68      	ldr	r2, [pc, #416]	@ (8003c80 <UART_SetConfig+0x2d4>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d120      	bne.n	8003b26 <UART_SetConfig+0x17a>
 8003ae4:	4b64      	ldr	r3, [pc, #400]	@ (8003c78 <UART_SetConfig+0x2cc>)
 8003ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aea:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003aee:	2b30      	cmp	r3, #48	@ 0x30
 8003af0:	d013      	beq.n	8003b1a <UART_SetConfig+0x16e>
 8003af2:	2b30      	cmp	r3, #48	@ 0x30
 8003af4:	d814      	bhi.n	8003b20 <UART_SetConfig+0x174>
 8003af6:	2b20      	cmp	r3, #32
 8003af8:	d009      	beq.n	8003b0e <UART_SetConfig+0x162>
 8003afa:	2b20      	cmp	r3, #32
 8003afc:	d810      	bhi.n	8003b20 <UART_SetConfig+0x174>
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d002      	beq.n	8003b08 <UART_SetConfig+0x15c>
 8003b02:	2b10      	cmp	r3, #16
 8003b04:	d006      	beq.n	8003b14 <UART_SetConfig+0x168>
 8003b06:	e00b      	b.n	8003b20 <UART_SetConfig+0x174>
 8003b08:	2300      	movs	r3, #0
 8003b0a:	77fb      	strb	r3, [r7, #31]
 8003b0c:	e0f2      	b.n	8003cf4 <UART_SetConfig+0x348>
 8003b0e:	2302      	movs	r3, #2
 8003b10:	77fb      	strb	r3, [r7, #31]
 8003b12:	e0ef      	b.n	8003cf4 <UART_SetConfig+0x348>
 8003b14:	2304      	movs	r3, #4
 8003b16:	77fb      	strb	r3, [r7, #31]
 8003b18:	e0ec      	b.n	8003cf4 <UART_SetConfig+0x348>
 8003b1a:	2308      	movs	r3, #8
 8003b1c:	77fb      	strb	r3, [r7, #31]
 8003b1e:	e0e9      	b.n	8003cf4 <UART_SetConfig+0x348>
 8003b20:	2310      	movs	r3, #16
 8003b22:	77fb      	strb	r3, [r7, #31]
 8003b24:	e0e6      	b.n	8003cf4 <UART_SetConfig+0x348>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a56      	ldr	r2, [pc, #344]	@ (8003c84 <UART_SetConfig+0x2d8>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d120      	bne.n	8003b72 <UART_SetConfig+0x1c6>
 8003b30:	4b51      	ldr	r3, [pc, #324]	@ (8003c78 <UART_SetConfig+0x2cc>)
 8003b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b36:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003b3a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b3c:	d013      	beq.n	8003b66 <UART_SetConfig+0x1ba>
 8003b3e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b40:	d814      	bhi.n	8003b6c <UART_SetConfig+0x1c0>
 8003b42:	2b80      	cmp	r3, #128	@ 0x80
 8003b44:	d009      	beq.n	8003b5a <UART_SetConfig+0x1ae>
 8003b46:	2b80      	cmp	r3, #128	@ 0x80
 8003b48:	d810      	bhi.n	8003b6c <UART_SetConfig+0x1c0>
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d002      	beq.n	8003b54 <UART_SetConfig+0x1a8>
 8003b4e:	2b40      	cmp	r3, #64	@ 0x40
 8003b50:	d006      	beq.n	8003b60 <UART_SetConfig+0x1b4>
 8003b52:	e00b      	b.n	8003b6c <UART_SetConfig+0x1c0>
 8003b54:	2300      	movs	r3, #0
 8003b56:	77fb      	strb	r3, [r7, #31]
 8003b58:	e0cc      	b.n	8003cf4 <UART_SetConfig+0x348>
 8003b5a:	2302      	movs	r3, #2
 8003b5c:	77fb      	strb	r3, [r7, #31]
 8003b5e:	e0c9      	b.n	8003cf4 <UART_SetConfig+0x348>
 8003b60:	2304      	movs	r3, #4
 8003b62:	77fb      	strb	r3, [r7, #31]
 8003b64:	e0c6      	b.n	8003cf4 <UART_SetConfig+0x348>
 8003b66:	2308      	movs	r3, #8
 8003b68:	77fb      	strb	r3, [r7, #31]
 8003b6a:	e0c3      	b.n	8003cf4 <UART_SetConfig+0x348>
 8003b6c:	2310      	movs	r3, #16
 8003b6e:	77fb      	strb	r3, [r7, #31]
 8003b70:	e0c0      	b.n	8003cf4 <UART_SetConfig+0x348>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a44      	ldr	r2, [pc, #272]	@ (8003c88 <UART_SetConfig+0x2dc>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d125      	bne.n	8003bc8 <UART_SetConfig+0x21c>
 8003b7c:	4b3e      	ldr	r3, [pc, #248]	@ (8003c78 <UART_SetConfig+0x2cc>)
 8003b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b86:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b8a:	d017      	beq.n	8003bbc <UART_SetConfig+0x210>
 8003b8c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b90:	d817      	bhi.n	8003bc2 <UART_SetConfig+0x216>
 8003b92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b96:	d00b      	beq.n	8003bb0 <UART_SetConfig+0x204>
 8003b98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b9c:	d811      	bhi.n	8003bc2 <UART_SetConfig+0x216>
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d003      	beq.n	8003baa <UART_SetConfig+0x1fe>
 8003ba2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ba6:	d006      	beq.n	8003bb6 <UART_SetConfig+0x20a>
 8003ba8:	e00b      	b.n	8003bc2 <UART_SetConfig+0x216>
 8003baa:	2300      	movs	r3, #0
 8003bac:	77fb      	strb	r3, [r7, #31]
 8003bae:	e0a1      	b.n	8003cf4 <UART_SetConfig+0x348>
 8003bb0:	2302      	movs	r3, #2
 8003bb2:	77fb      	strb	r3, [r7, #31]
 8003bb4:	e09e      	b.n	8003cf4 <UART_SetConfig+0x348>
 8003bb6:	2304      	movs	r3, #4
 8003bb8:	77fb      	strb	r3, [r7, #31]
 8003bba:	e09b      	b.n	8003cf4 <UART_SetConfig+0x348>
 8003bbc:	2308      	movs	r3, #8
 8003bbe:	77fb      	strb	r3, [r7, #31]
 8003bc0:	e098      	b.n	8003cf4 <UART_SetConfig+0x348>
 8003bc2:	2310      	movs	r3, #16
 8003bc4:	77fb      	strb	r3, [r7, #31]
 8003bc6:	e095      	b.n	8003cf4 <UART_SetConfig+0x348>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a2f      	ldr	r2, [pc, #188]	@ (8003c8c <UART_SetConfig+0x2e0>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d125      	bne.n	8003c1e <UART_SetConfig+0x272>
 8003bd2:	4b29      	ldr	r3, [pc, #164]	@ (8003c78 <UART_SetConfig+0x2cc>)
 8003bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bd8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003bdc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003be0:	d017      	beq.n	8003c12 <UART_SetConfig+0x266>
 8003be2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003be6:	d817      	bhi.n	8003c18 <UART_SetConfig+0x26c>
 8003be8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003bec:	d00b      	beq.n	8003c06 <UART_SetConfig+0x25a>
 8003bee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003bf2:	d811      	bhi.n	8003c18 <UART_SetConfig+0x26c>
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d003      	beq.n	8003c00 <UART_SetConfig+0x254>
 8003bf8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bfc:	d006      	beq.n	8003c0c <UART_SetConfig+0x260>
 8003bfe:	e00b      	b.n	8003c18 <UART_SetConfig+0x26c>
 8003c00:	2301      	movs	r3, #1
 8003c02:	77fb      	strb	r3, [r7, #31]
 8003c04:	e076      	b.n	8003cf4 <UART_SetConfig+0x348>
 8003c06:	2302      	movs	r3, #2
 8003c08:	77fb      	strb	r3, [r7, #31]
 8003c0a:	e073      	b.n	8003cf4 <UART_SetConfig+0x348>
 8003c0c:	2304      	movs	r3, #4
 8003c0e:	77fb      	strb	r3, [r7, #31]
 8003c10:	e070      	b.n	8003cf4 <UART_SetConfig+0x348>
 8003c12:	2308      	movs	r3, #8
 8003c14:	77fb      	strb	r3, [r7, #31]
 8003c16:	e06d      	b.n	8003cf4 <UART_SetConfig+0x348>
 8003c18:	2310      	movs	r3, #16
 8003c1a:	77fb      	strb	r3, [r7, #31]
 8003c1c:	e06a      	b.n	8003cf4 <UART_SetConfig+0x348>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a1b      	ldr	r2, [pc, #108]	@ (8003c90 <UART_SetConfig+0x2e4>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d138      	bne.n	8003c9a <UART_SetConfig+0x2ee>
 8003c28:	4b13      	ldr	r3, [pc, #76]	@ (8003c78 <UART_SetConfig+0x2cc>)
 8003c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c2e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003c32:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003c36:	d017      	beq.n	8003c68 <UART_SetConfig+0x2bc>
 8003c38:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003c3c:	d82a      	bhi.n	8003c94 <UART_SetConfig+0x2e8>
 8003c3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c42:	d00b      	beq.n	8003c5c <UART_SetConfig+0x2b0>
 8003c44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c48:	d824      	bhi.n	8003c94 <UART_SetConfig+0x2e8>
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d003      	beq.n	8003c56 <UART_SetConfig+0x2aa>
 8003c4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c52:	d006      	beq.n	8003c62 <UART_SetConfig+0x2b6>
 8003c54:	e01e      	b.n	8003c94 <UART_SetConfig+0x2e8>
 8003c56:	2300      	movs	r3, #0
 8003c58:	77fb      	strb	r3, [r7, #31]
 8003c5a:	e04b      	b.n	8003cf4 <UART_SetConfig+0x348>
 8003c5c:	2302      	movs	r3, #2
 8003c5e:	77fb      	strb	r3, [r7, #31]
 8003c60:	e048      	b.n	8003cf4 <UART_SetConfig+0x348>
 8003c62:	2304      	movs	r3, #4
 8003c64:	77fb      	strb	r3, [r7, #31]
 8003c66:	e045      	b.n	8003cf4 <UART_SetConfig+0x348>
 8003c68:	2308      	movs	r3, #8
 8003c6a:	77fb      	strb	r3, [r7, #31]
 8003c6c:	e042      	b.n	8003cf4 <UART_SetConfig+0x348>
 8003c6e:	bf00      	nop
 8003c70:	efff69f3 	.word	0xefff69f3
 8003c74:	40011000 	.word	0x40011000
 8003c78:	40023800 	.word	0x40023800
 8003c7c:	40004400 	.word	0x40004400
 8003c80:	40004800 	.word	0x40004800
 8003c84:	40004c00 	.word	0x40004c00
 8003c88:	40005000 	.word	0x40005000
 8003c8c:	40011400 	.word	0x40011400
 8003c90:	40007800 	.word	0x40007800
 8003c94:	2310      	movs	r3, #16
 8003c96:	77fb      	strb	r3, [r7, #31]
 8003c98:	e02c      	b.n	8003cf4 <UART_SetConfig+0x348>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a72      	ldr	r2, [pc, #456]	@ (8003e68 <UART_SetConfig+0x4bc>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d125      	bne.n	8003cf0 <UART_SetConfig+0x344>
 8003ca4:	4b71      	ldr	r3, [pc, #452]	@ (8003e6c <UART_SetConfig+0x4c0>)
 8003ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003caa:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003cae:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003cb2:	d017      	beq.n	8003ce4 <UART_SetConfig+0x338>
 8003cb4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003cb8:	d817      	bhi.n	8003cea <UART_SetConfig+0x33e>
 8003cba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003cbe:	d00b      	beq.n	8003cd8 <UART_SetConfig+0x32c>
 8003cc0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003cc4:	d811      	bhi.n	8003cea <UART_SetConfig+0x33e>
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d003      	beq.n	8003cd2 <UART_SetConfig+0x326>
 8003cca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003cce:	d006      	beq.n	8003cde <UART_SetConfig+0x332>
 8003cd0:	e00b      	b.n	8003cea <UART_SetConfig+0x33e>
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	77fb      	strb	r3, [r7, #31]
 8003cd6:	e00d      	b.n	8003cf4 <UART_SetConfig+0x348>
 8003cd8:	2302      	movs	r3, #2
 8003cda:	77fb      	strb	r3, [r7, #31]
 8003cdc:	e00a      	b.n	8003cf4 <UART_SetConfig+0x348>
 8003cde:	2304      	movs	r3, #4
 8003ce0:	77fb      	strb	r3, [r7, #31]
 8003ce2:	e007      	b.n	8003cf4 <UART_SetConfig+0x348>
 8003ce4:	2308      	movs	r3, #8
 8003ce6:	77fb      	strb	r3, [r7, #31]
 8003ce8:	e004      	b.n	8003cf4 <UART_SetConfig+0x348>
 8003cea:	2310      	movs	r3, #16
 8003cec:	77fb      	strb	r3, [r7, #31]
 8003cee:	e001      	b.n	8003cf4 <UART_SetConfig+0x348>
 8003cf0:	2310      	movs	r3, #16
 8003cf2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	69db      	ldr	r3, [r3, #28]
 8003cf8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003cfc:	d15b      	bne.n	8003db6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003cfe:	7ffb      	ldrb	r3, [r7, #31]
 8003d00:	2b08      	cmp	r3, #8
 8003d02:	d828      	bhi.n	8003d56 <UART_SetConfig+0x3aa>
 8003d04:	a201      	add	r2, pc, #4	@ (adr r2, 8003d0c <UART_SetConfig+0x360>)
 8003d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d0a:	bf00      	nop
 8003d0c:	08003d31 	.word	0x08003d31
 8003d10:	08003d39 	.word	0x08003d39
 8003d14:	08003d41 	.word	0x08003d41
 8003d18:	08003d57 	.word	0x08003d57
 8003d1c:	08003d47 	.word	0x08003d47
 8003d20:	08003d57 	.word	0x08003d57
 8003d24:	08003d57 	.word	0x08003d57
 8003d28:	08003d57 	.word	0x08003d57
 8003d2c:	08003d4f 	.word	0x08003d4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d30:	f7ff f952 	bl	8002fd8 <HAL_RCC_GetPCLK1Freq>
 8003d34:	61b8      	str	r0, [r7, #24]
        break;
 8003d36:	e013      	b.n	8003d60 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d38:	f7ff f962 	bl	8003000 <HAL_RCC_GetPCLK2Freq>
 8003d3c:	61b8      	str	r0, [r7, #24]
        break;
 8003d3e:	e00f      	b.n	8003d60 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d40:	4b4b      	ldr	r3, [pc, #300]	@ (8003e70 <UART_SetConfig+0x4c4>)
 8003d42:	61bb      	str	r3, [r7, #24]
        break;
 8003d44:	e00c      	b.n	8003d60 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d46:	f7ff f875 	bl	8002e34 <HAL_RCC_GetSysClockFreq>
 8003d4a:	61b8      	str	r0, [r7, #24]
        break;
 8003d4c:	e008      	b.n	8003d60 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d52:	61bb      	str	r3, [r7, #24]
        break;
 8003d54:	e004      	b.n	8003d60 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003d56:	2300      	movs	r3, #0
 8003d58:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	77bb      	strb	r3, [r7, #30]
        break;
 8003d5e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d074      	beq.n	8003e50 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	005a      	lsls	r2, r3, #1
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	085b      	lsrs	r3, r3, #1
 8003d70:	441a      	add	r2, r3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d7a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	2b0f      	cmp	r3, #15
 8003d80:	d916      	bls.n	8003db0 <UART_SetConfig+0x404>
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d88:	d212      	bcs.n	8003db0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	f023 030f 	bic.w	r3, r3, #15
 8003d92:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	085b      	lsrs	r3, r3, #1
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	f003 0307 	and.w	r3, r3, #7
 8003d9e:	b29a      	uxth	r2, r3
 8003da0:	89fb      	ldrh	r3, [r7, #14]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	89fa      	ldrh	r2, [r7, #14]
 8003dac:	60da      	str	r2, [r3, #12]
 8003dae:	e04f      	b.n	8003e50 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	77bb      	strb	r3, [r7, #30]
 8003db4:	e04c      	b.n	8003e50 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003db6:	7ffb      	ldrb	r3, [r7, #31]
 8003db8:	2b08      	cmp	r3, #8
 8003dba:	d828      	bhi.n	8003e0e <UART_SetConfig+0x462>
 8003dbc:	a201      	add	r2, pc, #4	@ (adr r2, 8003dc4 <UART_SetConfig+0x418>)
 8003dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dc2:	bf00      	nop
 8003dc4:	08003de9 	.word	0x08003de9
 8003dc8:	08003df1 	.word	0x08003df1
 8003dcc:	08003df9 	.word	0x08003df9
 8003dd0:	08003e0f 	.word	0x08003e0f
 8003dd4:	08003dff 	.word	0x08003dff
 8003dd8:	08003e0f 	.word	0x08003e0f
 8003ddc:	08003e0f 	.word	0x08003e0f
 8003de0:	08003e0f 	.word	0x08003e0f
 8003de4:	08003e07 	.word	0x08003e07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003de8:	f7ff f8f6 	bl	8002fd8 <HAL_RCC_GetPCLK1Freq>
 8003dec:	61b8      	str	r0, [r7, #24]
        break;
 8003dee:	e013      	b.n	8003e18 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003df0:	f7ff f906 	bl	8003000 <HAL_RCC_GetPCLK2Freq>
 8003df4:	61b8      	str	r0, [r7, #24]
        break;
 8003df6:	e00f      	b.n	8003e18 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003df8:	4b1d      	ldr	r3, [pc, #116]	@ (8003e70 <UART_SetConfig+0x4c4>)
 8003dfa:	61bb      	str	r3, [r7, #24]
        break;
 8003dfc:	e00c      	b.n	8003e18 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dfe:	f7ff f819 	bl	8002e34 <HAL_RCC_GetSysClockFreq>
 8003e02:	61b8      	str	r0, [r7, #24]
        break;
 8003e04:	e008      	b.n	8003e18 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e0a:	61bb      	str	r3, [r7, #24]
        break;
 8003e0c:	e004      	b.n	8003e18 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	77bb      	strb	r3, [r7, #30]
        break;
 8003e16:	bf00      	nop
    }

    if (pclk != 0U)
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d018      	beq.n	8003e50 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	085a      	lsrs	r2, r3, #1
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	441a      	add	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e30:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	2b0f      	cmp	r3, #15
 8003e36:	d909      	bls.n	8003e4c <UART_SetConfig+0x4a0>
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e3e:	d205      	bcs.n	8003e4c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	b29a      	uxth	r2, r3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	60da      	str	r2, [r3, #12]
 8003e4a:	e001      	b.n	8003e50 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003e5c:	7fbb      	ldrb	r3, [r7, #30]
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3720      	adds	r7, #32
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	40007c00 	.word	0x40007c00
 8003e6c:	40023800 	.word	0x40023800
 8003e70:	00f42400 	.word	0x00f42400

08003e74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e80:	f003 0301 	and.w	r3, r3, #1
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d00a      	beq.n	8003e9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	430a      	orrs	r2, r1
 8003e9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea2:	f003 0302 	and.w	r3, r3, #2
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00a      	beq.n	8003ec0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	430a      	orrs	r2, r1
 8003ebe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec4:	f003 0304 	and.w	r3, r3, #4
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d00a      	beq.n	8003ee2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	430a      	orrs	r2, r1
 8003ee0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee6:	f003 0308 	and.w	r3, r3, #8
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00a      	beq.n	8003f04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	430a      	orrs	r2, r1
 8003f02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f08:	f003 0310 	and.w	r3, r3, #16
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d00a      	beq.n	8003f26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	430a      	orrs	r2, r1
 8003f24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f2a:	f003 0320 	and.w	r3, r3, #32
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00a      	beq.n	8003f48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	430a      	orrs	r2, r1
 8003f46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d01a      	beq.n	8003f8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	430a      	orrs	r2, r1
 8003f68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f72:	d10a      	bne.n	8003f8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	430a      	orrs	r2, r1
 8003f88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d00a      	beq.n	8003fac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	430a      	orrs	r2, r1
 8003faa:	605a      	str	r2, [r3, #4]
  }
}
 8003fac:	bf00      	nop
 8003fae:	370c      	adds	r7, #12
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b086      	sub	sp, #24
 8003fbc:	af02      	add	r7, sp, #8
 8003fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003fc8:	f7fd fc90 	bl	80018ec <HAL_GetTick>
 8003fcc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0308 	and.w	r3, r3, #8
 8003fd8:	2b08      	cmp	r3, #8
 8003fda:	d10e      	bne.n	8003ffa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fdc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003fe0:	9300      	str	r3, [sp, #0]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 f81b 	bl	8004026 <UART_WaitOnFlagUntilTimeout>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d001      	beq.n	8003ffa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e011      	b.n	800401e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2220      	movs	r2, #32
 8003ffe:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2220      	movs	r2, #32
 8004004:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3710      	adds	r7, #16
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}

08004026 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004026:	b580      	push	{r7, lr}
 8004028:	b09c      	sub	sp, #112	@ 0x70
 800402a:	af00      	add	r7, sp, #0
 800402c:	60f8      	str	r0, [r7, #12]
 800402e:	60b9      	str	r1, [r7, #8]
 8004030:	603b      	str	r3, [r7, #0]
 8004032:	4613      	mov	r3, r2
 8004034:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004036:	e0a7      	b.n	8004188 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004038:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800403a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800403e:	f000 80a3 	beq.w	8004188 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004042:	f7fd fc53 	bl	80018ec <HAL_GetTick>
 8004046:	4602      	mov	r2, r0
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800404e:	429a      	cmp	r2, r3
 8004050:	d302      	bcc.n	8004058 <UART_WaitOnFlagUntilTimeout+0x32>
 8004052:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004054:	2b00      	cmp	r3, #0
 8004056:	d13f      	bne.n	80040d8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800405e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004060:	e853 3f00 	ldrex	r3, [r3]
 8004064:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004066:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004068:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800406c:	667b      	str	r3, [r7, #100]	@ 0x64
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	461a      	mov	r2, r3
 8004074:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004076:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004078:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800407a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800407c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800407e:	e841 2300 	strex	r3, r2, [r1]
 8004082:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8004084:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1e6      	bne.n	8004058 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	3308      	adds	r3, #8
 8004090:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004092:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004094:	e853 3f00 	ldrex	r3, [r3]
 8004098:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800409a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800409c:	f023 0301 	bic.w	r3, r3, #1
 80040a0:	663b      	str	r3, [r7, #96]	@ 0x60
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	3308      	adds	r3, #8
 80040a8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80040aa:	64ba      	str	r2, [r7, #72]	@ 0x48
 80040ac:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ae:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80040b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80040b2:	e841 2300 	strex	r3, r2, [r1]
 80040b6:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80040b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d1e5      	bne.n	800408a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2220      	movs	r2, #32
 80040c2:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2220      	movs	r2, #32
 80040c8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 80040d4:	2303      	movs	r3, #3
 80040d6:	e068      	b.n	80041aa <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0304 	and.w	r3, r3, #4
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d050      	beq.n	8004188 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	69db      	ldr	r3, [r3, #28]
 80040ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80040f4:	d148      	bne.n	8004188 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80040fe:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004108:	e853 3f00 	ldrex	r3, [r3]
 800410c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800410e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004110:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004114:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	461a      	mov	r2, r3
 800411c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800411e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004120:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004122:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004124:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004126:	e841 2300 	strex	r3, r2, [r1]
 800412a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800412c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800412e:	2b00      	cmp	r3, #0
 8004130:	d1e6      	bne.n	8004100 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	3308      	adds	r3, #8
 8004138:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	e853 3f00 	ldrex	r3, [r3]
 8004140:	613b      	str	r3, [r7, #16]
   return(result);
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	f023 0301 	bic.w	r3, r3, #1
 8004148:	66bb      	str	r3, [r7, #104]	@ 0x68
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	3308      	adds	r3, #8
 8004150:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004152:	623a      	str	r2, [r7, #32]
 8004154:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004156:	69f9      	ldr	r1, [r7, #28]
 8004158:	6a3a      	ldr	r2, [r7, #32]
 800415a:	e841 2300 	strex	r3, r2, [r1]
 800415e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d1e5      	bne.n	8004132 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2220      	movs	r2, #32
 800416a:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2220      	movs	r2, #32
 8004170:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2220      	movs	r2, #32
 8004178:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2200      	movs	r2, #0
 8004180:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	e010      	b.n	80041aa <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	69da      	ldr	r2, [r3, #28]
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	4013      	ands	r3, r2
 8004192:	68ba      	ldr	r2, [r7, #8]
 8004194:	429a      	cmp	r2, r3
 8004196:	bf0c      	ite	eq
 8004198:	2301      	moveq	r3, #1
 800419a:	2300      	movne	r3, #0
 800419c:	b2db      	uxtb	r3, r3
 800419e:	461a      	mov	r2, r3
 80041a0:	79fb      	ldrb	r3, [r7, #7]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	f43f af48 	beq.w	8004038 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3770      	adds	r7, #112	@ 0x70
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}

080041b2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80041b2:	b480      	push	{r7}
 80041b4:	b085      	sub	sp, #20
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	4603      	mov	r3, r0
 80041ba:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80041bc:	2300      	movs	r3, #0
 80041be:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80041c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80041c4:	2b84      	cmp	r3, #132	@ 0x84
 80041c6:	d005      	beq.n	80041d4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80041c8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	4413      	add	r3, r2
 80041d0:	3303      	adds	r3, #3
 80041d2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80041d4:	68fb      	ldr	r3, [r7, #12]
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3714      	adds	r7, #20
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr

080041e2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80041e2:	b580      	push	{r7, lr}
 80041e4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80041e6:	f001 f8bd 	bl	8005364 <vTaskStartScheduler>
  
  return osOK;
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80041f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041f2:	b089      	sub	sp, #36	@ 0x24
 80041f4:	af04      	add	r7, sp, #16
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	695b      	ldr	r3, [r3, #20]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d020      	beq.n	8004244 <osThreadCreate+0x54>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	699b      	ldr	r3, [r3, #24]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d01c      	beq.n	8004244 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	685c      	ldr	r4, [r3, #4]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	691e      	ldr	r6, [r3, #16]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800421c:	4618      	mov	r0, r3
 800421e:	f7ff ffc8 	bl	80041b2 <makeFreeRtosPriority>
 8004222:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	695b      	ldr	r3, [r3, #20]
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800422c:	9202      	str	r2, [sp, #8]
 800422e:	9301      	str	r3, [sp, #4]
 8004230:	9100      	str	r1, [sp, #0]
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	4632      	mov	r2, r6
 8004236:	4629      	mov	r1, r5
 8004238:	4620      	mov	r0, r4
 800423a:	f000 febb 	bl	8004fb4 <xTaskCreateStatic>
 800423e:	4603      	mov	r3, r0
 8004240:	60fb      	str	r3, [r7, #12]
 8004242:	e01c      	b.n	800427e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685c      	ldr	r4, [r3, #4]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004250:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004258:	4618      	mov	r0, r3
 800425a:	f7ff ffaa 	bl	80041b2 <makeFreeRtosPriority>
 800425e:	4602      	mov	r2, r0
 8004260:	f107 030c 	add.w	r3, r7, #12
 8004264:	9301      	str	r3, [sp, #4]
 8004266:	9200      	str	r2, [sp, #0]
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	4632      	mov	r2, r6
 800426c:	4629      	mov	r1, r5
 800426e:	4620      	mov	r0, r4
 8004270:	f000 ff06 	bl	8005080 <xTaskCreate>
 8004274:	4603      	mov	r3, r0
 8004276:	2b01      	cmp	r3, #1
 8004278:	d001      	beq.n	800427e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800427a:	2300      	movs	r3, #0
 800427c:	e000      	b.n	8004280 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800427e:	68fb      	ldr	r3, [r7, #12]
}
 8004280:	4618      	mov	r0, r3
 8004282:	3714      	adds	r7, #20
 8004284:	46bd      	mov	sp, r7
 8004286:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004288 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8004288:	b580      	push	{r7, lr}
 800428a:	b086      	sub	sp, #24
 800428c:	af02      	add	r7, sp, #8
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d00f      	beq.n	80042ba <osSemaphoreCreate+0x32>
    if (count == 1) {
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	2b01      	cmp	r3, #1
 800429e:	d10a      	bne.n	80042b6 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	2203      	movs	r2, #3
 80042a6:	9200      	str	r2, [sp, #0]
 80042a8:	2200      	movs	r2, #0
 80042aa:	2100      	movs	r1, #0
 80042ac:	2001      	movs	r0, #1
 80042ae:	f000 f965 	bl	800457c <xQueueGenericCreateStatic>
 80042b2:	4603      	mov	r3, r0
 80042b4:	e016      	b.n	80042e4 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80042b6:	2300      	movs	r3, #0
 80042b8:	e014      	b.n	80042e4 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d110      	bne.n	80042e2 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80042c0:	2203      	movs	r2, #3
 80042c2:	2100      	movs	r1, #0
 80042c4:	2001      	movs	r0, #1
 80042c6:	f000 f9e0 	bl	800468a <xQueueGenericCreate>
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d005      	beq.n	80042de <osSemaphoreCreate+0x56>
 80042d2:	2300      	movs	r3, #0
 80042d4:	2200      	movs	r2, #0
 80042d6:	2100      	movs	r1, #0
 80042d8:	68f8      	ldr	r0, [r7, #12]
 80042da:	f000 fa39 	bl	8004750 <xQueueGenericSend>
      return sema;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	e000      	b.n	80042e4 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80042e2:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3710      	adds	r7, #16
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80042ec:	b590      	push	{r4, r7, lr}
 80042ee:	b085      	sub	sp, #20
 80042f0:	af02      	add	r7, sp, #8
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d011      	beq.n	8004322 <osMessageCreate+0x36>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d00d      	beq.n	8004322 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6818      	ldr	r0, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6859      	ldr	r1, [r3, #4]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	689a      	ldr	r2, [r3, #8]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	2400      	movs	r4, #0
 8004318:	9400      	str	r4, [sp, #0]
 800431a:	f000 f92f 	bl	800457c <xQueueGenericCreateStatic>
 800431e:	4603      	mov	r3, r0
 8004320:	e008      	b.n	8004334 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6818      	ldr	r0, [r3, #0]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	4619      	mov	r1, r3
 800432e:	f000 f9ac 	bl	800468a <xQueueGenericCreate>
 8004332:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8004334:	4618      	mov	r0, r3
 8004336:	370c      	adds	r7, #12
 8004338:	46bd      	mov	sp, r7
 800433a:	bd90      	pop	{r4, r7, pc}

0800433c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800433c:	b480      	push	{r7}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f103 0208 	add.w	r2, r3, #8
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f04f 32ff 	mov.w	r2, #4294967295
 8004354:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f103 0208 	add.w	r2, r3, #8
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f103 0208 	add.w	r2, r3, #8
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004370:	bf00      	nop
 8004372:	370c      	adds	r7, #12
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800437c:	b480      	push	{r7}
 800437e:	b083      	sub	sp, #12
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800438a:	bf00      	nop
 800438c:	370c      	adds	r7, #12
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr

08004396 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004396:	b480      	push	{r7}
 8004398:	b085      	sub	sp, #20
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
 800439e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	68fa      	ldr	r2, [r7, #12]
 80043aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	689a      	ldr	r2, [r3, #8]
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	683a      	ldr	r2, [r7, #0]
 80043ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	683a      	ldr	r2, [r7, #0]
 80043c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	1c5a      	adds	r2, r3, #1
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	601a      	str	r2, [r3, #0]
}
 80043d2:	bf00      	nop
 80043d4:	3714      	adds	r7, #20
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr

080043de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80043de:	b480      	push	{r7}
 80043e0:	b085      	sub	sp, #20
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
 80043e6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043f4:	d103      	bne.n	80043fe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	60fb      	str	r3, [r7, #12]
 80043fc:	e00c      	b.n	8004418 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	3308      	adds	r3, #8
 8004402:	60fb      	str	r3, [r7, #12]
 8004404:	e002      	b.n	800440c <vListInsert+0x2e>
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	60fb      	str	r3, [r7, #12]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	68ba      	ldr	r2, [r7, #8]
 8004414:	429a      	cmp	r2, r3
 8004416:	d2f6      	bcs.n	8004406 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	685a      	ldr	r2, [r3, #4]
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	683a      	ldr	r2, [r7, #0]
 8004426:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	683a      	ldr	r2, [r7, #0]
 8004432:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	1c5a      	adds	r2, r3, #1
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	601a      	str	r2, [r3, #0]
}
 8004444:	bf00      	nop
 8004446:	3714      	adds	r7, #20
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004450:	b480      	push	{r7}
 8004452:	b085      	sub	sp, #20
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	691b      	ldr	r3, [r3, #16]
 800445c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	6892      	ldr	r2, [r2, #8]
 8004466:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	6852      	ldr	r2, [r2, #4]
 8004470:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	429a      	cmp	r2, r3
 800447a:	d103      	bne.n	8004484 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	689a      	ldr	r2, [r3, #8]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	1e5a      	subs	r2, r3, #1
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
}
 8004498:	4618      	mov	r0, r3
 800449a:	3714      	adds	r7, #20
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d10d      	bne.n	80044d4 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80044b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044bc:	b672      	cpsid	i
 80044be:	f383 8811 	msr	BASEPRI, r3
 80044c2:	f3bf 8f6f 	isb	sy
 80044c6:	f3bf 8f4f 	dsb	sy
 80044ca:	b662      	cpsie	i
 80044cc:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80044ce:	bf00      	nop
 80044d0:	bf00      	nop
 80044d2:	e7fd      	b.n	80044d0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80044d4:	f001 feba 	bl	800624c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044e0:	68f9      	ldr	r1, [r7, #12]
 80044e2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80044e4:	fb01 f303 	mul.w	r3, r1, r3
 80044e8:	441a      	add	r2, r3
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2200      	movs	r2, #0
 80044f2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004504:	3b01      	subs	r3, #1
 8004506:	68f9      	ldr	r1, [r7, #12]
 8004508:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800450a:	fb01 f303 	mul.w	r3, r1, r3
 800450e:	441a      	add	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	22ff      	movs	r2, #255	@ 0xff
 8004518:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	22ff      	movs	r2, #255	@ 0xff
 8004520:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d114      	bne.n	8004554 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d01a      	beq.n	8004568 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	3310      	adds	r3, #16
 8004536:	4618      	mov	r0, r3
 8004538:	f001 f96a 	bl	8005810 <xTaskRemoveFromEventList>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d012      	beq.n	8004568 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004542:	4b0d      	ldr	r3, [pc, #52]	@ (8004578 <xQueueGenericReset+0xd4>)
 8004544:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004548:	601a      	str	r2, [r3, #0]
 800454a:	f3bf 8f4f 	dsb	sy
 800454e:	f3bf 8f6f 	isb	sy
 8004552:	e009      	b.n	8004568 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	3310      	adds	r3, #16
 8004558:	4618      	mov	r0, r3
 800455a:	f7ff feef 	bl	800433c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	3324      	adds	r3, #36	@ 0x24
 8004562:	4618      	mov	r0, r3
 8004564:	f7ff feea 	bl	800433c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004568:	f001 fea6 	bl	80062b8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800456c:	2301      	movs	r3, #1
}
 800456e:	4618      	mov	r0, r3
 8004570:	3710      	adds	r7, #16
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	e000ed04 	.word	0xe000ed04

0800457c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800457c:	b580      	push	{r7, lr}
 800457e:	b08e      	sub	sp, #56	@ 0x38
 8004580:	af02      	add	r7, sp, #8
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	60b9      	str	r1, [r7, #8]
 8004586:	607a      	str	r2, [r7, #4]
 8004588:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d10d      	bne.n	80045ac <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8004590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004594:	b672      	cpsid	i
 8004596:	f383 8811 	msr	BASEPRI, r3
 800459a:	f3bf 8f6f 	isb	sy
 800459e:	f3bf 8f4f 	dsb	sy
 80045a2:	b662      	cpsie	i
 80045a4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80045a6:	bf00      	nop
 80045a8:	bf00      	nop
 80045aa:	e7fd      	b.n	80045a8 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d10d      	bne.n	80045ce <xQueueGenericCreateStatic+0x52>
	__asm volatile
 80045b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045b6:	b672      	cpsid	i
 80045b8:	f383 8811 	msr	BASEPRI, r3
 80045bc:	f3bf 8f6f 	isb	sy
 80045c0:	f3bf 8f4f 	dsb	sy
 80045c4:	b662      	cpsie	i
 80045c6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80045c8:	bf00      	nop
 80045ca:	bf00      	nop
 80045cc:	e7fd      	b.n	80045ca <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d002      	beq.n	80045da <xQueueGenericCreateStatic+0x5e>
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d001      	beq.n	80045de <xQueueGenericCreateStatic+0x62>
 80045da:	2301      	movs	r3, #1
 80045dc:	e000      	b.n	80045e0 <xQueueGenericCreateStatic+0x64>
 80045de:	2300      	movs	r3, #0
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d10d      	bne.n	8004600 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 80045e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045e8:	b672      	cpsid	i
 80045ea:	f383 8811 	msr	BASEPRI, r3
 80045ee:	f3bf 8f6f 	isb	sy
 80045f2:	f3bf 8f4f 	dsb	sy
 80045f6:	b662      	cpsie	i
 80045f8:	623b      	str	r3, [r7, #32]
}
 80045fa:	bf00      	nop
 80045fc:	bf00      	nop
 80045fe:	e7fd      	b.n	80045fc <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d102      	bne.n	800460c <xQueueGenericCreateStatic+0x90>
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d101      	bne.n	8004610 <xQueueGenericCreateStatic+0x94>
 800460c:	2301      	movs	r3, #1
 800460e:	e000      	b.n	8004612 <xQueueGenericCreateStatic+0x96>
 8004610:	2300      	movs	r3, #0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d10d      	bne.n	8004632 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8004616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800461a:	b672      	cpsid	i
 800461c:	f383 8811 	msr	BASEPRI, r3
 8004620:	f3bf 8f6f 	isb	sy
 8004624:	f3bf 8f4f 	dsb	sy
 8004628:	b662      	cpsie	i
 800462a:	61fb      	str	r3, [r7, #28]
}
 800462c:	bf00      	nop
 800462e:	bf00      	nop
 8004630:	e7fd      	b.n	800462e <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004632:	2348      	movs	r3, #72	@ 0x48
 8004634:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	2b48      	cmp	r3, #72	@ 0x48
 800463a:	d00d      	beq.n	8004658 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 800463c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004640:	b672      	cpsid	i
 8004642:	f383 8811 	msr	BASEPRI, r3
 8004646:	f3bf 8f6f 	isb	sy
 800464a:	f3bf 8f4f 	dsb	sy
 800464e:	b662      	cpsie	i
 8004650:	61bb      	str	r3, [r7, #24]
}
 8004652:	bf00      	nop
 8004654:	bf00      	nop
 8004656:	e7fd      	b.n	8004654 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004658:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800465e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004660:	2b00      	cmp	r3, #0
 8004662:	d00d      	beq.n	8004680 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004664:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004666:	2201      	movs	r2, #1
 8004668:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800466c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004672:	9300      	str	r3, [sp, #0]
 8004674:	4613      	mov	r3, r2
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	68b9      	ldr	r1, [r7, #8]
 800467a:	68f8      	ldr	r0, [r7, #12]
 800467c:	f000 f848 	bl	8004710 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004682:	4618      	mov	r0, r3
 8004684:	3730      	adds	r7, #48	@ 0x30
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}

0800468a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800468a:	b580      	push	{r7, lr}
 800468c:	b08a      	sub	sp, #40	@ 0x28
 800468e:	af02      	add	r7, sp, #8
 8004690:	60f8      	str	r0, [r7, #12]
 8004692:	60b9      	str	r1, [r7, #8]
 8004694:	4613      	mov	r3, r2
 8004696:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d10d      	bne.n	80046ba <xQueueGenericCreate+0x30>
	__asm volatile
 800469e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046a2:	b672      	cpsid	i
 80046a4:	f383 8811 	msr	BASEPRI, r3
 80046a8:	f3bf 8f6f 	isb	sy
 80046ac:	f3bf 8f4f 	dsb	sy
 80046b0:	b662      	cpsie	i
 80046b2:	613b      	str	r3, [r7, #16]
}
 80046b4:	bf00      	nop
 80046b6:	bf00      	nop
 80046b8:	e7fd      	b.n	80046b6 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d102      	bne.n	80046c6 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80046c0:	2300      	movs	r3, #0
 80046c2:	61fb      	str	r3, [r7, #28]
 80046c4:	e004      	b.n	80046d0 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	68ba      	ldr	r2, [r7, #8]
 80046ca:	fb02 f303 	mul.w	r3, r2, r3
 80046ce:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	3348      	adds	r3, #72	@ 0x48
 80046d4:	4618      	mov	r0, r3
 80046d6:	f001 fea1 	bl	800641c <pvPortMalloc>
 80046da:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d011      	beq.n	8004706 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80046e2:	69bb      	ldr	r3, [r7, #24]
 80046e4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	3348      	adds	r3, #72	@ 0x48
 80046ea:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80046f4:	79fa      	ldrb	r2, [r7, #7]
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	9300      	str	r3, [sp, #0]
 80046fa:	4613      	mov	r3, r2
 80046fc:	697a      	ldr	r2, [r7, #20]
 80046fe:	68b9      	ldr	r1, [r7, #8]
 8004700:	68f8      	ldr	r0, [r7, #12]
 8004702:	f000 f805 	bl	8004710 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004706:	69bb      	ldr	r3, [r7, #24]
	}
 8004708:	4618      	mov	r0, r3
 800470a:	3720      	adds	r7, #32
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	607a      	str	r2, [r7, #4]
 800471c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d103      	bne.n	800472c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	69ba      	ldr	r2, [r7, #24]
 8004728:	601a      	str	r2, [r3, #0]
 800472a:	e002      	b.n	8004732 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004732:	69bb      	ldr	r3, [r7, #24]
 8004734:	68fa      	ldr	r2, [r7, #12]
 8004736:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	68ba      	ldr	r2, [r7, #8]
 800473c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800473e:	2101      	movs	r1, #1
 8004740:	69b8      	ldr	r0, [r7, #24]
 8004742:	f7ff feaf 	bl	80044a4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004746:	bf00      	nop
 8004748:	3710      	adds	r7, #16
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
	...

08004750 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b08e      	sub	sp, #56	@ 0x38
 8004754:	af00      	add	r7, sp, #0
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	60b9      	str	r1, [r7, #8]
 800475a:	607a      	str	r2, [r7, #4]
 800475c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800475e:	2300      	movs	r3, #0
 8004760:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004768:	2b00      	cmp	r3, #0
 800476a:	d10d      	bne.n	8004788 <xQueueGenericSend+0x38>
	__asm volatile
 800476c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004770:	b672      	cpsid	i
 8004772:	f383 8811 	msr	BASEPRI, r3
 8004776:	f3bf 8f6f 	isb	sy
 800477a:	f3bf 8f4f 	dsb	sy
 800477e:	b662      	cpsie	i
 8004780:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004782:	bf00      	nop
 8004784:	bf00      	nop
 8004786:	e7fd      	b.n	8004784 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d103      	bne.n	8004796 <xQueueGenericSend+0x46>
 800478e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004792:	2b00      	cmp	r3, #0
 8004794:	d101      	bne.n	800479a <xQueueGenericSend+0x4a>
 8004796:	2301      	movs	r3, #1
 8004798:	e000      	b.n	800479c <xQueueGenericSend+0x4c>
 800479a:	2300      	movs	r3, #0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d10d      	bne.n	80047bc <xQueueGenericSend+0x6c>
	__asm volatile
 80047a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047a4:	b672      	cpsid	i
 80047a6:	f383 8811 	msr	BASEPRI, r3
 80047aa:	f3bf 8f6f 	isb	sy
 80047ae:	f3bf 8f4f 	dsb	sy
 80047b2:	b662      	cpsie	i
 80047b4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80047b6:	bf00      	nop
 80047b8:	bf00      	nop
 80047ba:	e7fd      	b.n	80047b8 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d103      	bne.n	80047ca <xQueueGenericSend+0x7a>
 80047c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d101      	bne.n	80047ce <xQueueGenericSend+0x7e>
 80047ca:	2301      	movs	r3, #1
 80047cc:	e000      	b.n	80047d0 <xQueueGenericSend+0x80>
 80047ce:	2300      	movs	r3, #0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d10d      	bne.n	80047f0 <xQueueGenericSend+0xa0>
	__asm volatile
 80047d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047d8:	b672      	cpsid	i
 80047da:	f383 8811 	msr	BASEPRI, r3
 80047de:	f3bf 8f6f 	isb	sy
 80047e2:	f3bf 8f4f 	dsb	sy
 80047e6:	b662      	cpsie	i
 80047e8:	623b      	str	r3, [r7, #32]
}
 80047ea:	bf00      	nop
 80047ec:	bf00      	nop
 80047ee:	e7fd      	b.n	80047ec <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80047f0:	f001 f9d6 	bl	8005ba0 <xTaskGetSchedulerState>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d102      	bne.n	8004800 <xQueueGenericSend+0xb0>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d101      	bne.n	8004804 <xQueueGenericSend+0xb4>
 8004800:	2301      	movs	r3, #1
 8004802:	e000      	b.n	8004806 <xQueueGenericSend+0xb6>
 8004804:	2300      	movs	r3, #0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d10d      	bne.n	8004826 <xQueueGenericSend+0xd6>
	__asm volatile
 800480a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800480e:	b672      	cpsid	i
 8004810:	f383 8811 	msr	BASEPRI, r3
 8004814:	f3bf 8f6f 	isb	sy
 8004818:	f3bf 8f4f 	dsb	sy
 800481c:	b662      	cpsie	i
 800481e:	61fb      	str	r3, [r7, #28]
}
 8004820:	bf00      	nop
 8004822:	bf00      	nop
 8004824:	e7fd      	b.n	8004822 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004826:	f001 fd11 	bl	800624c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800482a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800482c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800482e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004830:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004832:	429a      	cmp	r2, r3
 8004834:	d302      	bcc.n	800483c <xQueueGenericSend+0xec>
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	2b02      	cmp	r3, #2
 800483a:	d129      	bne.n	8004890 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800483c:	683a      	ldr	r2, [r7, #0]
 800483e:	68b9      	ldr	r1, [r7, #8]
 8004840:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004842:	f000 faa7 	bl	8004d94 <prvCopyDataToQueue>
 8004846:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800484a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800484c:	2b00      	cmp	r3, #0
 800484e:	d010      	beq.n	8004872 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004852:	3324      	adds	r3, #36	@ 0x24
 8004854:	4618      	mov	r0, r3
 8004856:	f000 ffdb 	bl	8005810 <xTaskRemoveFromEventList>
 800485a:	4603      	mov	r3, r0
 800485c:	2b00      	cmp	r3, #0
 800485e:	d013      	beq.n	8004888 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004860:	4b3f      	ldr	r3, [pc, #252]	@ (8004960 <xQueueGenericSend+0x210>)
 8004862:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004866:	601a      	str	r2, [r3, #0]
 8004868:	f3bf 8f4f 	dsb	sy
 800486c:	f3bf 8f6f 	isb	sy
 8004870:	e00a      	b.n	8004888 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004874:	2b00      	cmp	r3, #0
 8004876:	d007      	beq.n	8004888 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004878:	4b39      	ldr	r3, [pc, #228]	@ (8004960 <xQueueGenericSend+0x210>)
 800487a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800487e:	601a      	str	r2, [r3, #0]
 8004880:	f3bf 8f4f 	dsb	sy
 8004884:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004888:	f001 fd16 	bl	80062b8 <vPortExitCritical>
				return pdPASS;
 800488c:	2301      	movs	r3, #1
 800488e:	e063      	b.n	8004958 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d103      	bne.n	800489e <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004896:	f001 fd0f 	bl	80062b8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800489a:	2300      	movs	r3, #0
 800489c:	e05c      	b.n	8004958 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800489e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d106      	bne.n	80048b2 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80048a4:	f107 0314 	add.w	r3, r7, #20
 80048a8:	4618      	mov	r0, r3
 80048aa:	f001 f817 	bl	80058dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80048ae:	2301      	movs	r3, #1
 80048b0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80048b2:	f001 fd01 	bl	80062b8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80048b6:	f000 fdbb 	bl	8005430 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80048ba:	f001 fcc7 	bl	800624c <vPortEnterCritical>
 80048be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80048c4:	b25b      	sxtb	r3, r3
 80048c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ca:	d103      	bne.n	80048d4 <xQueueGenericSend+0x184>
 80048cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ce:	2200      	movs	r2, #0
 80048d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80048d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80048da:	b25b      	sxtb	r3, r3
 80048dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048e0:	d103      	bne.n	80048ea <xQueueGenericSend+0x19a>
 80048e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80048ea:	f001 fce5 	bl	80062b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80048ee:	1d3a      	adds	r2, r7, #4
 80048f0:	f107 0314 	add.w	r3, r7, #20
 80048f4:	4611      	mov	r1, r2
 80048f6:	4618      	mov	r0, r3
 80048f8:	f001 f806 	bl	8005908 <xTaskCheckForTimeOut>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d124      	bne.n	800494c <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004902:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004904:	f000 fb3e 	bl	8004f84 <prvIsQueueFull>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	d018      	beq.n	8004940 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800490e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004910:	3310      	adds	r3, #16
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	4611      	mov	r1, r2
 8004916:	4618      	mov	r0, r3
 8004918:	f000 ff52 	bl	80057c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800491c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800491e:	f000 fac9 	bl	8004eb4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004922:	f000 fd93 	bl	800544c <xTaskResumeAll>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	f47f af7c 	bne.w	8004826 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800492e:	4b0c      	ldr	r3, [pc, #48]	@ (8004960 <xQueueGenericSend+0x210>)
 8004930:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004934:	601a      	str	r2, [r3, #0]
 8004936:	f3bf 8f4f 	dsb	sy
 800493a:	f3bf 8f6f 	isb	sy
 800493e:	e772      	b.n	8004826 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004940:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004942:	f000 fab7 	bl	8004eb4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004946:	f000 fd81 	bl	800544c <xTaskResumeAll>
 800494a:	e76c      	b.n	8004826 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800494c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800494e:	f000 fab1 	bl	8004eb4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004952:	f000 fd7b 	bl	800544c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004956:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004958:	4618      	mov	r0, r3
 800495a:	3738      	adds	r7, #56	@ 0x38
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}
 8004960:	e000ed04 	.word	0xe000ed04

08004964 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b08c      	sub	sp, #48	@ 0x30
 8004968:	af00      	add	r7, sp, #0
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	60b9      	str	r1, [r7, #8]
 800496e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004970:	2300      	movs	r3, #0
 8004972:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800497a:	2b00      	cmp	r3, #0
 800497c:	d10d      	bne.n	800499a <xQueueReceive+0x36>
	__asm volatile
 800497e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004982:	b672      	cpsid	i
 8004984:	f383 8811 	msr	BASEPRI, r3
 8004988:	f3bf 8f6f 	isb	sy
 800498c:	f3bf 8f4f 	dsb	sy
 8004990:	b662      	cpsie	i
 8004992:	623b      	str	r3, [r7, #32]
}
 8004994:	bf00      	nop
 8004996:	bf00      	nop
 8004998:	e7fd      	b.n	8004996 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d103      	bne.n	80049a8 <xQueueReceive+0x44>
 80049a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d101      	bne.n	80049ac <xQueueReceive+0x48>
 80049a8:	2301      	movs	r3, #1
 80049aa:	e000      	b.n	80049ae <xQueueReceive+0x4a>
 80049ac:	2300      	movs	r3, #0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d10d      	bne.n	80049ce <xQueueReceive+0x6a>
	__asm volatile
 80049b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049b6:	b672      	cpsid	i
 80049b8:	f383 8811 	msr	BASEPRI, r3
 80049bc:	f3bf 8f6f 	isb	sy
 80049c0:	f3bf 8f4f 	dsb	sy
 80049c4:	b662      	cpsie	i
 80049c6:	61fb      	str	r3, [r7, #28]
}
 80049c8:	bf00      	nop
 80049ca:	bf00      	nop
 80049cc:	e7fd      	b.n	80049ca <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80049ce:	f001 f8e7 	bl	8005ba0 <xTaskGetSchedulerState>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d102      	bne.n	80049de <xQueueReceive+0x7a>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d101      	bne.n	80049e2 <xQueueReceive+0x7e>
 80049de:	2301      	movs	r3, #1
 80049e0:	e000      	b.n	80049e4 <xQueueReceive+0x80>
 80049e2:	2300      	movs	r3, #0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d10d      	bne.n	8004a04 <xQueueReceive+0xa0>
	__asm volatile
 80049e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049ec:	b672      	cpsid	i
 80049ee:	f383 8811 	msr	BASEPRI, r3
 80049f2:	f3bf 8f6f 	isb	sy
 80049f6:	f3bf 8f4f 	dsb	sy
 80049fa:	b662      	cpsie	i
 80049fc:	61bb      	str	r3, [r7, #24]
}
 80049fe:	bf00      	nop
 8004a00:	bf00      	nop
 8004a02:	e7fd      	b.n	8004a00 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004a04:	f001 fc22 	bl	800624c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a0c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d01f      	beq.n	8004a54 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004a14:	68b9      	ldr	r1, [r7, #8]
 8004a16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a18:	f000 fa26 	bl	8004e68 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a1e:	1e5a      	subs	r2, r3, #1
 8004a20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a22:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a26:	691b      	ldr	r3, [r3, #16]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d00f      	beq.n	8004a4c <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a2e:	3310      	adds	r3, #16
 8004a30:	4618      	mov	r0, r3
 8004a32:	f000 feed 	bl	8005810 <xTaskRemoveFromEventList>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d007      	beq.n	8004a4c <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004a3c:	4b3c      	ldr	r3, [pc, #240]	@ (8004b30 <xQueueReceive+0x1cc>)
 8004a3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a42:	601a      	str	r2, [r3, #0]
 8004a44:	f3bf 8f4f 	dsb	sy
 8004a48:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004a4c:	f001 fc34 	bl	80062b8 <vPortExitCritical>
				return pdPASS;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e069      	b.n	8004b28 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d103      	bne.n	8004a62 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004a5a:	f001 fc2d 	bl	80062b8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	e062      	b.n	8004b28 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004a62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d106      	bne.n	8004a76 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004a68:	f107 0310 	add.w	r3, r7, #16
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f000 ff35 	bl	80058dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004a72:	2301      	movs	r3, #1
 8004a74:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004a76:	f001 fc1f 	bl	80062b8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004a7a:	f000 fcd9 	bl	8005430 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004a7e:	f001 fbe5 	bl	800624c <vPortEnterCritical>
 8004a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a84:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004a88:	b25b      	sxtb	r3, r3
 8004a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a8e:	d103      	bne.n	8004a98 <xQueueReceive+0x134>
 8004a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a92:	2200      	movs	r2, #0
 8004a94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a9a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004a9e:	b25b      	sxtb	r3, r3
 8004aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aa4:	d103      	bne.n	8004aae <xQueueReceive+0x14a>
 8004aa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004aae:	f001 fc03 	bl	80062b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ab2:	1d3a      	adds	r2, r7, #4
 8004ab4:	f107 0310 	add.w	r3, r7, #16
 8004ab8:	4611      	mov	r1, r2
 8004aba:	4618      	mov	r0, r3
 8004abc:	f000 ff24 	bl	8005908 <xTaskCheckForTimeOut>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d123      	bne.n	8004b0e <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ac6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ac8:	f000 fa46 	bl	8004f58 <prvIsQueueEmpty>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d017      	beq.n	8004b02 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ad4:	3324      	adds	r3, #36	@ 0x24
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	4611      	mov	r1, r2
 8004ada:	4618      	mov	r0, r3
 8004adc:	f000 fe70 	bl	80057c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004ae0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ae2:	f000 f9e7 	bl	8004eb4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004ae6:	f000 fcb1 	bl	800544c <xTaskResumeAll>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d189      	bne.n	8004a04 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8004af0:	4b0f      	ldr	r3, [pc, #60]	@ (8004b30 <xQueueReceive+0x1cc>)
 8004af2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004af6:	601a      	str	r2, [r3, #0]
 8004af8:	f3bf 8f4f 	dsb	sy
 8004afc:	f3bf 8f6f 	isb	sy
 8004b00:	e780      	b.n	8004a04 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004b02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004b04:	f000 f9d6 	bl	8004eb4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004b08:	f000 fca0 	bl	800544c <xTaskResumeAll>
 8004b0c:	e77a      	b.n	8004a04 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004b0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004b10:	f000 f9d0 	bl	8004eb4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004b14:	f000 fc9a 	bl	800544c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b18:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004b1a:	f000 fa1d 	bl	8004f58 <prvIsQueueEmpty>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	f43f af6f 	beq.w	8004a04 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004b26:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3730      	adds	r7, #48	@ 0x30
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	e000ed04 	.word	0xe000ed04

08004b34 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b08e      	sub	sp, #56	@ 0x38
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004b46:	2300      	movs	r3, #0
 8004b48:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004b4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d10d      	bne.n	8004b6c <xQueueSemaphoreTake+0x38>
	__asm volatile
 8004b50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b54:	b672      	cpsid	i
 8004b56:	f383 8811 	msr	BASEPRI, r3
 8004b5a:	f3bf 8f6f 	isb	sy
 8004b5e:	f3bf 8f4f 	dsb	sy
 8004b62:	b662      	cpsie	i
 8004b64:	623b      	str	r3, [r7, #32]
}
 8004b66:	bf00      	nop
 8004b68:	bf00      	nop
 8004b6a:	e7fd      	b.n	8004b68 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004b6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d00d      	beq.n	8004b90 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8004b74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b78:	b672      	cpsid	i
 8004b7a:	f383 8811 	msr	BASEPRI, r3
 8004b7e:	f3bf 8f6f 	isb	sy
 8004b82:	f3bf 8f4f 	dsb	sy
 8004b86:	b662      	cpsie	i
 8004b88:	61fb      	str	r3, [r7, #28]
}
 8004b8a:	bf00      	nop
 8004b8c:	bf00      	nop
 8004b8e:	e7fd      	b.n	8004b8c <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b90:	f001 f806 	bl	8005ba0 <xTaskGetSchedulerState>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d102      	bne.n	8004ba0 <xQueueSemaphoreTake+0x6c>
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d101      	bne.n	8004ba4 <xQueueSemaphoreTake+0x70>
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e000      	b.n	8004ba6 <xQueueSemaphoreTake+0x72>
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d10d      	bne.n	8004bc6 <xQueueSemaphoreTake+0x92>
	__asm volatile
 8004baa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bae:	b672      	cpsid	i
 8004bb0:	f383 8811 	msr	BASEPRI, r3
 8004bb4:	f3bf 8f6f 	isb	sy
 8004bb8:	f3bf 8f4f 	dsb	sy
 8004bbc:	b662      	cpsie	i
 8004bbe:	61bb      	str	r3, [r7, #24]
}
 8004bc0:	bf00      	nop
 8004bc2:	bf00      	nop
 8004bc4:	e7fd      	b.n	8004bc2 <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004bc6:	f001 fb41 	bl	800624c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004bca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bce:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004bd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d024      	beq.n	8004c20 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004bd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bd8:	1e5a      	subs	r2, r3, #1
 8004bda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bdc:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004bde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d104      	bne.n	8004bf0 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004be6:	f001 f9a5 	bl	8005f34 <pvTaskIncrementMutexHeldCount>
 8004bea:	4602      	mov	r2, r0
 8004bec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bee:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004bf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bf2:	691b      	ldr	r3, [r3, #16]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d00f      	beq.n	8004c18 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004bf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bfa:	3310      	adds	r3, #16
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f000 fe07 	bl	8005810 <xTaskRemoveFromEventList>
 8004c02:	4603      	mov	r3, r0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d007      	beq.n	8004c18 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004c08:	4b55      	ldr	r3, [pc, #340]	@ (8004d60 <xQueueSemaphoreTake+0x22c>)
 8004c0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c0e:	601a      	str	r2, [r3, #0]
 8004c10:	f3bf 8f4f 	dsb	sy
 8004c14:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004c18:	f001 fb4e 	bl	80062b8 <vPortExitCritical>
				return pdPASS;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e09a      	b.n	8004d56 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d114      	bne.n	8004c50 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d00d      	beq.n	8004c48 <xQueueSemaphoreTake+0x114>
	__asm volatile
 8004c2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c30:	b672      	cpsid	i
 8004c32:	f383 8811 	msr	BASEPRI, r3
 8004c36:	f3bf 8f6f 	isb	sy
 8004c3a:	f3bf 8f4f 	dsb	sy
 8004c3e:	b662      	cpsie	i
 8004c40:	617b      	str	r3, [r7, #20]
}
 8004c42:	bf00      	nop
 8004c44:	bf00      	nop
 8004c46:	e7fd      	b.n	8004c44 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004c48:	f001 fb36 	bl	80062b8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	e082      	b.n	8004d56 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004c50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d106      	bne.n	8004c64 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004c56:	f107 030c 	add.w	r3, r7, #12
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f000 fe3e 	bl	80058dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004c60:	2301      	movs	r3, #1
 8004c62:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004c64:	f001 fb28 	bl	80062b8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004c68:	f000 fbe2 	bl	8005430 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004c6c:	f001 faee 	bl	800624c <vPortEnterCritical>
 8004c70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c72:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004c76:	b25b      	sxtb	r3, r3
 8004c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c7c:	d103      	bne.n	8004c86 <xQueueSemaphoreTake+0x152>
 8004c7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c80:	2200      	movs	r2, #0
 8004c82:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c88:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004c8c:	b25b      	sxtb	r3, r3
 8004c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c92:	d103      	bne.n	8004c9c <xQueueSemaphoreTake+0x168>
 8004c94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c96:	2200      	movs	r2, #0
 8004c98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004c9c:	f001 fb0c 	bl	80062b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ca0:	463a      	mov	r2, r7
 8004ca2:	f107 030c 	add.w	r3, r7, #12
 8004ca6:	4611      	mov	r1, r2
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f000 fe2d 	bl	8005908 <xTaskCheckForTimeOut>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d132      	bne.n	8004d1a <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004cb4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004cb6:	f000 f94f 	bl	8004f58 <prvIsQueueEmpty>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d026      	beq.n	8004d0e <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004cc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d109      	bne.n	8004cdc <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8004cc8:	f001 fac0 	bl	800624c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004ccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f000 ff83 	bl	8005bdc <xTaskPriorityInherit>
 8004cd6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8004cd8:	f001 faee 	bl	80062b8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004cdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cde:	3324      	adds	r3, #36	@ 0x24
 8004ce0:	683a      	ldr	r2, [r7, #0]
 8004ce2:	4611      	mov	r1, r2
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f000 fd6b 	bl	80057c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004cea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004cec:	f000 f8e2 	bl	8004eb4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004cf0:	f000 fbac 	bl	800544c <xTaskResumeAll>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	f47f af65 	bne.w	8004bc6 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8004cfc:	4b18      	ldr	r3, [pc, #96]	@ (8004d60 <xQueueSemaphoreTake+0x22c>)
 8004cfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d02:	601a      	str	r2, [r3, #0]
 8004d04:	f3bf 8f4f 	dsb	sy
 8004d08:	f3bf 8f6f 	isb	sy
 8004d0c:	e75b      	b.n	8004bc6 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004d0e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004d10:	f000 f8d0 	bl	8004eb4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d14:	f000 fb9a 	bl	800544c <xTaskResumeAll>
 8004d18:	e755      	b.n	8004bc6 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004d1a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004d1c:	f000 f8ca 	bl	8004eb4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d20:	f000 fb94 	bl	800544c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d24:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004d26:	f000 f917 	bl	8004f58 <prvIsQueueEmpty>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	f43f af4a 	beq.w	8004bc6 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d00d      	beq.n	8004d54 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8004d38:	f001 fa88 	bl	800624c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004d3c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004d3e:	f000 f811 	bl	8004d64 <prvGetDisinheritPriorityAfterTimeout>
 8004d42:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004d44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f001 f852 	bl	8005df4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004d50:	f001 fab2 	bl	80062b8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004d54:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3738      	adds	r7, #56	@ 0x38
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	bf00      	nop
 8004d60:	e000ed04 	.word	0xe000ed04

08004d64 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004d64:	b480      	push	{r7}
 8004d66:	b085      	sub	sp, #20
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d006      	beq.n	8004d82 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f1c3 0307 	rsb	r3, r3, #7
 8004d7e:	60fb      	str	r3, [r7, #12]
 8004d80:	e001      	b.n	8004d86 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004d82:	2300      	movs	r3, #0
 8004d84:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004d86:	68fb      	ldr	r3, [r7, #12]
	}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3714      	adds	r7, #20
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr

08004d94 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b086      	sub	sp, #24
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	60f8      	str	r0, [r7, #12]
 8004d9c:	60b9      	str	r1, [r7, #8]
 8004d9e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004da0:	2300      	movs	r3, #0
 8004da2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004da8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d10d      	bne.n	8004dce <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d14d      	bne.n	8004e56 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f000 ff8c 	bl	8005cdc <xTaskPriorityDisinherit>
 8004dc4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	609a      	str	r2, [r3, #8]
 8004dcc:	e043      	b.n	8004e56 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d119      	bne.n	8004e08 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6858      	ldr	r0, [r3, #4]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ddc:	461a      	mov	r2, r3
 8004dde:	68b9      	ldr	r1, [r7, #8]
 8004de0:	f002 fd4b 	bl	800787a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	685a      	ldr	r2, [r3, #4]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dec:	441a      	add	r2, r3
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	685a      	ldr	r2, [r3, #4]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d32b      	bcc.n	8004e56 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	605a      	str	r2, [r3, #4]
 8004e06:	e026      	b.n	8004e56 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	68d8      	ldr	r0, [r3, #12]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e10:	461a      	mov	r2, r3
 8004e12:	68b9      	ldr	r1, [r7, #8]
 8004e14:	f002 fd31 	bl	800787a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	68da      	ldr	r2, [r3, #12]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e20:	425b      	negs	r3, r3
 8004e22:	441a      	add	r2, r3
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	68da      	ldr	r2, [r3, #12]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d207      	bcs.n	8004e44 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	689a      	ldr	r2, [r3, #8]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e3c:	425b      	negs	r3, r3
 8004e3e:	441a      	add	r2, r3
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2b02      	cmp	r3, #2
 8004e48:	d105      	bne.n	8004e56 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d002      	beq.n	8004e56 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	3b01      	subs	r3, #1
 8004e54:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	1c5a      	adds	r2, r3, #1
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004e5e:	697b      	ldr	r3, [r7, #20]
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3718      	adds	r7, #24
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b082      	sub	sp, #8
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d018      	beq.n	8004eac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	68da      	ldr	r2, [r3, #12]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e82:	441a      	add	r2, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	68da      	ldr	r2, [r3, #12]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d303      	bcc.n	8004e9c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	68d9      	ldr	r1, [r3, #12]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	6838      	ldr	r0, [r7, #0]
 8004ea8:	f002 fce7 	bl	800787a <memcpy>
	}
}
 8004eac:	bf00      	nop
 8004eae:	3708      	adds	r7, #8
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b084      	sub	sp, #16
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004ebc:	f001 f9c6 	bl	800624c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004ec6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ec8:	e011      	b.n	8004eee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d012      	beq.n	8004ef8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	3324      	adds	r3, #36	@ 0x24
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f000 fc9a 	bl	8005810 <xTaskRemoveFromEventList>
 8004edc:	4603      	mov	r3, r0
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d001      	beq.n	8004ee6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004ee2:	f000 fd79 	bl	80059d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004ee6:	7bfb      	ldrb	r3, [r7, #15]
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004eee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	dce9      	bgt.n	8004eca <prvUnlockQueue+0x16>
 8004ef6:	e000      	b.n	8004efa <prvUnlockQueue+0x46>
					break;
 8004ef8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	22ff      	movs	r2, #255	@ 0xff
 8004efe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004f02:	f001 f9d9 	bl	80062b8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004f06:	f001 f9a1 	bl	800624c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004f10:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f12:	e011      	b.n	8004f38 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	691b      	ldr	r3, [r3, #16]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d012      	beq.n	8004f42 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	3310      	adds	r3, #16
 8004f20:	4618      	mov	r0, r3
 8004f22:	f000 fc75 	bl	8005810 <xTaskRemoveFromEventList>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d001      	beq.n	8004f30 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004f2c:	f000 fd54 	bl	80059d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004f30:	7bbb      	ldrb	r3, [r7, #14]
 8004f32:	3b01      	subs	r3, #1
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	dce9      	bgt.n	8004f14 <prvUnlockQueue+0x60>
 8004f40:	e000      	b.n	8004f44 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004f42:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	22ff      	movs	r2, #255	@ 0xff
 8004f48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004f4c:	f001 f9b4 	bl	80062b8 <vPortExitCritical>
}
 8004f50:	bf00      	nop
 8004f52:	3710      	adds	r7, #16
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f60:	f001 f974 	bl	800624c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d102      	bne.n	8004f72 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	60fb      	str	r3, [r7, #12]
 8004f70:	e001      	b.n	8004f76 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004f72:	2300      	movs	r3, #0
 8004f74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004f76:	f001 f99f 	bl	80062b8 <vPortExitCritical>

	return xReturn;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3710      	adds	r7, #16
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b084      	sub	sp, #16
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f8c:	f001 f95e 	bl	800624c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d102      	bne.n	8004fa2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	60fb      	str	r3, [r7, #12]
 8004fa0:	e001      	b.n	8004fa6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004fa6:	f001 f987 	bl	80062b8 <vPortExitCritical>

	return xReturn;
 8004faa:	68fb      	ldr	r3, [r7, #12]
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3710      	adds	r7, #16
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b08e      	sub	sp, #56	@ 0x38
 8004fb8:	af04      	add	r7, sp, #16
 8004fba:	60f8      	str	r0, [r7, #12]
 8004fbc:	60b9      	str	r1, [r7, #8]
 8004fbe:	607a      	str	r2, [r7, #4]
 8004fc0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004fc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d10d      	bne.n	8004fe4 <xTaskCreateStatic+0x30>
	__asm volatile
 8004fc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fcc:	b672      	cpsid	i
 8004fce:	f383 8811 	msr	BASEPRI, r3
 8004fd2:	f3bf 8f6f 	isb	sy
 8004fd6:	f3bf 8f4f 	dsb	sy
 8004fda:	b662      	cpsie	i
 8004fdc:	623b      	str	r3, [r7, #32]
}
 8004fde:	bf00      	nop
 8004fe0:	bf00      	nop
 8004fe2:	e7fd      	b.n	8004fe0 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8004fe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d10d      	bne.n	8005006 <xTaskCreateStatic+0x52>
	__asm volatile
 8004fea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fee:	b672      	cpsid	i
 8004ff0:	f383 8811 	msr	BASEPRI, r3
 8004ff4:	f3bf 8f6f 	isb	sy
 8004ff8:	f3bf 8f4f 	dsb	sy
 8004ffc:	b662      	cpsie	i
 8004ffe:	61fb      	str	r3, [r7, #28]
}
 8005000:	bf00      	nop
 8005002:	bf00      	nop
 8005004:	e7fd      	b.n	8005002 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005006:	2354      	movs	r3, #84	@ 0x54
 8005008:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	2b54      	cmp	r3, #84	@ 0x54
 800500e:	d00d      	beq.n	800502c <xTaskCreateStatic+0x78>
	__asm volatile
 8005010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005014:	b672      	cpsid	i
 8005016:	f383 8811 	msr	BASEPRI, r3
 800501a:	f3bf 8f6f 	isb	sy
 800501e:	f3bf 8f4f 	dsb	sy
 8005022:	b662      	cpsie	i
 8005024:	61bb      	str	r3, [r7, #24]
}
 8005026:	bf00      	nop
 8005028:	bf00      	nop
 800502a:	e7fd      	b.n	8005028 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800502c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800502e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005030:	2b00      	cmp	r3, #0
 8005032:	d01e      	beq.n	8005072 <xTaskCreateStatic+0xbe>
 8005034:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005036:	2b00      	cmp	r3, #0
 8005038:	d01b      	beq.n	8005072 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800503a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800503c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800503e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005040:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005042:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005046:	2202      	movs	r2, #2
 8005048:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800504c:	2300      	movs	r3, #0
 800504e:	9303      	str	r3, [sp, #12]
 8005050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005052:	9302      	str	r3, [sp, #8]
 8005054:	f107 0314 	add.w	r3, r7, #20
 8005058:	9301      	str	r3, [sp, #4]
 800505a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800505c:	9300      	str	r3, [sp, #0]
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	68b9      	ldr	r1, [r7, #8]
 8005064:	68f8      	ldr	r0, [r7, #12]
 8005066:	f000 f850 	bl	800510a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800506a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800506c:	f000 f8d8 	bl	8005220 <prvAddNewTaskToReadyList>
 8005070:	e001      	b.n	8005076 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8005072:	2300      	movs	r3, #0
 8005074:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005076:	697b      	ldr	r3, [r7, #20]
	}
 8005078:	4618      	mov	r0, r3
 800507a:	3728      	adds	r7, #40	@ 0x28
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}

08005080 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005080:	b580      	push	{r7, lr}
 8005082:	b08c      	sub	sp, #48	@ 0x30
 8005084:	af04      	add	r7, sp, #16
 8005086:	60f8      	str	r0, [r7, #12]
 8005088:	60b9      	str	r1, [r7, #8]
 800508a:	603b      	str	r3, [r7, #0]
 800508c:	4613      	mov	r3, r2
 800508e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005090:	88fb      	ldrh	r3, [r7, #6]
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	4618      	mov	r0, r3
 8005096:	f001 f9c1 	bl	800641c <pvPortMalloc>
 800509a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d00e      	beq.n	80050c0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80050a2:	2054      	movs	r0, #84	@ 0x54
 80050a4:	f001 f9ba 	bl	800641c <pvPortMalloc>
 80050a8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80050aa:	69fb      	ldr	r3, [r7, #28]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d003      	beq.n	80050b8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	697a      	ldr	r2, [r7, #20]
 80050b4:	631a      	str	r2, [r3, #48]	@ 0x30
 80050b6:	e005      	b.n	80050c4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80050b8:	6978      	ldr	r0, [r7, #20]
 80050ba:	f001 fa7d 	bl	80065b8 <vPortFree>
 80050be:	e001      	b.n	80050c4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80050c0:	2300      	movs	r3, #0
 80050c2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d017      	beq.n	80050fa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	2200      	movs	r2, #0
 80050ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80050d2:	88fa      	ldrh	r2, [r7, #6]
 80050d4:	2300      	movs	r3, #0
 80050d6:	9303      	str	r3, [sp, #12]
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	9302      	str	r3, [sp, #8]
 80050dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050de:	9301      	str	r3, [sp, #4]
 80050e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050e2:	9300      	str	r3, [sp, #0]
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	68b9      	ldr	r1, [r7, #8]
 80050e8:	68f8      	ldr	r0, [r7, #12]
 80050ea:	f000 f80e 	bl	800510a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80050ee:	69f8      	ldr	r0, [r7, #28]
 80050f0:	f000 f896 	bl	8005220 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80050f4:	2301      	movs	r3, #1
 80050f6:	61bb      	str	r3, [r7, #24]
 80050f8:	e002      	b.n	8005100 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80050fa:	f04f 33ff 	mov.w	r3, #4294967295
 80050fe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005100:	69bb      	ldr	r3, [r7, #24]
	}
 8005102:	4618      	mov	r0, r3
 8005104:	3720      	adds	r7, #32
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}

0800510a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800510a:	b580      	push	{r7, lr}
 800510c:	b088      	sub	sp, #32
 800510e:	af00      	add	r7, sp, #0
 8005110:	60f8      	str	r0, [r7, #12]
 8005112:	60b9      	str	r1, [r7, #8]
 8005114:	607a      	str	r2, [r7, #4]
 8005116:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800511a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800511c:	6879      	ldr	r1, [r7, #4]
 800511e:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8005122:	440b      	add	r3, r1
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	4413      	add	r3, r2
 8005128:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800512a:	69bb      	ldr	r3, [r7, #24]
 800512c:	f023 0307 	bic.w	r3, r3, #7
 8005130:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	f003 0307 	and.w	r3, r3, #7
 8005138:	2b00      	cmp	r3, #0
 800513a:	d00d      	beq.n	8005158 <prvInitialiseNewTask+0x4e>
	__asm volatile
 800513c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005140:	b672      	cpsid	i
 8005142:	f383 8811 	msr	BASEPRI, r3
 8005146:	f3bf 8f6f 	isb	sy
 800514a:	f3bf 8f4f 	dsb	sy
 800514e:	b662      	cpsie	i
 8005150:	617b      	str	r3, [r7, #20]
}
 8005152:	bf00      	nop
 8005154:	bf00      	nop
 8005156:	e7fd      	b.n	8005154 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d01f      	beq.n	800519e <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800515e:	2300      	movs	r3, #0
 8005160:	61fb      	str	r3, [r7, #28]
 8005162:	e012      	b.n	800518a <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005164:	68ba      	ldr	r2, [r7, #8]
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	4413      	add	r3, r2
 800516a:	7819      	ldrb	r1, [r3, #0]
 800516c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	4413      	add	r3, r2
 8005172:	3334      	adds	r3, #52	@ 0x34
 8005174:	460a      	mov	r2, r1
 8005176:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005178:	68ba      	ldr	r2, [r7, #8]
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	4413      	add	r3, r2
 800517e:	781b      	ldrb	r3, [r3, #0]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d006      	beq.n	8005192 <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005184:	69fb      	ldr	r3, [r7, #28]
 8005186:	3301      	adds	r3, #1
 8005188:	61fb      	str	r3, [r7, #28]
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	2b0f      	cmp	r3, #15
 800518e:	d9e9      	bls.n	8005164 <prvInitialiseNewTask+0x5a>
 8005190:	e000      	b.n	8005194 <prvInitialiseNewTask+0x8a>
			{
				break;
 8005192:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005196:	2200      	movs	r2, #0
 8005198:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800519c:	e003      	b.n	80051a6 <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800519e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80051a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051a8:	2b06      	cmp	r3, #6
 80051aa:	d901      	bls.n	80051b0 <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80051ac:	2306      	movs	r3, #6
 80051ae:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80051b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80051b4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80051b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80051ba:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80051bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051be:	2200      	movs	r2, #0
 80051c0:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80051c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051c4:	3304      	adds	r3, #4
 80051c6:	4618      	mov	r0, r3
 80051c8:	f7ff f8d8 	bl	800437c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80051cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ce:	3318      	adds	r3, #24
 80051d0:	4618      	mov	r0, r3
 80051d2:	f7ff f8d3 	bl	800437c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80051d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051da:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051de:	f1c3 0207 	rsb	r2, r3, #7
 80051e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051e4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80051e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051ea:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80051ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ee:	2200      	movs	r2, #0
 80051f0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80051f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051f4:	2200      	movs	r2, #0
 80051f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80051fa:	683a      	ldr	r2, [r7, #0]
 80051fc:	68f9      	ldr	r1, [r7, #12]
 80051fe:	69b8      	ldr	r0, [r7, #24]
 8005200:	f000 ff12 	bl	8006028 <pxPortInitialiseStack>
 8005204:	4602      	mov	r2, r0
 8005206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005208:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800520a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800520c:	2b00      	cmp	r3, #0
 800520e:	d002      	beq.n	8005216 <prvInitialiseNewTask+0x10c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005212:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005214:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005216:	bf00      	nop
 8005218:	3720      	adds	r7, #32
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
	...

08005220 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b082      	sub	sp, #8
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005228:	f001 f810 	bl	800624c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800522c:	4b2a      	ldr	r3, [pc, #168]	@ (80052d8 <prvAddNewTaskToReadyList+0xb8>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	3301      	adds	r3, #1
 8005232:	4a29      	ldr	r2, [pc, #164]	@ (80052d8 <prvAddNewTaskToReadyList+0xb8>)
 8005234:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005236:	4b29      	ldr	r3, [pc, #164]	@ (80052dc <prvAddNewTaskToReadyList+0xbc>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d109      	bne.n	8005252 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800523e:	4a27      	ldr	r2, [pc, #156]	@ (80052dc <prvAddNewTaskToReadyList+0xbc>)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005244:	4b24      	ldr	r3, [pc, #144]	@ (80052d8 <prvAddNewTaskToReadyList+0xb8>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	2b01      	cmp	r3, #1
 800524a:	d110      	bne.n	800526e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800524c:	f000 fbe8 	bl	8005a20 <prvInitialiseTaskLists>
 8005250:	e00d      	b.n	800526e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005252:	4b23      	ldr	r3, [pc, #140]	@ (80052e0 <prvAddNewTaskToReadyList+0xc0>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d109      	bne.n	800526e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800525a:	4b20      	ldr	r3, [pc, #128]	@ (80052dc <prvAddNewTaskToReadyList+0xbc>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005264:	429a      	cmp	r2, r3
 8005266:	d802      	bhi.n	800526e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005268:	4a1c      	ldr	r2, [pc, #112]	@ (80052dc <prvAddNewTaskToReadyList+0xbc>)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800526e:	4b1d      	ldr	r3, [pc, #116]	@ (80052e4 <prvAddNewTaskToReadyList+0xc4>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	3301      	adds	r3, #1
 8005274:	4a1b      	ldr	r2, [pc, #108]	@ (80052e4 <prvAddNewTaskToReadyList+0xc4>)
 8005276:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800527c:	2201      	movs	r2, #1
 800527e:	409a      	lsls	r2, r3
 8005280:	4b19      	ldr	r3, [pc, #100]	@ (80052e8 <prvAddNewTaskToReadyList+0xc8>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4313      	orrs	r3, r2
 8005286:	4a18      	ldr	r2, [pc, #96]	@ (80052e8 <prvAddNewTaskToReadyList+0xc8>)
 8005288:	6013      	str	r3, [r2, #0]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800528e:	4613      	mov	r3, r2
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	4413      	add	r3, r2
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	4a15      	ldr	r2, [pc, #84]	@ (80052ec <prvAddNewTaskToReadyList+0xcc>)
 8005298:	441a      	add	r2, r3
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	3304      	adds	r3, #4
 800529e:	4619      	mov	r1, r3
 80052a0:	4610      	mov	r0, r2
 80052a2:	f7ff f878 	bl	8004396 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80052a6:	f001 f807 	bl	80062b8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80052aa:	4b0d      	ldr	r3, [pc, #52]	@ (80052e0 <prvAddNewTaskToReadyList+0xc0>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d00e      	beq.n	80052d0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80052b2:	4b0a      	ldr	r3, [pc, #40]	@ (80052dc <prvAddNewTaskToReadyList+0xbc>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052bc:	429a      	cmp	r2, r3
 80052be:	d207      	bcs.n	80052d0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80052c0:	4b0b      	ldr	r3, [pc, #44]	@ (80052f0 <prvAddNewTaskToReadyList+0xd0>)
 80052c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052c6:	601a      	str	r2, [r3, #0]
 80052c8:	f3bf 8f4f 	dsb	sy
 80052cc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052d0:	bf00      	nop
 80052d2:	3708      	adds	r7, #8
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	20000630 	.word	0x20000630
 80052dc:	20000530 	.word	0x20000530
 80052e0:	2000063c 	.word	0x2000063c
 80052e4:	2000064c 	.word	0x2000064c
 80052e8:	20000638 	.word	0x20000638
 80052ec:	20000534 	.word	0x20000534
 80052f0:	e000ed04 	.word	0xe000ed04

080052f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80052fc:	2300      	movs	r3, #0
 80052fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d01a      	beq.n	800533c <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005306:	4b15      	ldr	r3, [pc, #84]	@ (800535c <vTaskDelay+0x68>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d00d      	beq.n	800532a <vTaskDelay+0x36>
	__asm volatile
 800530e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005312:	b672      	cpsid	i
 8005314:	f383 8811 	msr	BASEPRI, r3
 8005318:	f3bf 8f6f 	isb	sy
 800531c:	f3bf 8f4f 	dsb	sy
 8005320:	b662      	cpsie	i
 8005322:	60bb      	str	r3, [r7, #8]
}
 8005324:	bf00      	nop
 8005326:	bf00      	nop
 8005328:	e7fd      	b.n	8005326 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800532a:	f000 f881 	bl	8005430 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800532e:	2100      	movs	r1, #0
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f000 fe13 	bl	8005f5c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005336:	f000 f889 	bl	800544c <xTaskResumeAll>
 800533a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d107      	bne.n	8005352 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8005342:	4b07      	ldr	r3, [pc, #28]	@ (8005360 <vTaskDelay+0x6c>)
 8005344:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005348:	601a      	str	r2, [r3, #0]
 800534a:	f3bf 8f4f 	dsb	sy
 800534e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005352:	bf00      	nop
 8005354:	3710      	adds	r7, #16
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}
 800535a:	bf00      	nop
 800535c:	20000658 	.word	0x20000658
 8005360:	e000ed04 	.word	0xe000ed04

08005364 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b08a      	sub	sp, #40	@ 0x28
 8005368:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800536a:	2300      	movs	r3, #0
 800536c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800536e:	2300      	movs	r3, #0
 8005370:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005372:	463a      	mov	r2, r7
 8005374:	1d39      	adds	r1, r7, #4
 8005376:	f107 0308 	add.w	r3, r7, #8
 800537a:	4618      	mov	r0, r3
 800537c:	f7fb fe52 	bl	8001024 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005380:	6839      	ldr	r1, [r7, #0]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	68ba      	ldr	r2, [r7, #8]
 8005386:	9202      	str	r2, [sp, #8]
 8005388:	9301      	str	r3, [sp, #4]
 800538a:	2300      	movs	r3, #0
 800538c:	9300      	str	r3, [sp, #0]
 800538e:	2300      	movs	r3, #0
 8005390:	460a      	mov	r2, r1
 8005392:	4921      	ldr	r1, [pc, #132]	@ (8005418 <vTaskStartScheduler+0xb4>)
 8005394:	4821      	ldr	r0, [pc, #132]	@ (800541c <vTaskStartScheduler+0xb8>)
 8005396:	f7ff fe0d 	bl	8004fb4 <xTaskCreateStatic>
 800539a:	4603      	mov	r3, r0
 800539c:	4a20      	ldr	r2, [pc, #128]	@ (8005420 <vTaskStartScheduler+0xbc>)
 800539e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80053a0:	4b1f      	ldr	r3, [pc, #124]	@ (8005420 <vTaskStartScheduler+0xbc>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d002      	beq.n	80053ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80053a8:	2301      	movs	r3, #1
 80053aa:	617b      	str	r3, [r7, #20]
 80053ac:	e001      	b.n	80053b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80053ae:	2300      	movs	r3, #0
 80053b0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d118      	bne.n	80053ea <vTaskStartScheduler+0x86>
	__asm volatile
 80053b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053bc:	b672      	cpsid	i
 80053be:	f383 8811 	msr	BASEPRI, r3
 80053c2:	f3bf 8f6f 	isb	sy
 80053c6:	f3bf 8f4f 	dsb	sy
 80053ca:	b662      	cpsie	i
 80053cc:	613b      	str	r3, [r7, #16]
}
 80053ce:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80053d0:	4b14      	ldr	r3, [pc, #80]	@ (8005424 <vTaskStartScheduler+0xc0>)
 80053d2:	f04f 32ff 	mov.w	r2, #4294967295
 80053d6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80053d8:	4b13      	ldr	r3, [pc, #76]	@ (8005428 <vTaskStartScheduler+0xc4>)
 80053da:	2201      	movs	r2, #1
 80053dc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80053de:	4b13      	ldr	r3, [pc, #76]	@ (800542c <vTaskStartScheduler+0xc8>)
 80053e0:	2200      	movs	r2, #0
 80053e2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80053e4:	f000 feb4 	bl	8006150 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80053e8:	e011      	b.n	800540e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053f0:	d10d      	bne.n	800540e <vTaskStartScheduler+0xaa>
	__asm volatile
 80053f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053f6:	b672      	cpsid	i
 80053f8:	f383 8811 	msr	BASEPRI, r3
 80053fc:	f3bf 8f6f 	isb	sy
 8005400:	f3bf 8f4f 	dsb	sy
 8005404:	b662      	cpsie	i
 8005406:	60fb      	str	r3, [r7, #12]
}
 8005408:	bf00      	nop
 800540a:	bf00      	nop
 800540c:	e7fd      	b.n	800540a <vTaskStartScheduler+0xa6>
}
 800540e:	bf00      	nop
 8005410:	3718      	adds	r7, #24
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop
 8005418:	0800afc4 	.word	0x0800afc4
 800541c:	080059f1 	.word	0x080059f1
 8005420:	20000654 	.word	0x20000654
 8005424:	20000650 	.word	0x20000650
 8005428:	2000063c 	.word	0x2000063c
 800542c:	20000634 	.word	0x20000634

08005430 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005430:	b480      	push	{r7}
 8005432:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005434:	4b04      	ldr	r3, [pc, #16]	@ (8005448 <vTaskSuspendAll+0x18>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	3301      	adds	r3, #1
 800543a:	4a03      	ldr	r2, [pc, #12]	@ (8005448 <vTaskSuspendAll+0x18>)
 800543c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800543e:	bf00      	nop
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr
 8005448:	20000658 	.word	0x20000658

0800544c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b084      	sub	sp, #16
 8005450:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005452:	2300      	movs	r3, #0
 8005454:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005456:	2300      	movs	r3, #0
 8005458:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800545a:	4b43      	ldr	r3, [pc, #268]	@ (8005568 <xTaskResumeAll+0x11c>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d10d      	bne.n	800547e <xTaskResumeAll+0x32>
	__asm volatile
 8005462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005466:	b672      	cpsid	i
 8005468:	f383 8811 	msr	BASEPRI, r3
 800546c:	f3bf 8f6f 	isb	sy
 8005470:	f3bf 8f4f 	dsb	sy
 8005474:	b662      	cpsie	i
 8005476:	603b      	str	r3, [r7, #0]
}
 8005478:	bf00      	nop
 800547a:	bf00      	nop
 800547c:	e7fd      	b.n	800547a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800547e:	f000 fee5 	bl	800624c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005482:	4b39      	ldr	r3, [pc, #228]	@ (8005568 <xTaskResumeAll+0x11c>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	3b01      	subs	r3, #1
 8005488:	4a37      	ldr	r2, [pc, #220]	@ (8005568 <xTaskResumeAll+0x11c>)
 800548a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800548c:	4b36      	ldr	r3, [pc, #216]	@ (8005568 <xTaskResumeAll+0x11c>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d161      	bne.n	8005558 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005494:	4b35      	ldr	r3, [pc, #212]	@ (800556c <xTaskResumeAll+0x120>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d05d      	beq.n	8005558 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800549c:	e02e      	b.n	80054fc <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800549e:	4b34      	ldr	r3, [pc, #208]	@ (8005570 <xTaskResumeAll+0x124>)
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	3318      	adds	r3, #24
 80054aa:	4618      	mov	r0, r3
 80054ac:	f7fe ffd0 	bl	8004450 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	3304      	adds	r3, #4
 80054b4:	4618      	mov	r0, r3
 80054b6:	f7fe ffcb 	bl	8004450 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054be:	2201      	movs	r2, #1
 80054c0:	409a      	lsls	r2, r3
 80054c2:	4b2c      	ldr	r3, [pc, #176]	@ (8005574 <xTaskResumeAll+0x128>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4313      	orrs	r3, r2
 80054c8:	4a2a      	ldr	r2, [pc, #168]	@ (8005574 <xTaskResumeAll+0x128>)
 80054ca:	6013      	str	r3, [r2, #0]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054d0:	4613      	mov	r3, r2
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	4413      	add	r3, r2
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	4a27      	ldr	r2, [pc, #156]	@ (8005578 <xTaskResumeAll+0x12c>)
 80054da:	441a      	add	r2, r3
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	3304      	adds	r3, #4
 80054e0:	4619      	mov	r1, r3
 80054e2:	4610      	mov	r0, r2
 80054e4:	f7fe ff57 	bl	8004396 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054ec:	4b23      	ldr	r3, [pc, #140]	@ (800557c <xTaskResumeAll+0x130>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d302      	bcc.n	80054fc <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80054f6:	4b22      	ldr	r3, [pc, #136]	@ (8005580 <xTaskResumeAll+0x134>)
 80054f8:	2201      	movs	r2, #1
 80054fa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80054fc:	4b1c      	ldr	r3, [pc, #112]	@ (8005570 <xTaskResumeAll+0x124>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d1cc      	bne.n	800549e <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d001      	beq.n	800550e <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800550a:	f000 fb29 	bl	8005b60 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800550e:	4b1d      	ldr	r3, [pc, #116]	@ (8005584 <xTaskResumeAll+0x138>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d010      	beq.n	800553c <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800551a:	f000 f837 	bl	800558c <xTaskIncrementTick>
 800551e:	4603      	mov	r3, r0
 8005520:	2b00      	cmp	r3, #0
 8005522:	d002      	beq.n	800552a <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8005524:	4b16      	ldr	r3, [pc, #88]	@ (8005580 <xTaskResumeAll+0x134>)
 8005526:	2201      	movs	r2, #1
 8005528:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	3b01      	subs	r3, #1
 800552e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d1f1      	bne.n	800551a <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8005536:	4b13      	ldr	r3, [pc, #76]	@ (8005584 <xTaskResumeAll+0x138>)
 8005538:	2200      	movs	r2, #0
 800553a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800553c:	4b10      	ldr	r3, [pc, #64]	@ (8005580 <xTaskResumeAll+0x134>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d009      	beq.n	8005558 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005544:	2301      	movs	r3, #1
 8005546:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005548:	4b0f      	ldr	r3, [pc, #60]	@ (8005588 <xTaskResumeAll+0x13c>)
 800554a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800554e:	601a      	str	r2, [r3, #0]
 8005550:	f3bf 8f4f 	dsb	sy
 8005554:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005558:	f000 feae 	bl	80062b8 <vPortExitCritical>

	return xAlreadyYielded;
 800555c:	68bb      	ldr	r3, [r7, #8]
}
 800555e:	4618      	mov	r0, r3
 8005560:	3710      	adds	r7, #16
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
 8005566:	bf00      	nop
 8005568:	20000658 	.word	0x20000658
 800556c:	20000630 	.word	0x20000630
 8005570:	200005f0 	.word	0x200005f0
 8005574:	20000638 	.word	0x20000638
 8005578:	20000534 	.word	0x20000534
 800557c:	20000530 	.word	0x20000530
 8005580:	20000644 	.word	0x20000644
 8005584:	20000640 	.word	0x20000640
 8005588:	e000ed04 	.word	0xe000ed04

0800558c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b086      	sub	sp, #24
 8005590:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005592:	2300      	movs	r3, #0
 8005594:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005596:	4b50      	ldr	r3, [pc, #320]	@ (80056d8 <xTaskIncrementTick+0x14c>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	2b00      	cmp	r3, #0
 800559c:	f040 808b 	bne.w	80056b6 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80055a0:	4b4e      	ldr	r3, [pc, #312]	@ (80056dc <xTaskIncrementTick+0x150>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	3301      	adds	r3, #1
 80055a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80055a8:	4a4c      	ldr	r2, [pc, #304]	@ (80056dc <xTaskIncrementTick+0x150>)
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d123      	bne.n	80055fc <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 80055b4:	4b4a      	ldr	r3, [pc, #296]	@ (80056e0 <xTaskIncrementTick+0x154>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d00d      	beq.n	80055da <xTaskIncrementTick+0x4e>
	__asm volatile
 80055be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055c2:	b672      	cpsid	i
 80055c4:	f383 8811 	msr	BASEPRI, r3
 80055c8:	f3bf 8f6f 	isb	sy
 80055cc:	f3bf 8f4f 	dsb	sy
 80055d0:	b662      	cpsie	i
 80055d2:	603b      	str	r3, [r7, #0]
}
 80055d4:	bf00      	nop
 80055d6:	bf00      	nop
 80055d8:	e7fd      	b.n	80055d6 <xTaskIncrementTick+0x4a>
 80055da:	4b41      	ldr	r3, [pc, #260]	@ (80056e0 <xTaskIncrementTick+0x154>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	60fb      	str	r3, [r7, #12]
 80055e0:	4b40      	ldr	r3, [pc, #256]	@ (80056e4 <xTaskIncrementTick+0x158>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a3e      	ldr	r2, [pc, #248]	@ (80056e0 <xTaskIncrementTick+0x154>)
 80055e6:	6013      	str	r3, [r2, #0]
 80055e8:	4a3e      	ldr	r2, [pc, #248]	@ (80056e4 <xTaskIncrementTick+0x158>)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	6013      	str	r3, [r2, #0]
 80055ee:	4b3e      	ldr	r3, [pc, #248]	@ (80056e8 <xTaskIncrementTick+0x15c>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	3301      	adds	r3, #1
 80055f4:	4a3c      	ldr	r2, [pc, #240]	@ (80056e8 <xTaskIncrementTick+0x15c>)
 80055f6:	6013      	str	r3, [r2, #0]
 80055f8:	f000 fab2 	bl	8005b60 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80055fc:	4b3b      	ldr	r3, [pc, #236]	@ (80056ec <xTaskIncrementTick+0x160>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	693a      	ldr	r2, [r7, #16]
 8005602:	429a      	cmp	r2, r3
 8005604:	d348      	bcc.n	8005698 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005606:	4b36      	ldr	r3, [pc, #216]	@ (80056e0 <xTaskIncrementTick+0x154>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d104      	bne.n	800561a <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005610:	4b36      	ldr	r3, [pc, #216]	@ (80056ec <xTaskIncrementTick+0x160>)
 8005612:	f04f 32ff 	mov.w	r2, #4294967295
 8005616:	601a      	str	r2, [r3, #0]
					break;
 8005618:	e03e      	b.n	8005698 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800561a:	4b31      	ldr	r3, [pc, #196]	@ (80056e0 <xTaskIncrementTick+0x154>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800562a:	693a      	ldr	r2, [r7, #16]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	429a      	cmp	r2, r3
 8005630:	d203      	bcs.n	800563a <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005632:	4a2e      	ldr	r2, [pc, #184]	@ (80056ec <xTaskIncrementTick+0x160>)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005638:	e02e      	b.n	8005698 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	3304      	adds	r3, #4
 800563e:	4618      	mov	r0, r3
 8005640:	f7fe ff06 	bl	8004450 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005648:	2b00      	cmp	r3, #0
 800564a:	d004      	beq.n	8005656 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	3318      	adds	r3, #24
 8005650:	4618      	mov	r0, r3
 8005652:	f7fe fefd 	bl	8004450 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800565a:	2201      	movs	r2, #1
 800565c:	409a      	lsls	r2, r3
 800565e:	4b24      	ldr	r3, [pc, #144]	@ (80056f0 <xTaskIncrementTick+0x164>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4313      	orrs	r3, r2
 8005664:	4a22      	ldr	r2, [pc, #136]	@ (80056f0 <xTaskIncrementTick+0x164>)
 8005666:	6013      	str	r3, [r2, #0]
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800566c:	4613      	mov	r3, r2
 800566e:	009b      	lsls	r3, r3, #2
 8005670:	4413      	add	r3, r2
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	4a1f      	ldr	r2, [pc, #124]	@ (80056f4 <xTaskIncrementTick+0x168>)
 8005676:	441a      	add	r2, r3
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	3304      	adds	r3, #4
 800567c:	4619      	mov	r1, r3
 800567e:	4610      	mov	r0, r2
 8005680:	f7fe fe89 	bl	8004396 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005688:	4b1b      	ldr	r3, [pc, #108]	@ (80056f8 <xTaskIncrementTick+0x16c>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800568e:	429a      	cmp	r2, r3
 8005690:	d3b9      	bcc.n	8005606 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8005692:	2301      	movs	r3, #1
 8005694:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005696:	e7b6      	b.n	8005606 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005698:	4b17      	ldr	r3, [pc, #92]	@ (80056f8 <xTaskIncrementTick+0x16c>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800569e:	4915      	ldr	r1, [pc, #84]	@ (80056f4 <xTaskIncrementTick+0x168>)
 80056a0:	4613      	mov	r3, r2
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	4413      	add	r3, r2
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	440b      	add	r3, r1
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d907      	bls.n	80056c0 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 80056b0:	2301      	movs	r3, #1
 80056b2:	617b      	str	r3, [r7, #20]
 80056b4:	e004      	b.n	80056c0 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80056b6:	4b11      	ldr	r3, [pc, #68]	@ (80056fc <xTaskIncrementTick+0x170>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	3301      	adds	r3, #1
 80056bc:	4a0f      	ldr	r2, [pc, #60]	@ (80056fc <xTaskIncrementTick+0x170>)
 80056be:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80056c0:	4b0f      	ldr	r3, [pc, #60]	@ (8005700 <xTaskIncrementTick+0x174>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d001      	beq.n	80056cc <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 80056c8:	2301      	movs	r3, #1
 80056ca:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80056cc:	697b      	ldr	r3, [r7, #20]
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3718      	adds	r7, #24
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	bf00      	nop
 80056d8:	20000658 	.word	0x20000658
 80056dc:	20000634 	.word	0x20000634
 80056e0:	200005e8 	.word	0x200005e8
 80056e4:	200005ec 	.word	0x200005ec
 80056e8:	20000648 	.word	0x20000648
 80056ec:	20000650 	.word	0x20000650
 80056f0:	20000638 	.word	0x20000638
 80056f4:	20000534 	.word	0x20000534
 80056f8:	20000530 	.word	0x20000530
 80056fc:	20000640 	.word	0x20000640
 8005700:	20000644 	.word	0x20000644

08005704 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005704:	b480      	push	{r7}
 8005706:	b087      	sub	sp, #28
 8005708:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800570a:	4b28      	ldr	r3, [pc, #160]	@ (80057ac <vTaskSwitchContext+0xa8>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d003      	beq.n	800571a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005712:	4b27      	ldr	r3, [pc, #156]	@ (80057b0 <vTaskSwitchContext+0xac>)
 8005714:	2201      	movs	r2, #1
 8005716:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005718:	e042      	b.n	80057a0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800571a:	4b25      	ldr	r3, [pc, #148]	@ (80057b0 <vTaskSwitchContext+0xac>)
 800571c:	2200      	movs	r2, #0
 800571e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005720:	4b24      	ldr	r3, [pc, #144]	@ (80057b4 <vTaskSwitchContext+0xb0>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	fab3 f383 	clz	r3, r3
 800572c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800572e:	7afb      	ldrb	r3, [r7, #11]
 8005730:	f1c3 031f 	rsb	r3, r3, #31
 8005734:	617b      	str	r3, [r7, #20]
 8005736:	4920      	ldr	r1, [pc, #128]	@ (80057b8 <vTaskSwitchContext+0xb4>)
 8005738:	697a      	ldr	r2, [r7, #20]
 800573a:	4613      	mov	r3, r2
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	4413      	add	r3, r2
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	440b      	add	r3, r1
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d10d      	bne.n	8005766 <vTaskSwitchContext+0x62>
	__asm volatile
 800574a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800574e:	b672      	cpsid	i
 8005750:	f383 8811 	msr	BASEPRI, r3
 8005754:	f3bf 8f6f 	isb	sy
 8005758:	f3bf 8f4f 	dsb	sy
 800575c:	b662      	cpsie	i
 800575e:	607b      	str	r3, [r7, #4]
}
 8005760:	bf00      	nop
 8005762:	bf00      	nop
 8005764:	e7fd      	b.n	8005762 <vTaskSwitchContext+0x5e>
 8005766:	697a      	ldr	r2, [r7, #20]
 8005768:	4613      	mov	r3, r2
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	4413      	add	r3, r2
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	4a11      	ldr	r2, [pc, #68]	@ (80057b8 <vTaskSwitchContext+0xb4>)
 8005772:	4413      	add	r3, r2
 8005774:	613b      	str	r3, [r7, #16]
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	685a      	ldr	r2, [r3, #4]
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	605a      	str	r2, [r3, #4]
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	685a      	ldr	r2, [r3, #4]
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	3308      	adds	r3, #8
 8005788:	429a      	cmp	r2, r3
 800578a:	d104      	bne.n	8005796 <vTaskSwitchContext+0x92>
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	685a      	ldr	r2, [r3, #4]
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	605a      	str	r2, [r3, #4]
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	4a07      	ldr	r2, [pc, #28]	@ (80057bc <vTaskSwitchContext+0xb8>)
 800579e:	6013      	str	r3, [r2, #0]
}
 80057a0:	bf00      	nop
 80057a2:	371c      	adds	r7, #28
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr
 80057ac:	20000658 	.word	0x20000658
 80057b0:	20000644 	.word	0x20000644
 80057b4:	20000638 	.word	0x20000638
 80057b8:	20000534 	.word	0x20000534
 80057bc:	20000530 	.word	0x20000530

080057c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d10d      	bne.n	80057ec <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 80057d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057d4:	b672      	cpsid	i
 80057d6:	f383 8811 	msr	BASEPRI, r3
 80057da:	f3bf 8f6f 	isb	sy
 80057de:	f3bf 8f4f 	dsb	sy
 80057e2:	b662      	cpsie	i
 80057e4:	60fb      	str	r3, [r7, #12]
}
 80057e6:	bf00      	nop
 80057e8:	bf00      	nop
 80057ea:	e7fd      	b.n	80057e8 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80057ec:	4b07      	ldr	r3, [pc, #28]	@ (800580c <vTaskPlaceOnEventList+0x4c>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	3318      	adds	r3, #24
 80057f2:	4619      	mov	r1, r3
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f7fe fdf2 	bl	80043de <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80057fa:	2101      	movs	r1, #1
 80057fc:	6838      	ldr	r0, [r7, #0]
 80057fe:	f000 fbad 	bl	8005f5c <prvAddCurrentTaskToDelayedList>
}
 8005802:	bf00      	nop
 8005804:	3710      	adds	r7, #16
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop
 800580c:	20000530 	.word	0x20000530

08005810 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b086      	sub	sp, #24
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d10d      	bne.n	8005842 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8005826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800582a:	b672      	cpsid	i
 800582c:	f383 8811 	msr	BASEPRI, r3
 8005830:	f3bf 8f6f 	isb	sy
 8005834:	f3bf 8f4f 	dsb	sy
 8005838:	b662      	cpsie	i
 800583a:	60fb      	str	r3, [r7, #12]
}
 800583c:	bf00      	nop
 800583e:	bf00      	nop
 8005840:	e7fd      	b.n	800583e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	3318      	adds	r3, #24
 8005846:	4618      	mov	r0, r3
 8005848:	f7fe fe02 	bl	8004450 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800584c:	4b1d      	ldr	r3, [pc, #116]	@ (80058c4 <xTaskRemoveFromEventList+0xb4>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d11c      	bne.n	800588e <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	3304      	adds	r3, #4
 8005858:	4618      	mov	r0, r3
 800585a:	f7fe fdf9 	bl	8004450 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005862:	2201      	movs	r2, #1
 8005864:	409a      	lsls	r2, r3
 8005866:	4b18      	ldr	r3, [pc, #96]	@ (80058c8 <xTaskRemoveFromEventList+0xb8>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4313      	orrs	r3, r2
 800586c:	4a16      	ldr	r2, [pc, #88]	@ (80058c8 <xTaskRemoveFromEventList+0xb8>)
 800586e:	6013      	str	r3, [r2, #0]
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005874:	4613      	mov	r3, r2
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	4413      	add	r3, r2
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	4a13      	ldr	r2, [pc, #76]	@ (80058cc <xTaskRemoveFromEventList+0xbc>)
 800587e:	441a      	add	r2, r3
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	3304      	adds	r3, #4
 8005884:	4619      	mov	r1, r3
 8005886:	4610      	mov	r0, r2
 8005888:	f7fe fd85 	bl	8004396 <vListInsertEnd>
 800588c:	e005      	b.n	800589a <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	3318      	adds	r3, #24
 8005892:	4619      	mov	r1, r3
 8005894:	480e      	ldr	r0, [pc, #56]	@ (80058d0 <xTaskRemoveFromEventList+0xc0>)
 8005896:	f7fe fd7e 	bl	8004396 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800589e:	4b0d      	ldr	r3, [pc, #52]	@ (80058d4 <xTaskRemoveFromEventList+0xc4>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d905      	bls.n	80058b4 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80058a8:	2301      	movs	r3, #1
 80058aa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80058ac:	4b0a      	ldr	r3, [pc, #40]	@ (80058d8 <xTaskRemoveFromEventList+0xc8>)
 80058ae:	2201      	movs	r2, #1
 80058b0:	601a      	str	r2, [r3, #0]
 80058b2:	e001      	b.n	80058b8 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 80058b4:	2300      	movs	r3, #0
 80058b6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80058b8:	697b      	ldr	r3, [r7, #20]
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3718      	adds	r7, #24
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	bf00      	nop
 80058c4:	20000658 	.word	0x20000658
 80058c8:	20000638 	.word	0x20000638
 80058cc:	20000534 	.word	0x20000534
 80058d0:	200005f0 	.word	0x200005f0
 80058d4:	20000530 	.word	0x20000530
 80058d8:	20000644 	.word	0x20000644

080058dc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80058dc:	b480      	push	{r7}
 80058de:	b083      	sub	sp, #12
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80058e4:	4b06      	ldr	r3, [pc, #24]	@ (8005900 <vTaskInternalSetTimeOutState+0x24>)
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80058ec:	4b05      	ldr	r3, [pc, #20]	@ (8005904 <vTaskInternalSetTimeOutState+0x28>)
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	605a      	str	r2, [r3, #4]
}
 80058f4:	bf00      	nop
 80058f6:	370c      	adds	r7, #12
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr
 8005900:	20000648 	.word	0x20000648
 8005904:	20000634 	.word	0x20000634

08005908 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b088      	sub	sp, #32
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d10d      	bne.n	8005934 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8005918:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800591c:	b672      	cpsid	i
 800591e:	f383 8811 	msr	BASEPRI, r3
 8005922:	f3bf 8f6f 	isb	sy
 8005926:	f3bf 8f4f 	dsb	sy
 800592a:	b662      	cpsie	i
 800592c:	613b      	str	r3, [r7, #16]
}
 800592e:	bf00      	nop
 8005930:	bf00      	nop
 8005932:	e7fd      	b.n	8005930 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d10d      	bne.n	8005956 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800593a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800593e:	b672      	cpsid	i
 8005940:	f383 8811 	msr	BASEPRI, r3
 8005944:	f3bf 8f6f 	isb	sy
 8005948:	f3bf 8f4f 	dsb	sy
 800594c:	b662      	cpsie	i
 800594e:	60fb      	str	r3, [r7, #12]
}
 8005950:	bf00      	nop
 8005952:	bf00      	nop
 8005954:	e7fd      	b.n	8005952 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8005956:	f000 fc79 	bl	800624c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800595a:	4b1d      	ldr	r3, [pc, #116]	@ (80059d0 <xTaskCheckForTimeOut+0xc8>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	69ba      	ldr	r2, [r7, #24]
 8005966:	1ad3      	subs	r3, r2, r3
 8005968:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005972:	d102      	bne.n	800597a <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005974:	2300      	movs	r3, #0
 8005976:	61fb      	str	r3, [r7, #28]
 8005978:	e023      	b.n	80059c2 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	4b15      	ldr	r3, [pc, #84]	@ (80059d4 <xTaskCheckForTimeOut+0xcc>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	429a      	cmp	r2, r3
 8005984:	d007      	beq.n	8005996 <xTaskCheckForTimeOut+0x8e>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	69ba      	ldr	r2, [r7, #24]
 800598c:	429a      	cmp	r2, r3
 800598e:	d302      	bcc.n	8005996 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005990:	2301      	movs	r3, #1
 8005992:	61fb      	str	r3, [r7, #28]
 8005994:	e015      	b.n	80059c2 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	697a      	ldr	r2, [r7, #20]
 800599c:	429a      	cmp	r2, r3
 800599e:	d20b      	bcs.n	80059b8 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	1ad2      	subs	r2, r2, r3
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f7ff ff95 	bl	80058dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80059b2:	2300      	movs	r3, #0
 80059b4:	61fb      	str	r3, [r7, #28]
 80059b6:	e004      	b.n	80059c2 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	2200      	movs	r2, #0
 80059bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80059be:	2301      	movs	r3, #1
 80059c0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80059c2:	f000 fc79 	bl	80062b8 <vPortExitCritical>

	return xReturn;
 80059c6:	69fb      	ldr	r3, [r7, #28]
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3720      	adds	r7, #32
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	20000634 	.word	0x20000634
 80059d4:	20000648 	.word	0x20000648

080059d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80059d8:	b480      	push	{r7}
 80059da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80059dc:	4b03      	ldr	r3, [pc, #12]	@ (80059ec <vTaskMissedYield+0x14>)
 80059de:	2201      	movs	r2, #1
 80059e0:	601a      	str	r2, [r3, #0]
}
 80059e2:	bf00      	nop
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr
 80059ec:	20000644 	.word	0x20000644

080059f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b082      	sub	sp, #8
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80059f8:	f000 f852 	bl	8005aa0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80059fc:	4b06      	ldr	r3, [pc, #24]	@ (8005a18 <prvIdleTask+0x28>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d9f9      	bls.n	80059f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005a04:	4b05      	ldr	r3, [pc, #20]	@ (8005a1c <prvIdleTask+0x2c>)
 8005a06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a0a:	601a      	str	r2, [r3, #0]
 8005a0c:	f3bf 8f4f 	dsb	sy
 8005a10:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005a14:	e7f0      	b.n	80059f8 <prvIdleTask+0x8>
 8005a16:	bf00      	nop
 8005a18:	20000534 	.word	0x20000534
 8005a1c:	e000ed04 	.word	0xe000ed04

08005a20 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b082      	sub	sp, #8
 8005a24:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a26:	2300      	movs	r3, #0
 8005a28:	607b      	str	r3, [r7, #4]
 8005a2a:	e00c      	b.n	8005a46 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	4613      	mov	r3, r2
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	4413      	add	r3, r2
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	4a12      	ldr	r2, [pc, #72]	@ (8005a80 <prvInitialiseTaskLists+0x60>)
 8005a38:	4413      	add	r3, r2
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f7fe fc7e 	bl	800433c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	3301      	adds	r3, #1
 8005a44:	607b      	str	r3, [r7, #4]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2b06      	cmp	r3, #6
 8005a4a:	d9ef      	bls.n	8005a2c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005a4c:	480d      	ldr	r0, [pc, #52]	@ (8005a84 <prvInitialiseTaskLists+0x64>)
 8005a4e:	f7fe fc75 	bl	800433c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005a52:	480d      	ldr	r0, [pc, #52]	@ (8005a88 <prvInitialiseTaskLists+0x68>)
 8005a54:	f7fe fc72 	bl	800433c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005a58:	480c      	ldr	r0, [pc, #48]	@ (8005a8c <prvInitialiseTaskLists+0x6c>)
 8005a5a:	f7fe fc6f 	bl	800433c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005a5e:	480c      	ldr	r0, [pc, #48]	@ (8005a90 <prvInitialiseTaskLists+0x70>)
 8005a60:	f7fe fc6c 	bl	800433c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005a64:	480b      	ldr	r0, [pc, #44]	@ (8005a94 <prvInitialiseTaskLists+0x74>)
 8005a66:	f7fe fc69 	bl	800433c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005a6a:	4b0b      	ldr	r3, [pc, #44]	@ (8005a98 <prvInitialiseTaskLists+0x78>)
 8005a6c:	4a05      	ldr	r2, [pc, #20]	@ (8005a84 <prvInitialiseTaskLists+0x64>)
 8005a6e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005a70:	4b0a      	ldr	r3, [pc, #40]	@ (8005a9c <prvInitialiseTaskLists+0x7c>)
 8005a72:	4a05      	ldr	r2, [pc, #20]	@ (8005a88 <prvInitialiseTaskLists+0x68>)
 8005a74:	601a      	str	r2, [r3, #0]
}
 8005a76:	bf00      	nop
 8005a78:	3708      	adds	r7, #8
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	bf00      	nop
 8005a80:	20000534 	.word	0x20000534
 8005a84:	200005c0 	.word	0x200005c0
 8005a88:	200005d4 	.word	0x200005d4
 8005a8c:	200005f0 	.word	0x200005f0
 8005a90:	20000604 	.word	0x20000604
 8005a94:	2000061c 	.word	0x2000061c
 8005a98:	200005e8 	.word	0x200005e8
 8005a9c:	200005ec 	.word	0x200005ec

08005aa0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b082      	sub	sp, #8
 8005aa4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005aa6:	e019      	b.n	8005adc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005aa8:	f000 fbd0 	bl	800624c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005aac:	4b10      	ldr	r3, [pc, #64]	@ (8005af0 <prvCheckTasksWaitingTermination+0x50>)
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	3304      	adds	r3, #4
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f7fe fcc9 	bl	8004450 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005abe:	4b0d      	ldr	r3, [pc, #52]	@ (8005af4 <prvCheckTasksWaitingTermination+0x54>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	3b01      	subs	r3, #1
 8005ac4:	4a0b      	ldr	r2, [pc, #44]	@ (8005af4 <prvCheckTasksWaitingTermination+0x54>)
 8005ac6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005ac8:	4b0b      	ldr	r3, [pc, #44]	@ (8005af8 <prvCheckTasksWaitingTermination+0x58>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	3b01      	subs	r3, #1
 8005ace:	4a0a      	ldr	r2, [pc, #40]	@ (8005af8 <prvCheckTasksWaitingTermination+0x58>)
 8005ad0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005ad2:	f000 fbf1 	bl	80062b8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 f810 	bl	8005afc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005adc:	4b06      	ldr	r3, [pc, #24]	@ (8005af8 <prvCheckTasksWaitingTermination+0x58>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d1e1      	bne.n	8005aa8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005ae4:	bf00      	nop
 8005ae6:	bf00      	nop
 8005ae8:	3708      	adds	r7, #8
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	bf00      	nop
 8005af0:	20000604 	.word	0x20000604
 8005af4:	20000630 	.word	0x20000630
 8005af8:	20000618 	.word	0x20000618

08005afc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b084      	sub	sp, #16
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d108      	bne.n	8005b20 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b12:	4618      	mov	r0, r3
 8005b14:	f000 fd50 	bl	80065b8 <vPortFree>
				vPortFree( pxTCB );
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f000 fd4d 	bl	80065b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005b1e:	e01b      	b.n	8005b58 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	d103      	bne.n	8005b32 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f000 fd44 	bl	80065b8 <vPortFree>
	}
 8005b30:	e012      	b.n	8005b58 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005b38:	2b02      	cmp	r3, #2
 8005b3a:	d00d      	beq.n	8005b58 <prvDeleteTCB+0x5c>
	__asm volatile
 8005b3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b40:	b672      	cpsid	i
 8005b42:	f383 8811 	msr	BASEPRI, r3
 8005b46:	f3bf 8f6f 	isb	sy
 8005b4a:	f3bf 8f4f 	dsb	sy
 8005b4e:	b662      	cpsie	i
 8005b50:	60fb      	str	r3, [r7, #12]
}
 8005b52:	bf00      	nop
 8005b54:	bf00      	nop
 8005b56:	e7fd      	b.n	8005b54 <prvDeleteTCB+0x58>
	}
 8005b58:	bf00      	nop
 8005b5a:	3710      	adds	r7, #16
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}

08005b60 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005b60:	b480      	push	{r7}
 8005b62:	b083      	sub	sp, #12
 8005b64:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b66:	4b0c      	ldr	r3, [pc, #48]	@ (8005b98 <prvResetNextTaskUnblockTime+0x38>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d104      	bne.n	8005b7a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005b70:	4b0a      	ldr	r3, [pc, #40]	@ (8005b9c <prvResetNextTaskUnblockTime+0x3c>)
 8005b72:	f04f 32ff 	mov.w	r2, #4294967295
 8005b76:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005b78:	e008      	b.n	8005b8c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b7a:	4b07      	ldr	r3, [pc, #28]	@ (8005b98 <prvResetNextTaskUnblockTime+0x38>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	4a04      	ldr	r2, [pc, #16]	@ (8005b9c <prvResetNextTaskUnblockTime+0x3c>)
 8005b8a:	6013      	str	r3, [r2, #0]
}
 8005b8c:	bf00      	nop
 8005b8e:	370c      	adds	r7, #12
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr
 8005b98:	200005e8 	.word	0x200005e8
 8005b9c:	20000650 	.word	0x20000650

08005ba0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b083      	sub	sp, #12
 8005ba4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005ba6:	4b0b      	ldr	r3, [pc, #44]	@ (8005bd4 <xTaskGetSchedulerState+0x34>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d102      	bne.n	8005bb4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	607b      	str	r3, [r7, #4]
 8005bb2:	e008      	b.n	8005bc6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005bb4:	4b08      	ldr	r3, [pc, #32]	@ (8005bd8 <xTaskGetSchedulerState+0x38>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d102      	bne.n	8005bc2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005bbc:	2302      	movs	r3, #2
 8005bbe:	607b      	str	r3, [r7, #4]
 8005bc0:	e001      	b.n	8005bc6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005bc6:	687b      	ldr	r3, [r7, #4]
	}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	370c      	adds	r7, #12
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr
 8005bd4:	2000063c 	.word	0x2000063c
 8005bd8:	20000658 	.word	0x20000658

08005bdc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b084      	sub	sp, #16
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005be8:	2300      	movs	r3, #0
 8005bea:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d069      	beq.n	8005cc6 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bf6:	4b36      	ldr	r3, [pc, #216]	@ (8005cd0 <xTaskPriorityInherit+0xf4>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d259      	bcs.n	8005cb4 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	699b      	ldr	r3, [r3, #24]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	db06      	blt.n	8005c16 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c08:	4b31      	ldr	r3, [pc, #196]	@ (8005cd0 <xTaskPriorityInherit+0xf4>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c0e:	f1c3 0207 	rsb	r2, r3, #7
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	6959      	ldr	r1, [r3, #20]
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c1e:	4613      	mov	r3, r2
 8005c20:	009b      	lsls	r3, r3, #2
 8005c22:	4413      	add	r3, r2
 8005c24:	009b      	lsls	r3, r3, #2
 8005c26:	4a2b      	ldr	r2, [pc, #172]	@ (8005cd4 <xTaskPriorityInherit+0xf8>)
 8005c28:	4413      	add	r3, r2
 8005c2a:	4299      	cmp	r1, r3
 8005c2c:	d13a      	bne.n	8005ca4 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	3304      	adds	r3, #4
 8005c32:	4618      	mov	r0, r3
 8005c34:	f7fe fc0c 	bl	8004450 <uxListRemove>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d115      	bne.n	8005c6a <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c42:	4924      	ldr	r1, [pc, #144]	@ (8005cd4 <xTaskPriorityInherit+0xf8>)
 8005c44:	4613      	mov	r3, r2
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	4413      	add	r3, r2
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	440b      	add	r3, r1
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d10a      	bne.n	8005c6a <xTaskPriorityInherit+0x8e>
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c58:	2201      	movs	r2, #1
 8005c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c5e:	43da      	mvns	r2, r3
 8005c60:	4b1d      	ldr	r3, [pc, #116]	@ (8005cd8 <xTaskPriorityInherit+0xfc>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4013      	ands	r3, r2
 8005c66:	4a1c      	ldr	r2, [pc, #112]	@ (8005cd8 <xTaskPriorityInherit+0xfc>)
 8005c68:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005c6a:	4b19      	ldr	r3, [pc, #100]	@ (8005cd0 <xTaskPriorityInherit+0xf4>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c78:	2201      	movs	r2, #1
 8005c7a:	409a      	lsls	r2, r3
 8005c7c:	4b16      	ldr	r3, [pc, #88]	@ (8005cd8 <xTaskPriorityInherit+0xfc>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4313      	orrs	r3, r2
 8005c82:	4a15      	ldr	r2, [pc, #84]	@ (8005cd8 <xTaskPriorityInherit+0xfc>)
 8005c84:	6013      	str	r3, [r2, #0]
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c8a:	4613      	mov	r3, r2
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	4413      	add	r3, r2
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	4a10      	ldr	r2, [pc, #64]	@ (8005cd4 <xTaskPriorityInherit+0xf8>)
 8005c94:	441a      	add	r2, r3
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	3304      	adds	r3, #4
 8005c9a:	4619      	mov	r1, r3
 8005c9c:	4610      	mov	r0, r2
 8005c9e:	f7fe fb7a 	bl	8004396 <vListInsertEnd>
 8005ca2:	e004      	b.n	8005cae <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005ca4:	4b0a      	ldr	r3, [pc, #40]	@ (8005cd0 <xTaskPriorityInherit+0xf4>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	60fb      	str	r3, [r7, #12]
 8005cb2:	e008      	b.n	8005cc6 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005cb8:	4b05      	ldr	r3, [pc, #20]	@ (8005cd0 <xTaskPriorityInherit+0xf4>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d201      	bcs.n	8005cc6 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
	}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3710      	adds	r7, #16
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}
 8005cd0:	20000530 	.word	0x20000530
 8005cd4:	20000534 	.word	0x20000534
 8005cd8:	20000638 	.word	0x20000638

08005cdc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b086      	sub	sp, #24
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d074      	beq.n	8005ddc <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005cf2:	4b3d      	ldr	r3, [pc, #244]	@ (8005de8 <xTaskPriorityDisinherit+0x10c>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	693a      	ldr	r2, [r7, #16]
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d00d      	beq.n	8005d18 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8005cfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d00:	b672      	cpsid	i
 8005d02:	f383 8811 	msr	BASEPRI, r3
 8005d06:	f3bf 8f6f 	isb	sy
 8005d0a:	f3bf 8f4f 	dsb	sy
 8005d0e:	b662      	cpsie	i
 8005d10:	60fb      	str	r3, [r7, #12]
}
 8005d12:	bf00      	nop
 8005d14:	bf00      	nop
 8005d16:	e7fd      	b.n	8005d14 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d10d      	bne.n	8005d3c <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8005d20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d24:	b672      	cpsid	i
 8005d26:	f383 8811 	msr	BASEPRI, r3
 8005d2a:	f3bf 8f6f 	isb	sy
 8005d2e:	f3bf 8f4f 	dsb	sy
 8005d32:	b662      	cpsie	i
 8005d34:	60bb      	str	r3, [r7, #8]
}
 8005d36:	bf00      	nop
 8005d38:	bf00      	nop
 8005d3a:	e7fd      	b.n	8005d38 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d40:	1e5a      	subs	r2, r3, #1
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d044      	beq.n	8005ddc <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d140      	bne.n	8005ddc <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	3304      	adds	r3, #4
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f7fe fb76 	bl	8004450 <uxListRemove>
 8005d64:	4603      	mov	r3, r0
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d115      	bne.n	8005d96 <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d6e:	491f      	ldr	r1, [pc, #124]	@ (8005dec <xTaskPriorityDisinherit+0x110>)
 8005d70:	4613      	mov	r3, r2
 8005d72:	009b      	lsls	r3, r3, #2
 8005d74:	4413      	add	r3, r2
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	440b      	add	r3, r1
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d10a      	bne.n	8005d96 <xTaskPriorityDisinherit+0xba>
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d84:	2201      	movs	r2, #1
 8005d86:	fa02 f303 	lsl.w	r3, r2, r3
 8005d8a:	43da      	mvns	r2, r3
 8005d8c:	4b18      	ldr	r3, [pc, #96]	@ (8005df0 <xTaskPriorityDisinherit+0x114>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4013      	ands	r3, r2
 8005d92:	4a17      	ldr	r2, [pc, #92]	@ (8005df0 <xTaskPriorityDisinherit+0x114>)
 8005d94:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005da2:	f1c3 0207 	rsb	r2, r3, #7
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dae:	2201      	movs	r2, #1
 8005db0:	409a      	lsls	r2, r3
 8005db2:	4b0f      	ldr	r3, [pc, #60]	@ (8005df0 <xTaskPriorityDisinherit+0x114>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	4a0d      	ldr	r2, [pc, #52]	@ (8005df0 <xTaskPriorityDisinherit+0x114>)
 8005dba:	6013      	str	r3, [r2, #0]
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005dc0:	4613      	mov	r3, r2
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	4413      	add	r3, r2
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	4a08      	ldr	r2, [pc, #32]	@ (8005dec <xTaskPriorityDisinherit+0x110>)
 8005dca:	441a      	add	r2, r3
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	3304      	adds	r3, #4
 8005dd0:	4619      	mov	r1, r3
 8005dd2:	4610      	mov	r0, r2
 8005dd4:	f7fe fadf 	bl	8004396 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005ddc:	697b      	ldr	r3, [r7, #20]
	}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3718      	adds	r7, #24
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	20000530 	.word	0x20000530
 8005dec:	20000534 	.word	0x20000534
 8005df0:	20000638 	.word	0x20000638

08005df4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b088      	sub	sp, #32
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005e02:	2301      	movs	r3, #1
 8005e04:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	f000 8089 	beq.w	8005f20 <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d10d      	bne.n	8005e32 <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 8005e16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e1a:	b672      	cpsid	i
 8005e1c:	f383 8811 	msr	BASEPRI, r3
 8005e20:	f3bf 8f6f 	isb	sy
 8005e24:	f3bf 8f4f 	dsb	sy
 8005e28:	b662      	cpsie	i
 8005e2a:	60fb      	str	r3, [r7, #12]
}
 8005e2c:	bf00      	nop
 8005e2e:	bf00      	nop
 8005e30:	e7fd      	b.n	8005e2e <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005e32:	69bb      	ldr	r3, [r7, #24]
 8005e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e36:	683a      	ldr	r2, [r7, #0]
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d902      	bls.n	8005e42 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	61fb      	str	r3, [r7, #28]
 8005e40:	e002      	b.n	8005e48 <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005e42:	69bb      	ldr	r3, [r7, #24]
 8005e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e46:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005e48:	69bb      	ldr	r3, [r7, #24]
 8005e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e4c:	69fa      	ldr	r2, [r7, #28]
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d066      	beq.n	8005f20 <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005e52:	69bb      	ldr	r3, [r7, #24]
 8005e54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e56:	697a      	ldr	r2, [r7, #20]
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d161      	bne.n	8005f20 <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005e5c:	4b32      	ldr	r3, [pc, #200]	@ (8005f28 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	69ba      	ldr	r2, [r7, #24]
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d10d      	bne.n	8005e82 <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 8005e66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e6a:	b672      	cpsid	i
 8005e6c:	f383 8811 	msr	BASEPRI, r3
 8005e70:	f3bf 8f6f 	isb	sy
 8005e74:	f3bf 8f4f 	dsb	sy
 8005e78:	b662      	cpsie	i
 8005e7a:	60bb      	str	r3, [r7, #8]
}
 8005e7c:	bf00      	nop
 8005e7e:	bf00      	nop
 8005e80:	e7fd      	b.n	8005e7e <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005e82:	69bb      	ldr	r3, [r7, #24]
 8005e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e86:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005e88:	69bb      	ldr	r3, [r7, #24]
 8005e8a:	69fa      	ldr	r2, [r7, #28]
 8005e8c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005e8e:	69bb      	ldr	r3, [r7, #24]
 8005e90:	699b      	ldr	r3, [r3, #24]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	db04      	blt.n	8005ea0 <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e96:	69fb      	ldr	r3, [r7, #28]
 8005e98:	f1c3 0207 	rsb	r2, r3, #7
 8005e9c:	69bb      	ldr	r3, [r7, #24]
 8005e9e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005ea0:	69bb      	ldr	r3, [r7, #24]
 8005ea2:	6959      	ldr	r1, [r3, #20]
 8005ea4:	693a      	ldr	r2, [r7, #16]
 8005ea6:	4613      	mov	r3, r2
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	4413      	add	r3, r2
 8005eac:	009b      	lsls	r3, r3, #2
 8005eae:	4a1f      	ldr	r2, [pc, #124]	@ (8005f2c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005eb0:	4413      	add	r3, r2
 8005eb2:	4299      	cmp	r1, r3
 8005eb4:	d134      	bne.n	8005f20 <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005eb6:	69bb      	ldr	r3, [r7, #24]
 8005eb8:	3304      	adds	r3, #4
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f7fe fac8 	bl	8004450 <uxListRemove>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d115      	bne.n	8005ef2 <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005ec6:	69bb      	ldr	r3, [r7, #24]
 8005ec8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005eca:	4918      	ldr	r1, [pc, #96]	@ (8005f2c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005ecc:	4613      	mov	r3, r2
 8005ece:	009b      	lsls	r3, r3, #2
 8005ed0:	4413      	add	r3, r2
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	440b      	add	r3, r1
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d10a      	bne.n	8005ef2 <vTaskPriorityDisinheritAfterTimeout+0xfe>
 8005edc:	69bb      	ldr	r3, [r7, #24]
 8005ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ee6:	43da      	mvns	r2, r3
 8005ee8:	4b11      	ldr	r3, [pc, #68]	@ (8005f30 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4013      	ands	r3, r2
 8005eee:	4a10      	ldr	r2, [pc, #64]	@ (8005f30 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8005ef0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005ef2:	69bb      	ldr	r3, [r7, #24]
 8005ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	409a      	lsls	r2, r3
 8005efa:	4b0d      	ldr	r3, [pc, #52]	@ (8005f30 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	4a0b      	ldr	r2, [pc, #44]	@ (8005f30 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8005f02:	6013      	str	r3, [r2, #0]
 8005f04:	69bb      	ldr	r3, [r7, #24]
 8005f06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f08:	4613      	mov	r3, r2
 8005f0a:	009b      	lsls	r3, r3, #2
 8005f0c:	4413      	add	r3, r2
 8005f0e:	009b      	lsls	r3, r3, #2
 8005f10:	4a06      	ldr	r2, [pc, #24]	@ (8005f2c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005f12:	441a      	add	r2, r3
 8005f14:	69bb      	ldr	r3, [r7, #24]
 8005f16:	3304      	adds	r3, #4
 8005f18:	4619      	mov	r1, r3
 8005f1a:	4610      	mov	r0, r2
 8005f1c:	f7fe fa3b 	bl	8004396 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005f20:	bf00      	nop
 8005f22:	3720      	adds	r7, #32
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}
 8005f28:	20000530 	.word	0x20000530
 8005f2c:	20000534 	.word	0x20000534
 8005f30:	20000638 	.word	0x20000638

08005f34 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005f34:	b480      	push	{r7}
 8005f36:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005f38:	4b07      	ldr	r3, [pc, #28]	@ (8005f58 <pvTaskIncrementMutexHeldCount+0x24>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d004      	beq.n	8005f4a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005f40:	4b05      	ldr	r3, [pc, #20]	@ (8005f58 <pvTaskIncrementMutexHeldCount+0x24>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005f46:	3201      	adds	r2, #1
 8005f48:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8005f4a:	4b03      	ldr	r3, [pc, #12]	@ (8005f58 <pvTaskIncrementMutexHeldCount+0x24>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
	}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr
 8005f58:	20000530 	.word	0x20000530

08005f5c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b084      	sub	sp, #16
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005f66:	4b29      	ldr	r3, [pc, #164]	@ (800600c <prvAddCurrentTaskToDelayedList+0xb0>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f6c:	4b28      	ldr	r3, [pc, #160]	@ (8006010 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	3304      	adds	r3, #4
 8005f72:	4618      	mov	r0, r3
 8005f74:	f7fe fa6c 	bl	8004450 <uxListRemove>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d10b      	bne.n	8005f96 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005f7e:	4b24      	ldr	r3, [pc, #144]	@ (8006010 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f84:	2201      	movs	r2, #1
 8005f86:	fa02 f303 	lsl.w	r3, r2, r3
 8005f8a:	43da      	mvns	r2, r3
 8005f8c:	4b21      	ldr	r3, [pc, #132]	@ (8006014 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4013      	ands	r3, r2
 8005f92:	4a20      	ldr	r2, [pc, #128]	@ (8006014 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005f94:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f9c:	d10a      	bne.n	8005fb4 <prvAddCurrentTaskToDelayedList+0x58>
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d007      	beq.n	8005fb4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005fa4:	4b1a      	ldr	r3, [pc, #104]	@ (8006010 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	3304      	adds	r3, #4
 8005faa:	4619      	mov	r1, r3
 8005fac:	481a      	ldr	r0, [pc, #104]	@ (8006018 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005fae:	f7fe f9f2 	bl	8004396 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005fb2:	e026      	b.n	8006002 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005fb4:	68fa      	ldr	r2, [r7, #12]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	4413      	add	r3, r2
 8005fba:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005fbc:	4b14      	ldr	r3, [pc, #80]	@ (8006010 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	68ba      	ldr	r2, [r7, #8]
 8005fc2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005fc4:	68ba      	ldr	r2, [r7, #8]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d209      	bcs.n	8005fe0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005fcc:	4b13      	ldr	r3, [pc, #76]	@ (800601c <prvAddCurrentTaskToDelayedList+0xc0>)
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	4b0f      	ldr	r3, [pc, #60]	@ (8006010 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	3304      	adds	r3, #4
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	4610      	mov	r0, r2
 8005fda:	f7fe fa00 	bl	80043de <vListInsert>
}
 8005fde:	e010      	b.n	8006002 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005fe0:	4b0f      	ldr	r3, [pc, #60]	@ (8006020 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	4b0a      	ldr	r3, [pc, #40]	@ (8006010 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	3304      	adds	r3, #4
 8005fea:	4619      	mov	r1, r3
 8005fec:	4610      	mov	r0, r2
 8005fee:	f7fe f9f6 	bl	80043de <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005ff2:	4b0c      	ldr	r3, [pc, #48]	@ (8006024 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	68ba      	ldr	r2, [r7, #8]
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d202      	bcs.n	8006002 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005ffc:	4a09      	ldr	r2, [pc, #36]	@ (8006024 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	6013      	str	r3, [r2, #0]
}
 8006002:	bf00      	nop
 8006004:	3710      	adds	r7, #16
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
 800600a:	bf00      	nop
 800600c:	20000634 	.word	0x20000634
 8006010:	20000530 	.word	0x20000530
 8006014:	20000638 	.word	0x20000638
 8006018:	2000061c 	.word	0x2000061c
 800601c:	200005ec 	.word	0x200005ec
 8006020:	200005e8 	.word	0x200005e8
 8006024:	20000650 	.word	0x20000650

08006028 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006028:	b480      	push	{r7}
 800602a:	b085      	sub	sp, #20
 800602c:	af00      	add	r7, sp, #0
 800602e:	60f8      	str	r0, [r7, #12]
 8006030:	60b9      	str	r1, [r7, #8]
 8006032:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	3b04      	subs	r3, #4
 8006038:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006040:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	3b04      	subs	r3, #4
 8006046:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	f023 0201 	bic.w	r2, r3, #1
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	3b04      	subs	r3, #4
 8006056:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006058:	4a0c      	ldr	r2, [pc, #48]	@ (800608c <pxPortInitialiseStack+0x64>)
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	3b14      	subs	r3, #20
 8006062:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006064:	687a      	ldr	r2, [r7, #4]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	3b04      	subs	r3, #4
 800606e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f06f 0202 	mvn.w	r2, #2
 8006076:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	3b20      	subs	r3, #32
 800607c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800607e:	68fb      	ldr	r3, [r7, #12]
}
 8006080:	4618      	mov	r0, r3
 8006082:	3714      	adds	r7, #20
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr
 800608c:	08006091 	.word	0x08006091

08006090 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006090:	b480      	push	{r7}
 8006092:	b085      	sub	sp, #20
 8006094:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006096:	2300      	movs	r3, #0
 8006098:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800609a:	4b15      	ldr	r3, [pc, #84]	@ (80060f0 <prvTaskExitError+0x60>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060a2:	d00d      	beq.n	80060c0 <prvTaskExitError+0x30>
	__asm volatile
 80060a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060a8:	b672      	cpsid	i
 80060aa:	f383 8811 	msr	BASEPRI, r3
 80060ae:	f3bf 8f6f 	isb	sy
 80060b2:	f3bf 8f4f 	dsb	sy
 80060b6:	b662      	cpsie	i
 80060b8:	60fb      	str	r3, [r7, #12]
}
 80060ba:	bf00      	nop
 80060bc:	bf00      	nop
 80060be:	e7fd      	b.n	80060bc <prvTaskExitError+0x2c>
	__asm volatile
 80060c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060c4:	b672      	cpsid	i
 80060c6:	f383 8811 	msr	BASEPRI, r3
 80060ca:	f3bf 8f6f 	isb	sy
 80060ce:	f3bf 8f4f 	dsb	sy
 80060d2:	b662      	cpsie	i
 80060d4:	60bb      	str	r3, [r7, #8]
}
 80060d6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80060d8:	bf00      	nop
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d0fc      	beq.n	80060da <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80060e0:	bf00      	nop
 80060e2:	bf00      	nop
 80060e4:	3714      	adds	r7, #20
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr
 80060ee:	bf00      	nop
 80060f0:	2000000c 	.word	0x2000000c
	...

08006100 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006100:	4b07      	ldr	r3, [pc, #28]	@ (8006120 <pxCurrentTCBConst2>)
 8006102:	6819      	ldr	r1, [r3, #0]
 8006104:	6808      	ldr	r0, [r1, #0]
 8006106:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800610a:	f380 8809 	msr	PSP, r0
 800610e:	f3bf 8f6f 	isb	sy
 8006112:	f04f 0000 	mov.w	r0, #0
 8006116:	f380 8811 	msr	BASEPRI, r0
 800611a:	4770      	bx	lr
 800611c:	f3af 8000 	nop.w

08006120 <pxCurrentTCBConst2>:
 8006120:	20000530 	.word	0x20000530
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006124:	bf00      	nop
 8006126:	bf00      	nop

08006128 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006128:	4808      	ldr	r0, [pc, #32]	@ (800614c <prvPortStartFirstTask+0x24>)
 800612a:	6800      	ldr	r0, [r0, #0]
 800612c:	6800      	ldr	r0, [r0, #0]
 800612e:	f380 8808 	msr	MSP, r0
 8006132:	f04f 0000 	mov.w	r0, #0
 8006136:	f380 8814 	msr	CONTROL, r0
 800613a:	b662      	cpsie	i
 800613c:	b661      	cpsie	f
 800613e:	f3bf 8f4f 	dsb	sy
 8006142:	f3bf 8f6f 	isb	sy
 8006146:	df00      	svc	0
 8006148:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800614a:	bf00      	nop
 800614c:	e000ed08 	.word	0xe000ed08

08006150 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b084      	sub	sp, #16
 8006154:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006156:	4b37      	ldr	r3, [pc, #220]	@ (8006234 <xPortStartScheduler+0xe4>)
 8006158:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	781b      	ldrb	r3, [r3, #0]
 800615e:	b2db      	uxtb	r3, r3
 8006160:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	22ff      	movs	r2, #255	@ 0xff
 8006166:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	b2db      	uxtb	r3, r3
 800616e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006170:	78fb      	ldrb	r3, [r7, #3]
 8006172:	b2db      	uxtb	r3, r3
 8006174:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006178:	b2da      	uxtb	r2, r3
 800617a:	4b2f      	ldr	r3, [pc, #188]	@ (8006238 <xPortStartScheduler+0xe8>)
 800617c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800617e:	4b2f      	ldr	r3, [pc, #188]	@ (800623c <xPortStartScheduler+0xec>)
 8006180:	2207      	movs	r2, #7
 8006182:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006184:	e009      	b.n	800619a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006186:	4b2d      	ldr	r3, [pc, #180]	@ (800623c <xPortStartScheduler+0xec>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	3b01      	subs	r3, #1
 800618c:	4a2b      	ldr	r2, [pc, #172]	@ (800623c <xPortStartScheduler+0xec>)
 800618e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006190:	78fb      	ldrb	r3, [r7, #3]
 8006192:	b2db      	uxtb	r3, r3
 8006194:	005b      	lsls	r3, r3, #1
 8006196:	b2db      	uxtb	r3, r3
 8006198:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800619a:	78fb      	ldrb	r3, [r7, #3]
 800619c:	b2db      	uxtb	r3, r3
 800619e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061a2:	2b80      	cmp	r3, #128	@ 0x80
 80061a4:	d0ef      	beq.n	8006186 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80061a6:	4b25      	ldr	r3, [pc, #148]	@ (800623c <xPortStartScheduler+0xec>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f1c3 0307 	rsb	r3, r3, #7
 80061ae:	2b04      	cmp	r3, #4
 80061b0:	d00d      	beq.n	80061ce <xPortStartScheduler+0x7e>
	__asm volatile
 80061b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061b6:	b672      	cpsid	i
 80061b8:	f383 8811 	msr	BASEPRI, r3
 80061bc:	f3bf 8f6f 	isb	sy
 80061c0:	f3bf 8f4f 	dsb	sy
 80061c4:	b662      	cpsie	i
 80061c6:	60bb      	str	r3, [r7, #8]
}
 80061c8:	bf00      	nop
 80061ca:	bf00      	nop
 80061cc:	e7fd      	b.n	80061ca <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80061ce:	4b1b      	ldr	r3, [pc, #108]	@ (800623c <xPortStartScheduler+0xec>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	021b      	lsls	r3, r3, #8
 80061d4:	4a19      	ldr	r2, [pc, #100]	@ (800623c <xPortStartScheduler+0xec>)
 80061d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80061d8:	4b18      	ldr	r3, [pc, #96]	@ (800623c <xPortStartScheduler+0xec>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80061e0:	4a16      	ldr	r2, [pc, #88]	@ (800623c <xPortStartScheduler+0xec>)
 80061e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	b2da      	uxtb	r2, r3
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80061ec:	4b14      	ldr	r3, [pc, #80]	@ (8006240 <xPortStartScheduler+0xf0>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a13      	ldr	r2, [pc, #76]	@ (8006240 <xPortStartScheduler+0xf0>)
 80061f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80061f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80061f8:	4b11      	ldr	r3, [pc, #68]	@ (8006240 <xPortStartScheduler+0xf0>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a10      	ldr	r2, [pc, #64]	@ (8006240 <xPortStartScheduler+0xf0>)
 80061fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006202:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006204:	f000 f8dc 	bl	80063c0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006208:	4b0e      	ldr	r3, [pc, #56]	@ (8006244 <xPortStartScheduler+0xf4>)
 800620a:	2200      	movs	r2, #0
 800620c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800620e:	f000 f8fb 	bl	8006408 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006212:	4b0d      	ldr	r3, [pc, #52]	@ (8006248 <xPortStartScheduler+0xf8>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a0c      	ldr	r2, [pc, #48]	@ (8006248 <xPortStartScheduler+0xf8>)
 8006218:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800621c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800621e:	f7ff ff83 	bl	8006128 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006222:	f7ff fa6f 	bl	8005704 <vTaskSwitchContext>
	prvTaskExitError();
 8006226:	f7ff ff33 	bl	8006090 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800622a:	2300      	movs	r3, #0
}
 800622c:	4618      	mov	r0, r3
 800622e:	3710      	adds	r7, #16
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}
 8006234:	e000e400 	.word	0xe000e400
 8006238:	2000065c 	.word	0x2000065c
 800623c:	20000660 	.word	0x20000660
 8006240:	e000ed20 	.word	0xe000ed20
 8006244:	2000000c 	.word	0x2000000c
 8006248:	e000ef34 	.word	0xe000ef34

0800624c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800624c:	b480      	push	{r7}
 800624e:	b083      	sub	sp, #12
 8006250:	af00      	add	r7, sp, #0
	__asm volatile
 8006252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006256:	b672      	cpsid	i
 8006258:	f383 8811 	msr	BASEPRI, r3
 800625c:	f3bf 8f6f 	isb	sy
 8006260:	f3bf 8f4f 	dsb	sy
 8006264:	b662      	cpsie	i
 8006266:	607b      	str	r3, [r7, #4]
}
 8006268:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800626a:	4b11      	ldr	r3, [pc, #68]	@ (80062b0 <vPortEnterCritical+0x64>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	3301      	adds	r3, #1
 8006270:	4a0f      	ldr	r2, [pc, #60]	@ (80062b0 <vPortEnterCritical+0x64>)
 8006272:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006274:	4b0e      	ldr	r3, [pc, #56]	@ (80062b0 <vPortEnterCritical+0x64>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	2b01      	cmp	r3, #1
 800627a:	d112      	bne.n	80062a2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800627c:	4b0d      	ldr	r3, [pc, #52]	@ (80062b4 <vPortEnterCritical+0x68>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	b2db      	uxtb	r3, r3
 8006282:	2b00      	cmp	r3, #0
 8006284:	d00d      	beq.n	80062a2 <vPortEnterCritical+0x56>
	__asm volatile
 8006286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800628a:	b672      	cpsid	i
 800628c:	f383 8811 	msr	BASEPRI, r3
 8006290:	f3bf 8f6f 	isb	sy
 8006294:	f3bf 8f4f 	dsb	sy
 8006298:	b662      	cpsie	i
 800629a:	603b      	str	r3, [r7, #0]
}
 800629c:	bf00      	nop
 800629e:	bf00      	nop
 80062a0:	e7fd      	b.n	800629e <vPortEnterCritical+0x52>
	}
}
 80062a2:	bf00      	nop
 80062a4:	370c      	adds	r7, #12
 80062a6:	46bd      	mov	sp, r7
 80062a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ac:	4770      	bx	lr
 80062ae:	bf00      	nop
 80062b0:	2000000c 	.word	0x2000000c
 80062b4:	e000ed04 	.word	0xe000ed04

080062b8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80062b8:	b480      	push	{r7}
 80062ba:	b083      	sub	sp, #12
 80062bc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80062be:	4b13      	ldr	r3, [pc, #76]	@ (800630c <vPortExitCritical+0x54>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d10d      	bne.n	80062e2 <vPortExitCritical+0x2a>
	__asm volatile
 80062c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062ca:	b672      	cpsid	i
 80062cc:	f383 8811 	msr	BASEPRI, r3
 80062d0:	f3bf 8f6f 	isb	sy
 80062d4:	f3bf 8f4f 	dsb	sy
 80062d8:	b662      	cpsie	i
 80062da:	607b      	str	r3, [r7, #4]
}
 80062dc:	bf00      	nop
 80062de:	bf00      	nop
 80062e0:	e7fd      	b.n	80062de <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80062e2:	4b0a      	ldr	r3, [pc, #40]	@ (800630c <vPortExitCritical+0x54>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	3b01      	subs	r3, #1
 80062e8:	4a08      	ldr	r2, [pc, #32]	@ (800630c <vPortExitCritical+0x54>)
 80062ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80062ec:	4b07      	ldr	r3, [pc, #28]	@ (800630c <vPortExitCritical+0x54>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d105      	bne.n	8006300 <vPortExitCritical+0x48>
 80062f4:	2300      	movs	r3, #0
 80062f6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80062fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006300:	bf00      	nop
 8006302:	370c      	adds	r7, #12
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr
 800630c:	2000000c 	.word	0x2000000c

08006310 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006310:	f3ef 8009 	mrs	r0, PSP
 8006314:	f3bf 8f6f 	isb	sy
 8006318:	4b15      	ldr	r3, [pc, #84]	@ (8006370 <pxCurrentTCBConst>)
 800631a:	681a      	ldr	r2, [r3, #0]
 800631c:	f01e 0f10 	tst.w	lr, #16
 8006320:	bf08      	it	eq
 8006322:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006326:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800632a:	6010      	str	r0, [r2, #0]
 800632c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006330:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006334:	b672      	cpsid	i
 8006336:	f380 8811 	msr	BASEPRI, r0
 800633a:	f3bf 8f4f 	dsb	sy
 800633e:	f3bf 8f6f 	isb	sy
 8006342:	b662      	cpsie	i
 8006344:	f7ff f9de 	bl	8005704 <vTaskSwitchContext>
 8006348:	f04f 0000 	mov.w	r0, #0
 800634c:	f380 8811 	msr	BASEPRI, r0
 8006350:	bc09      	pop	{r0, r3}
 8006352:	6819      	ldr	r1, [r3, #0]
 8006354:	6808      	ldr	r0, [r1, #0]
 8006356:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800635a:	f01e 0f10 	tst.w	lr, #16
 800635e:	bf08      	it	eq
 8006360:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006364:	f380 8809 	msr	PSP, r0
 8006368:	f3bf 8f6f 	isb	sy
 800636c:	4770      	bx	lr
 800636e:	bf00      	nop

08006370 <pxCurrentTCBConst>:
 8006370:	20000530 	.word	0x20000530
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006374:	bf00      	nop
 8006376:	bf00      	nop

08006378 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b082      	sub	sp, #8
 800637c:	af00      	add	r7, sp, #0
	__asm volatile
 800637e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006382:	b672      	cpsid	i
 8006384:	f383 8811 	msr	BASEPRI, r3
 8006388:	f3bf 8f6f 	isb	sy
 800638c:	f3bf 8f4f 	dsb	sy
 8006390:	b662      	cpsie	i
 8006392:	607b      	str	r3, [r7, #4]
}
 8006394:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006396:	f7ff f8f9 	bl	800558c <xTaskIncrementTick>
 800639a:	4603      	mov	r3, r0
 800639c:	2b00      	cmp	r3, #0
 800639e:	d003      	beq.n	80063a8 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80063a0:	4b06      	ldr	r3, [pc, #24]	@ (80063bc <xPortSysTickHandler+0x44>)
 80063a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063a6:	601a      	str	r2, [r3, #0]
 80063a8:	2300      	movs	r3, #0
 80063aa:	603b      	str	r3, [r7, #0]
	__asm volatile
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	f383 8811 	msr	BASEPRI, r3
}
 80063b2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80063b4:	bf00      	nop
 80063b6:	3708      	adds	r7, #8
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}
 80063bc:	e000ed04 	.word	0xe000ed04

080063c0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80063c0:	b480      	push	{r7}
 80063c2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80063c4:	4b0b      	ldr	r3, [pc, #44]	@ (80063f4 <vPortSetupTimerInterrupt+0x34>)
 80063c6:	2200      	movs	r2, #0
 80063c8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80063ca:	4b0b      	ldr	r3, [pc, #44]	@ (80063f8 <vPortSetupTimerInterrupt+0x38>)
 80063cc:	2200      	movs	r2, #0
 80063ce:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80063d0:	4b0a      	ldr	r3, [pc, #40]	@ (80063fc <vPortSetupTimerInterrupt+0x3c>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a0a      	ldr	r2, [pc, #40]	@ (8006400 <vPortSetupTimerInterrupt+0x40>)
 80063d6:	fba2 2303 	umull	r2, r3, r2, r3
 80063da:	099b      	lsrs	r3, r3, #6
 80063dc:	4a09      	ldr	r2, [pc, #36]	@ (8006404 <vPortSetupTimerInterrupt+0x44>)
 80063de:	3b01      	subs	r3, #1
 80063e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80063e2:	4b04      	ldr	r3, [pc, #16]	@ (80063f4 <vPortSetupTimerInterrupt+0x34>)
 80063e4:	2207      	movs	r2, #7
 80063e6:	601a      	str	r2, [r3, #0]
}
 80063e8:	bf00      	nop
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr
 80063f2:	bf00      	nop
 80063f4:	e000e010 	.word	0xe000e010
 80063f8:	e000e018 	.word	0xe000e018
 80063fc:	20000000 	.word	0x20000000
 8006400:	10624dd3 	.word	0x10624dd3
 8006404:	e000e014 	.word	0xe000e014

08006408 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006408:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006418 <vPortEnableVFP+0x10>
 800640c:	6801      	ldr	r1, [r0, #0]
 800640e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006412:	6001      	str	r1, [r0, #0]
 8006414:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006416:	bf00      	nop
 8006418:	e000ed88 	.word	0xe000ed88

0800641c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b08a      	sub	sp, #40	@ 0x28
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006424:	2300      	movs	r3, #0
 8006426:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006428:	f7ff f802 	bl	8005430 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800642c:	4b5d      	ldr	r3, [pc, #372]	@ (80065a4 <pvPortMalloc+0x188>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d101      	bne.n	8006438 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006434:	f000 f920 	bl	8006678 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006438:	4b5b      	ldr	r3, [pc, #364]	@ (80065a8 <pvPortMalloc+0x18c>)
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	4013      	ands	r3, r2
 8006440:	2b00      	cmp	r3, #0
 8006442:	f040 8094 	bne.w	800656e <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d020      	beq.n	800648e <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800644c:	2208      	movs	r2, #8
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	4413      	add	r3, r2
 8006452:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f003 0307 	and.w	r3, r3, #7
 800645a:	2b00      	cmp	r3, #0
 800645c:	d017      	beq.n	800648e <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f023 0307 	bic.w	r3, r3, #7
 8006464:	3308      	adds	r3, #8
 8006466:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f003 0307 	and.w	r3, r3, #7
 800646e:	2b00      	cmp	r3, #0
 8006470:	d00d      	beq.n	800648e <pvPortMalloc+0x72>
	__asm volatile
 8006472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006476:	b672      	cpsid	i
 8006478:	f383 8811 	msr	BASEPRI, r3
 800647c:	f3bf 8f6f 	isb	sy
 8006480:	f3bf 8f4f 	dsb	sy
 8006484:	b662      	cpsie	i
 8006486:	617b      	str	r3, [r7, #20]
}
 8006488:	bf00      	nop
 800648a:	bf00      	nop
 800648c:	e7fd      	b.n	800648a <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d06c      	beq.n	800656e <pvPortMalloc+0x152>
 8006494:	4b45      	ldr	r3, [pc, #276]	@ (80065ac <pvPortMalloc+0x190>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	687a      	ldr	r2, [r7, #4]
 800649a:	429a      	cmp	r2, r3
 800649c:	d867      	bhi.n	800656e <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800649e:	4b44      	ldr	r3, [pc, #272]	@ (80065b0 <pvPortMalloc+0x194>)
 80064a0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80064a2:	4b43      	ldr	r3, [pc, #268]	@ (80065b0 <pvPortMalloc+0x194>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80064a8:	e004      	b.n	80064b4 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 80064aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ac:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80064ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80064b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	429a      	cmp	r2, r3
 80064bc:	d903      	bls.n	80064c6 <pvPortMalloc+0xaa>
 80064be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d1f1      	bne.n	80064aa <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80064c6:	4b37      	ldr	r3, [pc, #220]	@ (80065a4 <pvPortMalloc+0x188>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d04e      	beq.n	800656e <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80064d0:	6a3b      	ldr	r3, [r7, #32]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	2208      	movs	r2, #8
 80064d6:	4413      	add	r3, r2
 80064d8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80064da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	6a3b      	ldr	r3, [r7, #32]
 80064e0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80064e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064e4:	685a      	ldr	r2, [r3, #4]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	1ad2      	subs	r2, r2, r3
 80064ea:	2308      	movs	r3, #8
 80064ec:	005b      	lsls	r3, r3, #1
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d922      	bls.n	8006538 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80064f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	4413      	add	r3, r2
 80064f8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80064fa:	69bb      	ldr	r3, [r7, #24]
 80064fc:	f003 0307 	and.w	r3, r3, #7
 8006500:	2b00      	cmp	r3, #0
 8006502:	d00d      	beq.n	8006520 <pvPortMalloc+0x104>
	__asm volatile
 8006504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006508:	b672      	cpsid	i
 800650a:	f383 8811 	msr	BASEPRI, r3
 800650e:	f3bf 8f6f 	isb	sy
 8006512:	f3bf 8f4f 	dsb	sy
 8006516:	b662      	cpsie	i
 8006518:	613b      	str	r3, [r7, #16]
}
 800651a:	bf00      	nop
 800651c:	bf00      	nop
 800651e:	e7fd      	b.n	800651c <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006522:	685a      	ldr	r2, [r3, #4]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	1ad2      	subs	r2, r2, r3
 8006528:	69bb      	ldr	r3, [r7, #24]
 800652a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800652c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800652e:	687a      	ldr	r2, [r7, #4]
 8006530:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006532:	69b8      	ldr	r0, [r7, #24]
 8006534:	f000 f902 	bl	800673c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006538:	4b1c      	ldr	r3, [pc, #112]	@ (80065ac <pvPortMalloc+0x190>)
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	1ad3      	subs	r3, r2, r3
 8006542:	4a1a      	ldr	r2, [pc, #104]	@ (80065ac <pvPortMalloc+0x190>)
 8006544:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006546:	4b19      	ldr	r3, [pc, #100]	@ (80065ac <pvPortMalloc+0x190>)
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	4b1a      	ldr	r3, [pc, #104]	@ (80065b4 <pvPortMalloc+0x198>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	429a      	cmp	r2, r3
 8006550:	d203      	bcs.n	800655a <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006552:	4b16      	ldr	r3, [pc, #88]	@ (80065ac <pvPortMalloc+0x190>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a17      	ldr	r2, [pc, #92]	@ (80065b4 <pvPortMalloc+0x198>)
 8006558:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800655a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800655c:	685a      	ldr	r2, [r3, #4]
 800655e:	4b12      	ldr	r3, [pc, #72]	@ (80065a8 <pvPortMalloc+0x18c>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	431a      	orrs	r2, r3
 8006564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006566:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800656a:	2200      	movs	r2, #0
 800656c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800656e:	f7fe ff6d 	bl	800544c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006572:	69fb      	ldr	r3, [r7, #28]
 8006574:	f003 0307 	and.w	r3, r3, #7
 8006578:	2b00      	cmp	r3, #0
 800657a:	d00d      	beq.n	8006598 <pvPortMalloc+0x17c>
	__asm volatile
 800657c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006580:	b672      	cpsid	i
 8006582:	f383 8811 	msr	BASEPRI, r3
 8006586:	f3bf 8f6f 	isb	sy
 800658a:	f3bf 8f4f 	dsb	sy
 800658e:	b662      	cpsie	i
 8006590:	60fb      	str	r3, [r7, #12]
}
 8006592:	bf00      	nop
 8006594:	bf00      	nop
 8006596:	e7fd      	b.n	8006594 <pvPortMalloc+0x178>
	return pvReturn;
 8006598:	69fb      	ldr	r3, [r7, #28]
}
 800659a:	4618      	mov	r0, r3
 800659c:	3728      	adds	r7, #40	@ 0x28
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}
 80065a2:	bf00      	nop
 80065a4:	2000426c 	.word	0x2000426c
 80065a8:	20004278 	.word	0x20004278
 80065ac:	20004270 	.word	0x20004270
 80065b0:	20004264 	.word	0x20004264
 80065b4:	20004274 	.word	0x20004274

080065b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b086      	sub	sp, #24
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d04e      	beq.n	8006668 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80065ca:	2308      	movs	r3, #8
 80065cc:	425b      	negs	r3, r3
 80065ce:	697a      	ldr	r2, [r7, #20]
 80065d0:	4413      	add	r3, r2
 80065d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	685a      	ldr	r2, [r3, #4]
 80065dc:	4b24      	ldr	r3, [pc, #144]	@ (8006670 <vPortFree+0xb8>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4013      	ands	r3, r2
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d10d      	bne.n	8006602 <vPortFree+0x4a>
	__asm volatile
 80065e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065ea:	b672      	cpsid	i
 80065ec:	f383 8811 	msr	BASEPRI, r3
 80065f0:	f3bf 8f6f 	isb	sy
 80065f4:	f3bf 8f4f 	dsb	sy
 80065f8:	b662      	cpsie	i
 80065fa:	60fb      	str	r3, [r7, #12]
}
 80065fc:	bf00      	nop
 80065fe:	bf00      	nop
 8006600:	e7fd      	b.n	80065fe <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d00d      	beq.n	8006626 <vPortFree+0x6e>
	__asm volatile
 800660a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800660e:	b672      	cpsid	i
 8006610:	f383 8811 	msr	BASEPRI, r3
 8006614:	f3bf 8f6f 	isb	sy
 8006618:	f3bf 8f4f 	dsb	sy
 800661c:	b662      	cpsie	i
 800661e:	60bb      	str	r3, [r7, #8]
}
 8006620:	bf00      	nop
 8006622:	bf00      	nop
 8006624:	e7fd      	b.n	8006622 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	685a      	ldr	r2, [r3, #4]
 800662a:	4b11      	ldr	r3, [pc, #68]	@ (8006670 <vPortFree+0xb8>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4013      	ands	r3, r2
 8006630:	2b00      	cmp	r3, #0
 8006632:	d019      	beq.n	8006668 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d115      	bne.n	8006668 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	685a      	ldr	r2, [r3, #4]
 8006640:	4b0b      	ldr	r3, [pc, #44]	@ (8006670 <vPortFree+0xb8>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	43db      	mvns	r3, r3
 8006646:	401a      	ands	r2, r3
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800664c:	f7fe fef0 	bl	8005430 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	685a      	ldr	r2, [r3, #4]
 8006654:	4b07      	ldr	r3, [pc, #28]	@ (8006674 <vPortFree+0xbc>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4413      	add	r3, r2
 800665a:	4a06      	ldr	r2, [pc, #24]	@ (8006674 <vPortFree+0xbc>)
 800665c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800665e:	6938      	ldr	r0, [r7, #16]
 8006660:	f000 f86c 	bl	800673c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006664:	f7fe fef2 	bl	800544c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006668:	bf00      	nop
 800666a:	3718      	adds	r7, #24
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}
 8006670:	20004278 	.word	0x20004278
 8006674:	20004270 	.word	0x20004270

08006678 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006678:	b480      	push	{r7}
 800667a:	b085      	sub	sp, #20
 800667c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800667e:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8006682:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006684:	4b27      	ldr	r3, [pc, #156]	@ (8006724 <prvHeapInit+0xac>)
 8006686:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f003 0307 	and.w	r3, r3, #7
 800668e:	2b00      	cmp	r3, #0
 8006690:	d00c      	beq.n	80066ac <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	3307      	adds	r3, #7
 8006696:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f023 0307 	bic.w	r3, r3, #7
 800669e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80066a0:	68ba      	ldr	r2, [r7, #8]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	1ad3      	subs	r3, r2, r3
 80066a6:	4a1f      	ldr	r2, [pc, #124]	@ (8006724 <prvHeapInit+0xac>)
 80066a8:	4413      	add	r3, r2
 80066aa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80066b0:	4a1d      	ldr	r2, [pc, #116]	@ (8006728 <prvHeapInit+0xb0>)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80066b6:	4b1c      	ldr	r3, [pc, #112]	@ (8006728 <prvHeapInit+0xb0>)
 80066b8:	2200      	movs	r2, #0
 80066ba:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	68ba      	ldr	r2, [r7, #8]
 80066c0:	4413      	add	r3, r2
 80066c2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80066c4:	2208      	movs	r2, #8
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	1a9b      	subs	r3, r3, r2
 80066ca:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f023 0307 	bic.w	r3, r3, #7
 80066d2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	4a15      	ldr	r2, [pc, #84]	@ (800672c <prvHeapInit+0xb4>)
 80066d8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80066da:	4b14      	ldr	r3, [pc, #80]	@ (800672c <prvHeapInit+0xb4>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	2200      	movs	r2, #0
 80066e0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80066e2:	4b12      	ldr	r3, [pc, #72]	@ (800672c <prvHeapInit+0xb4>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	2200      	movs	r2, #0
 80066e8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	68fa      	ldr	r2, [r7, #12]
 80066f2:	1ad2      	subs	r2, r2, r3
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80066f8:	4b0c      	ldr	r3, [pc, #48]	@ (800672c <prvHeapInit+0xb4>)
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	4a0a      	ldr	r2, [pc, #40]	@ (8006730 <prvHeapInit+0xb8>)
 8006706:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	4a09      	ldr	r2, [pc, #36]	@ (8006734 <prvHeapInit+0xbc>)
 800670e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006710:	4b09      	ldr	r3, [pc, #36]	@ (8006738 <prvHeapInit+0xc0>)
 8006712:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006716:	601a      	str	r2, [r3, #0]
}
 8006718:	bf00      	nop
 800671a:	3714      	adds	r7, #20
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr
 8006724:	20000664 	.word	0x20000664
 8006728:	20004264 	.word	0x20004264
 800672c:	2000426c 	.word	0x2000426c
 8006730:	20004274 	.word	0x20004274
 8006734:	20004270 	.word	0x20004270
 8006738:	20004278 	.word	0x20004278

0800673c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800673c:	b480      	push	{r7}
 800673e:	b085      	sub	sp, #20
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006744:	4b28      	ldr	r3, [pc, #160]	@ (80067e8 <prvInsertBlockIntoFreeList+0xac>)
 8006746:	60fb      	str	r3, [r7, #12]
 8006748:	e002      	b.n	8006750 <prvInsertBlockIntoFreeList+0x14>
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	60fb      	str	r3, [r7, #12]
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	687a      	ldr	r2, [r7, #4]
 8006756:	429a      	cmp	r2, r3
 8006758:	d8f7      	bhi.n	800674a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	68ba      	ldr	r2, [r7, #8]
 8006764:	4413      	add	r3, r2
 8006766:	687a      	ldr	r2, [r7, #4]
 8006768:	429a      	cmp	r2, r3
 800676a:	d108      	bne.n	800677e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	685a      	ldr	r2, [r3, #4]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	441a      	add	r2, r3
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	68ba      	ldr	r2, [r7, #8]
 8006788:	441a      	add	r2, r3
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	429a      	cmp	r2, r3
 8006790:	d118      	bne.n	80067c4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681a      	ldr	r2, [r3, #0]
 8006796:	4b15      	ldr	r3, [pc, #84]	@ (80067ec <prvInsertBlockIntoFreeList+0xb0>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	429a      	cmp	r2, r3
 800679c:	d00d      	beq.n	80067ba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	685a      	ldr	r2, [r3, #4]
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	441a      	add	r2, r3
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	681a      	ldr	r2, [r3, #0]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	601a      	str	r2, [r3, #0]
 80067b8:	e008      	b.n	80067cc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80067ba:	4b0c      	ldr	r3, [pc, #48]	@ (80067ec <prvInsertBlockIntoFreeList+0xb0>)
 80067bc:	681a      	ldr	r2, [r3, #0]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	601a      	str	r2, [r3, #0]
 80067c2:	e003      	b.n	80067cc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80067cc:	68fa      	ldr	r2, [r7, #12]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d002      	beq.n	80067da <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	687a      	ldr	r2, [r7, #4]
 80067d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80067da:	bf00      	nop
 80067dc:	3714      	adds	r7, #20
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr
 80067e6:	bf00      	nop
 80067e8:	20004264 	.word	0x20004264
 80067ec:	2000426c 	.word	0x2000426c

080067f0 <__cvt>:
 80067f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067f4:	ec57 6b10 	vmov	r6, r7, d0
 80067f8:	2f00      	cmp	r7, #0
 80067fa:	460c      	mov	r4, r1
 80067fc:	4619      	mov	r1, r3
 80067fe:	463b      	mov	r3, r7
 8006800:	bfbb      	ittet	lt
 8006802:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006806:	461f      	movlt	r7, r3
 8006808:	2300      	movge	r3, #0
 800680a:	232d      	movlt	r3, #45	@ 0x2d
 800680c:	700b      	strb	r3, [r1, #0]
 800680e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006810:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006814:	4691      	mov	r9, r2
 8006816:	f023 0820 	bic.w	r8, r3, #32
 800681a:	bfbc      	itt	lt
 800681c:	4632      	movlt	r2, r6
 800681e:	4616      	movlt	r6, r2
 8006820:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006824:	d005      	beq.n	8006832 <__cvt+0x42>
 8006826:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800682a:	d100      	bne.n	800682e <__cvt+0x3e>
 800682c:	3401      	adds	r4, #1
 800682e:	2102      	movs	r1, #2
 8006830:	e000      	b.n	8006834 <__cvt+0x44>
 8006832:	2103      	movs	r1, #3
 8006834:	ab03      	add	r3, sp, #12
 8006836:	9301      	str	r3, [sp, #4]
 8006838:	ab02      	add	r3, sp, #8
 800683a:	9300      	str	r3, [sp, #0]
 800683c:	ec47 6b10 	vmov	d0, r6, r7
 8006840:	4653      	mov	r3, sl
 8006842:	4622      	mov	r2, r4
 8006844:	f001 f8b8 	bl	80079b8 <_dtoa_r>
 8006848:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800684c:	4605      	mov	r5, r0
 800684e:	d119      	bne.n	8006884 <__cvt+0x94>
 8006850:	f019 0f01 	tst.w	r9, #1
 8006854:	d00e      	beq.n	8006874 <__cvt+0x84>
 8006856:	eb00 0904 	add.w	r9, r0, r4
 800685a:	2200      	movs	r2, #0
 800685c:	2300      	movs	r3, #0
 800685e:	4630      	mov	r0, r6
 8006860:	4639      	mov	r1, r7
 8006862:	f7fa f951 	bl	8000b08 <__aeabi_dcmpeq>
 8006866:	b108      	cbz	r0, 800686c <__cvt+0x7c>
 8006868:	f8cd 900c 	str.w	r9, [sp, #12]
 800686c:	2230      	movs	r2, #48	@ 0x30
 800686e:	9b03      	ldr	r3, [sp, #12]
 8006870:	454b      	cmp	r3, r9
 8006872:	d31e      	bcc.n	80068b2 <__cvt+0xc2>
 8006874:	9b03      	ldr	r3, [sp, #12]
 8006876:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006878:	1b5b      	subs	r3, r3, r5
 800687a:	4628      	mov	r0, r5
 800687c:	6013      	str	r3, [r2, #0]
 800687e:	b004      	add	sp, #16
 8006880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006884:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006888:	eb00 0904 	add.w	r9, r0, r4
 800688c:	d1e5      	bne.n	800685a <__cvt+0x6a>
 800688e:	7803      	ldrb	r3, [r0, #0]
 8006890:	2b30      	cmp	r3, #48	@ 0x30
 8006892:	d10a      	bne.n	80068aa <__cvt+0xba>
 8006894:	2200      	movs	r2, #0
 8006896:	2300      	movs	r3, #0
 8006898:	4630      	mov	r0, r6
 800689a:	4639      	mov	r1, r7
 800689c:	f7fa f934 	bl	8000b08 <__aeabi_dcmpeq>
 80068a0:	b918      	cbnz	r0, 80068aa <__cvt+0xba>
 80068a2:	f1c4 0401 	rsb	r4, r4, #1
 80068a6:	f8ca 4000 	str.w	r4, [sl]
 80068aa:	f8da 3000 	ldr.w	r3, [sl]
 80068ae:	4499      	add	r9, r3
 80068b0:	e7d3      	b.n	800685a <__cvt+0x6a>
 80068b2:	1c59      	adds	r1, r3, #1
 80068b4:	9103      	str	r1, [sp, #12]
 80068b6:	701a      	strb	r2, [r3, #0]
 80068b8:	e7d9      	b.n	800686e <__cvt+0x7e>

080068ba <__exponent>:
 80068ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80068bc:	2900      	cmp	r1, #0
 80068be:	bfba      	itte	lt
 80068c0:	4249      	neglt	r1, r1
 80068c2:	232d      	movlt	r3, #45	@ 0x2d
 80068c4:	232b      	movge	r3, #43	@ 0x2b
 80068c6:	2909      	cmp	r1, #9
 80068c8:	7002      	strb	r2, [r0, #0]
 80068ca:	7043      	strb	r3, [r0, #1]
 80068cc:	dd29      	ble.n	8006922 <__exponent+0x68>
 80068ce:	f10d 0307 	add.w	r3, sp, #7
 80068d2:	461d      	mov	r5, r3
 80068d4:	270a      	movs	r7, #10
 80068d6:	461a      	mov	r2, r3
 80068d8:	fbb1 f6f7 	udiv	r6, r1, r7
 80068dc:	fb07 1416 	mls	r4, r7, r6, r1
 80068e0:	3430      	adds	r4, #48	@ 0x30
 80068e2:	f802 4c01 	strb.w	r4, [r2, #-1]
 80068e6:	460c      	mov	r4, r1
 80068e8:	2c63      	cmp	r4, #99	@ 0x63
 80068ea:	f103 33ff 	add.w	r3, r3, #4294967295
 80068ee:	4631      	mov	r1, r6
 80068f0:	dcf1      	bgt.n	80068d6 <__exponent+0x1c>
 80068f2:	3130      	adds	r1, #48	@ 0x30
 80068f4:	1e94      	subs	r4, r2, #2
 80068f6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80068fa:	1c41      	adds	r1, r0, #1
 80068fc:	4623      	mov	r3, r4
 80068fe:	42ab      	cmp	r3, r5
 8006900:	d30a      	bcc.n	8006918 <__exponent+0x5e>
 8006902:	f10d 0309 	add.w	r3, sp, #9
 8006906:	1a9b      	subs	r3, r3, r2
 8006908:	42ac      	cmp	r4, r5
 800690a:	bf88      	it	hi
 800690c:	2300      	movhi	r3, #0
 800690e:	3302      	adds	r3, #2
 8006910:	4403      	add	r3, r0
 8006912:	1a18      	subs	r0, r3, r0
 8006914:	b003      	add	sp, #12
 8006916:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006918:	f813 6b01 	ldrb.w	r6, [r3], #1
 800691c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006920:	e7ed      	b.n	80068fe <__exponent+0x44>
 8006922:	2330      	movs	r3, #48	@ 0x30
 8006924:	3130      	adds	r1, #48	@ 0x30
 8006926:	7083      	strb	r3, [r0, #2]
 8006928:	70c1      	strb	r1, [r0, #3]
 800692a:	1d03      	adds	r3, r0, #4
 800692c:	e7f1      	b.n	8006912 <__exponent+0x58>
	...

08006930 <_printf_float>:
 8006930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006934:	b08d      	sub	sp, #52	@ 0x34
 8006936:	460c      	mov	r4, r1
 8006938:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800693c:	4616      	mov	r6, r2
 800693e:	461f      	mov	r7, r3
 8006940:	4605      	mov	r5, r0
 8006942:	f000 ff23 	bl	800778c <_localeconv_r>
 8006946:	6803      	ldr	r3, [r0, #0]
 8006948:	9304      	str	r3, [sp, #16]
 800694a:	4618      	mov	r0, r3
 800694c:	f7f9 fcb0 	bl	80002b0 <strlen>
 8006950:	2300      	movs	r3, #0
 8006952:	930a      	str	r3, [sp, #40]	@ 0x28
 8006954:	f8d8 3000 	ldr.w	r3, [r8]
 8006958:	9005      	str	r0, [sp, #20]
 800695a:	3307      	adds	r3, #7
 800695c:	f023 0307 	bic.w	r3, r3, #7
 8006960:	f103 0208 	add.w	r2, r3, #8
 8006964:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006968:	f8d4 b000 	ldr.w	fp, [r4]
 800696c:	f8c8 2000 	str.w	r2, [r8]
 8006970:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006974:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006978:	9307      	str	r3, [sp, #28]
 800697a:	f8cd 8018 	str.w	r8, [sp, #24]
 800697e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006982:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006986:	4b9c      	ldr	r3, [pc, #624]	@ (8006bf8 <_printf_float+0x2c8>)
 8006988:	f04f 32ff 	mov.w	r2, #4294967295
 800698c:	f7fa f8ee 	bl	8000b6c <__aeabi_dcmpun>
 8006990:	bb70      	cbnz	r0, 80069f0 <_printf_float+0xc0>
 8006992:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006996:	4b98      	ldr	r3, [pc, #608]	@ (8006bf8 <_printf_float+0x2c8>)
 8006998:	f04f 32ff 	mov.w	r2, #4294967295
 800699c:	f7fa f8c8 	bl	8000b30 <__aeabi_dcmple>
 80069a0:	bb30      	cbnz	r0, 80069f0 <_printf_float+0xc0>
 80069a2:	2200      	movs	r2, #0
 80069a4:	2300      	movs	r3, #0
 80069a6:	4640      	mov	r0, r8
 80069a8:	4649      	mov	r1, r9
 80069aa:	f7fa f8b7 	bl	8000b1c <__aeabi_dcmplt>
 80069ae:	b110      	cbz	r0, 80069b6 <_printf_float+0x86>
 80069b0:	232d      	movs	r3, #45	@ 0x2d
 80069b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80069b6:	4a91      	ldr	r2, [pc, #580]	@ (8006bfc <_printf_float+0x2cc>)
 80069b8:	4b91      	ldr	r3, [pc, #580]	@ (8006c00 <_printf_float+0x2d0>)
 80069ba:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80069be:	bf94      	ite	ls
 80069c0:	4690      	movls	r8, r2
 80069c2:	4698      	movhi	r8, r3
 80069c4:	2303      	movs	r3, #3
 80069c6:	6123      	str	r3, [r4, #16]
 80069c8:	f02b 0304 	bic.w	r3, fp, #4
 80069cc:	6023      	str	r3, [r4, #0]
 80069ce:	f04f 0900 	mov.w	r9, #0
 80069d2:	9700      	str	r7, [sp, #0]
 80069d4:	4633      	mov	r3, r6
 80069d6:	aa0b      	add	r2, sp, #44	@ 0x2c
 80069d8:	4621      	mov	r1, r4
 80069da:	4628      	mov	r0, r5
 80069dc:	f000 f9d2 	bl	8006d84 <_printf_common>
 80069e0:	3001      	adds	r0, #1
 80069e2:	f040 808d 	bne.w	8006b00 <_printf_float+0x1d0>
 80069e6:	f04f 30ff 	mov.w	r0, #4294967295
 80069ea:	b00d      	add	sp, #52	@ 0x34
 80069ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069f0:	4642      	mov	r2, r8
 80069f2:	464b      	mov	r3, r9
 80069f4:	4640      	mov	r0, r8
 80069f6:	4649      	mov	r1, r9
 80069f8:	f7fa f8b8 	bl	8000b6c <__aeabi_dcmpun>
 80069fc:	b140      	cbz	r0, 8006a10 <_printf_float+0xe0>
 80069fe:	464b      	mov	r3, r9
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	bfbc      	itt	lt
 8006a04:	232d      	movlt	r3, #45	@ 0x2d
 8006a06:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006a0a:	4a7e      	ldr	r2, [pc, #504]	@ (8006c04 <_printf_float+0x2d4>)
 8006a0c:	4b7e      	ldr	r3, [pc, #504]	@ (8006c08 <_printf_float+0x2d8>)
 8006a0e:	e7d4      	b.n	80069ba <_printf_float+0x8a>
 8006a10:	6863      	ldr	r3, [r4, #4]
 8006a12:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006a16:	9206      	str	r2, [sp, #24]
 8006a18:	1c5a      	adds	r2, r3, #1
 8006a1a:	d13b      	bne.n	8006a94 <_printf_float+0x164>
 8006a1c:	2306      	movs	r3, #6
 8006a1e:	6063      	str	r3, [r4, #4]
 8006a20:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006a24:	2300      	movs	r3, #0
 8006a26:	6022      	str	r2, [r4, #0]
 8006a28:	9303      	str	r3, [sp, #12]
 8006a2a:	ab0a      	add	r3, sp, #40	@ 0x28
 8006a2c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006a30:	ab09      	add	r3, sp, #36	@ 0x24
 8006a32:	9300      	str	r3, [sp, #0]
 8006a34:	6861      	ldr	r1, [r4, #4]
 8006a36:	ec49 8b10 	vmov	d0, r8, r9
 8006a3a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006a3e:	4628      	mov	r0, r5
 8006a40:	f7ff fed6 	bl	80067f0 <__cvt>
 8006a44:	9b06      	ldr	r3, [sp, #24]
 8006a46:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006a48:	2b47      	cmp	r3, #71	@ 0x47
 8006a4a:	4680      	mov	r8, r0
 8006a4c:	d129      	bne.n	8006aa2 <_printf_float+0x172>
 8006a4e:	1cc8      	adds	r0, r1, #3
 8006a50:	db02      	blt.n	8006a58 <_printf_float+0x128>
 8006a52:	6863      	ldr	r3, [r4, #4]
 8006a54:	4299      	cmp	r1, r3
 8006a56:	dd41      	ble.n	8006adc <_printf_float+0x1ac>
 8006a58:	f1aa 0a02 	sub.w	sl, sl, #2
 8006a5c:	fa5f fa8a 	uxtb.w	sl, sl
 8006a60:	3901      	subs	r1, #1
 8006a62:	4652      	mov	r2, sl
 8006a64:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006a68:	9109      	str	r1, [sp, #36]	@ 0x24
 8006a6a:	f7ff ff26 	bl	80068ba <__exponent>
 8006a6e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006a70:	1813      	adds	r3, r2, r0
 8006a72:	2a01      	cmp	r2, #1
 8006a74:	4681      	mov	r9, r0
 8006a76:	6123      	str	r3, [r4, #16]
 8006a78:	dc02      	bgt.n	8006a80 <_printf_float+0x150>
 8006a7a:	6822      	ldr	r2, [r4, #0]
 8006a7c:	07d2      	lsls	r2, r2, #31
 8006a7e:	d501      	bpl.n	8006a84 <_printf_float+0x154>
 8006a80:	3301      	adds	r3, #1
 8006a82:	6123      	str	r3, [r4, #16]
 8006a84:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d0a2      	beq.n	80069d2 <_printf_float+0xa2>
 8006a8c:	232d      	movs	r3, #45	@ 0x2d
 8006a8e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a92:	e79e      	b.n	80069d2 <_printf_float+0xa2>
 8006a94:	9a06      	ldr	r2, [sp, #24]
 8006a96:	2a47      	cmp	r2, #71	@ 0x47
 8006a98:	d1c2      	bne.n	8006a20 <_printf_float+0xf0>
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d1c0      	bne.n	8006a20 <_printf_float+0xf0>
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	e7bd      	b.n	8006a1e <_printf_float+0xee>
 8006aa2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006aa6:	d9db      	bls.n	8006a60 <_printf_float+0x130>
 8006aa8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006aac:	d118      	bne.n	8006ae0 <_printf_float+0x1b0>
 8006aae:	2900      	cmp	r1, #0
 8006ab0:	6863      	ldr	r3, [r4, #4]
 8006ab2:	dd0b      	ble.n	8006acc <_printf_float+0x19c>
 8006ab4:	6121      	str	r1, [r4, #16]
 8006ab6:	b913      	cbnz	r3, 8006abe <_printf_float+0x18e>
 8006ab8:	6822      	ldr	r2, [r4, #0]
 8006aba:	07d0      	lsls	r0, r2, #31
 8006abc:	d502      	bpl.n	8006ac4 <_printf_float+0x194>
 8006abe:	3301      	adds	r3, #1
 8006ac0:	440b      	add	r3, r1
 8006ac2:	6123      	str	r3, [r4, #16]
 8006ac4:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006ac6:	f04f 0900 	mov.w	r9, #0
 8006aca:	e7db      	b.n	8006a84 <_printf_float+0x154>
 8006acc:	b913      	cbnz	r3, 8006ad4 <_printf_float+0x1a4>
 8006ace:	6822      	ldr	r2, [r4, #0]
 8006ad0:	07d2      	lsls	r2, r2, #31
 8006ad2:	d501      	bpl.n	8006ad8 <_printf_float+0x1a8>
 8006ad4:	3302      	adds	r3, #2
 8006ad6:	e7f4      	b.n	8006ac2 <_printf_float+0x192>
 8006ad8:	2301      	movs	r3, #1
 8006ada:	e7f2      	b.n	8006ac2 <_printf_float+0x192>
 8006adc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006ae0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ae2:	4299      	cmp	r1, r3
 8006ae4:	db05      	blt.n	8006af2 <_printf_float+0x1c2>
 8006ae6:	6823      	ldr	r3, [r4, #0]
 8006ae8:	6121      	str	r1, [r4, #16]
 8006aea:	07d8      	lsls	r0, r3, #31
 8006aec:	d5ea      	bpl.n	8006ac4 <_printf_float+0x194>
 8006aee:	1c4b      	adds	r3, r1, #1
 8006af0:	e7e7      	b.n	8006ac2 <_printf_float+0x192>
 8006af2:	2900      	cmp	r1, #0
 8006af4:	bfd4      	ite	le
 8006af6:	f1c1 0202 	rsble	r2, r1, #2
 8006afa:	2201      	movgt	r2, #1
 8006afc:	4413      	add	r3, r2
 8006afe:	e7e0      	b.n	8006ac2 <_printf_float+0x192>
 8006b00:	6823      	ldr	r3, [r4, #0]
 8006b02:	055a      	lsls	r2, r3, #21
 8006b04:	d407      	bmi.n	8006b16 <_printf_float+0x1e6>
 8006b06:	6923      	ldr	r3, [r4, #16]
 8006b08:	4642      	mov	r2, r8
 8006b0a:	4631      	mov	r1, r6
 8006b0c:	4628      	mov	r0, r5
 8006b0e:	47b8      	blx	r7
 8006b10:	3001      	adds	r0, #1
 8006b12:	d12b      	bne.n	8006b6c <_printf_float+0x23c>
 8006b14:	e767      	b.n	80069e6 <_printf_float+0xb6>
 8006b16:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006b1a:	f240 80dd 	bls.w	8006cd8 <_printf_float+0x3a8>
 8006b1e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006b22:	2200      	movs	r2, #0
 8006b24:	2300      	movs	r3, #0
 8006b26:	f7f9 ffef 	bl	8000b08 <__aeabi_dcmpeq>
 8006b2a:	2800      	cmp	r0, #0
 8006b2c:	d033      	beq.n	8006b96 <_printf_float+0x266>
 8006b2e:	4a37      	ldr	r2, [pc, #220]	@ (8006c0c <_printf_float+0x2dc>)
 8006b30:	2301      	movs	r3, #1
 8006b32:	4631      	mov	r1, r6
 8006b34:	4628      	mov	r0, r5
 8006b36:	47b8      	blx	r7
 8006b38:	3001      	adds	r0, #1
 8006b3a:	f43f af54 	beq.w	80069e6 <_printf_float+0xb6>
 8006b3e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006b42:	4543      	cmp	r3, r8
 8006b44:	db02      	blt.n	8006b4c <_printf_float+0x21c>
 8006b46:	6823      	ldr	r3, [r4, #0]
 8006b48:	07d8      	lsls	r0, r3, #31
 8006b4a:	d50f      	bpl.n	8006b6c <_printf_float+0x23c>
 8006b4c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b50:	4631      	mov	r1, r6
 8006b52:	4628      	mov	r0, r5
 8006b54:	47b8      	blx	r7
 8006b56:	3001      	adds	r0, #1
 8006b58:	f43f af45 	beq.w	80069e6 <_printf_float+0xb6>
 8006b5c:	f04f 0900 	mov.w	r9, #0
 8006b60:	f108 38ff 	add.w	r8, r8, #4294967295
 8006b64:	f104 0a1a 	add.w	sl, r4, #26
 8006b68:	45c8      	cmp	r8, r9
 8006b6a:	dc09      	bgt.n	8006b80 <_printf_float+0x250>
 8006b6c:	6823      	ldr	r3, [r4, #0]
 8006b6e:	079b      	lsls	r3, r3, #30
 8006b70:	f100 8103 	bmi.w	8006d7a <_printf_float+0x44a>
 8006b74:	68e0      	ldr	r0, [r4, #12]
 8006b76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006b78:	4298      	cmp	r0, r3
 8006b7a:	bfb8      	it	lt
 8006b7c:	4618      	movlt	r0, r3
 8006b7e:	e734      	b.n	80069ea <_printf_float+0xba>
 8006b80:	2301      	movs	r3, #1
 8006b82:	4652      	mov	r2, sl
 8006b84:	4631      	mov	r1, r6
 8006b86:	4628      	mov	r0, r5
 8006b88:	47b8      	blx	r7
 8006b8a:	3001      	adds	r0, #1
 8006b8c:	f43f af2b 	beq.w	80069e6 <_printf_float+0xb6>
 8006b90:	f109 0901 	add.w	r9, r9, #1
 8006b94:	e7e8      	b.n	8006b68 <_printf_float+0x238>
 8006b96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	dc39      	bgt.n	8006c10 <_printf_float+0x2e0>
 8006b9c:	4a1b      	ldr	r2, [pc, #108]	@ (8006c0c <_printf_float+0x2dc>)
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	4631      	mov	r1, r6
 8006ba2:	4628      	mov	r0, r5
 8006ba4:	47b8      	blx	r7
 8006ba6:	3001      	adds	r0, #1
 8006ba8:	f43f af1d 	beq.w	80069e6 <_printf_float+0xb6>
 8006bac:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006bb0:	ea59 0303 	orrs.w	r3, r9, r3
 8006bb4:	d102      	bne.n	8006bbc <_printf_float+0x28c>
 8006bb6:	6823      	ldr	r3, [r4, #0]
 8006bb8:	07d9      	lsls	r1, r3, #31
 8006bba:	d5d7      	bpl.n	8006b6c <_printf_float+0x23c>
 8006bbc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006bc0:	4631      	mov	r1, r6
 8006bc2:	4628      	mov	r0, r5
 8006bc4:	47b8      	blx	r7
 8006bc6:	3001      	adds	r0, #1
 8006bc8:	f43f af0d 	beq.w	80069e6 <_printf_float+0xb6>
 8006bcc:	f04f 0a00 	mov.w	sl, #0
 8006bd0:	f104 0b1a 	add.w	fp, r4, #26
 8006bd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bd6:	425b      	negs	r3, r3
 8006bd8:	4553      	cmp	r3, sl
 8006bda:	dc01      	bgt.n	8006be0 <_printf_float+0x2b0>
 8006bdc:	464b      	mov	r3, r9
 8006bde:	e793      	b.n	8006b08 <_printf_float+0x1d8>
 8006be0:	2301      	movs	r3, #1
 8006be2:	465a      	mov	r2, fp
 8006be4:	4631      	mov	r1, r6
 8006be6:	4628      	mov	r0, r5
 8006be8:	47b8      	blx	r7
 8006bea:	3001      	adds	r0, #1
 8006bec:	f43f aefb 	beq.w	80069e6 <_printf_float+0xb6>
 8006bf0:	f10a 0a01 	add.w	sl, sl, #1
 8006bf4:	e7ee      	b.n	8006bd4 <_printf_float+0x2a4>
 8006bf6:	bf00      	nop
 8006bf8:	7fefffff 	.word	0x7fefffff
 8006bfc:	0800afe4 	.word	0x0800afe4
 8006c00:	0800afe8 	.word	0x0800afe8
 8006c04:	0800afec 	.word	0x0800afec
 8006c08:	0800aff0 	.word	0x0800aff0
 8006c0c:	0800aff4 	.word	0x0800aff4
 8006c10:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006c12:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006c16:	4553      	cmp	r3, sl
 8006c18:	bfa8      	it	ge
 8006c1a:	4653      	movge	r3, sl
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	4699      	mov	r9, r3
 8006c20:	dc36      	bgt.n	8006c90 <_printf_float+0x360>
 8006c22:	f04f 0b00 	mov.w	fp, #0
 8006c26:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006c2a:	f104 021a 	add.w	r2, r4, #26
 8006c2e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006c30:	9306      	str	r3, [sp, #24]
 8006c32:	eba3 0309 	sub.w	r3, r3, r9
 8006c36:	455b      	cmp	r3, fp
 8006c38:	dc31      	bgt.n	8006c9e <_printf_float+0x36e>
 8006c3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c3c:	459a      	cmp	sl, r3
 8006c3e:	dc3a      	bgt.n	8006cb6 <_printf_float+0x386>
 8006c40:	6823      	ldr	r3, [r4, #0]
 8006c42:	07da      	lsls	r2, r3, #31
 8006c44:	d437      	bmi.n	8006cb6 <_printf_float+0x386>
 8006c46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c48:	ebaa 0903 	sub.w	r9, sl, r3
 8006c4c:	9b06      	ldr	r3, [sp, #24]
 8006c4e:	ebaa 0303 	sub.w	r3, sl, r3
 8006c52:	4599      	cmp	r9, r3
 8006c54:	bfa8      	it	ge
 8006c56:	4699      	movge	r9, r3
 8006c58:	f1b9 0f00 	cmp.w	r9, #0
 8006c5c:	dc33      	bgt.n	8006cc6 <_printf_float+0x396>
 8006c5e:	f04f 0800 	mov.w	r8, #0
 8006c62:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006c66:	f104 0b1a 	add.w	fp, r4, #26
 8006c6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c6c:	ebaa 0303 	sub.w	r3, sl, r3
 8006c70:	eba3 0309 	sub.w	r3, r3, r9
 8006c74:	4543      	cmp	r3, r8
 8006c76:	f77f af79 	ble.w	8006b6c <_printf_float+0x23c>
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	465a      	mov	r2, fp
 8006c7e:	4631      	mov	r1, r6
 8006c80:	4628      	mov	r0, r5
 8006c82:	47b8      	blx	r7
 8006c84:	3001      	adds	r0, #1
 8006c86:	f43f aeae 	beq.w	80069e6 <_printf_float+0xb6>
 8006c8a:	f108 0801 	add.w	r8, r8, #1
 8006c8e:	e7ec      	b.n	8006c6a <_printf_float+0x33a>
 8006c90:	4642      	mov	r2, r8
 8006c92:	4631      	mov	r1, r6
 8006c94:	4628      	mov	r0, r5
 8006c96:	47b8      	blx	r7
 8006c98:	3001      	adds	r0, #1
 8006c9a:	d1c2      	bne.n	8006c22 <_printf_float+0x2f2>
 8006c9c:	e6a3      	b.n	80069e6 <_printf_float+0xb6>
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	4631      	mov	r1, r6
 8006ca2:	4628      	mov	r0, r5
 8006ca4:	9206      	str	r2, [sp, #24]
 8006ca6:	47b8      	blx	r7
 8006ca8:	3001      	adds	r0, #1
 8006caa:	f43f ae9c 	beq.w	80069e6 <_printf_float+0xb6>
 8006cae:	9a06      	ldr	r2, [sp, #24]
 8006cb0:	f10b 0b01 	add.w	fp, fp, #1
 8006cb4:	e7bb      	b.n	8006c2e <_printf_float+0x2fe>
 8006cb6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006cba:	4631      	mov	r1, r6
 8006cbc:	4628      	mov	r0, r5
 8006cbe:	47b8      	blx	r7
 8006cc0:	3001      	adds	r0, #1
 8006cc2:	d1c0      	bne.n	8006c46 <_printf_float+0x316>
 8006cc4:	e68f      	b.n	80069e6 <_printf_float+0xb6>
 8006cc6:	9a06      	ldr	r2, [sp, #24]
 8006cc8:	464b      	mov	r3, r9
 8006cca:	4442      	add	r2, r8
 8006ccc:	4631      	mov	r1, r6
 8006cce:	4628      	mov	r0, r5
 8006cd0:	47b8      	blx	r7
 8006cd2:	3001      	adds	r0, #1
 8006cd4:	d1c3      	bne.n	8006c5e <_printf_float+0x32e>
 8006cd6:	e686      	b.n	80069e6 <_printf_float+0xb6>
 8006cd8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006cdc:	f1ba 0f01 	cmp.w	sl, #1
 8006ce0:	dc01      	bgt.n	8006ce6 <_printf_float+0x3b6>
 8006ce2:	07db      	lsls	r3, r3, #31
 8006ce4:	d536      	bpl.n	8006d54 <_printf_float+0x424>
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	4642      	mov	r2, r8
 8006cea:	4631      	mov	r1, r6
 8006cec:	4628      	mov	r0, r5
 8006cee:	47b8      	blx	r7
 8006cf0:	3001      	adds	r0, #1
 8006cf2:	f43f ae78 	beq.w	80069e6 <_printf_float+0xb6>
 8006cf6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006cfa:	4631      	mov	r1, r6
 8006cfc:	4628      	mov	r0, r5
 8006cfe:	47b8      	blx	r7
 8006d00:	3001      	adds	r0, #1
 8006d02:	f43f ae70 	beq.w	80069e6 <_printf_float+0xb6>
 8006d06:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006d12:	f7f9 fef9 	bl	8000b08 <__aeabi_dcmpeq>
 8006d16:	b9c0      	cbnz	r0, 8006d4a <_printf_float+0x41a>
 8006d18:	4653      	mov	r3, sl
 8006d1a:	f108 0201 	add.w	r2, r8, #1
 8006d1e:	4631      	mov	r1, r6
 8006d20:	4628      	mov	r0, r5
 8006d22:	47b8      	blx	r7
 8006d24:	3001      	adds	r0, #1
 8006d26:	d10c      	bne.n	8006d42 <_printf_float+0x412>
 8006d28:	e65d      	b.n	80069e6 <_printf_float+0xb6>
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	465a      	mov	r2, fp
 8006d2e:	4631      	mov	r1, r6
 8006d30:	4628      	mov	r0, r5
 8006d32:	47b8      	blx	r7
 8006d34:	3001      	adds	r0, #1
 8006d36:	f43f ae56 	beq.w	80069e6 <_printf_float+0xb6>
 8006d3a:	f108 0801 	add.w	r8, r8, #1
 8006d3e:	45d0      	cmp	r8, sl
 8006d40:	dbf3      	blt.n	8006d2a <_printf_float+0x3fa>
 8006d42:	464b      	mov	r3, r9
 8006d44:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006d48:	e6df      	b.n	8006b0a <_printf_float+0x1da>
 8006d4a:	f04f 0800 	mov.w	r8, #0
 8006d4e:	f104 0b1a 	add.w	fp, r4, #26
 8006d52:	e7f4      	b.n	8006d3e <_printf_float+0x40e>
 8006d54:	2301      	movs	r3, #1
 8006d56:	4642      	mov	r2, r8
 8006d58:	e7e1      	b.n	8006d1e <_printf_float+0x3ee>
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	464a      	mov	r2, r9
 8006d5e:	4631      	mov	r1, r6
 8006d60:	4628      	mov	r0, r5
 8006d62:	47b8      	blx	r7
 8006d64:	3001      	adds	r0, #1
 8006d66:	f43f ae3e 	beq.w	80069e6 <_printf_float+0xb6>
 8006d6a:	f108 0801 	add.w	r8, r8, #1
 8006d6e:	68e3      	ldr	r3, [r4, #12]
 8006d70:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006d72:	1a5b      	subs	r3, r3, r1
 8006d74:	4543      	cmp	r3, r8
 8006d76:	dcf0      	bgt.n	8006d5a <_printf_float+0x42a>
 8006d78:	e6fc      	b.n	8006b74 <_printf_float+0x244>
 8006d7a:	f04f 0800 	mov.w	r8, #0
 8006d7e:	f104 0919 	add.w	r9, r4, #25
 8006d82:	e7f4      	b.n	8006d6e <_printf_float+0x43e>

08006d84 <_printf_common>:
 8006d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d88:	4616      	mov	r6, r2
 8006d8a:	4698      	mov	r8, r3
 8006d8c:	688a      	ldr	r2, [r1, #8]
 8006d8e:	690b      	ldr	r3, [r1, #16]
 8006d90:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006d94:	4293      	cmp	r3, r2
 8006d96:	bfb8      	it	lt
 8006d98:	4613      	movlt	r3, r2
 8006d9a:	6033      	str	r3, [r6, #0]
 8006d9c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006da0:	4607      	mov	r7, r0
 8006da2:	460c      	mov	r4, r1
 8006da4:	b10a      	cbz	r2, 8006daa <_printf_common+0x26>
 8006da6:	3301      	adds	r3, #1
 8006da8:	6033      	str	r3, [r6, #0]
 8006daa:	6823      	ldr	r3, [r4, #0]
 8006dac:	0699      	lsls	r1, r3, #26
 8006dae:	bf42      	ittt	mi
 8006db0:	6833      	ldrmi	r3, [r6, #0]
 8006db2:	3302      	addmi	r3, #2
 8006db4:	6033      	strmi	r3, [r6, #0]
 8006db6:	6825      	ldr	r5, [r4, #0]
 8006db8:	f015 0506 	ands.w	r5, r5, #6
 8006dbc:	d106      	bne.n	8006dcc <_printf_common+0x48>
 8006dbe:	f104 0a19 	add.w	sl, r4, #25
 8006dc2:	68e3      	ldr	r3, [r4, #12]
 8006dc4:	6832      	ldr	r2, [r6, #0]
 8006dc6:	1a9b      	subs	r3, r3, r2
 8006dc8:	42ab      	cmp	r3, r5
 8006dca:	dc26      	bgt.n	8006e1a <_printf_common+0x96>
 8006dcc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006dd0:	6822      	ldr	r2, [r4, #0]
 8006dd2:	3b00      	subs	r3, #0
 8006dd4:	bf18      	it	ne
 8006dd6:	2301      	movne	r3, #1
 8006dd8:	0692      	lsls	r2, r2, #26
 8006dda:	d42b      	bmi.n	8006e34 <_printf_common+0xb0>
 8006ddc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006de0:	4641      	mov	r1, r8
 8006de2:	4638      	mov	r0, r7
 8006de4:	47c8      	blx	r9
 8006de6:	3001      	adds	r0, #1
 8006de8:	d01e      	beq.n	8006e28 <_printf_common+0xa4>
 8006dea:	6823      	ldr	r3, [r4, #0]
 8006dec:	6922      	ldr	r2, [r4, #16]
 8006dee:	f003 0306 	and.w	r3, r3, #6
 8006df2:	2b04      	cmp	r3, #4
 8006df4:	bf02      	ittt	eq
 8006df6:	68e5      	ldreq	r5, [r4, #12]
 8006df8:	6833      	ldreq	r3, [r6, #0]
 8006dfa:	1aed      	subeq	r5, r5, r3
 8006dfc:	68a3      	ldr	r3, [r4, #8]
 8006dfe:	bf0c      	ite	eq
 8006e00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e04:	2500      	movne	r5, #0
 8006e06:	4293      	cmp	r3, r2
 8006e08:	bfc4      	itt	gt
 8006e0a:	1a9b      	subgt	r3, r3, r2
 8006e0c:	18ed      	addgt	r5, r5, r3
 8006e0e:	2600      	movs	r6, #0
 8006e10:	341a      	adds	r4, #26
 8006e12:	42b5      	cmp	r5, r6
 8006e14:	d11a      	bne.n	8006e4c <_printf_common+0xc8>
 8006e16:	2000      	movs	r0, #0
 8006e18:	e008      	b.n	8006e2c <_printf_common+0xa8>
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	4652      	mov	r2, sl
 8006e1e:	4641      	mov	r1, r8
 8006e20:	4638      	mov	r0, r7
 8006e22:	47c8      	blx	r9
 8006e24:	3001      	adds	r0, #1
 8006e26:	d103      	bne.n	8006e30 <_printf_common+0xac>
 8006e28:	f04f 30ff 	mov.w	r0, #4294967295
 8006e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e30:	3501      	adds	r5, #1
 8006e32:	e7c6      	b.n	8006dc2 <_printf_common+0x3e>
 8006e34:	18e1      	adds	r1, r4, r3
 8006e36:	1c5a      	adds	r2, r3, #1
 8006e38:	2030      	movs	r0, #48	@ 0x30
 8006e3a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006e3e:	4422      	add	r2, r4
 8006e40:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006e44:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006e48:	3302      	adds	r3, #2
 8006e4a:	e7c7      	b.n	8006ddc <_printf_common+0x58>
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	4622      	mov	r2, r4
 8006e50:	4641      	mov	r1, r8
 8006e52:	4638      	mov	r0, r7
 8006e54:	47c8      	blx	r9
 8006e56:	3001      	adds	r0, #1
 8006e58:	d0e6      	beq.n	8006e28 <_printf_common+0xa4>
 8006e5a:	3601      	adds	r6, #1
 8006e5c:	e7d9      	b.n	8006e12 <_printf_common+0x8e>
	...

08006e60 <_printf_i>:
 8006e60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e64:	7e0f      	ldrb	r7, [r1, #24]
 8006e66:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006e68:	2f78      	cmp	r7, #120	@ 0x78
 8006e6a:	4691      	mov	r9, r2
 8006e6c:	4680      	mov	r8, r0
 8006e6e:	460c      	mov	r4, r1
 8006e70:	469a      	mov	sl, r3
 8006e72:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006e76:	d807      	bhi.n	8006e88 <_printf_i+0x28>
 8006e78:	2f62      	cmp	r7, #98	@ 0x62
 8006e7a:	d80a      	bhi.n	8006e92 <_printf_i+0x32>
 8006e7c:	2f00      	cmp	r7, #0
 8006e7e:	f000 80d2 	beq.w	8007026 <_printf_i+0x1c6>
 8006e82:	2f58      	cmp	r7, #88	@ 0x58
 8006e84:	f000 80b9 	beq.w	8006ffa <_printf_i+0x19a>
 8006e88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006e8c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006e90:	e03a      	b.n	8006f08 <_printf_i+0xa8>
 8006e92:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006e96:	2b15      	cmp	r3, #21
 8006e98:	d8f6      	bhi.n	8006e88 <_printf_i+0x28>
 8006e9a:	a101      	add	r1, pc, #4	@ (adr r1, 8006ea0 <_printf_i+0x40>)
 8006e9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ea0:	08006ef9 	.word	0x08006ef9
 8006ea4:	08006f0d 	.word	0x08006f0d
 8006ea8:	08006e89 	.word	0x08006e89
 8006eac:	08006e89 	.word	0x08006e89
 8006eb0:	08006e89 	.word	0x08006e89
 8006eb4:	08006e89 	.word	0x08006e89
 8006eb8:	08006f0d 	.word	0x08006f0d
 8006ebc:	08006e89 	.word	0x08006e89
 8006ec0:	08006e89 	.word	0x08006e89
 8006ec4:	08006e89 	.word	0x08006e89
 8006ec8:	08006e89 	.word	0x08006e89
 8006ecc:	0800700d 	.word	0x0800700d
 8006ed0:	08006f37 	.word	0x08006f37
 8006ed4:	08006fc7 	.word	0x08006fc7
 8006ed8:	08006e89 	.word	0x08006e89
 8006edc:	08006e89 	.word	0x08006e89
 8006ee0:	0800702f 	.word	0x0800702f
 8006ee4:	08006e89 	.word	0x08006e89
 8006ee8:	08006f37 	.word	0x08006f37
 8006eec:	08006e89 	.word	0x08006e89
 8006ef0:	08006e89 	.word	0x08006e89
 8006ef4:	08006fcf 	.word	0x08006fcf
 8006ef8:	6833      	ldr	r3, [r6, #0]
 8006efa:	1d1a      	adds	r2, r3, #4
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	6032      	str	r2, [r6, #0]
 8006f00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006f04:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006f08:	2301      	movs	r3, #1
 8006f0a:	e09d      	b.n	8007048 <_printf_i+0x1e8>
 8006f0c:	6833      	ldr	r3, [r6, #0]
 8006f0e:	6820      	ldr	r0, [r4, #0]
 8006f10:	1d19      	adds	r1, r3, #4
 8006f12:	6031      	str	r1, [r6, #0]
 8006f14:	0606      	lsls	r6, r0, #24
 8006f16:	d501      	bpl.n	8006f1c <_printf_i+0xbc>
 8006f18:	681d      	ldr	r5, [r3, #0]
 8006f1a:	e003      	b.n	8006f24 <_printf_i+0xc4>
 8006f1c:	0645      	lsls	r5, r0, #25
 8006f1e:	d5fb      	bpl.n	8006f18 <_printf_i+0xb8>
 8006f20:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006f24:	2d00      	cmp	r5, #0
 8006f26:	da03      	bge.n	8006f30 <_printf_i+0xd0>
 8006f28:	232d      	movs	r3, #45	@ 0x2d
 8006f2a:	426d      	negs	r5, r5
 8006f2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006f30:	4859      	ldr	r0, [pc, #356]	@ (8007098 <_printf_i+0x238>)
 8006f32:	230a      	movs	r3, #10
 8006f34:	e011      	b.n	8006f5a <_printf_i+0xfa>
 8006f36:	6821      	ldr	r1, [r4, #0]
 8006f38:	6833      	ldr	r3, [r6, #0]
 8006f3a:	0608      	lsls	r0, r1, #24
 8006f3c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006f40:	d402      	bmi.n	8006f48 <_printf_i+0xe8>
 8006f42:	0649      	lsls	r1, r1, #25
 8006f44:	bf48      	it	mi
 8006f46:	b2ad      	uxthmi	r5, r5
 8006f48:	2f6f      	cmp	r7, #111	@ 0x6f
 8006f4a:	4853      	ldr	r0, [pc, #332]	@ (8007098 <_printf_i+0x238>)
 8006f4c:	6033      	str	r3, [r6, #0]
 8006f4e:	bf14      	ite	ne
 8006f50:	230a      	movne	r3, #10
 8006f52:	2308      	moveq	r3, #8
 8006f54:	2100      	movs	r1, #0
 8006f56:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006f5a:	6866      	ldr	r6, [r4, #4]
 8006f5c:	60a6      	str	r6, [r4, #8]
 8006f5e:	2e00      	cmp	r6, #0
 8006f60:	bfa2      	ittt	ge
 8006f62:	6821      	ldrge	r1, [r4, #0]
 8006f64:	f021 0104 	bicge.w	r1, r1, #4
 8006f68:	6021      	strge	r1, [r4, #0]
 8006f6a:	b90d      	cbnz	r5, 8006f70 <_printf_i+0x110>
 8006f6c:	2e00      	cmp	r6, #0
 8006f6e:	d04b      	beq.n	8007008 <_printf_i+0x1a8>
 8006f70:	4616      	mov	r6, r2
 8006f72:	fbb5 f1f3 	udiv	r1, r5, r3
 8006f76:	fb03 5711 	mls	r7, r3, r1, r5
 8006f7a:	5dc7      	ldrb	r7, [r0, r7]
 8006f7c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006f80:	462f      	mov	r7, r5
 8006f82:	42bb      	cmp	r3, r7
 8006f84:	460d      	mov	r5, r1
 8006f86:	d9f4      	bls.n	8006f72 <_printf_i+0x112>
 8006f88:	2b08      	cmp	r3, #8
 8006f8a:	d10b      	bne.n	8006fa4 <_printf_i+0x144>
 8006f8c:	6823      	ldr	r3, [r4, #0]
 8006f8e:	07df      	lsls	r7, r3, #31
 8006f90:	d508      	bpl.n	8006fa4 <_printf_i+0x144>
 8006f92:	6923      	ldr	r3, [r4, #16]
 8006f94:	6861      	ldr	r1, [r4, #4]
 8006f96:	4299      	cmp	r1, r3
 8006f98:	bfde      	ittt	le
 8006f9a:	2330      	movle	r3, #48	@ 0x30
 8006f9c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006fa0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006fa4:	1b92      	subs	r2, r2, r6
 8006fa6:	6122      	str	r2, [r4, #16]
 8006fa8:	f8cd a000 	str.w	sl, [sp]
 8006fac:	464b      	mov	r3, r9
 8006fae:	aa03      	add	r2, sp, #12
 8006fb0:	4621      	mov	r1, r4
 8006fb2:	4640      	mov	r0, r8
 8006fb4:	f7ff fee6 	bl	8006d84 <_printf_common>
 8006fb8:	3001      	adds	r0, #1
 8006fba:	d14a      	bne.n	8007052 <_printf_i+0x1f2>
 8006fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8006fc0:	b004      	add	sp, #16
 8006fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fc6:	6823      	ldr	r3, [r4, #0]
 8006fc8:	f043 0320 	orr.w	r3, r3, #32
 8006fcc:	6023      	str	r3, [r4, #0]
 8006fce:	4833      	ldr	r0, [pc, #204]	@ (800709c <_printf_i+0x23c>)
 8006fd0:	2778      	movs	r7, #120	@ 0x78
 8006fd2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006fd6:	6823      	ldr	r3, [r4, #0]
 8006fd8:	6831      	ldr	r1, [r6, #0]
 8006fda:	061f      	lsls	r7, r3, #24
 8006fdc:	f851 5b04 	ldr.w	r5, [r1], #4
 8006fe0:	d402      	bmi.n	8006fe8 <_printf_i+0x188>
 8006fe2:	065f      	lsls	r7, r3, #25
 8006fe4:	bf48      	it	mi
 8006fe6:	b2ad      	uxthmi	r5, r5
 8006fe8:	6031      	str	r1, [r6, #0]
 8006fea:	07d9      	lsls	r1, r3, #31
 8006fec:	bf44      	itt	mi
 8006fee:	f043 0320 	orrmi.w	r3, r3, #32
 8006ff2:	6023      	strmi	r3, [r4, #0]
 8006ff4:	b11d      	cbz	r5, 8006ffe <_printf_i+0x19e>
 8006ff6:	2310      	movs	r3, #16
 8006ff8:	e7ac      	b.n	8006f54 <_printf_i+0xf4>
 8006ffa:	4827      	ldr	r0, [pc, #156]	@ (8007098 <_printf_i+0x238>)
 8006ffc:	e7e9      	b.n	8006fd2 <_printf_i+0x172>
 8006ffe:	6823      	ldr	r3, [r4, #0]
 8007000:	f023 0320 	bic.w	r3, r3, #32
 8007004:	6023      	str	r3, [r4, #0]
 8007006:	e7f6      	b.n	8006ff6 <_printf_i+0x196>
 8007008:	4616      	mov	r6, r2
 800700a:	e7bd      	b.n	8006f88 <_printf_i+0x128>
 800700c:	6833      	ldr	r3, [r6, #0]
 800700e:	6825      	ldr	r5, [r4, #0]
 8007010:	6961      	ldr	r1, [r4, #20]
 8007012:	1d18      	adds	r0, r3, #4
 8007014:	6030      	str	r0, [r6, #0]
 8007016:	062e      	lsls	r6, r5, #24
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	d501      	bpl.n	8007020 <_printf_i+0x1c0>
 800701c:	6019      	str	r1, [r3, #0]
 800701e:	e002      	b.n	8007026 <_printf_i+0x1c6>
 8007020:	0668      	lsls	r0, r5, #25
 8007022:	d5fb      	bpl.n	800701c <_printf_i+0x1bc>
 8007024:	8019      	strh	r1, [r3, #0]
 8007026:	2300      	movs	r3, #0
 8007028:	6123      	str	r3, [r4, #16]
 800702a:	4616      	mov	r6, r2
 800702c:	e7bc      	b.n	8006fa8 <_printf_i+0x148>
 800702e:	6833      	ldr	r3, [r6, #0]
 8007030:	1d1a      	adds	r2, r3, #4
 8007032:	6032      	str	r2, [r6, #0]
 8007034:	681e      	ldr	r6, [r3, #0]
 8007036:	6862      	ldr	r2, [r4, #4]
 8007038:	2100      	movs	r1, #0
 800703a:	4630      	mov	r0, r6
 800703c:	f7f9 f8e8 	bl	8000210 <memchr>
 8007040:	b108      	cbz	r0, 8007046 <_printf_i+0x1e6>
 8007042:	1b80      	subs	r0, r0, r6
 8007044:	6060      	str	r0, [r4, #4]
 8007046:	6863      	ldr	r3, [r4, #4]
 8007048:	6123      	str	r3, [r4, #16]
 800704a:	2300      	movs	r3, #0
 800704c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007050:	e7aa      	b.n	8006fa8 <_printf_i+0x148>
 8007052:	6923      	ldr	r3, [r4, #16]
 8007054:	4632      	mov	r2, r6
 8007056:	4649      	mov	r1, r9
 8007058:	4640      	mov	r0, r8
 800705a:	47d0      	blx	sl
 800705c:	3001      	adds	r0, #1
 800705e:	d0ad      	beq.n	8006fbc <_printf_i+0x15c>
 8007060:	6823      	ldr	r3, [r4, #0]
 8007062:	079b      	lsls	r3, r3, #30
 8007064:	d413      	bmi.n	800708e <_printf_i+0x22e>
 8007066:	68e0      	ldr	r0, [r4, #12]
 8007068:	9b03      	ldr	r3, [sp, #12]
 800706a:	4298      	cmp	r0, r3
 800706c:	bfb8      	it	lt
 800706e:	4618      	movlt	r0, r3
 8007070:	e7a6      	b.n	8006fc0 <_printf_i+0x160>
 8007072:	2301      	movs	r3, #1
 8007074:	4632      	mov	r2, r6
 8007076:	4649      	mov	r1, r9
 8007078:	4640      	mov	r0, r8
 800707a:	47d0      	blx	sl
 800707c:	3001      	adds	r0, #1
 800707e:	d09d      	beq.n	8006fbc <_printf_i+0x15c>
 8007080:	3501      	adds	r5, #1
 8007082:	68e3      	ldr	r3, [r4, #12]
 8007084:	9903      	ldr	r1, [sp, #12]
 8007086:	1a5b      	subs	r3, r3, r1
 8007088:	42ab      	cmp	r3, r5
 800708a:	dcf2      	bgt.n	8007072 <_printf_i+0x212>
 800708c:	e7eb      	b.n	8007066 <_printf_i+0x206>
 800708e:	2500      	movs	r5, #0
 8007090:	f104 0619 	add.w	r6, r4, #25
 8007094:	e7f5      	b.n	8007082 <_printf_i+0x222>
 8007096:	bf00      	nop
 8007098:	0800aff6 	.word	0x0800aff6
 800709c:	0800b007 	.word	0x0800b007

080070a0 <_scanf_float>:
 80070a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070a4:	b087      	sub	sp, #28
 80070a6:	4617      	mov	r7, r2
 80070a8:	9303      	str	r3, [sp, #12]
 80070aa:	688b      	ldr	r3, [r1, #8]
 80070ac:	1e5a      	subs	r2, r3, #1
 80070ae:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80070b2:	bf81      	itttt	hi
 80070b4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80070b8:	eb03 0b05 	addhi.w	fp, r3, r5
 80070bc:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80070c0:	608b      	strhi	r3, [r1, #8]
 80070c2:	680b      	ldr	r3, [r1, #0]
 80070c4:	460a      	mov	r2, r1
 80070c6:	f04f 0500 	mov.w	r5, #0
 80070ca:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80070ce:	f842 3b1c 	str.w	r3, [r2], #28
 80070d2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80070d6:	4680      	mov	r8, r0
 80070d8:	460c      	mov	r4, r1
 80070da:	bf98      	it	ls
 80070dc:	f04f 0b00 	movls.w	fp, #0
 80070e0:	9201      	str	r2, [sp, #4]
 80070e2:	4616      	mov	r6, r2
 80070e4:	46aa      	mov	sl, r5
 80070e6:	46a9      	mov	r9, r5
 80070e8:	9502      	str	r5, [sp, #8]
 80070ea:	68a2      	ldr	r2, [r4, #8]
 80070ec:	b152      	cbz	r2, 8007104 <_scanf_float+0x64>
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	781b      	ldrb	r3, [r3, #0]
 80070f2:	2b4e      	cmp	r3, #78	@ 0x4e
 80070f4:	d864      	bhi.n	80071c0 <_scanf_float+0x120>
 80070f6:	2b40      	cmp	r3, #64	@ 0x40
 80070f8:	d83c      	bhi.n	8007174 <_scanf_float+0xd4>
 80070fa:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80070fe:	b2c8      	uxtb	r0, r1
 8007100:	280e      	cmp	r0, #14
 8007102:	d93a      	bls.n	800717a <_scanf_float+0xda>
 8007104:	f1b9 0f00 	cmp.w	r9, #0
 8007108:	d003      	beq.n	8007112 <_scanf_float+0x72>
 800710a:	6823      	ldr	r3, [r4, #0]
 800710c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007110:	6023      	str	r3, [r4, #0]
 8007112:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007116:	f1ba 0f01 	cmp.w	sl, #1
 800711a:	f200 8117 	bhi.w	800734c <_scanf_float+0x2ac>
 800711e:	9b01      	ldr	r3, [sp, #4]
 8007120:	429e      	cmp	r6, r3
 8007122:	f200 8108 	bhi.w	8007336 <_scanf_float+0x296>
 8007126:	2001      	movs	r0, #1
 8007128:	b007      	add	sp, #28
 800712a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800712e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007132:	2a0d      	cmp	r2, #13
 8007134:	d8e6      	bhi.n	8007104 <_scanf_float+0x64>
 8007136:	a101      	add	r1, pc, #4	@ (adr r1, 800713c <_scanf_float+0x9c>)
 8007138:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800713c:	08007283 	.word	0x08007283
 8007140:	08007105 	.word	0x08007105
 8007144:	08007105 	.word	0x08007105
 8007148:	08007105 	.word	0x08007105
 800714c:	080072e3 	.word	0x080072e3
 8007150:	080072bb 	.word	0x080072bb
 8007154:	08007105 	.word	0x08007105
 8007158:	08007105 	.word	0x08007105
 800715c:	08007291 	.word	0x08007291
 8007160:	08007105 	.word	0x08007105
 8007164:	08007105 	.word	0x08007105
 8007168:	08007105 	.word	0x08007105
 800716c:	08007105 	.word	0x08007105
 8007170:	08007249 	.word	0x08007249
 8007174:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007178:	e7db      	b.n	8007132 <_scanf_float+0x92>
 800717a:	290e      	cmp	r1, #14
 800717c:	d8c2      	bhi.n	8007104 <_scanf_float+0x64>
 800717e:	a001      	add	r0, pc, #4	@ (adr r0, 8007184 <_scanf_float+0xe4>)
 8007180:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007184:	08007239 	.word	0x08007239
 8007188:	08007105 	.word	0x08007105
 800718c:	08007239 	.word	0x08007239
 8007190:	080072cf 	.word	0x080072cf
 8007194:	08007105 	.word	0x08007105
 8007198:	080071e1 	.word	0x080071e1
 800719c:	0800721f 	.word	0x0800721f
 80071a0:	0800721f 	.word	0x0800721f
 80071a4:	0800721f 	.word	0x0800721f
 80071a8:	0800721f 	.word	0x0800721f
 80071ac:	0800721f 	.word	0x0800721f
 80071b0:	0800721f 	.word	0x0800721f
 80071b4:	0800721f 	.word	0x0800721f
 80071b8:	0800721f 	.word	0x0800721f
 80071bc:	0800721f 	.word	0x0800721f
 80071c0:	2b6e      	cmp	r3, #110	@ 0x6e
 80071c2:	d809      	bhi.n	80071d8 <_scanf_float+0x138>
 80071c4:	2b60      	cmp	r3, #96	@ 0x60
 80071c6:	d8b2      	bhi.n	800712e <_scanf_float+0x8e>
 80071c8:	2b54      	cmp	r3, #84	@ 0x54
 80071ca:	d07b      	beq.n	80072c4 <_scanf_float+0x224>
 80071cc:	2b59      	cmp	r3, #89	@ 0x59
 80071ce:	d199      	bne.n	8007104 <_scanf_float+0x64>
 80071d0:	2d07      	cmp	r5, #7
 80071d2:	d197      	bne.n	8007104 <_scanf_float+0x64>
 80071d4:	2508      	movs	r5, #8
 80071d6:	e02c      	b.n	8007232 <_scanf_float+0x192>
 80071d8:	2b74      	cmp	r3, #116	@ 0x74
 80071da:	d073      	beq.n	80072c4 <_scanf_float+0x224>
 80071dc:	2b79      	cmp	r3, #121	@ 0x79
 80071de:	e7f6      	b.n	80071ce <_scanf_float+0x12e>
 80071e0:	6821      	ldr	r1, [r4, #0]
 80071e2:	05c8      	lsls	r0, r1, #23
 80071e4:	d51b      	bpl.n	800721e <_scanf_float+0x17e>
 80071e6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80071ea:	6021      	str	r1, [r4, #0]
 80071ec:	f109 0901 	add.w	r9, r9, #1
 80071f0:	f1bb 0f00 	cmp.w	fp, #0
 80071f4:	d003      	beq.n	80071fe <_scanf_float+0x15e>
 80071f6:	3201      	adds	r2, #1
 80071f8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80071fc:	60a2      	str	r2, [r4, #8]
 80071fe:	68a3      	ldr	r3, [r4, #8]
 8007200:	3b01      	subs	r3, #1
 8007202:	60a3      	str	r3, [r4, #8]
 8007204:	6923      	ldr	r3, [r4, #16]
 8007206:	3301      	adds	r3, #1
 8007208:	6123      	str	r3, [r4, #16]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	3b01      	subs	r3, #1
 800720e:	2b00      	cmp	r3, #0
 8007210:	607b      	str	r3, [r7, #4]
 8007212:	f340 8087 	ble.w	8007324 <_scanf_float+0x284>
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	3301      	adds	r3, #1
 800721a:	603b      	str	r3, [r7, #0]
 800721c:	e765      	b.n	80070ea <_scanf_float+0x4a>
 800721e:	eb1a 0105 	adds.w	r1, sl, r5
 8007222:	f47f af6f 	bne.w	8007104 <_scanf_float+0x64>
 8007226:	6822      	ldr	r2, [r4, #0]
 8007228:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800722c:	6022      	str	r2, [r4, #0]
 800722e:	460d      	mov	r5, r1
 8007230:	468a      	mov	sl, r1
 8007232:	f806 3b01 	strb.w	r3, [r6], #1
 8007236:	e7e2      	b.n	80071fe <_scanf_float+0x15e>
 8007238:	6822      	ldr	r2, [r4, #0]
 800723a:	0610      	lsls	r0, r2, #24
 800723c:	f57f af62 	bpl.w	8007104 <_scanf_float+0x64>
 8007240:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007244:	6022      	str	r2, [r4, #0]
 8007246:	e7f4      	b.n	8007232 <_scanf_float+0x192>
 8007248:	f1ba 0f00 	cmp.w	sl, #0
 800724c:	d10e      	bne.n	800726c <_scanf_float+0x1cc>
 800724e:	f1b9 0f00 	cmp.w	r9, #0
 8007252:	d10e      	bne.n	8007272 <_scanf_float+0x1d2>
 8007254:	6822      	ldr	r2, [r4, #0]
 8007256:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800725a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800725e:	d108      	bne.n	8007272 <_scanf_float+0x1d2>
 8007260:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007264:	6022      	str	r2, [r4, #0]
 8007266:	f04f 0a01 	mov.w	sl, #1
 800726a:	e7e2      	b.n	8007232 <_scanf_float+0x192>
 800726c:	f1ba 0f02 	cmp.w	sl, #2
 8007270:	d055      	beq.n	800731e <_scanf_float+0x27e>
 8007272:	2d01      	cmp	r5, #1
 8007274:	d002      	beq.n	800727c <_scanf_float+0x1dc>
 8007276:	2d04      	cmp	r5, #4
 8007278:	f47f af44 	bne.w	8007104 <_scanf_float+0x64>
 800727c:	3501      	adds	r5, #1
 800727e:	b2ed      	uxtb	r5, r5
 8007280:	e7d7      	b.n	8007232 <_scanf_float+0x192>
 8007282:	f1ba 0f01 	cmp.w	sl, #1
 8007286:	f47f af3d 	bne.w	8007104 <_scanf_float+0x64>
 800728a:	f04f 0a02 	mov.w	sl, #2
 800728e:	e7d0      	b.n	8007232 <_scanf_float+0x192>
 8007290:	b97d      	cbnz	r5, 80072b2 <_scanf_float+0x212>
 8007292:	f1b9 0f00 	cmp.w	r9, #0
 8007296:	f47f af38 	bne.w	800710a <_scanf_float+0x6a>
 800729a:	6822      	ldr	r2, [r4, #0]
 800729c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80072a0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80072a4:	f040 8108 	bne.w	80074b8 <_scanf_float+0x418>
 80072a8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80072ac:	6022      	str	r2, [r4, #0]
 80072ae:	2501      	movs	r5, #1
 80072b0:	e7bf      	b.n	8007232 <_scanf_float+0x192>
 80072b2:	2d03      	cmp	r5, #3
 80072b4:	d0e2      	beq.n	800727c <_scanf_float+0x1dc>
 80072b6:	2d05      	cmp	r5, #5
 80072b8:	e7de      	b.n	8007278 <_scanf_float+0x1d8>
 80072ba:	2d02      	cmp	r5, #2
 80072bc:	f47f af22 	bne.w	8007104 <_scanf_float+0x64>
 80072c0:	2503      	movs	r5, #3
 80072c2:	e7b6      	b.n	8007232 <_scanf_float+0x192>
 80072c4:	2d06      	cmp	r5, #6
 80072c6:	f47f af1d 	bne.w	8007104 <_scanf_float+0x64>
 80072ca:	2507      	movs	r5, #7
 80072cc:	e7b1      	b.n	8007232 <_scanf_float+0x192>
 80072ce:	6822      	ldr	r2, [r4, #0]
 80072d0:	0591      	lsls	r1, r2, #22
 80072d2:	f57f af17 	bpl.w	8007104 <_scanf_float+0x64>
 80072d6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80072da:	6022      	str	r2, [r4, #0]
 80072dc:	f8cd 9008 	str.w	r9, [sp, #8]
 80072e0:	e7a7      	b.n	8007232 <_scanf_float+0x192>
 80072e2:	6822      	ldr	r2, [r4, #0]
 80072e4:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80072e8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80072ec:	d006      	beq.n	80072fc <_scanf_float+0x25c>
 80072ee:	0550      	lsls	r0, r2, #21
 80072f0:	f57f af08 	bpl.w	8007104 <_scanf_float+0x64>
 80072f4:	f1b9 0f00 	cmp.w	r9, #0
 80072f8:	f000 80de 	beq.w	80074b8 <_scanf_float+0x418>
 80072fc:	0591      	lsls	r1, r2, #22
 80072fe:	bf58      	it	pl
 8007300:	9902      	ldrpl	r1, [sp, #8]
 8007302:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007306:	bf58      	it	pl
 8007308:	eba9 0101 	subpl.w	r1, r9, r1
 800730c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8007310:	bf58      	it	pl
 8007312:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007316:	6022      	str	r2, [r4, #0]
 8007318:	f04f 0900 	mov.w	r9, #0
 800731c:	e789      	b.n	8007232 <_scanf_float+0x192>
 800731e:	f04f 0a03 	mov.w	sl, #3
 8007322:	e786      	b.n	8007232 <_scanf_float+0x192>
 8007324:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007328:	4639      	mov	r1, r7
 800732a:	4640      	mov	r0, r8
 800732c:	4798      	blx	r3
 800732e:	2800      	cmp	r0, #0
 8007330:	f43f aedb 	beq.w	80070ea <_scanf_float+0x4a>
 8007334:	e6e6      	b.n	8007104 <_scanf_float+0x64>
 8007336:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800733a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800733e:	463a      	mov	r2, r7
 8007340:	4640      	mov	r0, r8
 8007342:	4798      	blx	r3
 8007344:	6923      	ldr	r3, [r4, #16]
 8007346:	3b01      	subs	r3, #1
 8007348:	6123      	str	r3, [r4, #16]
 800734a:	e6e8      	b.n	800711e <_scanf_float+0x7e>
 800734c:	1e6b      	subs	r3, r5, #1
 800734e:	2b06      	cmp	r3, #6
 8007350:	d824      	bhi.n	800739c <_scanf_float+0x2fc>
 8007352:	2d02      	cmp	r5, #2
 8007354:	d836      	bhi.n	80073c4 <_scanf_float+0x324>
 8007356:	9b01      	ldr	r3, [sp, #4]
 8007358:	429e      	cmp	r6, r3
 800735a:	f67f aee4 	bls.w	8007126 <_scanf_float+0x86>
 800735e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007362:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007366:	463a      	mov	r2, r7
 8007368:	4640      	mov	r0, r8
 800736a:	4798      	blx	r3
 800736c:	6923      	ldr	r3, [r4, #16]
 800736e:	3b01      	subs	r3, #1
 8007370:	6123      	str	r3, [r4, #16]
 8007372:	e7f0      	b.n	8007356 <_scanf_float+0x2b6>
 8007374:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007378:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800737c:	463a      	mov	r2, r7
 800737e:	4640      	mov	r0, r8
 8007380:	4798      	blx	r3
 8007382:	6923      	ldr	r3, [r4, #16]
 8007384:	3b01      	subs	r3, #1
 8007386:	6123      	str	r3, [r4, #16]
 8007388:	f10a 3aff 	add.w	sl, sl, #4294967295
 800738c:	fa5f fa8a 	uxtb.w	sl, sl
 8007390:	f1ba 0f02 	cmp.w	sl, #2
 8007394:	d1ee      	bne.n	8007374 <_scanf_float+0x2d4>
 8007396:	3d03      	subs	r5, #3
 8007398:	b2ed      	uxtb	r5, r5
 800739a:	1b76      	subs	r6, r6, r5
 800739c:	6823      	ldr	r3, [r4, #0]
 800739e:	05da      	lsls	r2, r3, #23
 80073a0:	d530      	bpl.n	8007404 <_scanf_float+0x364>
 80073a2:	055b      	lsls	r3, r3, #21
 80073a4:	d511      	bpl.n	80073ca <_scanf_float+0x32a>
 80073a6:	9b01      	ldr	r3, [sp, #4]
 80073a8:	429e      	cmp	r6, r3
 80073aa:	f67f aebc 	bls.w	8007126 <_scanf_float+0x86>
 80073ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80073b2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80073b6:	463a      	mov	r2, r7
 80073b8:	4640      	mov	r0, r8
 80073ba:	4798      	blx	r3
 80073bc:	6923      	ldr	r3, [r4, #16]
 80073be:	3b01      	subs	r3, #1
 80073c0:	6123      	str	r3, [r4, #16]
 80073c2:	e7f0      	b.n	80073a6 <_scanf_float+0x306>
 80073c4:	46aa      	mov	sl, r5
 80073c6:	46b3      	mov	fp, r6
 80073c8:	e7de      	b.n	8007388 <_scanf_float+0x2e8>
 80073ca:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80073ce:	6923      	ldr	r3, [r4, #16]
 80073d0:	2965      	cmp	r1, #101	@ 0x65
 80073d2:	f103 33ff 	add.w	r3, r3, #4294967295
 80073d6:	f106 35ff 	add.w	r5, r6, #4294967295
 80073da:	6123      	str	r3, [r4, #16]
 80073dc:	d00c      	beq.n	80073f8 <_scanf_float+0x358>
 80073de:	2945      	cmp	r1, #69	@ 0x45
 80073e0:	d00a      	beq.n	80073f8 <_scanf_float+0x358>
 80073e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80073e6:	463a      	mov	r2, r7
 80073e8:	4640      	mov	r0, r8
 80073ea:	4798      	blx	r3
 80073ec:	6923      	ldr	r3, [r4, #16]
 80073ee:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80073f2:	3b01      	subs	r3, #1
 80073f4:	1eb5      	subs	r5, r6, #2
 80073f6:	6123      	str	r3, [r4, #16]
 80073f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80073fc:	463a      	mov	r2, r7
 80073fe:	4640      	mov	r0, r8
 8007400:	4798      	blx	r3
 8007402:	462e      	mov	r6, r5
 8007404:	6822      	ldr	r2, [r4, #0]
 8007406:	f012 0210 	ands.w	r2, r2, #16
 800740a:	d001      	beq.n	8007410 <_scanf_float+0x370>
 800740c:	2000      	movs	r0, #0
 800740e:	e68b      	b.n	8007128 <_scanf_float+0x88>
 8007410:	7032      	strb	r2, [r6, #0]
 8007412:	6823      	ldr	r3, [r4, #0]
 8007414:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007418:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800741c:	d11c      	bne.n	8007458 <_scanf_float+0x3b8>
 800741e:	9b02      	ldr	r3, [sp, #8]
 8007420:	454b      	cmp	r3, r9
 8007422:	eba3 0209 	sub.w	r2, r3, r9
 8007426:	d123      	bne.n	8007470 <_scanf_float+0x3d0>
 8007428:	9901      	ldr	r1, [sp, #4]
 800742a:	2200      	movs	r2, #0
 800742c:	4640      	mov	r0, r8
 800742e:	f002 fc3b 	bl	8009ca8 <_strtod_r>
 8007432:	9b03      	ldr	r3, [sp, #12]
 8007434:	6821      	ldr	r1, [r4, #0]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f011 0f02 	tst.w	r1, #2
 800743c:	ec57 6b10 	vmov	r6, r7, d0
 8007440:	f103 0204 	add.w	r2, r3, #4
 8007444:	d01f      	beq.n	8007486 <_scanf_float+0x3e6>
 8007446:	9903      	ldr	r1, [sp, #12]
 8007448:	600a      	str	r2, [r1, #0]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	e9c3 6700 	strd	r6, r7, [r3]
 8007450:	68e3      	ldr	r3, [r4, #12]
 8007452:	3301      	adds	r3, #1
 8007454:	60e3      	str	r3, [r4, #12]
 8007456:	e7d9      	b.n	800740c <_scanf_float+0x36c>
 8007458:	9b04      	ldr	r3, [sp, #16]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d0e4      	beq.n	8007428 <_scanf_float+0x388>
 800745e:	9905      	ldr	r1, [sp, #20]
 8007460:	230a      	movs	r3, #10
 8007462:	3101      	adds	r1, #1
 8007464:	4640      	mov	r0, r8
 8007466:	f002 fc9f 	bl	8009da8 <_strtol_r>
 800746a:	9b04      	ldr	r3, [sp, #16]
 800746c:	9e05      	ldr	r6, [sp, #20]
 800746e:	1ac2      	subs	r2, r0, r3
 8007470:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007474:	429e      	cmp	r6, r3
 8007476:	bf28      	it	cs
 8007478:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800747c:	4910      	ldr	r1, [pc, #64]	@ (80074c0 <_scanf_float+0x420>)
 800747e:	4630      	mov	r0, r6
 8007480:	f000 f918 	bl	80076b4 <siprintf>
 8007484:	e7d0      	b.n	8007428 <_scanf_float+0x388>
 8007486:	f011 0f04 	tst.w	r1, #4
 800748a:	9903      	ldr	r1, [sp, #12]
 800748c:	600a      	str	r2, [r1, #0]
 800748e:	d1dc      	bne.n	800744a <_scanf_float+0x3aa>
 8007490:	681d      	ldr	r5, [r3, #0]
 8007492:	4632      	mov	r2, r6
 8007494:	463b      	mov	r3, r7
 8007496:	4630      	mov	r0, r6
 8007498:	4639      	mov	r1, r7
 800749a:	f7f9 fb67 	bl	8000b6c <__aeabi_dcmpun>
 800749e:	b128      	cbz	r0, 80074ac <_scanf_float+0x40c>
 80074a0:	4808      	ldr	r0, [pc, #32]	@ (80074c4 <_scanf_float+0x424>)
 80074a2:	f000 f9f9 	bl	8007898 <nanf>
 80074a6:	ed85 0a00 	vstr	s0, [r5]
 80074aa:	e7d1      	b.n	8007450 <_scanf_float+0x3b0>
 80074ac:	4630      	mov	r0, r6
 80074ae:	4639      	mov	r1, r7
 80074b0:	f7f9 fbba 	bl	8000c28 <__aeabi_d2f>
 80074b4:	6028      	str	r0, [r5, #0]
 80074b6:	e7cb      	b.n	8007450 <_scanf_float+0x3b0>
 80074b8:	f04f 0900 	mov.w	r9, #0
 80074bc:	e629      	b.n	8007112 <_scanf_float+0x72>
 80074be:	bf00      	nop
 80074c0:	0800b018 	.word	0x0800b018
 80074c4:	0800b3ad 	.word	0x0800b3ad

080074c8 <std>:
 80074c8:	2300      	movs	r3, #0
 80074ca:	b510      	push	{r4, lr}
 80074cc:	4604      	mov	r4, r0
 80074ce:	e9c0 3300 	strd	r3, r3, [r0]
 80074d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80074d6:	6083      	str	r3, [r0, #8]
 80074d8:	8181      	strh	r1, [r0, #12]
 80074da:	6643      	str	r3, [r0, #100]	@ 0x64
 80074dc:	81c2      	strh	r2, [r0, #14]
 80074de:	6183      	str	r3, [r0, #24]
 80074e0:	4619      	mov	r1, r3
 80074e2:	2208      	movs	r2, #8
 80074e4:	305c      	adds	r0, #92	@ 0x5c
 80074e6:	f000 f948 	bl	800777a <memset>
 80074ea:	4b0d      	ldr	r3, [pc, #52]	@ (8007520 <std+0x58>)
 80074ec:	6263      	str	r3, [r4, #36]	@ 0x24
 80074ee:	4b0d      	ldr	r3, [pc, #52]	@ (8007524 <std+0x5c>)
 80074f0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80074f2:	4b0d      	ldr	r3, [pc, #52]	@ (8007528 <std+0x60>)
 80074f4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80074f6:	4b0d      	ldr	r3, [pc, #52]	@ (800752c <std+0x64>)
 80074f8:	6323      	str	r3, [r4, #48]	@ 0x30
 80074fa:	4b0d      	ldr	r3, [pc, #52]	@ (8007530 <std+0x68>)
 80074fc:	6224      	str	r4, [r4, #32]
 80074fe:	429c      	cmp	r4, r3
 8007500:	d006      	beq.n	8007510 <std+0x48>
 8007502:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007506:	4294      	cmp	r4, r2
 8007508:	d002      	beq.n	8007510 <std+0x48>
 800750a:	33d0      	adds	r3, #208	@ 0xd0
 800750c:	429c      	cmp	r4, r3
 800750e:	d105      	bne.n	800751c <std+0x54>
 8007510:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007518:	f000 b9ac 	b.w	8007874 <__retarget_lock_init_recursive>
 800751c:	bd10      	pop	{r4, pc}
 800751e:	bf00      	nop
 8007520:	080076f5 	.word	0x080076f5
 8007524:	08007717 	.word	0x08007717
 8007528:	0800774f 	.word	0x0800774f
 800752c:	08007773 	.word	0x08007773
 8007530:	2000427c 	.word	0x2000427c

08007534 <stdio_exit_handler>:
 8007534:	4a02      	ldr	r2, [pc, #8]	@ (8007540 <stdio_exit_handler+0xc>)
 8007536:	4903      	ldr	r1, [pc, #12]	@ (8007544 <stdio_exit_handler+0x10>)
 8007538:	4803      	ldr	r0, [pc, #12]	@ (8007548 <stdio_exit_handler+0x14>)
 800753a:	f000 b869 	b.w	8007610 <_fwalk_sglue>
 800753e:	bf00      	nop
 8007540:	20000010 	.word	0x20000010
 8007544:	0800a165 	.word	0x0800a165
 8007548:	20000020 	.word	0x20000020

0800754c <cleanup_stdio>:
 800754c:	6841      	ldr	r1, [r0, #4]
 800754e:	4b0c      	ldr	r3, [pc, #48]	@ (8007580 <cleanup_stdio+0x34>)
 8007550:	4299      	cmp	r1, r3
 8007552:	b510      	push	{r4, lr}
 8007554:	4604      	mov	r4, r0
 8007556:	d001      	beq.n	800755c <cleanup_stdio+0x10>
 8007558:	f002 fe04 	bl	800a164 <_fflush_r>
 800755c:	68a1      	ldr	r1, [r4, #8]
 800755e:	4b09      	ldr	r3, [pc, #36]	@ (8007584 <cleanup_stdio+0x38>)
 8007560:	4299      	cmp	r1, r3
 8007562:	d002      	beq.n	800756a <cleanup_stdio+0x1e>
 8007564:	4620      	mov	r0, r4
 8007566:	f002 fdfd 	bl	800a164 <_fflush_r>
 800756a:	68e1      	ldr	r1, [r4, #12]
 800756c:	4b06      	ldr	r3, [pc, #24]	@ (8007588 <cleanup_stdio+0x3c>)
 800756e:	4299      	cmp	r1, r3
 8007570:	d004      	beq.n	800757c <cleanup_stdio+0x30>
 8007572:	4620      	mov	r0, r4
 8007574:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007578:	f002 bdf4 	b.w	800a164 <_fflush_r>
 800757c:	bd10      	pop	{r4, pc}
 800757e:	bf00      	nop
 8007580:	2000427c 	.word	0x2000427c
 8007584:	200042e4 	.word	0x200042e4
 8007588:	2000434c 	.word	0x2000434c

0800758c <global_stdio_init.part.0>:
 800758c:	b510      	push	{r4, lr}
 800758e:	4b0b      	ldr	r3, [pc, #44]	@ (80075bc <global_stdio_init.part.0+0x30>)
 8007590:	4c0b      	ldr	r4, [pc, #44]	@ (80075c0 <global_stdio_init.part.0+0x34>)
 8007592:	4a0c      	ldr	r2, [pc, #48]	@ (80075c4 <global_stdio_init.part.0+0x38>)
 8007594:	601a      	str	r2, [r3, #0]
 8007596:	4620      	mov	r0, r4
 8007598:	2200      	movs	r2, #0
 800759a:	2104      	movs	r1, #4
 800759c:	f7ff ff94 	bl	80074c8 <std>
 80075a0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80075a4:	2201      	movs	r2, #1
 80075a6:	2109      	movs	r1, #9
 80075a8:	f7ff ff8e 	bl	80074c8 <std>
 80075ac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80075b0:	2202      	movs	r2, #2
 80075b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075b6:	2112      	movs	r1, #18
 80075b8:	f7ff bf86 	b.w	80074c8 <std>
 80075bc:	200043b4 	.word	0x200043b4
 80075c0:	2000427c 	.word	0x2000427c
 80075c4:	08007535 	.word	0x08007535

080075c8 <__sfp_lock_acquire>:
 80075c8:	4801      	ldr	r0, [pc, #4]	@ (80075d0 <__sfp_lock_acquire+0x8>)
 80075ca:	f000 b954 	b.w	8007876 <__retarget_lock_acquire_recursive>
 80075ce:	bf00      	nop
 80075d0:	200043bd 	.word	0x200043bd

080075d4 <__sfp_lock_release>:
 80075d4:	4801      	ldr	r0, [pc, #4]	@ (80075dc <__sfp_lock_release+0x8>)
 80075d6:	f000 b94f 	b.w	8007878 <__retarget_lock_release_recursive>
 80075da:	bf00      	nop
 80075dc:	200043bd 	.word	0x200043bd

080075e0 <__sinit>:
 80075e0:	b510      	push	{r4, lr}
 80075e2:	4604      	mov	r4, r0
 80075e4:	f7ff fff0 	bl	80075c8 <__sfp_lock_acquire>
 80075e8:	6a23      	ldr	r3, [r4, #32]
 80075ea:	b11b      	cbz	r3, 80075f4 <__sinit+0x14>
 80075ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075f0:	f7ff bff0 	b.w	80075d4 <__sfp_lock_release>
 80075f4:	4b04      	ldr	r3, [pc, #16]	@ (8007608 <__sinit+0x28>)
 80075f6:	6223      	str	r3, [r4, #32]
 80075f8:	4b04      	ldr	r3, [pc, #16]	@ (800760c <__sinit+0x2c>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d1f5      	bne.n	80075ec <__sinit+0xc>
 8007600:	f7ff ffc4 	bl	800758c <global_stdio_init.part.0>
 8007604:	e7f2      	b.n	80075ec <__sinit+0xc>
 8007606:	bf00      	nop
 8007608:	0800754d 	.word	0x0800754d
 800760c:	200043b4 	.word	0x200043b4

08007610 <_fwalk_sglue>:
 8007610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007614:	4607      	mov	r7, r0
 8007616:	4688      	mov	r8, r1
 8007618:	4614      	mov	r4, r2
 800761a:	2600      	movs	r6, #0
 800761c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007620:	f1b9 0901 	subs.w	r9, r9, #1
 8007624:	d505      	bpl.n	8007632 <_fwalk_sglue+0x22>
 8007626:	6824      	ldr	r4, [r4, #0]
 8007628:	2c00      	cmp	r4, #0
 800762a:	d1f7      	bne.n	800761c <_fwalk_sglue+0xc>
 800762c:	4630      	mov	r0, r6
 800762e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007632:	89ab      	ldrh	r3, [r5, #12]
 8007634:	2b01      	cmp	r3, #1
 8007636:	d907      	bls.n	8007648 <_fwalk_sglue+0x38>
 8007638:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800763c:	3301      	adds	r3, #1
 800763e:	d003      	beq.n	8007648 <_fwalk_sglue+0x38>
 8007640:	4629      	mov	r1, r5
 8007642:	4638      	mov	r0, r7
 8007644:	47c0      	blx	r8
 8007646:	4306      	orrs	r6, r0
 8007648:	3568      	adds	r5, #104	@ 0x68
 800764a:	e7e9      	b.n	8007620 <_fwalk_sglue+0x10>

0800764c <sniprintf>:
 800764c:	b40c      	push	{r2, r3}
 800764e:	b530      	push	{r4, r5, lr}
 8007650:	4b17      	ldr	r3, [pc, #92]	@ (80076b0 <sniprintf+0x64>)
 8007652:	1e0c      	subs	r4, r1, #0
 8007654:	681d      	ldr	r5, [r3, #0]
 8007656:	b09d      	sub	sp, #116	@ 0x74
 8007658:	da08      	bge.n	800766c <sniprintf+0x20>
 800765a:	238b      	movs	r3, #139	@ 0x8b
 800765c:	602b      	str	r3, [r5, #0]
 800765e:	f04f 30ff 	mov.w	r0, #4294967295
 8007662:	b01d      	add	sp, #116	@ 0x74
 8007664:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007668:	b002      	add	sp, #8
 800766a:	4770      	bx	lr
 800766c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007670:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007674:	bf14      	ite	ne
 8007676:	f104 33ff 	addne.w	r3, r4, #4294967295
 800767a:	4623      	moveq	r3, r4
 800767c:	9304      	str	r3, [sp, #16]
 800767e:	9307      	str	r3, [sp, #28]
 8007680:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007684:	9002      	str	r0, [sp, #8]
 8007686:	9006      	str	r0, [sp, #24]
 8007688:	f8ad 3016 	strh.w	r3, [sp, #22]
 800768c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800768e:	ab21      	add	r3, sp, #132	@ 0x84
 8007690:	a902      	add	r1, sp, #8
 8007692:	4628      	mov	r0, r5
 8007694:	9301      	str	r3, [sp, #4]
 8007696:	f002 fbe5 	bl	8009e64 <_svfiprintf_r>
 800769a:	1c43      	adds	r3, r0, #1
 800769c:	bfbc      	itt	lt
 800769e:	238b      	movlt	r3, #139	@ 0x8b
 80076a0:	602b      	strlt	r3, [r5, #0]
 80076a2:	2c00      	cmp	r4, #0
 80076a4:	d0dd      	beq.n	8007662 <sniprintf+0x16>
 80076a6:	9b02      	ldr	r3, [sp, #8]
 80076a8:	2200      	movs	r2, #0
 80076aa:	701a      	strb	r2, [r3, #0]
 80076ac:	e7d9      	b.n	8007662 <sniprintf+0x16>
 80076ae:	bf00      	nop
 80076b0:	2000001c 	.word	0x2000001c

080076b4 <siprintf>:
 80076b4:	b40e      	push	{r1, r2, r3}
 80076b6:	b500      	push	{lr}
 80076b8:	b09c      	sub	sp, #112	@ 0x70
 80076ba:	ab1d      	add	r3, sp, #116	@ 0x74
 80076bc:	9002      	str	r0, [sp, #8]
 80076be:	9006      	str	r0, [sp, #24]
 80076c0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80076c4:	4809      	ldr	r0, [pc, #36]	@ (80076ec <siprintf+0x38>)
 80076c6:	9107      	str	r1, [sp, #28]
 80076c8:	9104      	str	r1, [sp, #16]
 80076ca:	4909      	ldr	r1, [pc, #36]	@ (80076f0 <siprintf+0x3c>)
 80076cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80076d0:	9105      	str	r1, [sp, #20]
 80076d2:	6800      	ldr	r0, [r0, #0]
 80076d4:	9301      	str	r3, [sp, #4]
 80076d6:	a902      	add	r1, sp, #8
 80076d8:	f002 fbc4 	bl	8009e64 <_svfiprintf_r>
 80076dc:	9b02      	ldr	r3, [sp, #8]
 80076de:	2200      	movs	r2, #0
 80076e0:	701a      	strb	r2, [r3, #0]
 80076e2:	b01c      	add	sp, #112	@ 0x70
 80076e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80076e8:	b003      	add	sp, #12
 80076ea:	4770      	bx	lr
 80076ec:	2000001c 	.word	0x2000001c
 80076f0:	ffff0208 	.word	0xffff0208

080076f4 <__sread>:
 80076f4:	b510      	push	{r4, lr}
 80076f6:	460c      	mov	r4, r1
 80076f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076fc:	f000 f86c 	bl	80077d8 <_read_r>
 8007700:	2800      	cmp	r0, #0
 8007702:	bfab      	itete	ge
 8007704:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007706:	89a3      	ldrhlt	r3, [r4, #12]
 8007708:	181b      	addge	r3, r3, r0
 800770a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800770e:	bfac      	ite	ge
 8007710:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007712:	81a3      	strhlt	r3, [r4, #12]
 8007714:	bd10      	pop	{r4, pc}

08007716 <__swrite>:
 8007716:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800771a:	461f      	mov	r7, r3
 800771c:	898b      	ldrh	r3, [r1, #12]
 800771e:	05db      	lsls	r3, r3, #23
 8007720:	4605      	mov	r5, r0
 8007722:	460c      	mov	r4, r1
 8007724:	4616      	mov	r6, r2
 8007726:	d505      	bpl.n	8007734 <__swrite+0x1e>
 8007728:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800772c:	2302      	movs	r3, #2
 800772e:	2200      	movs	r2, #0
 8007730:	f000 f840 	bl	80077b4 <_lseek_r>
 8007734:	89a3      	ldrh	r3, [r4, #12]
 8007736:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800773a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800773e:	81a3      	strh	r3, [r4, #12]
 8007740:	4632      	mov	r2, r6
 8007742:	463b      	mov	r3, r7
 8007744:	4628      	mov	r0, r5
 8007746:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800774a:	f000 b857 	b.w	80077fc <_write_r>

0800774e <__sseek>:
 800774e:	b510      	push	{r4, lr}
 8007750:	460c      	mov	r4, r1
 8007752:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007756:	f000 f82d 	bl	80077b4 <_lseek_r>
 800775a:	1c43      	adds	r3, r0, #1
 800775c:	89a3      	ldrh	r3, [r4, #12]
 800775e:	bf15      	itete	ne
 8007760:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007762:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007766:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800776a:	81a3      	strheq	r3, [r4, #12]
 800776c:	bf18      	it	ne
 800776e:	81a3      	strhne	r3, [r4, #12]
 8007770:	bd10      	pop	{r4, pc}

08007772 <__sclose>:
 8007772:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007776:	f000 b80d 	b.w	8007794 <_close_r>

0800777a <memset>:
 800777a:	4402      	add	r2, r0
 800777c:	4603      	mov	r3, r0
 800777e:	4293      	cmp	r3, r2
 8007780:	d100      	bne.n	8007784 <memset+0xa>
 8007782:	4770      	bx	lr
 8007784:	f803 1b01 	strb.w	r1, [r3], #1
 8007788:	e7f9      	b.n	800777e <memset+0x4>
	...

0800778c <_localeconv_r>:
 800778c:	4800      	ldr	r0, [pc, #0]	@ (8007790 <_localeconv_r+0x4>)
 800778e:	4770      	bx	lr
 8007790:	2000015c 	.word	0x2000015c

08007794 <_close_r>:
 8007794:	b538      	push	{r3, r4, r5, lr}
 8007796:	4d06      	ldr	r5, [pc, #24]	@ (80077b0 <_close_r+0x1c>)
 8007798:	2300      	movs	r3, #0
 800779a:	4604      	mov	r4, r0
 800779c:	4608      	mov	r0, r1
 800779e:	602b      	str	r3, [r5, #0]
 80077a0:	f7f9 ffae 	bl	8001700 <_close>
 80077a4:	1c43      	adds	r3, r0, #1
 80077a6:	d102      	bne.n	80077ae <_close_r+0x1a>
 80077a8:	682b      	ldr	r3, [r5, #0]
 80077aa:	b103      	cbz	r3, 80077ae <_close_r+0x1a>
 80077ac:	6023      	str	r3, [r4, #0]
 80077ae:	bd38      	pop	{r3, r4, r5, pc}
 80077b0:	200043b8 	.word	0x200043b8

080077b4 <_lseek_r>:
 80077b4:	b538      	push	{r3, r4, r5, lr}
 80077b6:	4d07      	ldr	r5, [pc, #28]	@ (80077d4 <_lseek_r+0x20>)
 80077b8:	4604      	mov	r4, r0
 80077ba:	4608      	mov	r0, r1
 80077bc:	4611      	mov	r1, r2
 80077be:	2200      	movs	r2, #0
 80077c0:	602a      	str	r2, [r5, #0]
 80077c2:	461a      	mov	r2, r3
 80077c4:	f7f9 ffc3 	bl	800174e <_lseek>
 80077c8:	1c43      	adds	r3, r0, #1
 80077ca:	d102      	bne.n	80077d2 <_lseek_r+0x1e>
 80077cc:	682b      	ldr	r3, [r5, #0]
 80077ce:	b103      	cbz	r3, 80077d2 <_lseek_r+0x1e>
 80077d0:	6023      	str	r3, [r4, #0]
 80077d2:	bd38      	pop	{r3, r4, r5, pc}
 80077d4:	200043b8 	.word	0x200043b8

080077d8 <_read_r>:
 80077d8:	b538      	push	{r3, r4, r5, lr}
 80077da:	4d07      	ldr	r5, [pc, #28]	@ (80077f8 <_read_r+0x20>)
 80077dc:	4604      	mov	r4, r0
 80077de:	4608      	mov	r0, r1
 80077e0:	4611      	mov	r1, r2
 80077e2:	2200      	movs	r2, #0
 80077e4:	602a      	str	r2, [r5, #0]
 80077e6:	461a      	mov	r2, r3
 80077e8:	f7f9 ff51 	bl	800168e <_read>
 80077ec:	1c43      	adds	r3, r0, #1
 80077ee:	d102      	bne.n	80077f6 <_read_r+0x1e>
 80077f0:	682b      	ldr	r3, [r5, #0]
 80077f2:	b103      	cbz	r3, 80077f6 <_read_r+0x1e>
 80077f4:	6023      	str	r3, [r4, #0]
 80077f6:	bd38      	pop	{r3, r4, r5, pc}
 80077f8:	200043b8 	.word	0x200043b8

080077fc <_write_r>:
 80077fc:	b538      	push	{r3, r4, r5, lr}
 80077fe:	4d07      	ldr	r5, [pc, #28]	@ (800781c <_write_r+0x20>)
 8007800:	4604      	mov	r4, r0
 8007802:	4608      	mov	r0, r1
 8007804:	4611      	mov	r1, r2
 8007806:	2200      	movs	r2, #0
 8007808:	602a      	str	r2, [r5, #0]
 800780a:	461a      	mov	r2, r3
 800780c:	f7f9 ff5c 	bl	80016c8 <_write>
 8007810:	1c43      	adds	r3, r0, #1
 8007812:	d102      	bne.n	800781a <_write_r+0x1e>
 8007814:	682b      	ldr	r3, [r5, #0]
 8007816:	b103      	cbz	r3, 800781a <_write_r+0x1e>
 8007818:	6023      	str	r3, [r4, #0]
 800781a:	bd38      	pop	{r3, r4, r5, pc}
 800781c:	200043b8 	.word	0x200043b8

08007820 <__errno>:
 8007820:	4b01      	ldr	r3, [pc, #4]	@ (8007828 <__errno+0x8>)
 8007822:	6818      	ldr	r0, [r3, #0]
 8007824:	4770      	bx	lr
 8007826:	bf00      	nop
 8007828:	2000001c 	.word	0x2000001c

0800782c <__libc_init_array>:
 800782c:	b570      	push	{r4, r5, r6, lr}
 800782e:	4d0d      	ldr	r5, [pc, #52]	@ (8007864 <__libc_init_array+0x38>)
 8007830:	4c0d      	ldr	r4, [pc, #52]	@ (8007868 <__libc_init_array+0x3c>)
 8007832:	1b64      	subs	r4, r4, r5
 8007834:	10a4      	asrs	r4, r4, #2
 8007836:	2600      	movs	r6, #0
 8007838:	42a6      	cmp	r6, r4
 800783a:	d109      	bne.n	8007850 <__libc_init_array+0x24>
 800783c:	4d0b      	ldr	r5, [pc, #44]	@ (800786c <__libc_init_array+0x40>)
 800783e:	4c0c      	ldr	r4, [pc, #48]	@ (8007870 <__libc_init_array+0x44>)
 8007840:	f003 fb74 	bl	800af2c <_init>
 8007844:	1b64      	subs	r4, r4, r5
 8007846:	10a4      	asrs	r4, r4, #2
 8007848:	2600      	movs	r6, #0
 800784a:	42a6      	cmp	r6, r4
 800784c:	d105      	bne.n	800785a <__libc_init_array+0x2e>
 800784e:	bd70      	pop	{r4, r5, r6, pc}
 8007850:	f855 3b04 	ldr.w	r3, [r5], #4
 8007854:	4798      	blx	r3
 8007856:	3601      	adds	r6, #1
 8007858:	e7ee      	b.n	8007838 <__libc_init_array+0xc>
 800785a:	f855 3b04 	ldr.w	r3, [r5], #4
 800785e:	4798      	blx	r3
 8007860:	3601      	adds	r6, #1
 8007862:	e7f2      	b.n	800784a <__libc_init_array+0x1e>
 8007864:	0800b418 	.word	0x0800b418
 8007868:	0800b418 	.word	0x0800b418
 800786c:	0800b418 	.word	0x0800b418
 8007870:	0800b41c 	.word	0x0800b41c

08007874 <__retarget_lock_init_recursive>:
 8007874:	4770      	bx	lr

08007876 <__retarget_lock_acquire_recursive>:
 8007876:	4770      	bx	lr

08007878 <__retarget_lock_release_recursive>:
 8007878:	4770      	bx	lr

0800787a <memcpy>:
 800787a:	440a      	add	r2, r1
 800787c:	4291      	cmp	r1, r2
 800787e:	f100 33ff 	add.w	r3, r0, #4294967295
 8007882:	d100      	bne.n	8007886 <memcpy+0xc>
 8007884:	4770      	bx	lr
 8007886:	b510      	push	{r4, lr}
 8007888:	f811 4b01 	ldrb.w	r4, [r1], #1
 800788c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007890:	4291      	cmp	r1, r2
 8007892:	d1f9      	bne.n	8007888 <memcpy+0xe>
 8007894:	bd10      	pop	{r4, pc}
	...

08007898 <nanf>:
 8007898:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80078a0 <nanf+0x8>
 800789c:	4770      	bx	lr
 800789e:	bf00      	nop
 80078a0:	7fc00000 	.word	0x7fc00000

080078a4 <quorem>:
 80078a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078a8:	6903      	ldr	r3, [r0, #16]
 80078aa:	690c      	ldr	r4, [r1, #16]
 80078ac:	42a3      	cmp	r3, r4
 80078ae:	4607      	mov	r7, r0
 80078b0:	db7e      	blt.n	80079b0 <quorem+0x10c>
 80078b2:	3c01      	subs	r4, #1
 80078b4:	f101 0814 	add.w	r8, r1, #20
 80078b8:	00a3      	lsls	r3, r4, #2
 80078ba:	f100 0514 	add.w	r5, r0, #20
 80078be:	9300      	str	r3, [sp, #0]
 80078c0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80078c4:	9301      	str	r3, [sp, #4]
 80078c6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80078ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80078ce:	3301      	adds	r3, #1
 80078d0:	429a      	cmp	r2, r3
 80078d2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80078d6:	fbb2 f6f3 	udiv	r6, r2, r3
 80078da:	d32e      	bcc.n	800793a <quorem+0x96>
 80078dc:	f04f 0a00 	mov.w	sl, #0
 80078e0:	46c4      	mov	ip, r8
 80078e2:	46ae      	mov	lr, r5
 80078e4:	46d3      	mov	fp, sl
 80078e6:	f85c 3b04 	ldr.w	r3, [ip], #4
 80078ea:	b298      	uxth	r0, r3
 80078ec:	fb06 a000 	mla	r0, r6, r0, sl
 80078f0:	0c02      	lsrs	r2, r0, #16
 80078f2:	0c1b      	lsrs	r3, r3, #16
 80078f4:	fb06 2303 	mla	r3, r6, r3, r2
 80078f8:	f8de 2000 	ldr.w	r2, [lr]
 80078fc:	b280      	uxth	r0, r0
 80078fe:	b292      	uxth	r2, r2
 8007900:	1a12      	subs	r2, r2, r0
 8007902:	445a      	add	r2, fp
 8007904:	f8de 0000 	ldr.w	r0, [lr]
 8007908:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800790c:	b29b      	uxth	r3, r3
 800790e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007912:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007916:	b292      	uxth	r2, r2
 8007918:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800791c:	45e1      	cmp	r9, ip
 800791e:	f84e 2b04 	str.w	r2, [lr], #4
 8007922:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007926:	d2de      	bcs.n	80078e6 <quorem+0x42>
 8007928:	9b00      	ldr	r3, [sp, #0]
 800792a:	58eb      	ldr	r3, [r5, r3]
 800792c:	b92b      	cbnz	r3, 800793a <quorem+0x96>
 800792e:	9b01      	ldr	r3, [sp, #4]
 8007930:	3b04      	subs	r3, #4
 8007932:	429d      	cmp	r5, r3
 8007934:	461a      	mov	r2, r3
 8007936:	d32f      	bcc.n	8007998 <quorem+0xf4>
 8007938:	613c      	str	r4, [r7, #16]
 800793a:	4638      	mov	r0, r7
 800793c:	f001 f9c4 	bl	8008cc8 <__mcmp>
 8007940:	2800      	cmp	r0, #0
 8007942:	db25      	blt.n	8007990 <quorem+0xec>
 8007944:	4629      	mov	r1, r5
 8007946:	2000      	movs	r0, #0
 8007948:	f858 2b04 	ldr.w	r2, [r8], #4
 800794c:	f8d1 c000 	ldr.w	ip, [r1]
 8007950:	fa1f fe82 	uxth.w	lr, r2
 8007954:	fa1f f38c 	uxth.w	r3, ip
 8007958:	eba3 030e 	sub.w	r3, r3, lr
 800795c:	4403      	add	r3, r0
 800795e:	0c12      	lsrs	r2, r2, #16
 8007960:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007964:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007968:	b29b      	uxth	r3, r3
 800796a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800796e:	45c1      	cmp	r9, r8
 8007970:	f841 3b04 	str.w	r3, [r1], #4
 8007974:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007978:	d2e6      	bcs.n	8007948 <quorem+0xa4>
 800797a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800797e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007982:	b922      	cbnz	r2, 800798e <quorem+0xea>
 8007984:	3b04      	subs	r3, #4
 8007986:	429d      	cmp	r5, r3
 8007988:	461a      	mov	r2, r3
 800798a:	d30b      	bcc.n	80079a4 <quorem+0x100>
 800798c:	613c      	str	r4, [r7, #16]
 800798e:	3601      	adds	r6, #1
 8007990:	4630      	mov	r0, r6
 8007992:	b003      	add	sp, #12
 8007994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007998:	6812      	ldr	r2, [r2, #0]
 800799a:	3b04      	subs	r3, #4
 800799c:	2a00      	cmp	r2, #0
 800799e:	d1cb      	bne.n	8007938 <quorem+0x94>
 80079a0:	3c01      	subs	r4, #1
 80079a2:	e7c6      	b.n	8007932 <quorem+0x8e>
 80079a4:	6812      	ldr	r2, [r2, #0]
 80079a6:	3b04      	subs	r3, #4
 80079a8:	2a00      	cmp	r2, #0
 80079aa:	d1ef      	bne.n	800798c <quorem+0xe8>
 80079ac:	3c01      	subs	r4, #1
 80079ae:	e7ea      	b.n	8007986 <quorem+0xe2>
 80079b0:	2000      	movs	r0, #0
 80079b2:	e7ee      	b.n	8007992 <quorem+0xee>
 80079b4:	0000      	movs	r0, r0
	...

080079b8 <_dtoa_r>:
 80079b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079bc:	69c7      	ldr	r7, [r0, #28]
 80079be:	b099      	sub	sp, #100	@ 0x64
 80079c0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80079c4:	ec55 4b10 	vmov	r4, r5, d0
 80079c8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80079ca:	9109      	str	r1, [sp, #36]	@ 0x24
 80079cc:	4683      	mov	fp, r0
 80079ce:	920e      	str	r2, [sp, #56]	@ 0x38
 80079d0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80079d2:	b97f      	cbnz	r7, 80079f4 <_dtoa_r+0x3c>
 80079d4:	2010      	movs	r0, #16
 80079d6:	f000 fdfd 	bl	80085d4 <malloc>
 80079da:	4602      	mov	r2, r0
 80079dc:	f8cb 001c 	str.w	r0, [fp, #28]
 80079e0:	b920      	cbnz	r0, 80079ec <_dtoa_r+0x34>
 80079e2:	4ba7      	ldr	r3, [pc, #668]	@ (8007c80 <_dtoa_r+0x2c8>)
 80079e4:	21ef      	movs	r1, #239	@ 0xef
 80079e6:	48a7      	ldr	r0, [pc, #668]	@ (8007c84 <_dtoa_r+0x2cc>)
 80079e8:	f002 fc2a 	bl	800a240 <__assert_func>
 80079ec:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80079f0:	6007      	str	r7, [r0, #0]
 80079f2:	60c7      	str	r7, [r0, #12]
 80079f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80079f8:	6819      	ldr	r1, [r3, #0]
 80079fa:	b159      	cbz	r1, 8007a14 <_dtoa_r+0x5c>
 80079fc:	685a      	ldr	r2, [r3, #4]
 80079fe:	604a      	str	r2, [r1, #4]
 8007a00:	2301      	movs	r3, #1
 8007a02:	4093      	lsls	r3, r2
 8007a04:	608b      	str	r3, [r1, #8]
 8007a06:	4658      	mov	r0, fp
 8007a08:	f000 feda 	bl	80087c0 <_Bfree>
 8007a0c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007a10:	2200      	movs	r2, #0
 8007a12:	601a      	str	r2, [r3, #0]
 8007a14:	1e2b      	subs	r3, r5, #0
 8007a16:	bfb9      	ittee	lt
 8007a18:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007a1c:	9303      	strlt	r3, [sp, #12]
 8007a1e:	2300      	movge	r3, #0
 8007a20:	6033      	strge	r3, [r6, #0]
 8007a22:	9f03      	ldr	r7, [sp, #12]
 8007a24:	4b98      	ldr	r3, [pc, #608]	@ (8007c88 <_dtoa_r+0x2d0>)
 8007a26:	bfbc      	itt	lt
 8007a28:	2201      	movlt	r2, #1
 8007a2a:	6032      	strlt	r2, [r6, #0]
 8007a2c:	43bb      	bics	r3, r7
 8007a2e:	d112      	bne.n	8007a56 <_dtoa_r+0x9e>
 8007a30:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007a32:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007a36:	6013      	str	r3, [r2, #0]
 8007a38:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007a3c:	4323      	orrs	r3, r4
 8007a3e:	f000 854d 	beq.w	80084dc <_dtoa_r+0xb24>
 8007a42:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007a44:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007c9c <_dtoa_r+0x2e4>
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	f000 854f 	beq.w	80084ec <_dtoa_r+0xb34>
 8007a4e:	f10a 0303 	add.w	r3, sl, #3
 8007a52:	f000 bd49 	b.w	80084e8 <_dtoa_r+0xb30>
 8007a56:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	ec51 0b17 	vmov	r0, r1, d7
 8007a60:	2300      	movs	r3, #0
 8007a62:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007a66:	f7f9 f84f 	bl	8000b08 <__aeabi_dcmpeq>
 8007a6a:	4680      	mov	r8, r0
 8007a6c:	b158      	cbz	r0, 8007a86 <_dtoa_r+0xce>
 8007a6e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007a70:	2301      	movs	r3, #1
 8007a72:	6013      	str	r3, [r2, #0]
 8007a74:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007a76:	b113      	cbz	r3, 8007a7e <_dtoa_r+0xc6>
 8007a78:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007a7a:	4b84      	ldr	r3, [pc, #528]	@ (8007c8c <_dtoa_r+0x2d4>)
 8007a7c:	6013      	str	r3, [r2, #0]
 8007a7e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007ca0 <_dtoa_r+0x2e8>
 8007a82:	f000 bd33 	b.w	80084ec <_dtoa_r+0xb34>
 8007a86:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007a8a:	aa16      	add	r2, sp, #88	@ 0x58
 8007a8c:	a917      	add	r1, sp, #92	@ 0x5c
 8007a8e:	4658      	mov	r0, fp
 8007a90:	f001 fa3a 	bl	8008f08 <__d2b>
 8007a94:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007a98:	4681      	mov	r9, r0
 8007a9a:	2e00      	cmp	r6, #0
 8007a9c:	d077      	beq.n	8007b8e <_dtoa_r+0x1d6>
 8007a9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007aa0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007aa4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007aa8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007aac:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007ab0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007ab4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007ab8:	4619      	mov	r1, r3
 8007aba:	2200      	movs	r2, #0
 8007abc:	4b74      	ldr	r3, [pc, #464]	@ (8007c90 <_dtoa_r+0x2d8>)
 8007abe:	f7f8 fc03 	bl	80002c8 <__aeabi_dsub>
 8007ac2:	a369      	add	r3, pc, #420	@ (adr r3, 8007c68 <_dtoa_r+0x2b0>)
 8007ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac8:	f7f8 fdb6 	bl	8000638 <__aeabi_dmul>
 8007acc:	a368      	add	r3, pc, #416	@ (adr r3, 8007c70 <_dtoa_r+0x2b8>)
 8007ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ad2:	f7f8 fbfb 	bl	80002cc <__adddf3>
 8007ad6:	4604      	mov	r4, r0
 8007ad8:	4630      	mov	r0, r6
 8007ada:	460d      	mov	r5, r1
 8007adc:	f7f8 fd42 	bl	8000564 <__aeabi_i2d>
 8007ae0:	a365      	add	r3, pc, #404	@ (adr r3, 8007c78 <_dtoa_r+0x2c0>)
 8007ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae6:	f7f8 fda7 	bl	8000638 <__aeabi_dmul>
 8007aea:	4602      	mov	r2, r0
 8007aec:	460b      	mov	r3, r1
 8007aee:	4620      	mov	r0, r4
 8007af0:	4629      	mov	r1, r5
 8007af2:	f7f8 fbeb 	bl	80002cc <__adddf3>
 8007af6:	4604      	mov	r4, r0
 8007af8:	460d      	mov	r5, r1
 8007afa:	f7f9 f84d 	bl	8000b98 <__aeabi_d2iz>
 8007afe:	2200      	movs	r2, #0
 8007b00:	4607      	mov	r7, r0
 8007b02:	2300      	movs	r3, #0
 8007b04:	4620      	mov	r0, r4
 8007b06:	4629      	mov	r1, r5
 8007b08:	f7f9 f808 	bl	8000b1c <__aeabi_dcmplt>
 8007b0c:	b140      	cbz	r0, 8007b20 <_dtoa_r+0x168>
 8007b0e:	4638      	mov	r0, r7
 8007b10:	f7f8 fd28 	bl	8000564 <__aeabi_i2d>
 8007b14:	4622      	mov	r2, r4
 8007b16:	462b      	mov	r3, r5
 8007b18:	f7f8 fff6 	bl	8000b08 <__aeabi_dcmpeq>
 8007b1c:	b900      	cbnz	r0, 8007b20 <_dtoa_r+0x168>
 8007b1e:	3f01      	subs	r7, #1
 8007b20:	2f16      	cmp	r7, #22
 8007b22:	d851      	bhi.n	8007bc8 <_dtoa_r+0x210>
 8007b24:	4b5b      	ldr	r3, [pc, #364]	@ (8007c94 <_dtoa_r+0x2dc>)
 8007b26:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007b32:	f7f8 fff3 	bl	8000b1c <__aeabi_dcmplt>
 8007b36:	2800      	cmp	r0, #0
 8007b38:	d048      	beq.n	8007bcc <_dtoa_r+0x214>
 8007b3a:	3f01      	subs	r7, #1
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	9312      	str	r3, [sp, #72]	@ 0x48
 8007b40:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007b42:	1b9b      	subs	r3, r3, r6
 8007b44:	1e5a      	subs	r2, r3, #1
 8007b46:	bf44      	itt	mi
 8007b48:	f1c3 0801 	rsbmi	r8, r3, #1
 8007b4c:	2300      	movmi	r3, #0
 8007b4e:	9208      	str	r2, [sp, #32]
 8007b50:	bf54      	ite	pl
 8007b52:	f04f 0800 	movpl.w	r8, #0
 8007b56:	9308      	strmi	r3, [sp, #32]
 8007b58:	2f00      	cmp	r7, #0
 8007b5a:	db39      	blt.n	8007bd0 <_dtoa_r+0x218>
 8007b5c:	9b08      	ldr	r3, [sp, #32]
 8007b5e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007b60:	443b      	add	r3, r7
 8007b62:	9308      	str	r3, [sp, #32]
 8007b64:	2300      	movs	r3, #0
 8007b66:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b6a:	2b09      	cmp	r3, #9
 8007b6c:	d864      	bhi.n	8007c38 <_dtoa_r+0x280>
 8007b6e:	2b05      	cmp	r3, #5
 8007b70:	bfc4      	itt	gt
 8007b72:	3b04      	subgt	r3, #4
 8007b74:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007b76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b78:	f1a3 0302 	sub.w	r3, r3, #2
 8007b7c:	bfcc      	ite	gt
 8007b7e:	2400      	movgt	r4, #0
 8007b80:	2401      	movle	r4, #1
 8007b82:	2b03      	cmp	r3, #3
 8007b84:	d863      	bhi.n	8007c4e <_dtoa_r+0x296>
 8007b86:	e8df f003 	tbb	[pc, r3]
 8007b8a:	372a      	.short	0x372a
 8007b8c:	5535      	.short	0x5535
 8007b8e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007b92:	441e      	add	r6, r3
 8007b94:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007b98:	2b20      	cmp	r3, #32
 8007b9a:	bfc1      	itttt	gt
 8007b9c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007ba0:	409f      	lslgt	r7, r3
 8007ba2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007ba6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007baa:	bfd6      	itet	le
 8007bac:	f1c3 0320 	rsble	r3, r3, #32
 8007bb0:	ea47 0003 	orrgt.w	r0, r7, r3
 8007bb4:	fa04 f003 	lslle.w	r0, r4, r3
 8007bb8:	f7f8 fcc4 	bl	8000544 <__aeabi_ui2d>
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007bc2:	3e01      	subs	r6, #1
 8007bc4:	9214      	str	r2, [sp, #80]	@ 0x50
 8007bc6:	e777      	b.n	8007ab8 <_dtoa_r+0x100>
 8007bc8:	2301      	movs	r3, #1
 8007bca:	e7b8      	b.n	8007b3e <_dtoa_r+0x186>
 8007bcc:	9012      	str	r0, [sp, #72]	@ 0x48
 8007bce:	e7b7      	b.n	8007b40 <_dtoa_r+0x188>
 8007bd0:	427b      	negs	r3, r7
 8007bd2:	930a      	str	r3, [sp, #40]	@ 0x28
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	eba8 0807 	sub.w	r8, r8, r7
 8007bda:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007bdc:	e7c4      	b.n	8007b68 <_dtoa_r+0x1b0>
 8007bde:	2300      	movs	r3, #0
 8007be0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007be2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	dc35      	bgt.n	8007c54 <_dtoa_r+0x29c>
 8007be8:	2301      	movs	r3, #1
 8007bea:	9300      	str	r3, [sp, #0]
 8007bec:	9307      	str	r3, [sp, #28]
 8007bee:	461a      	mov	r2, r3
 8007bf0:	920e      	str	r2, [sp, #56]	@ 0x38
 8007bf2:	e00b      	b.n	8007c0c <_dtoa_r+0x254>
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	e7f3      	b.n	8007be0 <_dtoa_r+0x228>
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007bfc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007bfe:	18fb      	adds	r3, r7, r3
 8007c00:	9300      	str	r3, [sp, #0]
 8007c02:	3301      	adds	r3, #1
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	9307      	str	r3, [sp, #28]
 8007c08:	bfb8      	it	lt
 8007c0a:	2301      	movlt	r3, #1
 8007c0c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007c10:	2100      	movs	r1, #0
 8007c12:	2204      	movs	r2, #4
 8007c14:	f102 0514 	add.w	r5, r2, #20
 8007c18:	429d      	cmp	r5, r3
 8007c1a:	d91f      	bls.n	8007c5c <_dtoa_r+0x2a4>
 8007c1c:	6041      	str	r1, [r0, #4]
 8007c1e:	4658      	mov	r0, fp
 8007c20:	f000 fd8e 	bl	8008740 <_Balloc>
 8007c24:	4682      	mov	sl, r0
 8007c26:	2800      	cmp	r0, #0
 8007c28:	d13c      	bne.n	8007ca4 <_dtoa_r+0x2ec>
 8007c2a:	4b1b      	ldr	r3, [pc, #108]	@ (8007c98 <_dtoa_r+0x2e0>)
 8007c2c:	4602      	mov	r2, r0
 8007c2e:	f240 11af 	movw	r1, #431	@ 0x1af
 8007c32:	e6d8      	b.n	80079e6 <_dtoa_r+0x2e>
 8007c34:	2301      	movs	r3, #1
 8007c36:	e7e0      	b.n	8007bfa <_dtoa_r+0x242>
 8007c38:	2401      	movs	r4, #1
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c3e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007c40:	f04f 33ff 	mov.w	r3, #4294967295
 8007c44:	9300      	str	r3, [sp, #0]
 8007c46:	9307      	str	r3, [sp, #28]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	2312      	movs	r3, #18
 8007c4c:	e7d0      	b.n	8007bf0 <_dtoa_r+0x238>
 8007c4e:	2301      	movs	r3, #1
 8007c50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007c52:	e7f5      	b.n	8007c40 <_dtoa_r+0x288>
 8007c54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007c56:	9300      	str	r3, [sp, #0]
 8007c58:	9307      	str	r3, [sp, #28]
 8007c5a:	e7d7      	b.n	8007c0c <_dtoa_r+0x254>
 8007c5c:	3101      	adds	r1, #1
 8007c5e:	0052      	lsls	r2, r2, #1
 8007c60:	e7d8      	b.n	8007c14 <_dtoa_r+0x25c>
 8007c62:	bf00      	nop
 8007c64:	f3af 8000 	nop.w
 8007c68:	636f4361 	.word	0x636f4361
 8007c6c:	3fd287a7 	.word	0x3fd287a7
 8007c70:	8b60c8b3 	.word	0x8b60c8b3
 8007c74:	3fc68a28 	.word	0x3fc68a28
 8007c78:	509f79fb 	.word	0x509f79fb
 8007c7c:	3fd34413 	.word	0x3fd34413
 8007c80:	0800b02a 	.word	0x0800b02a
 8007c84:	0800b041 	.word	0x0800b041
 8007c88:	7ff00000 	.word	0x7ff00000
 8007c8c:	0800aff5 	.word	0x0800aff5
 8007c90:	3ff80000 	.word	0x3ff80000
 8007c94:	0800b138 	.word	0x0800b138
 8007c98:	0800b099 	.word	0x0800b099
 8007c9c:	0800b026 	.word	0x0800b026
 8007ca0:	0800aff4 	.word	0x0800aff4
 8007ca4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007ca8:	6018      	str	r0, [r3, #0]
 8007caa:	9b07      	ldr	r3, [sp, #28]
 8007cac:	2b0e      	cmp	r3, #14
 8007cae:	f200 80a4 	bhi.w	8007dfa <_dtoa_r+0x442>
 8007cb2:	2c00      	cmp	r4, #0
 8007cb4:	f000 80a1 	beq.w	8007dfa <_dtoa_r+0x442>
 8007cb8:	2f00      	cmp	r7, #0
 8007cba:	dd33      	ble.n	8007d24 <_dtoa_r+0x36c>
 8007cbc:	4bad      	ldr	r3, [pc, #692]	@ (8007f74 <_dtoa_r+0x5bc>)
 8007cbe:	f007 020f 	and.w	r2, r7, #15
 8007cc2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007cc6:	ed93 7b00 	vldr	d7, [r3]
 8007cca:	05f8      	lsls	r0, r7, #23
 8007ccc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007cd0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007cd4:	d516      	bpl.n	8007d04 <_dtoa_r+0x34c>
 8007cd6:	4ba8      	ldr	r3, [pc, #672]	@ (8007f78 <_dtoa_r+0x5c0>)
 8007cd8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007cdc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007ce0:	f7f8 fdd4 	bl	800088c <__aeabi_ddiv>
 8007ce4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ce8:	f004 040f 	and.w	r4, r4, #15
 8007cec:	2603      	movs	r6, #3
 8007cee:	4da2      	ldr	r5, [pc, #648]	@ (8007f78 <_dtoa_r+0x5c0>)
 8007cf0:	b954      	cbnz	r4, 8007d08 <_dtoa_r+0x350>
 8007cf2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007cf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007cfa:	f7f8 fdc7 	bl	800088c <__aeabi_ddiv>
 8007cfe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d02:	e028      	b.n	8007d56 <_dtoa_r+0x39e>
 8007d04:	2602      	movs	r6, #2
 8007d06:	e7f2      	b.n	8007cee <_dtoa_r+0x336>
 8007d08:	07e1      	lsls	r1, r4, #31
 8007d0a:	d508      	bpl.n	8007d1e <_dtoa_r+0x366>
 8007d0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d10:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007d14:	f7f8 fc90 	bl	8000638 <__aeabi_dmul>
 8007d18:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d1c:	3601      	adds	r6, #1
 8007d1e:	1064      	asrs	r4, r4, #1
 8007d20:	3508      	adds	r5, #8
 8007d22:	e7e5      	b.n	8007cf0 <_dtoa_r+0x338>
 8007d24:	f000 80d2 	beq.w	8007ecc <_dtoa_r+0x514>
 8007d28:	427c      	negs	r4, r7
 8007d2a:	4b92      	ldr	r3, [pc, #584]	@ (8007f74 <_dtoa_r+0x5bc>)
 8007d2c:	4d92      	ldr	r5, [pc, #584]	@ (8007f78 <_dtoa_r+0x5c0>)
 8007d2e:	f004 020f 	and.w	r2, r4, #15
 8007d32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d3a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007d3e:	f7f8 fc7b 	bl	8000638 <__aeabi_dmul>
 8007d42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d46:	1124      	asrs	r4, r4, #4
 8007d48:	2300      	movs	r3, #0
 8007d4a:	2602      	movs	r6, #2
 8007d4c:	2c00      	cmp	r4, #0
 8007d4e:	f040 80b2 	bne.w	8007eb6 <_dtoa_r+0x4fe>
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d1d3      	bne.n	8007cfe <_dtoa_r+0x346>
 8007d56:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007d58:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	f000 80b7 	beq.w	8007ed0 <_dtoa_r+0x518>
 8007d62:	4b86      	ldr	r3, [pc, #536]	@ (8007f7c <_dtoa_r+0x5c4>)
 8007d64:	2200      	movs	r2, #0
 8007d66:	4620      	mov	r0, r4
 8007d68:	4629      	mov	r1, r5
 8007d6a:	f7f8 fed7 	bl	8000b1c <__aeabi_dcmplt>
 8007d6e:	2800      	cmp	r0, #0
 8007d70:	f000 80ae 	beq.w	8007ed0 <_dtoa_r+0x518>
 8007d74:	9b07      	ldr	r3, [sp, #28]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	f000 80aa 	beq.w	8007ed0 <_dtoa_r+0x518>
 8007d7c:	9b00      	ldr	r3, [sp, #0]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	dd37      	ble.n	8007df2 <_dtoa_r+0x43a>
 8007d82:	1e7b      	subs	r3, r7, #1
 8007d84:	9304      	str	r3, [sp, #16]
 8007d86:	4620      	mov	r0, r4
 8007d88:	4b7d      	ldr	r3, [pc, #500]	@ (8007f80 <_dtoa_r+0x5c8>)
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	4629      	mov	r1, r5
 8007d8e:	f7f8 fc53 	bl	8000638 <__aeabi_dmul>
 8007d92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d96:	9c00      	ldr	r4, [sp, #0]
 8007d98:	3601      	adds	r6, #1
 8007d9a:	4630      	mov	r0, r6
 8007d9c:	f7f8 fbe2 	bl	8000564 <__aeabi_i2d>
 8007da0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007da4:	f7f8 fc48 	bl	8000638 <__aeabi_dmul>
 8007da8:	4b76      	ldr	r3, [pc, #472]	@ (8007f84 <_dtoa_r+0x5cc>)
 8007daa:	2200      	movs	r2, #0
 8007dac:	f7f8 fa8e 	bl	80002cc <__adddf3>
 8007db0:	4605      	mov	r5, r0
 8007db2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007db6:	2c00      	cmp	r4, #0
 8007db8:	f040 808d 	bne.w	8007ed6 <_dtoa_r+0x51e>
 8007dbc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007dc0:	4b71      	ldr	r3, [pc, #452]	@ (8007f88 <_dtoa_r+0x5d0>)
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	f7f8 fa80 	bl	80002c8 <__aeabi_dsub>
 8007dc8:	4602      	mov	r2, r0
 8007dca:	460b      	mov	r3, r1
 8007dcc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007dd0:	462a      	mov	r2, r5
 8007dd2:	4633      	mov	r3, r6
 8007dd4:	f7f8 fec0 	bl	8000b58 <__aeabi_dcmpgt>
 8007dd8:	2800      	cmp	r0, #0
 8007dda:	f040 828b 	bne.w	80082f4 <_dtoa_r+0x93c>
 8007dde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007de2:	462a      	mov	r2, r5
 8007de4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007de8:	f7f8 fe98 	bl	8000b1c <__aeabi_dcmplt>
 8007dec:	2800      	cmp	r0, #0
 8007dee:	f040 8128 	bne.w	8008042 <_dtoa_r+0x68a>
 8007df2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007df6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007dfa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	f2c0 815a 	blt.w	80080b6 <_dtoa_r+0x6fe>
 8007e02:	2f0e      	cmp	r7, #14
 8007e04:	f300 8157 	bgt.w	80080b6 <_dtoa_r+0x6fe>
 8007e08:	4b5a      	ldr	r3, [pc, #360]	@ (8007f74 <_dtoa_r+0x5bc>)
 8007e0a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007e0e:	ed93 7b00 	vldr	d7, [r3]
 8007e12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	ed8d 7b00 	vstr	d7, [sp]
 8007e1a:	da03      	bge.n	8007e24 <_dtoa_r+0x46c>
 8007e1c:	9b07      	ldr	r3, [sp, #28]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	f340 8101 	ble.w	8008026 <_dtoa_r+0x66e>
 8007e24:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007e28:	4656      	mov	r6, sl
 8007e2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e2e:	4620      	mov	r0, r4
 8007e30:	4629      	mov	r1, r5
 8007e32:	f7f8 fd2b 	bl	800088c <__aeabi_ddiv>
 8007e36:	f7f8 feaf 	bl	8000b98 <__aeabi_d2iz>
 8007e3a:	4680      	mov	r8, r0
 8007e3c:	f7f8 fb92 	bl	8000564 <__aeabi_i2d>
 8007e40:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e44:	f7f8 fbf8 	bl	8000638 <__aeabi_dmul>
 8007e48:	4602      	mov	r2, r0
 8007e4a:	460b      	mov	r3, r1
 8007e4c:	4620      	mov	r0, r4
 8007e4e:	4629      	mov	r1, r5
 8007e50:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007e54:	f7f8 fa38 	bl	80002c8 <__aeabi_dsub>
 8007e58:	f806 4b01 	strb.w	r4, [r6], #1
 8007e5c:	9d07      	ldr	r5, [sp, #28]
 8007e5e:	eba6 040a 	sub.w	r4, r6, sl
 8007e62:	42a5      	cmp	r5, r4
 8007e64:	4602      	mov	r2, r0
 8007e66:	460b      	mov	r3, r1
 8007e68:	f040 8117 	bne.w	800809a <_dtoa_r+0x6e2>
 8007e6c:	f7f8 fa2e 	bl	80002cc <__adddf3>
 8007e70:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e74:	4604      	mov	r4, r0
 8007e76:	460d      	mov	r5, r1
 8007e78:	f7f8 fe6e 	bl	8000b58 <__aeabi_dcmpgt>
 8007e7c:	2800      	cmp	r0, #0
 8007e7e:	f040 80f9 	bne.w	8008074 <_dtoa_r+0x6bc>
 8007e82:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e86:	4620      	mov	r0, r4
 8007e88:	4629      	mov	r1, r5
 8007e8a:	f7f8 fe3d 	bl	8000b08 <__aeabi_dcmpeq>
 8007e8e:	b118      	cbz	r0, 8007e98 <_dtoa_r+0x4e0>
 8007e90:	f018 0f01 	tst.w	r8, #1
 8007e94:	f040 80ee 	bne.w	8008074 <_dtoa_r+0x6bc>
 8007e98:	4649      	mov	r1, r9
 8007e9a:	4658      	mov	r0, fp
 8007e9c:	f000 fc90 	bl	80087c0 <_Bfree>
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	7033      	strb	r3, [r6, #0]
 8007ea4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007ea6:	3701      	adds	r7, #1
 8007ea8:	601f      	str	r7, [r3, #0]
 8007eaa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	f000 831d 	beq.w	80084ec <_dtoa_r+0xb34>
 8007eb2:	601e      	str	r6, [r3, #0]
 8007eb4:	e31a      	b.n	80084ec <_dtoa_r+0xb34>
 8007eb6:	07e2      	lsls	r2, r4, #31
 8007eb8:	d505      	bpl.n	8007ec6 <_dtoa_r+0x50e>
 8007eba:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007ebe:	f7f8 fbbb 	bl	8000638 <__aeabi_dmul>
 8007ec2:	3601      	adds	r6, #1
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	1064      	asrs	r4, r4, #1
 8007ec8:	3508      	adds	r5, #8
 8007eca:	e73f      	b.n	8007d4c <_dtoa_r+0x394>
 8007ecc:	2602      	movs	r6, #2
 8007ece:	e742      	b.n	8007d56 <_dtoa_r+0x39e>
 8007ed0:	9c07      	ldr	r4, [sp, #28]
 8007ed2:	9704      	str	r7, [sp, #16]
 8007ed4:	e761      	b.n	8007d9a <_dtoa_r+0x3e2>
 8007ed6:	4b27      	ldr	r3, [pc, #156]	@ (8007f74 <_dtoa_r+0x5bc>)
 8007ed8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007eda:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007ede:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007ee2:	4454      	add	r4, sl
 8007ee4:	2900      	cmp	r1, #0
 8007ee6:	d053      	beq.n	8007f90 <_dtoa_r+0x5d8>
 8007ee8:	4928      	ldr	r1, [pc, #160]	@ (8007f8c <_dtoa_r+0x5d4>)
 8007eea:	2000      	movs	r0, #0
 8007eec:	f7f8 fcce 	bl	800088c <__aeabi_ddiv>
 8007ef0:	4633      	mov	r3, r6
 8007ef2:	462a      	mov	r2, r5
 8007ef4:	f7f8 f9e8 	bl	80002c8 <__aeabi_dsub>
 8007ef8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007efc:	4656      	mov	r6, sl
 8007efe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f02:	f7f8 fe49 	bl	8000b98 <__aeabi_d2iz>
 8007f06:	4605      	mov	r5, r0
 8007f08:	f7f8 fb2c 	bl	8000564 <__aeabi_i2d>
 8007f0c:	4602      	mov	r2, r0
 8007f0e:	460b      	mov	r3, r1
 8007f10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f14:	f7f8 f9d8 	bl	80002c8 <__aeabi_dsub>
 8007f18:	3530      	adds	r5, #48	@ 0x30
 8007f1a:	4602      	mov	r2, r0
 8007f1c:	460b      	mov	r3, r1
 8007f1e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007f22:	f806 5b01 	strb.w	r5, [r6], #1
 8007f26:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007f2a:	f7f8 fdf7 	bl	8000b1c <__aeabi_dcmplt>
 8007f2e:	2800      	cmp	r0, #0
 8007f30:	d171      	bne.n	8008016 <_dtoa_r+0x65e>
 8007f32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f36:	4911      	ldr	r1, [pc, #68]	@ (8007f7c <_dtoa_r+0x5c4>)
 8007f38:	2000      	movs	r0, #0
 8007f3a:	f7f8 f9c5 	bl	80002c8 <__aeabi_dsub>
 8007f3e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007f42:	f7f8 fdeb 	bl	8000b1c <__aeabi_dcmplt>
 8007f46:	2800      	cmp	r0, #0
 8007f48:	f040 8095 	bne.w	8008076 <_dtoa_r+0x6be>
 8007f4c:	42a6      	cmp	r6, r4
 8007f4e:	f43f af50 	beq.w	8007df2 <_dtoa_r+0x43a>
 8007f52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007f56:	4b0a      	ldr	r3, [pc, #40]	@ (8007f80 <_dtoa_r+0x5c8>)
 8007f58:	2200      	movs	r2, #0
 8007f5a:	f7f8 fb6d 	bl	8000638 <__aeabi_dmul>
 8007f5e:	4b08      	ldr	r3, [pc, #32]	@ (8007f80 <_dtoa_r+0x5c8>)
 8007f60:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007f64:	2200      	movs	r2, #0
 8007f66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f6a:	f7f8 fb65 	bl	8000638 <__aeabi_dmul>
 8007f6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f72:	e7c4      	b.n	8007efe <_dtoa_r+0x546>
 8007f74:	0800b138 	.word	0x0800b138
 8007f78:	0800b110 	.word	0x0800b110
 8007f7c:	3ff00000 	.word	0x3ff00000
 8007f80:	40240000 	.word	0x40240000
 8007f84:	401c0000 	.word	0x401c0000
 8007f88:	40140000 	.word	0x40140000
 8007f8c:	3fe00000 	.word	0x3fe00000
 8007f90:	4631      	mov	r1, r6
 8007f92:	4628      	mov	r0, r5
 8007f94:	f7f8 fb50 	bl	8000638 <__aeabi_dmul>
 8007f98:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007f9c:	9415      	str	r4, [sp, #84]	@ 0x54
 8007f9e:	4656      	mov	r6, sl
 8007fa0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fa4:	f7f8 fdf8 	bl	8000b98 <__aeabi_d2iz>
 8007fa8:	4605      	mov	r5, r0
 8007faa:	f7f8 fadb 	bl	8000564 <__aeabi_i2d>
 8007fae:	4602      	mov	r2, r0
 8007fb0:	460b      	mov	r3, r1
 8007fb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fb6:	f7f8 f987 	bl	80002c8 <__aeabi_dsub>
 8007fba:	3530      	adds	r5, #48	@ 0x30
 8007fbc:	f806 5b01 	strb.w	r5, [r6], #1
 8007fc0:	4602      	mov	r2, r0
 8007fc2:	460b      	mov	r3, r1
 8007fc4:	42a6      	cmp	r6, r4
 8007fc6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007fca:	f04f 0200 	mov.w	r2, #0
 8007fce:	d124      	bne.n	800801a <_dtoa_r+0x662>
 8007fd0:	4bac      	ldr	r3, [pc, #688]	@ (8008284 <_dtoa_r+0x8cc>)
 8007fd2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007fd6:	f7f8 f979 	bl	80002cc <__adddf3>
 8007fda:	4602      	mov	r2, r0
 8007fdc:	460b      	mov	r3, r1
 8007fde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fe2:	f7f8 fdb9 	bl	8000b58 <__aeabi_dcmpgt>
 8007fe6:	2800      	cmp	r0, #0
 8007fe8:	d145      	bne.n	8008076 <_dtoa_r+0x6be>
 8007fea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007fee:	49a5      	ldr	r1, [pc, #660]	@ (8008284 <_dtoa_r+0x8cc>)
 8007ff0:	2000      	movs	r0, #0
 8007ff2:	f7f8 f969 	bl	80002c8 <__aeabi_dsub>
 8007ff6:	4602      	mov	r2, r0
 8007ff8:	460b      	mov	r3, r1
 8007ffa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ffe:	f7f8 fd8d 	bl	8000b1c <__aeabi_dcmplt>
 8008002:	2800      	cmp	r0, #0
 8008004:	f43f aef5 	beq.w	8007df2 <_dtoa_r+0x43a>
 8008008:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800800a:	1e73      	subs	r3, r6, #1
 800800c:	9315      	str	r3, [sp, #84]	@ 0x54
 800800e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008012:	2b30      	cmp	r3, #48	@ 0x30
 8008014:	d0f8      	beq.n	8008008 <_dtoa_r+0x650>
 8008016:	9f04      	ldr	r7, [sp, #16]
 8008018:	e73e      	b.n	8007e98 <_dtoa_r+0x4e0>
 800801a:	4b9b      	ldr	r3, [pc, #620]	@ (8008288 <_dtoa_r+0x8d0>)
 800801c:	f7f8 fb0c 	bl	8000638 <__aeabi_dmul>
 8008020:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008024:	e7bc      	b.n	8007fa0 <_dtoa_r+0x5e8>
 8008026:	d10c      	bne.n	8008042 <_dtoa_r+0x68a>
 8008028:	4b98      	ldr	r3, [pc, #608]	@ (800828c <_dtoa_r+0x8d4>)
 800802a:	2200      	movs	r2, #0
 800802c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008030:	f7f8 fb02 	bl	8000638 <__aeabi_dmul>
 8008034:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008038:	f7f8 fd84 	bl	8000b44 <__aeabi_dcmpge>
 800803c:	2800      	cmp	r0, #0
 800803e:	f000 8157 	beq.w	80082f0 <_dtoa_r+0x938>
 8008042:	2400      	movs	r4, #0
 8008044:	4625      	mov	r5, r4
 8008046:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008048:	43db      	mvns	r3, r3
 800804a:	9304      	str	r3, [sp, #16]
 800804c:	4656      	mov	r6, sl
 800804e:	2700      	movs	r7, #0
 8008050:	4621      	mov	r1, r4
 8008052:	4658      	mov	r0, fp
 8008054:	f000 fbb4 	bl	80087c0 <_Bfree>
 8008058:	2d00      	cmp	r5, #0
 800805a:	d0dc      	beq.n	8008016 <_dtoa_r+0x65e>
 800805c:	b12f      	cbz	r7, 800806a <_dtoa_r+0x6b2>
 800805e:	42af      	cmp	r7, r5
 8008060:	d003      	beq.n	800806a <_dtoa_r+0x6b2>
 8008062:	4639      	mov	r1, r7
 8008064:	4658      	mov	r0, fp
 8008066:	f000 fbab 	bl	80087c0 <_Bfree>
 800806a:	4629      	mov	r1, r5
 800806c:	4658      	mov	r0, fp
 800806e:	f000 fba7 	bl	80087c0 <_Bfree>
 8008072:	e7d0      	b.n	8008016 <_dtoa_r+0x65e>
 8008074:	9704      	str	r7, [sp, #16]
 8008076:	4633      	mov	r3, r6
 8008078:	461e      	mov	r6, r3
 800807a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800807e:	2a39      	cmp	r2, #57	@ 0x39
 8008080:	d107      	bne.n	8008092 <_dtoa_r+0x6da>
 8008082:	459a      	cmp	sl, r3
 8008084:	d1f8      	bne.n	8008078 <_dtoa_r+0x6c0>
 8008086:	9a04      	ldr	r2, [sp, #16]
 8008088:	3201      	adds	r2, #1
 800808a:	9204      	str	r2, [sp, #16]
 800808c:	2230      	movs	r2, #48	@ 0x30
 800808e:	f88a 2000 	strb.w	r2, [sl]
 8008092:	781a      	ldrb	r2, [r3, #0]
 8008094:	3201      	adds	r2, #1
 8008096:	701a      	strb	r2, [r3, #0]
 8008098:	e7bd      	b.n	8008016 <_dtoa_r+0x65e>
 800809a:	4b7b      	ldr	r3, [pc, #492]	@ (8008288 <_dtoa_r+0x8d0>)
 800809c:	2200      	movs	r2, #0
 800809e:	f7f8 facb 	bl	8000638 <__aeabi_dmul>
 80080a2:	2200      	movs	r2, #0
 80080a4:	2300      	movs	r3, #0
 80080a6:	4604      	mov	r4, r0
 80080a8:	460d      	mov	r5, r1
 80080aa:	f7f8 fd2d 	bl	8000b08 <__aeabi_dcmpeq>
 80080ae:	2800      	cmp	r0, #0
 80080b0:	f43f aebb 	beq.w	8007e2a <_dtoa_r+0x472>
 80080b4:	e6f0      	b.n	8007e98 <_dtoa_r+0x4e0>
 80080b6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80080b8:	2a00      	cmp	r2, #0
 80080ba:	f000 80db 	beq.w	8008274 <_dtoa_r+0x8bc>
 80080be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80080c0:	2a01      	cmp	r2, #1
 80080c2:	f300 80bf 	bgt.w	8008244 <_dtoa_r+0x88c>
 80080c6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80080c8:	2a00      	cmp	r2, #0
 80080ca:	f000 80b7 	beq.w	800823c <_dtoa_r+0x884>
 80080ce:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80080d2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80080d4:	4646      	mov	r6, r8
 80080d6:	9a08      	ldr	r2, [sp, #32]
 80080d8:	2101      	movs	r1, #1
 80080da:	441a      	add	r2, r3
 80080dc:	4658      	mov	r0, fp
 80080de:	4498      	add	r8, r3
 80080e0:	9208      	str	r2, [sp, #32]
 80080e2:	f000 fc6b 	bl	80089bc <__i2b>
 80080e6:	4605      	mov	r5, r0
 80080e8:	b15e      	cbz	r6, 8008102 <_dtoa_r+0x74a>
 80080ea:	9b08      	ldr	r3, [sp, #32]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	dd08      	ble.n	8008102 <_dtoa_r+0x74a>
 80080f0:	42b3      	cmp	r3, r6
 80080f2:	9a08      	ldr	r2, [sp, #32]
 80080f4:	bfa8      	it	ge
 80080f6:	4633      	movge	r3, r6
 80080f8:	eba8 0803 	sub.w	r8, r8, r3
 80080fc:	1af6      	subs	r6, r6, r3
 80080fe:	1ad3      	subs	r3, r2, r3
 8008100:	9308      	str	r3, [sp, #32]
 8008102:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008104:	b1f3      	cbz	r3, 8008144 <_dtoa_r+0x78c>
 8008106:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008108:	2b00      	cmp	r3, #0
 800810a:	f000 80b7 	beq.w	800827c <_dtoa_r+0x8c4>
 800810e:	b18c      	cbz	r4, 8008134 <_dtoa_r+0x77c>
 8008110:	4629      	mov	r1, r5
 8008112:	4622      	mov	r2, r4
 8008114:	4658      	mov	r0, fp
 8008116:	f000 fd11 	bl	8008b3c <__pow5mult>
 800811a:	464a      	mov	r2, r9
 800811c:	4601      	mov	r1, r0
 800811e:	4605      	mov	r5, r0
 8008120:	4658      	mov	r0, fp
 8008122:	f000 fc61 	bl	80089e8 <__multiply>
 8008126:	4649      	mov	r1, r9
 8008128:	9004      	str	r0, [sp, #16]
 800812a:	4658      	mov	r0, fp
 800812c:	f000 fb48 	bl	80087c0 <_Bfree>
 8008130:	9b04      	ldr	r3, [sp, #16]
 8008132:	4699      	mov	r9, r3
 8008134:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008136:	1b1a      	subs	r2, r3, r4
 8008138:	d004      	beq.n	8008144 <_dtoa_r+0x78c>
 800813a:	4649      	mov	r1, r9
 800813c:	4658      	mov	r0, fp
 800813e:	f000 fcfd 	bl	8008b3c <__pow5mult>
 8008142:	4681      	mov	r9, r0
 8008144:	2101      	movs	r1, #1
 8008146:	4658      	mov	r0, fp
 8008148:	f000 fc38 	bl	80089bc <__i2b>
 800814c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800814e:	4604      	mov	r4, r0
 8008150:	2b00      	cmp	r3, #0
 8008152:	f000 81cf 	beq.w	80084f4 <_dtoa_r+0xb3c>
 8008156:	461a      	mov	r2, r3
 8008158:	4601      	mov	r1, r0
 800815a:	4658      	mov	r0, fp
 800815c:	f000 fcee 	bl	8008b3c <__pow5mult>
 8008160:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008162:	2b01      	cmp	r3, #1
 8008164:	4604      	mov	r4, r0
 8008166:	f300 8095 	bgt.w	8008294 <_dtoa_r+0x8dc>
 800816a:	9b02      	ldr	r3, [sp, #8]
 800816c:	2b00      	cmp	r3, #0
 800816e:	f040 8087 	bne.w	8008280 <_dtoa_r+0x8c8>
 8008172:	9b03      	ldr	r3, [sp, #12]
 8008174:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008178:	2b00      	cmp	r3, #0
 800817a:	f040 8089 	bne.w	8008290 <_dtoa_r+0x8d8>
 800817e:	9b03      	ldr	r3, [sp, #12]
 8008180:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008184:	0d1b      	lsrs	r3, r3, #20
 8008186:	051b      	lsls	r3, r3, #20
 8008188:	b12b      	cbz	r3, 8008196 <_dtoa_r+0x7de>
 800818a:	9b08      	ldr	r3, [sp, #32]
 800818c:	3301      	adds	r3, #1
 800818e:	9308      	str	r3, [sp, #32]
 8008190:	f108 0801 	add.w	r8, r8, #1
 8008194:	2301      	movs	r3, #1
 8008196:	930a      	str	r3, [sp, #40]	@ 0x28
 8008198:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800819a:	2b00      	cmp	r3, #0
 800819c:	f000 81b0 	beq.w	8008500 <_dtoa_r+0xb48>
 80081a0:	6923      	ldr	r3, [r4, #16]
 80081a2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80081a6:	6918      	ldr	r0, [r3, #16]
 80081a8:	f000 fbbc 	bl	8008924 <__hi0bits>
 80081ac:	f1c0 0020 	rsb	r0, r0, #32
 80081b0:	9b08      	ldr	r3, [sp, #32]
 80081b2:	4418      	add	r0, r3
 80081b4:	f010 001f 	ands.w	r0, r0, #31
 80081b8:	d077      	beq.n	80082aa <_dtoa_r+0x8f2>
 80081ba:	f1c0 0320 	rsb	r3, r0, #32
 80081be:	2b04      	cmp	r3, #4
 80081c0:	dd6b      	ble.n	800829a <_dtoa_r+0x8e2>
 80081c2:	9b08      	ldr	r3, [sp, #32]
 80081c4:	f1c0 001c 	rsb	r0, r0, #28
 80081c8:	4403      	add	r3, r0
 80081ca:	4480      	add	r8, r0
 80081cc:	4406      	add	r6, r0
 80081ce:	9308      	str	r3, [sp, #32]
 80081d0:	f1b8 0f00 	cmp.w	r8, #0
 80081d4:	dd05      	ble.n	80081e2 <_dtoa_r+0x82a>
 80081d6:	4649      	mov	r1, r9
 80081d8:	4642      	mov	r2, r8
 80081da:	4658      	mov	r0, fp
 80081dc:	f000 fd08 	bl	8008bf0 <__lshift>
 80081e0:	4681      	mov	r9, r0
 80081e2:	9b08      	ldr	r3, [sp, #32]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	dd05      	ble.n	80081f4 <_dtoa_r+0x83c>
 80081e8:	4621      	mov	r1, r4
 80081ea:	461a      	mov	r2, r3
 80081ec:	4658      	mov	r0, fp
 80081ee:	f000 fcff 	bl	8008bf0 <__lshift>
 80081f2:	4604      	mov	r4, r0
 80081f4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d059      	beq.n	80082ae <_dtoa_r+0x8f6>
 80081fa:	4621      	mov	r1, r4
 80081fc:	4648      	mov	r0, r9
 80081fe:	f000 fd63 	bl	8008cc8 <__mcmp>
 8008202:	2800      	cmp	r0, #0
 8008204:	da53      	bge.n	80082ae <_dtoa_r+0x8f6>
 8008206:	1e7b      	subs	r3, r7, #1
 8008208:	9304      	str	r3, [sp, #16]
 800820a:	4649      	mov	r1, r9
 800820c:	2300      	movs	r3, #0
 800820e:	220a      	movs	r2, #10
 8008210:	4658      	mov	r0, fp
 8008212:	f000 faf7 	bl	8008804 <__multadd>
 8008216:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008218:	4681      	mov	r9, r0
 800821a:	2b00      	cmp	r3, #0
 800821c:	f000 8172 	beq.w	8008504 <_dtoa_r+0xb4c>
 8008220:	2300      	movs	r3, #0
 8008222:	4629      	mov	r1, r5
 8008224:	220a      	movs	r2, #10
 8008226:	4658      	mov	r0, fp
 8008228:	f000 faec 	bl	8008804 <__multadd>
 800822c:	9b00      	ldr	r3, [sp, #0]
 800822e:	2b00      	cmp	r3, #0
 8008230:	4605      	mov	r5, r0
 8008232:	dc67      	bgt.n	8008304 <_dtoa_r+0x94c>
 8008234:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008236:	2b02      	cmp	r3, #2
 8008238:	dc41      	bgt.n	80082be <_dtoa_r+0x906>
 800823a:	e063      	b.n	8008304 <_dtoa_r+0x94c>
 800823c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800823e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008242:	e746      	b.n	80080d2 <_dtoa_r+0x71a>
 8008244:	9b07      	ldr	r3, [sp, #28]
 8008246:	1e5c      	subs	r4, r3, #1
 8008248:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800824a:	42a3      	cmp	r3, r4
 800824c:	bfbf      	itttt	lt
 800824e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008250:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008252:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008254:	1ae3      	sublt	r3, r4, r3
 8008256:	bfb4      	ite	lt
 8008258:	18d2      	addlt	r2, r2, r3
 800825a:	1b1c      	subge	r4, r3, r4
 800825c:	9b07      	ldr	r3, [sp, #28]
 800825e:	bfbc      	itt	lt
 8008260:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008262:	2400      	movlt	r4, #0
 8008264:	2b00      	cmp	r3, #0
 8008266:	bfb5      	itete	lt
 8008268:	eba8 0603 	sublt.w	r6, r8, r3
 800826c:	9b07      	ldrge	r3, [sp, #28]
 800826e:	2300      	movlt	r3, #0
 8008270:	4646      	movge	r6, r8
 8008272:	e730      	b.n	80080d6 <_dtoa_r+0x71e>
 8008274:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008276:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008278:	4646      	mov	r6, r8
 800827a:	e735      	b.n	80080e8 <_dtoa_r+0x730>
 800827c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800827e:	e75c      	b.n	800813a <_dtoa_r+0x782>
 8008280:	2300      	movs	r3, #0
 8008282:	e788      	b.n	8008196 <_dtoa_r+0x7de>
 8008284:	3fe00000 	.word	0x3fe00000
 8008288:	40240000 	.word	0x40240000
 800828c:	40140000 	.word	0x40140000
 8008290:	9b02      	ldr	r3, [sp, #8]
 8008292:	e780      	b.n	8008196 <_dtoa_r+0x7de>
 8008294:	2300      	movs	r3, #0
 8008296:	930a      	str	r3, [sp, #40]	@ 0x28
 8008298:	e782      	b.n	80081a0 <_dtoa_r+0x7e8>
 800829a:	d099      	beq.n	80081d0 <_dtoa_r+0x818>
 800829c:	9a08      	ldr	r2, [sp, #32]
 800829e:	331c      	adds	r3, #28
 80082a0:	441a      	add	r2, r3
 80082a2:	4498      	add	r8, r3
 80082a4:	441e      	add	r6, r3
 80082a6:	9208      	str	r2, [sp, #32]
 80082a8:	e792      	b.n	80081d0 <_dtoa_r+0x818>
 80082aa:	4603      	mov	r3, r0
 80082ac:	e7f6      	b.n	800829c <_dtoa_r+0x8e4>
 80082ae:	9b07      	ldr	r3, [sp, #28]
 80082b0:	9704      	str	r7, [sp, #16]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	dc20      	bgt.n	80082f8 <_dtoa_r+0x940>
 80082b6:	9300      	str	r3, [sp, #0]
 80082b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082ba:	2b02      	cmp	r3, #2
 80082bc:	dd1e      	ble.n	80082fc <_dtoa_r+0x944>
 80082be:	9b00      	ldr	r3, [sp, #0]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	f47f aec0 	bne.w	8008046 <_dtoa_r+0x68e>
 80082c6:	4621      	mov	r1, r4
 80082c8:	2205      	movs	r2, #5
 80082ca:	4658      	mov	r0, fp
 80082cc:	f000 fa9a 	bl	8008804 <__multadd>
 80082d0:	4601      	mov	r1, r0
 80082d2:	4604      	mov	r4, r0
 80082d4:	4648      	mov	r0, r9
 80082d6:	f000 fcf7 	bl	8008cc8 <__mcmp>
 80082da:	2800      	cmp	r0, #0
 80082dc:	f77f aeb3 	ble.w	8008046 <_dtoa_r+0x68e>
 80082e0:	4656      	mov	r6, sl
 80082e2:	2331      	movs	r3, #49	@ 0x31
 80082e4:	f806 3b01 	strb.w	r3, [r6], #1
 80082e8:	9b04      	ldr	r3, [sp, #16]
 80082ea:	3301      	adds	r3, #1
 80082ec:	9304      	str	r3, [sp, #16]
 80082ee:	e6ae      	b.n	800804e <_dtoa_r+0x696>
 80082f0:	9c07      	ldr	r4, [sp, #28]
 80082f2:	9704      	str	r7, [sp, #16]
 80082f4:	4625      	mov	r5, r4
 80082f6:	e7f3      	b.n	80082e0 <_dtoa_r+0x928>
 80082f8:	9b07      	ldr	r3, [sp, #28]
 80082fa:	9300      	str	r3, [sp, #0]
 80082fc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80082fe:	2b00      	cmp	r3, #0
 8008300:	f000 8104 	beq.w	800850c <_dtoa_r+0xb54>
 8008304:	2e00      	cmp	r6, #0
 8008306:	dd05      	ble.n	8008314 <_dtoa_r+0x95c>
 8008308:	4629      	mov	r1, r5
 800830a:	4632      	mov	r2, r6
 800830c:	4658      	mov	r0, fp
 800830e:	f000 fc6f 	bl	8008bf0 <__lshift>
 8008312:	4605      	mov	r5, r0
 8008314:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008316:	2b00      	cmp	r3, #0
 8008318:	d05a      	beq.n	80083d0 <_dtoa_r+0xa18>
 800831a:	6869      	ldr	r1, [r5, #4]
 800831c:	4658      	mov	r0, fp
 800831e:	f000 fa0f 	bl	8008740 <_Balloc>
 8008322:	4606      	mov	r6, r0
 8008324:	b928      	cbnz	r0, 8008332 <_dtoa_r+0x97a>
 8008326:	4b84      	ldr	r3, [pc, #528]	@ (8008538 <_dtoa_r+0xb80>)
 8008328:	4602      	mov	r2, r0
 800832a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800832e:	f7ff bb5a 	b.w	80079e6 <_dtoa_r+0x2e>
 8008332:	692a      	ldr	r2, [r5, #16]
 8008334:	3202      	adds	r2, #2
 8008336:	0092      	lsls	r2, r2, #2
 8008338:	f105 010c 	add.w	r1, r5, #12
 800833c:	300c      	adds	r0, #12
 800833e:	f7ff fa9c 	bl	800787a <memcpy>
 8008342:	2201      	movs	r2, #1
 8008344:	4631      	mov	r1, r6
 8008346:	4658      	mov	r0, fp
 8008348:	f000 fc52 	bl	8008bf0 <__lshift>
 800834c:	f10a 0301 	add.w	r3, sl, #1
 8008350:	9307      	str	r3, [sp, #28]
 8008352:	9b00      	ldr	r3, [sp, #0]
 8008354:	4453      	add	r3, sl
 8008356:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008358:	9b02      	ldr	r3, [sp, #8]
 800835a:	f003 0301 	and.w	r3, r3, #1
 800835e:	462f      	mov	r7, r5
 8008360:	930a      	str	r3, [sp, #40]	@ 0x28
 8008362:	4605      	mov	r5, r0
 8008364:	9b07      	ldr	r3, [sp, #28]
 8008366:	4621      	mov	r1, r4
 8008368:	3b01      	subs	r3, #1
 800836a:	4648      	mov	r0, r9
 800836c:	9300      	str	r3, [sp, #0]
 800836e:	f7ff fa99 	bl	80078a4 <quorem>
 8008372:	4639      	mov	r1, r7
 8008374:	9002      	str	r0, [sp, #8]
 8008376:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800837a:	4648      	mov	r0, r9
 800837c:	f000 fca4 	bl	8008cc8 <__mcmp>
 8008380:	462a      	mov	r2, r5
 8008382:	9008      	str	r0, [sp, #32]
 8008384:	4621      	mov	r1, r4
 8008386:	4658      	mov	r0, fp
 8008388:	f000 fcba 	bl	8008d00 <__mdiff>
 800838c:	68c2      	ldr	r2, [r0, #12]
 800838e:	4606      	mov	r6, r0
 8008390:	bb02      	cbnz	r2, 80083d4 <_dtoa_r+0xa1c>
 8008392:	4601      	mov	r1, r0
 8008394:	4648      	mov	r0, r9
 8008396:	f000 fc97 	bl	8008cc8 <__mcmp>
 800839a:	4602      	mov	r2, r0
 800839c:	4631      	mov	r1, r6
 800839e:	4658      	mov	r0, fp
 80083a0:	920e      	str	r2, [sp, #56]	@ 0x38
 80083a2:	f000 fa0d 	bl	80087c0 <_Bfree>
 80083a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083a8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80083aa:	9e07      	ldr	r6, [sp, #28]
 80083ac:	ea43 0102 	orr.w	r1, r3, r2
 80083b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80083b2:	4319      	orrs	r1, r3
 80083b4:	d110      	bne.n	80083d8 <_dtoa_r+0xa20>
 80083b6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80083ba:	d029      	beq.n	8008410 <_dtoa_r+0xa58>
 80083bc:	9b08      	ldr	r3, [sp, #32]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	dd02      	ble.n	80083c8 <_dtoa_r+0xa10>
 80083c2:	9b02      	ldr	r3, [sp, #8]
 80083c4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80083c8:	9b00      	ldr	r3, [sp, #0]
 80083ca:	f883 8000 	strb.w	r8, [r3]
 80083ce:	e63f      	b.n	8008050 <_dtoa_r+0x698>
 80083d0:	4628      	mov	r0, r5
 80083d2:	e7bb      	b.n	800834c <_dtoa_r+0x994>
 80083d4:	2201      	movs	r2, #1
 80083d6:	e7e1      	b.n	800839c <_dtoa_r+0x9e4>
 80083d8:	9b08      	ldr	r3, [sp, #32]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	db04      	blt.n	80083e8 <_dtoa_r+0xa30>
 80083de:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80083e0:	430b      	orrs	r3, r1
 80083e2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80083e4:	430b      	orrs	r3, r1
 80083e6:	d120      	bne.n	800842a <_dtoa_r+0xa72>
 80083e8:	2a00      	cmp	r2, #0
 80083ea:	dded      	ble.n	80083c8 <_dtoa_r+0xa10>
 80083ec:	4649      	mov	r1, r9
 80083ee:	2201      	movs	r2, #1
 80083f0:	4658      	mov	r0, fp
 80083f2:	f000 fbfd 	bl	8008bf0 <__lshift>
 80083f6:	4621      	mov	r1, r4
 80083f8:	4681      	mov	r9, r0
 80083fa:	f000 fc65 	bl	8008cc8 <__mcmp>
 80083fe:	2800      	cmp	r0, #0
 8008400:	dc03      	bgt.n	800840a <_dtoa_r+0xa52>
 8008402:	d1e1      	bne.n	80083c8 <_dtoa_r+0xa10>
 8008404:	f018 0f01 	tst.w	r8, #1
 8008408:	d0de      	beq.n	80083c8 <_dtoa_r+0xa10>
 800840a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800840e:	d1d8      	bne.n	80083c2 <_dtoa_r+0xa0a>
 8008410:	9a00      	ldr	r2, [sp, #0]
 8008412:	2339      	movs	r3, #57	@ 0x39
 8008414:	7013      	strb	r3, [r2, #0]
 8008416:	4633      	mov	r3, r6
 8008418:	461e      	mov	r6, r3
 800841a:	3b01      	subs	r3, #1
 800841c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008420:	2a39      	cmp	r2, #57	@ 0x39
 8008422:	d052      	beq.n	80084ca <_dtoa_r+0xb12>
 8008424:	3201      	adds	r2, #1
 8008426:	701a      	strb	r2, [r3, #0]
 8008428:	e612      	b.n	8008050 <_dtoa_r+0x698>
 800842a:	2a00      	cmp	r2, #0
 800842c:	dd07      	ble.n	800843e <_dtoa_r+0xa86>
 800842e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008432:	d0ed      	beq.n	8008410 <_dtoa_r+0xa58>
 8008434:	9a00      	ldr	r2, [sp, #0]
 8008436:	f108 0301 	add.w	r3, r8, #1
 800843a:	7013      	strb	r3, [r2, #0]
 800843c:	e608      	b.n	8008050 <_dtoa_r+0x698>
 800843e:	9b07      	ldr	r3, [sp, #28]
 8008440:	9a07      	ldr	r2, [sp, #28]
 8008442:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008446:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008448:	4293      	cmp	r3, r2
 800844a:	d028      	beq.n	800849e <_dtoa_r+0xae6>
 800844c:	4649      	mov	r1, r9
 800844e:	2300      	movs	r3, #0
 8008450:	220a      	movs	r2, #10
 8008452:	4658      	mov	r0, fp
 8008454:	f000 f9d6 	bl	8008804 <__multadd>
 8008458:	42af      	cmp	r7, r5
 800845a:	4681      	mov	r9, r0
 800845c:	f04f 0300 	mov.w	r3, #0
 8008460:	f04f 020a 	mov.w	r2, #10
 8008464:	4639      	mov	r1, r7
 8008466:	4658      	mov	r0, fp
 8008468:	d107      	bne.n	800847a <_dtoa_r+0xac2>
 800846a:	f000 f9cb 	bl	8008804 <__multadd>
 800846e:	4607      	mov	r7, r0
 8008470:	4605      	mov	r5, r0
 8008472:	9b07      	ldr	r3, [sp, #28]
 8008474:	3301      	adds	r3, #1
 8008476:	9307      	str	r3, [sp, #28]
 8008478:	e774      	b.n	8008364 <_dtoa_r+0x9ac>
 800847a:	f000 f9c3 	bl	8008804 <__multadd>
 800847e:	4629      	mov	r1, r5
 8008480:	4607      	mov	r7, r0
 8008482:	2300      	movs	r3, #0
 8008484:	220a      	movs	r2, #10
 8008486:	4658      	mov	r0, fp
 8008488:	f000 f9bc 	bl	8008804 <__multadd>
 800848c:	4605      	mov	r5, r0
 800848e:	e7f0      	b.n	8008472 <_dtoa_r+0xaba>
 8008490:	9b00      	ldr	r3, [sp, #0]
 8008492:	2b00      	cmp	r3, #0
 8008494:	bfcc      	ite	gt
 8008496:	461e      	movgt	r6, r3
 8008498:	2601      	movle	r6, #1
 800849a:	4456      	add	r6, sl
 800849c:	2700      	movs	r7, #0
 800849e:	4649      	mov	r1, r9
 80084a0:	2201      	movs	r2, #1
 80084a2:	4658      	mov	r0, fp
 80084a4:	f000 fba4 	bl	8008bf0 <__lshift>
 80084a8:	4621      	mov	r1, r4
 80084aa:	4681      	mov	r9, r0
 80084ac:	f000 fc0c 	bl	8008cc8 <__mcmp>
 80084b0:	2800      	cmp	r0, #0
 80084b2:	dcb0      	bgt.n	8008416 <_dtoa_r+0xa5e>
 80084b4:	d102      	bne.n	80084bc <_dtoa_r+0xb04>
 80084b6:	f018 0f01 	tst.w	r8, #1
 80084ba:	d1ac      	bne.n	8008416 <_dtoa_r+0xa5e>
 80084bc:	4633      	mov	r3, r6
 80084be:	461e      	mov	r6, r3
 80084c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80084c4:	2a30      	cmp	r2, #48	@ 0x30
 80084c6:	d0fa      	beq.n	80084be <_dtoa_r+0xb06>
 80084c8:	e5c2      	b.n	8008050 <_dtoa_r+0x698>
 80084ca:	459a      	cmp	sl, r3
 80084cc:	d1a4      	bne.n	8008418 <_dtoa_r+0xa60>
 80084ce:	9b04      	ldr	r3, [sp, #16]
 80084d0:	3301      	adds	r3, #1
 80084d2:	9304      	str	r3, [sp, #16]
 80084d4:	2331      	movs	r3, #49	@ 0x31
 80084d6:	f88a 3000 	strb.w	r3, [sl]
 80084da:	e5b9      	b.n	8008050 <_dtoa_r+0x698>
 80084dc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80084de:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800853c <_dtoa_r+0xb84>
 80084e2:	b11b      	cbz	r3, 80084ec <_dtoa_r+0xb34>
 80084e4:	f10a 0308 	add.w	r3, sl, #8
 80084e8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80084ea:	6013      	str	r3, [r2, #0]
 80084ec:	4650      	mov	r0, sl
 80084ee:	b019      	add	sp, #100	@ 0x64
 80084f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084f6:	2b01      	cmp	r3, #1
 80084f8:	f77f ae37 	ble.w	800816a <_dtoa_r+0x7b2>
 80084fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80084fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8008500:	2001      	movs	r0, #1
 8008502:	e655      	b.n	80081b0 <_dtoa_r+0x7f8>
 8008504:	9b00      	ldr	r3, [sp, #0]
 8008506:	2b00      	cmp	r3, #0
 8008508:	f77f aed6 	ble.w	80082b8 <_dtoa_r+0x900>
 800850c:	4656      	mov	r6, sl
 800850e:	4621      	mov	r1, r4
 8008510:	4648      	mov	r0, r9
 8008512:	f7ff f9c7 	bl	80078a4 <quorem>
 8008516:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800851a:	f806 8b01 	strb.w	r8, [r6], #1
 800851e:	9b00      	ldr	r3, [sp, #0]
 8008520:	eba6 020a 	sub.w	r2, r6, sl
 8008524:	4293      	cmp	r3, r2
 8008526:	ddb3      	ble.n	8008490 <_dtoa_r+0xad8>
 8008528:	4649      	mov	r1, r9
 800852a:	2300      	movs	r3, #0
 800852c:	220a      	movs	r2, #10
 800852e:	4658      	mov	r0, fp
 8008530:	f000 f968 	bl	8008804 <__multadd>
 8008534:	4681      	mov	r9, r0
 8008536:	e7ea      	b.n	800850e <_dtoa_r+0xb56>
 8008538:	0800b099 	.word	0x0800b099
 800853c:	0800b01d 	.word	0x0800b01d

08008540 <_free_r>:
 8008540:	b538      	push	{r3, r4, r5, lr}
 8008542:	4605      	mov	r5, r0
 8008544:	2900      	cmp	r1, #0
 8008546:	d041      	beq.n	80085cc <_free_r+0x8c>
 8008548:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800854c:	1f0c      	subs	r4, r1, #4
 800854e:	2b00      	cmp	r3, #0
 8008550:	bfb8      	it	lt
 8008552:	18e4      	addlt	r4, r4, r3
 8008554:	f000 f8e8 	bl	8008728 <__malloc_lock>
 8008558:	4a1d      	ldr	r2, [pc, #116]	@ (80085d0 <_free_r+0x90>)
 800855a:	6813      	ldr	r3, [r2, #0]
 800855c:	b933      	cbnz	r3, 800856c <_free_r+0x2c>
 800855e:	6063      	str	r3, [r4, #4]
 8008560:	6014      	str	r4, [r2, #0]
 8008562:	4628      	mov	r0, r5
 8008564:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008568:	f000 b8e4 	b.w	8008734 <__malloc_unlock>
 800856c:	42a3      	cmp	r3, r4
 800856e:	d908      	bls.n	8008582 <_free_r+0x42>
 8008570:	6820      	ldr	r0, [r4, #0]
 8008572:	1821      	adds	r1, r4, r0
 8008574:	428b      	cmp	r3, r1
 8008576:	bf01      	itttt	eq
 8008578:	6819      	ldreq	r1, [r3, #0]
 800857a:	685b      	ldreq	r3, [r3, #4]
 800857c:	1809      	addeq	r1, r1, r0
 800857e:	6021      	streq	r1, [r4, #0]
 8008580:	e7ed      	b.n	800855e <_free_r+0x1e>
 8008582:	461a      	mov	r2, r3
 8008584:	685b      	ldr	r3, [r3, #4]
 8008586:	b10b      	cbz	r3, 800858c <_free_r+0x4c>
 8008588:	42a3      	cmp	r3, r4
 800858a:	d9fa      	bls.n	8008582 <_free_r+0x42>
 800858c:	6811      	ldr	r1, [r2, #0]
 800858e:	1850      	adds	r0, r2, r1
 8008590:	42a0      	cmp	r0, r4
 8008592:	d10b      	bne.n	80085ac <_free_r+0x6c>
 8008594:	6820      	ldr	r0, [r4, #0]
 8008596:	4401      	add	r1, r0
 8008598:	1850      	adds	r0, r2, r1
 800859a:	4283      	cmp	r3, r0
 800859c:	6011      	str	r1, [r2, #0]
 800859e:	d1e0      	bne.n	8008562 <_free_r+0x22>
 80085a0:	6818      	ldr	r0, [r3, #0]
 80085a2:	685b      	ldr	r3, [r3, #4]
 80085a4:	6053      	str	r3, [r2, #4]
 80085a6:	4408      	add	r0, r1
 80085a8:	6010      	str	r0, [r2, #0]
 80085aa:	e7da      	b.n	8008562 <_free_r+0x22>
 80085ac:	d902      	bls.n	80085b4 <_free_r+0x74>
 80085ae:	230c      	movs	r3, #12
 80085b0:	602b      	str	r3, [r5, #0]
 80085b2:	e7d6      	b.n	8008562 <_free_r+0x22>
 80085b4:	6820      	ldr	r0, [r4, #0]
 80085b6:	1821      	adds	r1, r4, r0
 80085b8:	428b      	cmp	r3, r1
 80085ba:	bf04      	itt	eq
 80085bc:	6819      	ldreq	r1, [r3, #0]
 80085be:	685b      	ldreq	r3, [r3, #4]
 80085c0:	6063      	str	r3, [r4, #4]
 80085c2:	bf04      	itt	eq
 80085c4:	1809      	addeq	r1, r1, r0
 80085c6:	6021      	streq	r1, [r4, #0]
 80085c8:	6054      	str	r4, [r2, #4]
 80085ca:	e7ca      	b.n	8008562 <_free_r+0x22>
 80085cc:	bd38      	pop	{r3, r4, r5, pc}
 80085ce:	bf00      	nop
 80085d0:	200043c4 	.word	0x200043c4

080085d4 <malloc>:
 80085d4:	4b02      	ldr	r3, [pc, #8]	@ (80085e0 <malloc+0xc>)
 80085d6:	4601      	mov	r1, r0
 80085d8:	6818      	ldr	r0, [r3, #0]
 80085da:	f000 b825 	b.w	8008628 <_malloc_r>
 80085de:	bf00      	nop
 80085e0:	2000001c 	.word	0x2000001c

080085e4 <sbrk_aligned>:
 80085e4:	b570      	push	{r4, r5, r6, lr}
 80085e6:	4e0f      	ldr	r6, [pc, #60]	@ (8008624 <sbrk_aligned+0x40>)
 80085e8:	460c      	mov	r4, r1
 80085ea:	6831      	ldr	r1, [r6, #0]
 80085ec:	4605      	mov	r5, r0
 80085ee:	b911      	cbnz	r1, 80085f6 <sbrk_aligned+0x12>
 80085f0:	f001 fe0c 	bl	800a20c <_sbrk_r>
 80085f4:	6030      	str	r0, [r6, #0]
 80085f6:	4621      	mov	r1, r4
 80085f8:	4628      	mov	r0, r5
 80085fa:	f001 fe07 	bl	800a20c <_sbrk_r>
 80085fe:	1c43      	adds	r3, r0, #1
 8008600:	d103      	bne.n	800860a <sbrk_aligned+0x26>
 8008602:	f04f 34ff 	mov.w	r4, #4294967295
 8008606:	4620      	mov	r0, r4
 8008608:	bd70      	pop	{r4, r5, r6, pc}
 800860a:	1cc4      	adds	r4, r0, #3
 800860c:	f024 0403 	bic.w	r4, r4, #3
 8008610:	42a0      	cmp	r0, r4
 8008612:	d0f8      	beq.n	8008606 <sbrk_aligned+0x22>
 8008614:	1a21      	subs	r1, r4, r0
 8008616:	4628      	mov	r0, r5
 8008618:	f001 fdf8 	bl	800a20c <_sbrk_r>
 800861c:	3001      	adds	r0, #1
 800861e:	d1f2      	bne.n	8008606 <sbrk_aligned+0x22>
 8008620:	e7ef      	b.n	8008602 <sbrk_aligned+0x1e>
 8008622:	bf00      	nop
 8008624:	200043c0 	.word	0x200043c0

08008628 <_malloc_r>:
 8008628:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800862c:	1ccd      	adds	r5, r1, #3
 800862e:	f025 0503 	bic.w	r5, r5, #3
 8008632:	3508      	adds	r5, #8
 8008634:	2d0c      	cmp	r5, #12
 8008636:	bf38      	it	cc
 8008638:	250c      	movcc	r5, #12
 800863a:	2d00      	cmp	r5, #0
 800863c:	4606      	mov	r6, r0
 800863e:	db01      	blt.n	8008644 <_malloc_r+0x1c>
 8008640:	42a9      	cmp	r1, r5
 8008642:	d904      	bls.n	800864e <_malloc_r+0x26>
 8008644:	230c      	movs	r3, #12
 8008646:	6033      	str	r3, [r6, #0]
 8008648:	2000      	movs	r0, #0
 800864a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800864e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008724 <_malloc_r+0xfc>
 8008652:	f000 f869 	bl	8008728 <__malloc_lock>
 8008656:	f8d8 3000 	ldr.w	r3, [r8]
 800865a:	461c      	mov	r4, r3
 800865c:	bb44      	cbnz	r4, 80086b0 <_malloc_r+0x88>
 800865e:	4629      	mov	r1, r5
 8008660:	4630      	mov	r0, r6
 8008662:	f7ff ffbf 	bl	80085e4 <sbrk_aligned>
 8008666:	1c43      	adds	r3, r0, #1
 8008668:	4604      	mov	r4, r0
 800866a:	d158      	bne.n	800871e <_malloc_r+0xf6>
 800866c:	f8d8 4000 	ldr.w	r4, [r8]
 8008670:	4627      	mov	r7, r4
 8008672:	2f00      	cmp	r7, #0
 8008674:	d143      	bne.n	80086fe <_malloc_r+0xd6>
 8008676:	2c00      	cmp	r4, #0
 8008678:	d04b      	beq.n	8008712 <_malloc_r+0xea>
 800867a:	6823      	ldr	r3, [r4, #0]
 800867c:	4639      	mov	r1, r7
 800867e:	4630      	mov	r0, r6
 8008680:	eb04 0903 	add.w	r9, r4, r3
 8008684:	f001 fdc2 	bl	800a20c <_sbrk_r>
 8008688:	4581      	cmp	r9, r0
 800868a:	d142      	bne.n	8008712 <_malloc_r+0xea>
 800868c:	6821      	ldr	r1, [r4, #0]
 800868e:	1a6d      	subs	r5, r5, r1
 8008690:	4629      	mov	r1, r5
 8008692:	4630      	mov	r0, r6
 8008694:	f7ff ffa6 	bl	80085e4 <sbrk_aligned>
 8008698:	3001      	adds	r0, #1
 800869a:	d03a      	beq.n	8008712 <_malloc_r+0xea>
 800869c:	6823      	ldr	r3, [r4, #0]
 800869e:	442b      	add	r3, r5
 80086a0:	6023      	str	r3, [r4, #0]
 80086a2:	f8d8 3000 	ldr.w	r3, [r8]
 80086a6:	685a      	ldr	r2, [r3, #4]
 80086a8:	bb62      	cbnz	r2, 8008704 <_malloc_r+0xdc>
 80086aa:	f8c8 7000 	str.w	r7, [r8]
 80086ae:	e00f      	b.n	80086d0 <_malloc_r+0xa8>
 80086b0:	6822      	ldr	r2, [r4, #0]
 80086b2:	1b52      	subs	r2, r2, r5
 80086b4:	d420      	bmi.n	80086f8 <_malloc_r+0xd0>
 80086b6:	2a0b      	cmp	r2, #11
 80086b8:	d917      	bls.n	80086ea <_malloc_r+0xc2>
 80086ba:	1961      	adds	r1, r4, r5
 80086bc:	42a3      	cmp	r3, r4
 80086be:	6025      	str	r5, [r4, #0]
 80086c0:	bf18      	it	ne
 80086c2:	6059      	strne	r1, [r3, #4]
 80086c4:	6863      	ldr	r3, [r4, #4]
 80086c6:	bf08      	it	eq
 80086c8:	f8c8 1000 	streq.w	r1, [r8]
 80086cc:	5162      	str	r2, [r4, r5]
 80086ce:	604b      	str	r3, [r1, #4]
 80086d0:	4630      	mov	r0, r6
 80086d2:	f000 f82f 	bl	8008734 <__malloc_unlock>
 80086d6:	f104 000b 	add.w	r0, r4, #11
 80086da:	1d23      	adds	r3, r4, #4
 80086dc:	f020 0007 	bic.w	r0, r0, #7
 80086e0:	1ac2      	subs	r2, r0, r3
 80086e2:	bf1c      	itt	ne
 80086e4:	1a1b      	subne	r3, r3, r0
 80086e6:	50a3      	strne	r3, [r4, r2]
 80086e8:	e7af      	b.n	800864a <_malloc_r+0x22>
 80086ea:	6862      	ldr	r2, [r4, #4]
 80086ec:	42a3      	cmp	r3, r4
 80086ee:	bf0c      	ite	eq
 80086f0:	f8c8 2000 	streq.w	r2, [r8]
 80086f4:	605a      	strne	r2, [r3, #4]
 80086f6:	e7eb      	b.n	80086d0 <_malloc_r+0xa8>
 80086f8:	4623      	mov	r3, r4
 80086fa:	6864      	ldr	r4, [r4, #4]
 80086fc:	e7ae      	b.n	800865c <_malloc_r+0x34>
 80086fe:	463c      	mov	r4, r7
 8008700:	687f      	ldr	r7, [r7, #4]
 8008702:	e7b6      	b.n	8008672 <_malloc_r+0x4a>
 8008704:	461a      	mov	r2, r3
 8008706:	685b      	ldr	r3, [r3, #4]
 8008708:	42a3      	cmp	r3, r4
 800870a:	d1fb      	bne.n	8008704 <_malloc_r+0xdc>
 800870c:	2300      	movs	r3, #0
 800870e:	6053      	str	r3, [r2, #4]
 8008710:	e7de      	b.n	80086d0 <_malloc_r+0xa8>
 8008712:	230c      	movs	r3, #12
 8008714:	6033      	str	r3, [r6, #0]
 8008716:	4630      	mov	r0, r6
 8008718:	f000 f80c 	bl	8008734 <__malloc_unlock>
 800871c:	e794      	b.n	8008648 <_malloc_r+0x20>
 800871e:	6005      	str	r5, [r0, #0]
 8008720:	e7d6      	b.n	80086d0 <_malloc_r+0xa8>
 8008722:	bf00      	nop
 8008724:	200043c4 	.word	0x200043c4

08008728 <__malloc_lock>:
 8008728:	4801      	ldr	r0, [pc, #4]	@ (8008730 <__malloc_lock+0x8>)
 800872a:	f7ff b8a4 	b.w	8007876 <__retarget_lock_acquire_recursive>
 800872e:	bf00      	nop
 8008730:	200043bc 	.word	0x200043bc

08008734 <__malloc_unlock>:
 8008734:	4801      	ldr	r0, [pc, #4]	@ (800873c <__malloc_unlock+0x8>)
 8008736:	f7ff b89f 	b.w	8007878 <__retarget_lock_release_recursive>
 800873a:	bf00      	nop
 800873c:	200043bc 	.word	0x200043bc

08008740 <_Balloc>:
 8008740:	b570      	push	{r4, r5, r6, lr}
 8008742:	69c6      	ldr	r6, [r0, #28]
 8008744:	4604      	mov	r4, r0
 8008746:	460d      	mov	r5, r1
 8008748:	b976      	cbnz	r6, 8008768 <_Balloc+0x28>
 800874a:	2010      	movs	r0, #16
 800874c:	f7ff ff42 	bl	80085d4 <malloc>
 8008750:	4602      	mov	r2, r0
 8008752:	61e0      	str	r0, [r4, #28]
 8008754:	b920      	cbnz	r0, 8008760 <_Balloc+0x20>
 8008756:	4b18      	ldr	r3, [pc, #96]	@ (80087b8 <_Balloc+0x78>)
 8008758:	4818      	ldr	r0, [pc, #96]	@ (80087bc <_Balloc+0x7c>)
 800875a:	216b      	movs	r1, #107	@ 0x6b
 800875c:	f001 fd70 	bl	800a240 <__assert_func>
 8008760:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008764:	6006      	str	r6, [r0, #0]
 8008766:	60c6      	str	r6, [r0, #12]
 8008768:	69e6      	ldr	r6, [r4, #28]
 800876a:	68f3      	ldr	r3, [r6, #12]
 800876c:	b183      	cbz	r3, 8008790 <_Balloc+0x50>
 800876e:	69e3      	ldr	r3, [r4, #28]
 8008770:	68db      	ldr	r3, [r3, #12]
 8008772:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008776:	b9b8      	cbnz	r0, 80087a8 <_Balloc+0x68>
 8008778:	2101      	movs	r1, #1
 800877a:	fa01 f605 	lsl.w	r6, r1, r5
 800877e:	1d72      	adds	r2, r6, #5
 8008780:	0092      	lsls	r2, r2, #2
 8008782:	4620      	mov	r0, r4
 8008784:	f001 fd7a 	bl	800a27c <_calloc_r>
 8008788:	b160      	cbz	r0, 80087a4 <_Balloc+0x64>
 800878a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800878e:	e00e      	b.n	80087ae <_Balloc+0x6e>
 8008790:	2221      	movs	r2, #33	@ 0x21
 8008792:	2104      	movs	r1, #4
 8008794:	4620      	mov	r0, r4
 8008796:	f001 fd71 	bl	800a27c <_calloc_r>
 800879a:	69e3      	ldr	r3, [r4, #28]
 800879c:	60f0      	str	r0, [r6, #12]
 800879e:	68db      	ldr	r3, [r3, #12]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d1e4      	bne.n	800876e <_Balloc+0x2e>
 80087a4:	2000      	movs	r0, #0
 80087a6:	bd70      	pop	{r4, r5, r6, pc}
 80087a8:	6802      	ldr	r2, [r0, #0]
 80087aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80087ae:	2300      	movs	r3, #0
 80087b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80087b4:	e7f7      	b.n	80087a6 <_Balloc+0x66>
 80087b6:	bf00      	nop
 80087b8:	0800b02a 	.word	0x0800b02a
 80087bc:	0800b0aa 	.word	0x0800b0aa

080087c0 <_Bfree>:
 80087c0:	b570      	push	{r4, r5, r6, lr}
 80087c2:	69c6      	ldr	r6, [r0, #28]
 80087c4:	4605      	mov	r5, r0
 80087c6:	460c      	mov	r4, r1
 80087c8:	b976      	cbnz	r6, 80087e8 <_Bfree+0x28>
 80087ca:	2010      	movs	r0, #16
 80087cc:	f7ff ff02 	bl	80085d4 <malloc>
 80087d0:	4602      	mov	r2, r0
 80087d2:	61e8      	str	r0, [r5, #28]
 80087d4:	b920      	cbnz	r0, 80087e0 <_Bfree+0x20>
 80087d6:	4b09      	ldr	r3, [pc, #36]	@ (80087fc <_Bfree+0x3c>)
 80087d8:	4809      	ldr	r0, [pc, #36]	@ (8008800 <_Bfree+0x40>)
 80087da:	218f      	movs	r1, #143	@ 0x8f
 80087dc:	f001 fd30 	bl	800a240 <__assert_func>
 80087e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80087e4:	6006      	str	r6, [r0, #0]
 80087e6:	60c6      	str	r6, [r0, #12]
 80087e8:	b13c      	cbz	r4, 80087fa <_Bfree+0x3a>
 80087ea:	69eb      	ldr	r3, [r5, #28]
 80087ec:	6862      	ldr	r2, [r4, #4]
 80087ee:	68db      	ldr	r3, [r3, #12]
 80087f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80087f4:	6021      	str	r1, [r4, #0]
 80087f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80087fa:	bd70      	pop	{r4, r5, r6, pc}
 80087fc:	0800b02a 	.word	0x0800b02a
 8008800:	0800b0aa 	.word	0x0800b0aa

08008804 <__multadd>:
 8008804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008808:	690d      	ldr	r5, [r1, #16]
 800880a:	4607      	mov	r7, r0
 800880c:	460c      	mov	r4, r1
 800880e:	461e      	mov	r6, r3
 8008810:	f101 0c14 	add.w	ip, r1, #20
 8008814:	2000      	movs	r0, #0
 8008816:	f8dc 3000 	ldr.w	r3, [ip]
 800881a:	b299      	uxth	r1, r3
 800881c:	fb02 6101 	mla	r1, r2, r1, r6
 8008820:	0c1e      	lsrs	r6, r3, #16
 8008822:	0c0b      	lsrs	r3, r1, #16
 8008824:	fb02 3306 	mla	r3, r2, r6, r3
 8008828:	b289      	uxth	r1, r1
 800882a:	3001      	adds	r0, #1
 800882c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008830:	4285      	cmp	r5, r0
 8008832:	f84c 1b04 	str.w	r1, [ip], #4
 8008836:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800883a:	dcec      	bgt.n	8008816 <__multadd+0x12>
 800883c:	b30e      	cbz	r6, 8008882 <__multadd+0x7e>
 800883e:	68a3      	ldr	r3, [r4, #8]
 8008840:	42ab      	cmp	r3, r5
 8008842:	dc19      	bgt.n	8008878 <__multadd+0x74>
 8008844:	6861      	ldr	r1, [r4, #4]
 8008846:	4638      	mov	r0, r7
 8008848:	3101      	adds	r1, #1
 800884a:	f7ff ff79 	bl	8008740 <_Balloc>
 800884e:	4680      	mov	r8, r0
 8008850:	b928      	cbnz	r0, 800885e <__multadd+0x5a>
 8008852:	4602      	mov	r2, r0
 8008854:	4b0c      	ldr	r3, [pc, #48]	@ (8008888 <__multadd+0x84>)
 8008856:	480d      	ldr	r0, [pc, #52]	@ (800888c <__multadd+0x88>)
 8008858:	21ba      	movs	r1, #186	@ 0xba
 800885a:	f001 fcf1 	bl	800a240 <__assert_func>
 800885e:	6922      	ldr	r2, [r4, #16]
 8008860:	3202      	adds	r2, #2
 8008862:	f104 010c 	add.w	r1, r4, #12
 8008866:	0092      	lsls	r2, r2, #2
 8008868:	300c      	adds	r0, #12
 800886a:	f7ff f806 	bl	800787a <memcpy>
 800886e:	4621      	mov	r1, r4
 8008870:	4638      	mov	r0, r7
 8008872:	f7ff ffa5 	bl	80087c0 <_Bfree>
 8008876:	4644      	mov	r4, r8
 8008878:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800887c:	3501      	adds	r5, #1
 800887e:	615e      	str	r6, [r3, #20]
 8008880:	6125      	str	r5, [r4, #16]
 8008882:	4620      	mov	r0, r4
 8008884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008888:	0800b099 	.word	0x0800b099
 800888c:	0800b0aa 	.word	0x0800b0aa

08008890 <__s2b>:
 8008890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008894:	460c      	mov	r4, r1
 8008896:	4615      	mov	r5, r2
 8008898:	461f      	mov	r7, r3
 800889a:	2209      	movs	r2, #9
 800889c:	3308      	adds	r3, #8
 800889e:	4606      	mov	r6, r0
 80088a0:	fb93 f3f2 	sdiv	r3, r3, r2
 80088a4:	2100      	movs	r1, #0
 80088a6:	2201      	movs	r2, #1
 80088a8:	429a      	cmp	r2, r3
 80088aa:	db09      	blt.n	80088c0 <__s2b+0x30>
 80088ac:	4630      	mov	r0, r6
 80088ae:	f7ff ff47 	bl	8008740 <_Balloc>
 80088b2:	b940      	cbnz	r0, 80088c6 <__s2b+0x36>
 80088b4:	4602      	mov	r2, r0
 80088b6:	4b19      	ldr	r3, [pc, #100]	@ (800891c <__s2b+0x8c>)
 80088b8:	4819      	ldr	r0, [pc, #100]	@ (8008920 <__s2b+0x90>)
 80088ba:	21d3      	movs	r1, #211	@ 0xd3
 80088bc:	f001 fcc0 	bl	800a240 <__assert_func>
 80088c0:	0052      	lsls	r2, r2, #1
 80088c2:	3101      	adds	r1, #1
 80088c4:	e7f0      	b.n	80088a8 <__s2b+0x18>
 80088c6:	9b08      	ldr	r3, [sp, #32]
 80088c8:	6143      	str	r3, [r0, #20]
 80088ca:	2d09      	cmp	r5, #9
 80088cc:	f04f 0301 	mov.w	r3, #1
 80088d0:	6103      	str	r3, [r0, #16]
 80088d2:	dd16      	ble.n	8008902 <__s2b+0x72>
 80088d4:	f104 0909 	add.w	r9, r4, #9
 80088d8:	46c8      	mov	r8, r9
 80088da:	442c      	add	r4, r5
 80088dc:	f818 3b01 	ldrb.w	r3, [r8], #1
 80088e0:	4601      	mov	r1, r0
 80088e2:	3b30      	subs	r3, #48	@ 0x30
 80088e4:	220a      	movs	r2, #10
 80088e6:	4630      	mov	r0, r6
 80088e8:	f7ff ff8c 	bl	8008804 <__multadd>
 80088ec:	45a0      	cmp	r8, r4
 80088ee:	d1f5      	bne.n	80088dc <__s2b+0x4c>
 80088f0:	f1a5 0408 	sub.w	r4, r5, #8
 80088f4:	444c      	add	r4, r9
 80088f6:	1b2d      	subs	r5, r5, r4
 80088f8:	1963      	adds	r3, r4, r5
 80088fa:	42bb      	cmp	r3, r7
 80088fc:	db04      	blt.n	8008908 <__s2b+0x78>
 80088fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008902:	340a      	adds	r4, #10
 8008904:	2509      	movs	r5, #9
 8008906:	e7f6      	b.n	80088f6 <__s2b+0x66>
 8008908:	f814 3b01 	ldrb.w	r3, [r4], #1
 800890c:	4601      	mov	r1, r0
 800890e:	3b30      	subs	r3, #48	@ 0x30
 8008910:	220a      	movs	r2, #10
 8008912:	4630      	mov	r0, r6
 8008914:	f7ff ff76 	bl	8008804 <__multadd>
 8008918:	e7ee      	b.n	80088f8 <__s2b+0x68>
 800891a:	bf00      	nop
 800891c:	0800b099 	.word	0x0800b099
 8008920:	0800b0aa 	.word	0x0800b0aa

08008924 <__hi0bits>:
 8008924:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008928:	4603      	mov	r3, r0
 800892a:	bf36      	itet	cc
 800892c:	0403      	lslcc	r3, r0, #16
 800892e:	2000      	movcs	r0, #0
 8008930:	2010      	movcc	r0, #16
 8008932:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008936:	bf3c      	itt	cc
 8008938:	021b      	lslcc	r3, r3, #8
 800893a:	3008      	addcc	r0, #8
 800893c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008940:	bf3c      	itt	cc
 8008942:	011b      	lslcc	r3, r3, #4
 8008944:	3004      	addcc	r0, #4
 8008946:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800894a:	bf3c      	itt	cc
 800894c:	009b      	lslcc	r3, r3, #2
 800894e:	3002      	addcc	r0, #2
 8008950:	2b00      	cmp	r3, #0
 8008952:	db05      	blt.n	8008960 <__hi0bits+0x3c>
 8008954:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008958:	f100 0001 	add.w	r0, r0, #1
 800895c:	bf08      	it	eq
 800895e:	2020      	moveq	r0, #32
 8008960:	4770      	bx	lr

08008962 <__lo0bits>:
 8008962:	6803      	ldr	r3, [r0, #0]
 8008964:	4602      	mov	r2, r0
 8008966:	f013 0007 	ands.w	r0, r3, #7
 800896a:	d00b      	beq.n	8008984 <__lo0bits+0x22>
 800896c:	07d9      	lsls	r1, r3, #31
 800896e:	d421      	bmi.n	80089b4 <__lo0bits+0x52>
 8008970:	0798      	lsls	r0, r3, #30
 8008972:	bf49      	itett	mi
 8008974:	085b      	lsrmi	r3, r3, #1
 8008976:	089b      	lsrpl	r3, r3, #2
 8008978:	2001      	movmi	r0, #1
 800897a:	6013      	strmi	r3, [r2, #0]
 800897c:	bf5c      	itt	pl
 800897e:	6013      	strpl	r3, [r2, #0]
 8008980:	2002      	movpl	r0, #2
 8008982:	4770      	bx	lr
 8008984:	b299      	uxth	r1, r3
 8008986:	b909      	cbnz	r1, 800898c <__lo0bits+0x2a>
 8008988:	0c1b      	lsrs	r3, r3, #16
 800898a:	2010      	movs	r0, #16
 800898c:	b2d9      	uxtb	r1, r3
 800898e:	b909      	cbnz	r1, 8008994 <__lo0bits+0x32>
 8008990:	3008      	adds	r0, #8
 8008992:	0a1b      	lsrs	r3, r3, #8
 8008994:	0719      	lsls	r1, r3, #28
 8008996:	bf04      	itt	eq
 8008998:	091b      	lsreq	r3, r3, #4
 800899a:	3004      	addeq	r0, #4
 800899c:	0799      	lsls	r1, r3, #30
 800899e:	bf04      	itt	eq
 80089a0:	089b      	lsreq	r3, r3, #2
 80089a2:	3002      	addeq	r0, #2
 80089a4:	07d9      	lsls	r1, r3, #31
 80089a6:	d403      	bmi.n	80089b0 <__lo0bits+0x4e>
 80089a8:	085b      	lsrs	r3, r3, #1
 80089aa:	f100 0001 	add.w	r0, r0, #1
 80089ae:	d003      	beq.n	80089b8 <__lo0bits+0x56>
 80089b0:	6013      	str	r3, [r2, #0]
 80089b2:	4770      	bx	lr
 80089b4:	2000      	movs	r0, #0
 80089b6:	4770      	bx	lr
 80089b8:	2020      	movs	r0, #32
 80089ba:	4770      	bx	lr

080089bc <__i2b>:
 80089bc:	b510      	push	{r4, lr}
 80089be:	460c      	mov	r4, r1
 80089c0:	2101      	movs	r1, #1
 80089c2:	f7ff febd 	bl	8008740 <_Balloc>
 80089c6:	4602      	mov	r2, r0
 80089c8:	b928      	cbnz	r0, 80089d6 <__i2b+0x1a>
 80089ca:	4b05      	ldr	r3, [pc, #20]	@ (80089e0 <__i2b+0x24>)
 80089cc:	4805      	ldr	r0, [pc, #20]	@ (80089e4 <__i2b+0x28>)
 80089ce:	f240 1145 	movw	r1, #325	@ 0x145
 80089d2:	f001 fc35 	bl	800a240 <__assert_func>
 80089d6:	2301      	movs	r3, #1
 80089d8:	6144      	str	r4, [r0, #20]
 80089da:	6103      	str	r3, [r0, #16]
 80089dc:	bd10      	pop	{r4, pc}
 80089de:	bf00      	nop
 80089e0:	0800b099 	.word	0x0800b099
 80089e4:	0800b0aa 	.word	0x0800b0aa

080089e8 <__multiply>:
 80089e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089ec:	4614      	mov	r4, r2
 80089ee:	690a      	ldr	r2, [r1, #16]
 80089f0:	6923      	ldr	r3, [r4, #16]
 80089f2:	429a      	cmp	r2, r3
 80089f4:	bfa8      	it	ge
 80089f6:	4623      	movge	r3, r4
 80089f8:	460f      	mov	r7, r1
 80089fa:	bfa4      	itt	ge
 80089fc:	460c      	movge	r4, r1
 80089fe:	461f      	movge	r7, r3
 8008a00:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008a04:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008a08:	68a3      	ldr	r3, [r4, #8]
 8008a0a:	6861      	ldr	r1, [r4, #4]
 8008a0c:	eb0a 0609 	add.w	r6, sl, r9
 8008a10:	42b3      	cmp	r3, r6
 8008a12:	b085      	sub	sp, #20
 8008a14:	bfb8      	it	lt
 8008a16:	3101      	addlt	r1, #1
 8008a18:	f7ff fe92 	bl	8008740 <_Balloc>
 8008a1c:	b930      	cbnz	r0, 8008a2c <__multiply+0x44>
 8008a1e:	4602      	mov	r2, r0
 8008a20:	4b44      	ldr	r3, [pc, #272]	@ (8008b34 <__multiply+0x14c>)
 8008a22:	4845      	ldr	r0, [pc, #276]	@ (8008b38 <__multiply+0x150>)
 8008a24:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008a28:	f001 fc0a 	bl	800a240 <__assert_func>
 8008a2c:	f100 0514 	add.w	r5, r0, #20
 8008a30:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008a34:	462b      	mov	r3, r5
 8008a36:	2200      	movs	r2, #0
 8008a38:	4543      	cmp	r3, r8
 8008a3a:	d321      	bcc.n	8008a80 <__multiply+0x98>
 8008a3c:	f107 0114 	add.w	r1, r7, #20
 8008a40:	f104 0214 	add.w	r2, r4, #20
 8008a44:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008a48:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008a4c:	9302      	str	r3, [sp, #8]
 8008a4e:	1b13      	subs	r3, r2, r4
 8008a50:	3b15      	subs	r3, #21
 8008a52:	f023 0303 	bic.w	r3, r3, #3
 8008a56:	3304      	adds	r3, #4
 8008a58:	f104 0715 	add.w	r7, r4, #21
 8008a5c:	42ba      	cmp	r2, r7
 8008a5e:	bf38      	it	cc
 8008a60:	2304      	movcc	r3, #4
 8008a62:	9301      	str	r3, [sp, #4]
 8008a64:	9b02      	ldr	r3, [sp, #8]
 8008a66:	9103      	str	r1, [sp, #12]
 8008a68:	428b      	cmp	r3, r1
 8008a6a:	d80c      	bhi.n	8008a86 <__multiply+0x9e>
 8008a6c:	2e00      	cmp	r6, #0
 8008a6e:	dd03      	ble.n	8008a78 <__multiply+0x90>
 8008a70:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d05b      	beq.n	8008b30 <__multiply+0x148>
 8008a78:	6106      	str	r6, [r0, #16]
 8008a7a:	b005      	add	sp, #20
 8008a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a80:	f843 2b04 	str.w	r2, [r3], #4
 8008a84:	e7d8      	b.n	8008a38 <__multiply+0x50>
 8008a86:	f8b1 a000 	ldrh.w	sl, [r1]
 8008a8a:	f1ba 0f00 	cmp.w	sl, #0
 8008a8e:	d024      	beq.n	8008ada <__multiply+0xf2>
 8008a90:	f104 0e14 	add.w	lr, r4, #20
 8008a94:	46a9      	mov	r9, r5
 8008a96:	f04f 0c00 	mov.w	ip, #0
 8008a9a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008a9e:	f8d9 3000 	ldr.w	r3, [r9]
 8008aa2:	fa1f fb87 	uxth.w	fp, r7
 8008aa6:	b29b      	uxth	r3, r3
 8008aa8:	fb0a 330b 	mla	r3, sl, fp, r3
 8008aac:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008ab0:	f8d9 7000 	ldr.w	r7, [r9]
 8008ab4:	4463      	add	r3, ip
 8008ab6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008aba:	fb0a c70b 	mla	r7, sl, fp, ip
 8008abe:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008ac2:	b29b      	uxth	r3, r3
 8008ac4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008ac8:	4572      	cmp	r2, lr
 8008aca:	f849 3b04 	str.w	r3, [r9], #4
 8008ace:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008ad2:	d8e2      	bhi.n	8008a9a <__multiply+0xb2>
 8008ad4:	9b01      	ldr	r3, [sp, #4]
 8008ad6:	f845 c003 	str.w	ip, [r5, r3]
 8008ada:	9b03      	ldr	r3, [sp, #12]
 8008adc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008ae0:	3104      	adds	r1, #4
 8008ae2:	f1b9 0f00 	cmp.w	r9, #0
 8008ae6:	d021      	beq.n	8008b2c <__multiply+0x144>
 8008ae8:	682b      	ldr	r3, [r5, #0]
 8008aea:	f104 0c14 	add.w	ip, r4, #20
 8008aee:	46ae      	mov	lr, r5
 8008af0:	f04f 0a00 	mov.w	sl, #0
 8008af4:	f8bc b000 	ldrh.w	fp, [ip]
 8008af8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008afc:	fb09 770b 	mla	r7, r9, fp, r7
 8008b00:	4457      	add	r7, sl
 8008b02:	b29b      	uxth	r3, r3
 8008b04:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008b08:	f84e 3b04 	str.w	r3, [lr], #4
 8008b0c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008b10:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008b14:	f8be 3000 	ldrh.w	r3, [lr]
 8008b18:	fb09 330a 	mla	r3, r9, sl, r3
 8008b1c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008b20:	4562      	cmp	r2, ip
 8008b22:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008b26:	d8e5      	bhi.n	8008af4 <__multiply+0x10c>
 8008b28:	9f01      	ldr	r7, [sp, #4]
 8008b2a:	51eb      	str	r3, [r5, r7]
 8008b2c:	3504      	adds	r5, #4
 8008b2e:	e799      	b.n	8008a64 <__multiply+0x7c>
 8008b30:	3e01      	subs	r6, #1
 8008b32:	e79b      	b.n	8008a6c <__multiply+0x84>
 8008b34:	0800b099 	.word	0x0800b099
 8008b38:	0800b0aa 	.word	0x0800b0aa

08008b3c <__pow5mult>:
 8008b3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b40:	4615      	mov	r5, r2
 8008b42:	f012 0203 	ands.w	r2, r2, #3
 8008b46:	4607      	mov	r7, r0
 8008b48:	460e      	mov	r6, r1
 8008b4a:	d007      	beq.n	8008b5c <__pow5mult+0x20>
 8008b4c:	4c25      	ldr	r4, [pc, #148]	@ (8008be4 <__pow5mult+0xa8>)
 8008b4e:	3a01      	subs	r2, #1
 8008b50:	2300      	movs	r3, #0
 8008b52:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008b56:	f7ff fe55 	bl	8008804 <__multadd>
 8008b5a:	4606      	mov	r6, r0
 8008b5c:	10ad      	asrs	r5, r5, #2
 8008b5e:	d03d      	beq.n	8008bdc <__pow5mult+0xa0>
 8008b60:	69fc      	ldr	r4, [r7, #28]
 8008b62:	b97c      	cbnz	r4, 8008b84 <__pow5mult+0x48>
 8008b64:	2010      	movs	r0, #16
 8008b66:	f7ff fd35 	bl	80085d4 <malloc>
 8008b6a:	4602      	mov	r2, r0
 8008b6c:	61f8      	str	r0, [r7, #28]
 8008b6e:	b928      	cbnz	r0, 8008b7c <__pow5mult+0x40>
 8008b70:	4b1d      	ldr	r3, [pc, #116]	@ (8008be8 <__pow5mult+0xac>)
 8008b72:	481e      	ldr	r0, [pc, #120]	@ (8008bec <__pow5mult+0xb0>)
 8008b74:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008b78:	f001 fb62 	bl	800a240 <__assert_func>
 8008b7c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008b80:	6004      	str	r4, [r0, #0]
 8008b82:	60c4      	str	r4, [r0, #12]
 8008b84:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008b88:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008b8c:	b94c      	cbnz	r4, 8008ba2 <__pow5mult+0x66>
 8008b8e:	f240 2171 	movw	r1, #625	@ 0x271
 8008b92:	4638      	mov	r0, r7
 8008b94:	f7ff ff12 	bl	80089bc <__i2b>
 8008b98:	2300      	movs	r3, #0
 8008b9a:	f8c8 0008 	str.w	r0, [r8, #8]
 8008b9e:	4604      	mov	r4, r0
 8008ba0:	6003      	str	r3, [r0, #0]
 8008ba2:	f04f 0900 	mov.w	r9, #0
 8008ba6:	07eb      	lsls	r3, r5, #31
 8008ba8:	d50a      	bpl.n	8008bc0 <__pow5mult+0x84>
 8008baa:	4631      	mov	r1, r6
 8008bac:	4622      	mov	r2, r4
 8008bae:	4638      	mov	r0, r7
 8008bb0:	f7ff ff1a 	bl	80089e8 <__multiply>
 8008bb4:	4631      	mov	r1, r6
 8008bb6:	4680      	mov	r8, r0
 8008bb8:	4638      	mov	r0, r7
 8008bba:	f7ff fe01 	bl	80087c0 <_Bfree>
 8008bbe:	4646      	mov	r6, r8
 8008bc0:	106d      	asrs	r5, r5, #1
 8008bc2:	d00b      	beq.n	8008bdc <__pow5mult+0xa0>
 8008bc4:	6820      	ldr	r0, [r4, #0]
 8008bc6:	b938      	cbnz	r0, 8008bd8 <__pow5mult+0x9c>
 8008bc8:	4622      	mov	r2, r4
 8008bca:	4621      	mov	r1, r4
 8008bcc:	4638      	mov	r0, r7
 8008bce:	f7ff ff0b 	bl	80089e8 <__multiply>
 8008bd2:	6020      	str	r0, [r4, #0]
 8008bd4:	f8c0 9000 	str.w	r9, [r0]
 8008bd8:	4604      	mov	r4, r0
 8008bda:	e7e4      	b.n	8008ba6 <__pow5mult+0x6a>
 8008bdc:	4630      	mov	r0, r6
 8008bde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008be2:	bf00      	nop
 8008be4:	0800b104 	.word	0x0800b104
 8008be8:	0800b02a 	.word	0x0800b02a
 8008bec:	0800b0aa 	.word	0x0800b0aa

08008bf0 <__lshift>:
 8008bf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bf4:	460c      	mov	r4, r1
 8008bf6:	6849      	ldr	r1, [r1, #4]
 8008bf8:	6923      	ldr	r3, [r4, #16]
 8008bfa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008bfe:	68a3      	ldr	r3, [r4, #8]
 8008c00:	4607      	mov	r7, r0
 8008c02:	4691      	mov	r9, r2
 8008c04:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008c08:	f108 0601 	add.w	r6, r8, #1
 8008c0c:	42b3      	cmp	r3, r6
 8008c0e:	db0b      	blt.n	8008c28 <__lshift+0x38>
 8008c10:	4638      	mov	r0, r7
 8008c12:	f7ff fd95 	bl	8008740 <_Balloc>
 8008c16:	4605      	mov	r5, r0
 8008c18:	b948      	cbnz	r0, 8008c2e <__lshift+0x3e>
 8008c1a:	4602      	mov	r2, r0
 8008c1c:	4b28      	ldr	r3, [pc, #160]	@ (8008cc0 <__lshift+0xd0>)
 8008c1e:	4829      	ldr	r0, [pc, #164]	@ (8008cc4 <__lshift+0xd4>)
 8008c20:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008c24:	f001 fb0c 	bl	800a240 <__assert_func>
 8008c28:	3101      	adds	r1, #1
 8008c2a:	005b      	lsls	r3, r3, #1
 8008c2c:	e7ee      	b.n	8008c0c <__lshift+0x1c>
 8008c2e:	2300      	movs	r3, #0
 8008c30:	f100 0114 	add.w	r1, r0, #20
 8008c34:	f100 0210 	add.w	r2, r0, #16
 8008c38:	4618      	mov	r0, r3
 8008c3a:	4553      	cmp	r3, sl
 8008c3c:	db33      	blt.n	8008ca6 <__lshift+0xb6>
 8008c3e:	6920      	ldr	r0, [r4, #16]
 8008c40:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008c44:	f104 0314 	add.w	r3, r4, #20
 8008c48:	f019 091f 	ands.w	r9, r9, #31
 8008c4c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008c50:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008c54:	d02b      	beq.n	8008cae <__lshift+0xbe>
 8008c56:	f1c9 0e20 	rsb	lr, r9, #32
 8008c5a:	468a      	mov	sl, r1
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	6818      	ldr	r0, [r3, #0]
 8008c60:	fa00 f009 	lsl.w	r0, r0, r9
 8008c64:	4310      	orrs	r0, r2
 8008c66:	f84a 0b04 	str.w	r0, [sl], #4
 8008c6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c6e:	459c      	cmp	ip, r3
 8008c70:	fa22 f20e 	lsr.w	r2, r2, lr
 8008c74:	d8f3      	bhi.n	8008c5e <__lshift+0x6e>
 8008c76:	ebac 0304 	sub.w	r3, ip, r4
 8008c7a:	3b15      	subs	r3, #21
 8008c7c:	f023 0303 	bic.w	r3, r3, #3
 8008c80:	3304      	adds	r3, #4
 8008c82:	f104 0015 	add.w	r0, r4, #21
 8008c86:	4584      	cmp	ip, r0
 8008c88:	bf38      	it	cc
 8008c8a:	2304      	movcc	r3, #4
 8008c8c:	50ca      	str	r2, [r1, r3]
 8008c8e:	b10a      	cbz	r2, 8008c94 <__lshift+0xa4>
 8008c90:	f108 0602 	add.w	r6, r8, #2
 8008c94:	3e01      	subs	r6, #1
 8008c96:	4638      	mov	r0, r7
 8008c98:	612e      	str	r6, [r5, #16]
 8008c9a:	4621      	mov	r1, r4
 8008c9c:	f7ff fd90 	bl	80087c0 <_Bfree>
 8008ca0:	4628      	mov	r0, r5
 8008ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ca6:	f842 0f04 	str.w	r0, [r2, #4]!
 8008caa:	3301      	adds	r3, #1
 8008cac:	e7c5      	b.n	8008c3a <__lshift+0x4a>
 8008cae:	3904      	subs	r1, #4
 8008cb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cb4:	f841 2f04 	str.w	r2, [r1, #4]!
 8008cb8:	459c      	cmp	ip, r3
 8008cba:	d8f9      	bhi.n	8008cb0 <__lshift+0xc0>
 8008cbc:	e7ea      	b.n	8008c94 <__lshift+0xa4>
 8008cbe:	bf00      	nop
 8008cc0:	0800b099 	.word	0x0800b099
 8008cc4:	0800b0aa 	.word	0x0800b0aa

08008cc8 <__mcmp>:
 8008cc8:	690a      	ldr	r2, [r1, #16]
 8008cca:	4603      	mov	r3, r0
 8008ccc:	6900      	ldr	r0, [r0, #16]
 8008cce:	1a80      	subs	r0, r0, r2
 8008cd0:	b530      	push	{r4, r5, lr}
 8008cd2:	d10e      	bne.n	8008cf2 <__mcmp+0x2a>
 8008cd4:	3314      	adds	r3, #20
 8008cd6:	3114      	adds	r1, #20
 8008cd8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008cdc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008ce0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008ce4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008ce8:	4295      	cmp	r5, r2
 8008cea:	d003      	beq.n	8008cf4 <__mcmp+0x2c>
 8008cec:	d205      	bcs.n	8008cfa <__mcmp+0x32>
 8008cee:	f04f 30ff 	mov.w	r0, #4294967295
 8008cf2:	bd30      	pop	{r4, r5, pc}
 8008cf4:	42a3      	cmp	r3, r4
 8008cf6:	d3f3      	bcc.n	8008ce0 <__mcmp+0x18>
 8008cf8:	e7fb      	b.n	8008cf2 <__mcmp+0x2a>
 8008cfa:	2001      	movs	r0, #1
 8008cfc:	e7f9      	b.n	8008cf2 <__mcmp+0x2a>
	...

08008d00 <__mdiff>:
 8008d00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d04:	4689      	mov	r9, r1
 8008d06:	4606      	mov	r6, r0
 8008d08:	4611      	mov	r1, r2
 8008d0a:	4648      	mov	r0, r9
 8008d0c:	4614      	mov	r4, r2
 8008d0e:	f7ff ffdb 	bl	8008cc8 <__mcmp>
 8008d12:	1e05      	subs	r5, r0, #0
 8008d14:	d112      	bne.n	8008d3c <__mdiff+0x3c>
 8008d16:	4629      	mov	r1, r5
 8008d18:	4630      	mov	r0, r6
 8008d1a:	f7ff fd11 	bl	8008740 <_Balloc>
 8008d1e:	4602      	mov	r2, r0
 8008d20:	b928      	cbnz	r0, 8008d2e <__mdiff+0x2e>
 8008d22:	4b3f      	ldr	r3, [pc, #252]	@ (8008e20 <__mdiff+0x120>)
 8008d24:	f240 2137 	movw	r1, #567	@ 0x237
 8008d28:	483e      	ldr	r0, [pc, #248]	@ (8008e24 <__mdiff+0x124>)
 8008d2a:	f001 fa89 	bl	800a240 <__assert_func>
 8008d2e:	2301      	movs	r3, #1
 8008d30:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008d34:	4610      	mov	r0, r2
 8008d36:	b003      	add	sp, #12
 8008d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d3c:	bfbc      	itt	lt
 8008d3e:	464b      	movlt	r3, r9
 8008d40:	46a1      	movlt	r9, r4
 8008d42:	4630      	mov	r0, r6
 8008d44:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008d48:	bfba      	itte	lt
 8008d4a:	461c      	movlt	r4, r3
 8008d4c:	2501      	movlt	r5, #1
 8008d4e:	2500      	movge	r5, #0
 8008d50:	f7ff fcf6 	bl	8008740 <_Balloc>
 8008d54:	4602      	mov	r2, r0
 8008d56:	b918      	cbnz	r0, 8008d60 <__mdiff+0x60>
 8008d58:	4b31      	ldr	r3, [pc, #196]	@ (8008e20 <__mdiff+0x120>)
 8008d5a:	f240 2145 	movw	r1, #581	@ 0x245
 8008d5e:	e7e3      	b.n	8008d28 <__mdiff+0x28>
 8008d60:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008d64:	6926      	ldr	r6, [r4, #16]
 8008d66:	60c5      	str	r5, [r0, #12]
 8008d68:	f109 0310 	add.w	r3, r9, #16
 8008d6c:	f109 0514 	add.w	r5, r9, #20
 8008d70:	f104 0e14 	add.w	lr, r4, #20
 8008d74:	f100 0b14 	add.w	fp, r0, #20
 8008d78:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008d7c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008d80:	9301      	str	r3, [sp, #4]
 8008d82:	46d9      	mov	r9, fp
 8008d84:	f04f 0c00 	mov.w	ip, #0
 8008d88:	9b01      	ldr	r3, [sp, #4]
 8008d8a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008d8e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008d92:	9301      	str	r3, [sp, #4]
 8008d94:	fa1f f38a 	uxth.w	r3, sl
 8008d98:	4619      	mov	r1, r3
 8008d9a:	b283      	uxth	r3, r0
 8008d9c:	1acb      	subs	r3, r1, r3
 8008d9e:	0c00      	lsrs	r0, r0, #16
 8008da0:	4463      	add	r3, ip
 8008da2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008da6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008daa:	b29b      	uxth	r3, r3
 8008dac:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008db0:	4576      	cmp	r6, lr
 8008db2:	f849 3b04 	str.w	r3, [r9], #4
 8008db6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008dba:	d8e5      	bhi.n	8008d88 <__mdiff+0x88>
 8008dbc:	1b33      	subs	r3, r6, r4
 8008dbe:	3b15      	subs	r3, #21
 8008dc0:	f023 0303 	bic.w	r3, r3, #3
 8008dc4:	3415      	adds	r4, #21
 8008dc6:	3304      	adds	r3, #4
 8008dc8:	42a6      	cmp	r6, r4
 8008dca:	bf38      	it	cc
 8008dcc:	2304      	movcc	r3, #4
 8008dce:	441d      	add	r5, r3
 8008dd0:	445b      	add	r3, fp
 8008dd2:	461e      	mov	r6, r3
 8008dd4:	462c      	mov	r4, r5
 8008dd6:	4544      	cmp	r4, r8
 8008dd8:	d30e      	bcc.n	8008df8 <__mdiff+0xf8>
 8008dda:	f108 0103 	add.w	r1, r8, #3
 8008dde:	1b49      	subs	r1, r1, r5
 8008de0:	f021 0103 	bic.w	r1, r1, #3
 8008de4:	3d03      	subs	r5, #3
 8008de6:	45a8      	cmp	r8, r5
 8008de8:	bf38      	it	cc
 8008dea:	2100      	movcc	r1, #0
 8008dec:	440b      	add	r3, r1
 8008dee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008df2:	b191      	cbz	r1, 8008e1a <__mdiff+0x11a>
 8008df4:	6117      	str	r7, [r2, #16]
 8008df6:	e79d      	b.n	8008d34 <__mdiff+0x34>
 8008df8:	f854 1b04 	ldr.w	r1, [r4], #4
 8008dfc:	46e6      	mov	lr, ip
 8008dfe:	0c08      	lsrs	r0, r1, #16
 8008e00:	fa1c fc81 	uxtah	ip, ip, r1
 8008e04:	4471      	add	r1, lr
 8008e06:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008e0a:	b289      	uxth	r1, r1
 8008e0c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008e10:	f846 1b04 	str.w	r1, [r6], #4
 8008e14:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008e18:	e7dd      	b.n	8008dd6 <__mdiff+0xd6>
 8008e1a:	3f01      	subs	r7, #1
 8008e1c:	e7e7      	b.n	8008dee <__mdiff+0xee>
 8008e1e:	bf00      	nop
 8008e20:	0800b099 	.word	0x0800b099
 8008e24:	0800b0aa 	.word	0x0800b0aa

08008e28 <__ulp>:
 8008e28:	b082      	sub	sp, #8
 8008e2a:	ed8d 0b00 	vstr	d0, [sp]
 8008e2e:	9a01      	ldr	r2, [sp, #4]
 8008e30:	4b0f      	ldr	r3, [pc, #60]	@ (8008e70 <__ulp+0x48>)
 8008e32:	4013      	ands	r3, r2
 8008e34:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	dc08      	bgt.n	8008e4e <__ulp+0x26>
 8008e3c:	425b      	negs	r3, r3
 8008e3e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008e42:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008e46:	da04      	bge.n	8008e52 <__ulp+0x2a>
 8008e48:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008e4c:	4113      	asrs	r3, r2
 8008e4e:	2200      	movs	r2, #0
 8008e50:	e008      	b.n	8008e64 <__ulp+0x3c>
 8008e52:	f1a2 0314 	sub.w	r3, r2, #20
 8008e56:	2b1e      	cmp	r3, #30
 8008e58:	bfda      	itte	le
 8008e5a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008e5e:	40da      	lsrle	r2, r3
 8008e60:	2201      	movgt	r2, #1
 8008e62:	2300      	movs	r3, #0
 8008e64:	4619      	mov	r1, r3
 8008e66:	4610      	mov	r0, r2
 8008e68:	ec41 0b10 	vmov	d0, r0, r1
 8008e6c:	b002      	add	sp, #8
 8008e6e:	4770      	bx	lr
 8008e70:	7ff00000 	.word	0x7ff00000

08008e74 <__b2d>:
 8008e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e78:	6906      	ldr	r6, [r0, #16]
 8008e7a:	f100 0814 	add.w	r8, r0, #20
 8008e7e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008e82:	1f37      	subs	r7, r6, #4
 8008e84:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008e88:	4610      	mov	r0, r2
 8008e8a:	f7ff fd4b 	bl	8008924 <__hi0bits>
 8008e8e:	f1c0 0320 	rsb	r3, r0, #32
 8008e92:	280a      	cmp	r0, #10
 8008e94:	600b      	str	r3, [r1, #0]
 8008e96:	491b      	ldr	r1, [pc, #108]	@ (8008f04 <__b2d+0x90>)
 8008e98:	dc15      	bgt.n	8008ec6 <__b2d+0x52>
 8008e9a:	f1c0 0c0b 	rsb	ip, r0, #11
 8008e9e:	fa22 f30c 	lsr.w	r3, r2, ip
 8008ea2:	45b8      	cmp	r8, r7
 8008ea4:	ea43 0501 	orr.w	r5, r3, r1
 8008ea8:	bf34      	ite	cc
 8008eaa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008eae:	2300      	movcs	r3, #0
 8008eb0:	3015      	adds	r0, #21
 8008eb2:	fa02 f000 	lsl.w	r0, r2, r0
 8008eb6:	fa23 f30c 	lsr.w	r3, r3, ip
 8008eba:	4303      	orrs	r3, r0
 8008ebc:	461c      	mov	r4, r3
 8008ebe:	ec45 4b10 	vmov	d0, r4, r5
 8008ec2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ec6:	45b8      	cmp	r8, r7
 8008ec8:	bf3a      	itte	cc
 8008eca:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008ece:	f1a6 0708 	subcc.w	r7, r6, #8
 8008ed2:	2300      	movcs	r3, #0
 8008ed4:	380b      	subs	r0, #11
 8008ed6:	d012      	beq.n	8008efe <__b2d+0x8a>
 8008ed8:	f1c0 0120 	rsb	r1, r0, #32
 8008edc:	fa23 f401 	lsr.w	r4, r3, r1
 8008ee0:	4082      	lsls	r2, r0
 8008ee2:	4322      	orrs	r2, r4
 8008ee4:	4547      	cmp	r7, r8
 8008ee6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8008eea:	bf8c      	ite	hi
 8008eec:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008ef0:	2200      	movls	r2, #0
 8008ef2:	4083      	lsls	r3, r0
 8008ef4:	40ca      	lsrs	r2, r1
 8008ef6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008efa:	4313      	orrs	r3, r2
 8008efc:	e7de      	b.n	8008ebc <__b2d+0x48>
 8008efe:	ea42 0501 	orr.w	r5, r2, r1
 8008f02:	e7db      	b.n	8008ebc <__b2d+0x48>
 8008f04:	3ff00000 	.word	0x3ff00000

08008f08 <__d2b>:
 8008f08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008f0c:	460f      	mov	r7, r1
 8008f0e:	2101      	movs	r1, #1
 8008f10:	ec59 8b10 	vmov	r8, r9, d0
 8008f14:	4616      	mov	r6, r2
 8008f16:	f7ff fc13 	bl	8008740 <_Balloc>
 8008f1a:	4604      	mov	r4, r0
 8008f1c:	b930      	cbnz	r0, 8008f2c <__d2b+0x24>
 8008f1e:	4602      	mov	r2, r0
 8008f20:	4b23      	ldr	r3, [pc, #140]	@ (8008fb0 <__d2b+0xa8>)
 8008f22:	4824      	ldr	r0, [pc, #144]	@ (8008fb4 <__d2b+0xac>)
 8008f24:	f240 310f 	movw	r1, #783	@ 0x30f
 8008f28:	f001 f98a 	bl	800a240 <__assert_func>
 8008f2c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008f30:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008f34:	b10d      	cbz	r5, 8008f3a <__d2b+0x32>
 8008f36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008f3a:	9301      	str	r3, [sp, #4]
 8008f3c:	f1b8 0300 	subs.w	r3, r8, #0
 8008f40:	d023      	beq.n	8008f8a <__d2b+0x82>
 8008f42:	4668      	mov	r0, sp
 8008f44:	9300      	str	r3, [sp, #0]
 8008f46:	f7ff fd0c 	bl	8008962 <__lo0bits>
 8008f4a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008f4e:	b1d0      	cbz	r0, 8008f86 <__d2b+0x7e>
 8008f50:	f1c0 0320 	rsb	r3, r0, #32
 8008f54:	fa02 f303 	lsl.w	r3, r2, r3
 8008f58:	430b      	orrs	r3, r1
 8008f5a:	40c2      	lsrs	r2, r0
 8008f5c:	6163      	str	r3, [r4, #20]
 8008f5e:	9201      	str	r2, [sp, #4]
 8008f60:	9b01      	ldr	r3, [sp, #4]
 8008f62:	61a3      	str	r3, [r4, #24]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	bf0c      	ite	eq
 8008f68:	2201      	moveq	r2, #1
 8008f6a:	2202      	movne	r2, #2
 8008f6c:	6122      	str	r2, [r4, #16]
 8008f6e:	b1a5      	cbz	r5, 8008f9a <__d2b+0x92>
 8008f70:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008f74:	4405      	add	r5, r0
 8008f76:	603d      	str	r5, [r7, #0]
 8008f78:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008f7c:	6030      	str	r0, [r6, #0]
 8008f7e:	4620      	mov	r0, r4
 8008f80:	b003      	add	sp, #12
 8008f82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f86:	6161      	str	r1, [r4, #20]
 8008f88:	e7ea      	b.n	8008f60 <__d2b+0x58>
 8008f8a:	a801      	add	r0, sp, #4
 8008f8c:	f7ff fce9 	bl	8008962 <__lo0bits>
 8008f90:	9b01      	ldr	r3, [sp, #4]
 8008f92:	6163      	str	r3, [r4, #20]
 8008f94:	3020      	adds	r0, #32
 8008f96:	2201      	movs	r2, #1
 8008f98:	e7e8      	b.n	8008f6c <__d2b+0x64>
 8008f9a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008f9e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008fa2:	6038      	str	r0, [r7, #0]
 8008fa4:	6918      	ldr	r0, [r3, #16]
 8008fa6:	f7ff fcbd 	bl	8008924 <__hi0bits>
 8008faa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008fae:	e7e5      	b.n	8008f7c <__d2b+0x74>
 8008fb0:	0800b099 	.word	0x0800b099
 8008fb4:	0800b0aa 	.word	0x0800b0aa

08008fb8 <__ratio>:
 8008fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fbc:	b085      	sub	sp, #20
 8008fbe:	e9cd 1000 	strd	r1, r0, [sp]
 8008fc2:	a902      	add	r1, sp, #8
 8008fc4:	f7ff ff56 	bl	8008e74 <__b2d>
 8008fc8:	9800      	ldr	r0, [sp, #0]
 8008fca:	a903      	add	r1, sp, #12
 8008fcc:	ec55 4b10 	vmov	r4, r5, d0
 8008fd0:	f7ff ff50 	bl	8008e74 <__b2d>
 8008fd4:	9b01      	ldr	r3, [sp, #4]
 8008fd6:	6919      	ldr	r1, [r3, #16]
 8008fd8:	9b00      	ldr	r3, [sp, #0]
 8008fda:	691b      	ldr	r3, [r3, #16]
 8008fdc:	1ac9      	subs	r1, r1, r3
 8008fde:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008fe2:	1a9b      	subs	r3, r3, r2
 8008fe4:	ec5b ab10 	vmov	sl, fp, d0
 8008fe8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	bfce      	itee	gt
 8008ff0:	462a      	movgt	r2, r5
 8008ff2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008ff6:	465a      	movle	r2, fp
 8008ff8:	462f      	mov	r7, r5
 8008ffa:	46d9      	mov	r9, fp
 8008ffc:	bfcc      	ite	gt
 8008ffe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009002:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009006:	464b      	mov	r3, r9
 8009008:	4652      	mov	r2, sl
 800900a:	4620      	mov	r0, r4
 800900c:	4639      	mov	r1, r7
 800900e:	f7f7 fc3d 	bl	800088c <__aeabi_ddiv>
 8009012:	ec41 0b10 	vmov	d0, r0, r1
 8009016:	b005      	add	sp, #20
 8009018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800901c <__copybits>:
 800901c:	3901      	subs	r1, #1
 800901e:	b570      	push	{r4, r5, r6, lr}
 8009020:	1149      	asrs	r1, r1, #5
 8009022:	6914      	ldr	r4, [r2, #16]
 8009024:	3101      	adds	r1, #1
 8009026:	f102 0314 	add.w	r3, r2, #20
 800902a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800902e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009032:	1f05      	subs	r5, r0, #4
 8009034:	42a3      	cmp	r3, r4
 8009036:	d30c      	bcc.n	8009052 <__copybits+0x36>
 8009038:	1aa3      	subs	r3, r4, r2
 800903a:	3b11      	subs	r3, #17
 800903c:	f023 0303 	bic.w	r3, r3, #3
 8009040:	3211      	adds	r2, #17
 8009042:	42a2      	cmp	r2, r4
 8009044:	bf88      	it	hi
 8009046:	2300      	movhi	r3, #0
 8009048:	4418      	add	r0, r3
 800904a:	2300      	movs	r3, #0
 800904c:	4288      	cmp	r0, r1
 800904e:	d305      	bcc.n	800905c <__copybits+0x40>
 8009050:	bd70      	pop	{r4, r5, r6, pc}
 8009052:	f853 6b04 	ldr.w	r6, [r3], #4
 8009056:	f845 6f04 	str.w	r6, [r5, #4]!
 800905a:	e7eb      	b.n	8009034 <__copybits+0x18>
 800905c:	f840 3b04 	str.w	r3, [r0], #4
 8009060:	e7f4      	b.n	800904c <__copybits+0x30>

08009062 <__any_on>:
 8009062:	f100 0214 	add.w	r2, r0, #20
 8009066:	6900      	ldr	r0, [r0, #16]
 8009068:	114b      	asrs	r3, r1, #5
 800906a:	4298      	cmp	r0, r3
 800906c:	b510      	push	{r4, lr}
 800906e:	db11      	blt.n	8009094 <__any_on+0x32>
 8009070:	dd0a      	ble.n	8009088 <__any_on+0x26>
 8009072:	f011 011f 	ands.w	r1, r1, #31
 8009076:	d007      	beq.n	8009088 <__any_on+0x26>
 8009078:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800907c:	fa24 f001 	lsr.w	r0, r4, r1
 8009080:	fa00 f101 	lsl.w	r1, r0, r1
 8009084:	428c      	cmp	r4, r1
 8009086:	d10b      	bne.n	80090a0 <__any_on+0x3e>
 8009088:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800908c:	4293      	cmp	r3, r2
 800908e:	d803      	bhi.n	8009098 <__any_on+0x36>
 8009090:	2000      	movs	r0, #0
 8009092:	bd10      	pop	{r4, pc}
 8009094:	4603      	mov	r3, r0
 8009096:	e7f7      	b.n	8009088 <__any_on+0x26>
 8009098:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800909c:	2900      	cmp	r1, #0
 800909e:	d0f5      	beq.n	800908c <__any_on+0x2a>
 80090a0:	2001      	movs	r0, #1
 80090a2:	e7f6      	b.n	8009092 <__any_on+0x30>

080090a4 <sulp>:
 80090a4:	b570      	push	{r4, r5, r6, lr}
 80090a6:	4604      	mov	r4, r0
 80090a8:	460d      	mov	r5, r1
 80090aa:	ec45 4b10 	vmov	d0, r4, r5
 80090ae:	4616      	mov	r6, r2
 80090b0:	f7ff feba 	bl	8008e28 <__ulp>
 80090b4:	ec51 0b10 	vmov	r0, r1, d0
 80090b8:	b17e      	cbz	r6, 80090da <sulp+0x36>
 80090ba:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80090be:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	dd09      	ble.n	80090da <sulp+0x36>
 80090c6:	051b      	lsls	r3, r3, #20
 80090c8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80090cc:	2400      	movs	r4, #0
 80090ce:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80090d2:	4622      	mov	r2, r4
 80090d4:	462b      	mov	r3, r5
 80090d6:	f7f7 faaf 	bl	8000638 <__aeabi_dmul>
 80090da:	ec41 0b10 	vmov	d0, r0, r1
 80090de:	bd70      	pop	{r4, r5, r6, pc}

080090e0 <_strtod_l>:
 80090e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090e4:	b09f      	sub	sp, #124	@ 0x7c
 80090e6:	460c      	mov	r4, r1
 80090e8:	9217      	str	r2, [sp, #92]	@ 0x5c
 80090ea:	2200      	movs	r2, #0
 80090ec:	921a      	str	r2, [sp, #104]	@ 0x68
 80090ee:	9005      	str	r0, [sp, #20]
 80090f0:	f04f 0a00 	mov.w	sl, #0
 80090f4:	f04f 0b00 	mov.w	fp, #0
 80090f8:	460a      	mov	r2, r1
 80090fa:	9219      	str	r2, [sp, #100]	@ 0x64
 80090fc:	7811      	ldrb	r1, [r2, #0]
 80090fe:	292b      	cmp	r1, #43	@ 0x2b
 8009100:	d04a      	beq.n	8009198 <_strtod_l+0xb8>
 8009102:	d838      	bhi.n	8009176 <_strtod_l+0x96>
 8009104:	290d      	cmp	r1, #13
 8009106:	d832      	bhi.n	800916e <_strtod_l+0x8e>
 8009108:	2908      	cmp	r1, #8
 800910a:	d832      	bhi.n	8009172 <_strtod_l+0x92>
 800910c:	2900      	cmp	r1, #0
 800910e:	d03b      	beq.n	8009188 <_strtod_l+0xa8>
 8009110:	2200      	movs	r2, #0
 8009112:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009114:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009116:	782a      	ldrb	r2, [r5, #0]
 8009118:	2a30      	cmp	r2, #48	@ 0x30
 800911a:	f040 80b3 	bne.w	8009284 <_strtod_l+0x1a4>
 800911e:	786a      	ldrb	r2, [r5, #1]
 8009120:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009124:	2a58      	cmp	r2, #88	@ 0x58
 8009126:	d16e      	bne.n	8009206 <_strtod_l+0x126>
 8009128:	9302      	str	r3, [sp, #8]
 800912a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800912c:	9301      	str	r3, [sp, #4]
 800912e:	ab1a      	add	r3, sp, #104	@ 0x68
 8009130:	9300      	str	r3, [sp, #0]
 8009132:	4a8e      	ldr	r2, [pc, #568]	@ (800936c <_strtod_l+0x28c>)
 8009134:	9805      	ldr	r0, [sp, #20]
 8009136:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009138:	a919      	add	r1, sp, #100	@ 0x64
 800913a:	f001 f91b 	bl	800a374 <__gethex>
 800913e:	f010 060f 	ands.w	r6, r0, #15
 8009142:	4604      	mov	r4, r0
 8009144:	d005      	beq.n	8009152 <_strtod_l+0x72>
 8009146:	2e06      	cmp	r6, #6
 8009148:	d128      	bne.n	800919c <_strtod_l+0xbc>
 800914a:	3501      	adds	r5, #1
 800914c:	2300      	movs	r3, #0
 800914e:	9519      	str	r5, [sp, #100]	@ 0x64
 8009150:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009152:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009154:	2b00      	cmp	r3, #0
 8009156:	f040 858e 	bne.w	8009c76 <_strtod_l+0xb96>
 800915a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800915c:	b1cb      	cbz	r3, 8009192 <_strtod_l+0xb2>
 800915e:	4652      	mov	r2, sl
 8009160:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8009164:	ec43 2b10 	vmov	d0, r2, r3
 8009168:	b01f      	add	sp, #124	@ 0x7c
 800916a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800916e:	2920      	cmp	r1, #32
 8009170:	d1ce      	bne.n	8009110 <_strtod_l+0x30>
 8009172:	3201      	adds	r2, #1
 8009174:	e7c1      	b.n	80090fa <_strtod_l+0x1a>
 8009176:	292d      	cmp	r1, #45	@ 0x2d
 8009178:	d1ca      	bne.n	8009110 <_strtod_l+0x30>
 800917a:	2101      	movs	r1, #1
 800917c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800917e:	1c51      	adds	r1, r2, #1
 8009180:	9119      	str	r1, [sp, #100]	@ 0x64
 8009182:	7852      	ldrb	r2, [r2, #1]
 8009184:	2a00      	cmp	r2, #0
 8009186:	d1c5      	bne.n	8009114 <_strtod_l+0x34>
 8009188:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800918a:	9419      	str	r4, [sp, #100]	@ 0x64
 800918c:	2b00      	cmp	r3, #0
 800918e:	f040 8570 	bne.w	8009c72 <_strtod_l+0xb92>
 8009192:	4652      	mov	r2, sl
 8009194:	465b      	mov	r3, fp
 8009196:	e7e5      	b.n	8009164 <_strtod_l+0x84>
 8009198:	2100      	movs	r1, #0
 800919a:	e7ef      	b.n	800917c <_strtod_l+0x9c>
 800919c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800919e:	b13a      	cbz	r2, 80091b0 <_strtod_l+0xd0>
 80091a0:	2135      	movs	r1, #53	@ 0x35
 80091a2:	a81c      	add	r0, sp, #112	@ 0x70
 80091a4:	f7ff ff3a 	bl	800901c <__copybits>
 80091a8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80091aa:	9805      	ldr	r0, [sp, #20]
 80091ac:	f7ff fb08 	bl	80087c0 <_Bfree>
 80091b0:	3e01      	subs	r6, #1
 80091b2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80091b4:	2e04      	cmp	r6, #4
 80091b6:	d806      	bhi.n	80091c6 <_strtod_l+0xe6>
 80091b8:	e8df f006 	tbb	[pc, r6]
 80091bc:	201d0314 	.word	0x201d0314
 80091c0:	14          	.byte	0x14
 80091c1:	00          	.byte	0x00
 80091c2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80091c6:	05e1      	lsls	r1, r4, #23
 80091c8:	bf48      	it	mi
 80091ca:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80091ce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80091d2:	0d1b      	lsrs	r3, r3, #20
 80091d4:	051b      	lsls	r3, r3, #20
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d1bb      	bne.n	8009152 <_strtod_l+0x72>
 80091da:	f7fe fb21 	bl	8007820 <__errno>
 80091de:	2322      	movs	r3, #34	@ 0x22
 80091e0:	6003      	str	r3, [r0, #0]
 80091e2:	e7b6      	b.n	8009152 <_strtod_l+0x72>
 80091e4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80091e8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80091ec:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80091f0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80091f4:	e7e7      	b.n	80091c6 <_strtod_l+0xe6>
 80091f6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8009374 <_strtod_l+0x294>
 80091fa:	e7e4      	b.n	80091c6 <_strtod_l+0xe6>
 80091fc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009200:	f04f 3aff 	mov.w	sl, #4294967295
 8009204:	e7df      	b.n	80091c6 <_strtod_l+0xe6>
 8009206:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009208:	1c5a      	adds	r2, r3, #1
 800920a:	9219      	str	r2, [sp, #100]	@ 0x64
 800920c:	785b      	ldrb	r3, [r3, #1]
 800920e:	2b30      	cmp	r3, #48	@ 0x30
 8009210:	d0f9      	beq.n	8009206 <_strtod_l+0x126>
 8009212:	2b00      	cmp	r3, #0
 8009214:	d09d      	beq.n	8009152 <_strtod_l+0x72>
 8009216:	2301      	movs	r3, #1
 8009218:	9309      	str	r3, [sp, #36]	@ 0x24
 800921a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800921c:	930c      	str	r3, [sp, #48]	@ 0x30
 800921e:	2300      	movs	r3, #0
 8009220:	9308      	str	r3, [sp, #32]
 8009222:	930a      	str	r3, [sp, #40]	@ 0x28
 8009224:	461f      	mov	r7, r3
 8009226:	220a      	movs	r2, #10
 8009228:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800922a:	7805      	ldrb	r5, [r0, #0]
 800922c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009230:	b2d9      	uxtb	r1, r3
 8009232:	2909      	cmp	r1, #9
 8009234:	d928      	bls.n	8009288 <_strtod_l+0x1a8>
 8009236:	494e      	ldr	r1, [pc, #312]	@ (8009370 <_strtod_l+0x290>)
 8009238:	2201      	movs	r2, #1
 800923a:	f000 ffd5 	bl	800a1e8 <strncmp>
 800923e:	2800      	cmp	r0, #0
 8009240:	d032      	beq.n	80092a8 <_strtod_l+0x1c8>
 8009242:	2000      	movs	r0, #0
 8009244:	462a      	mov	r2, r5
 8009246:	4681      	mov	r9, r0
 8009248:	463d      	mov	r5, r7
 800924a:	4603      	mov	r3, r0
 800924c:	2a65      	cmp	r2, #101	@ 0x65
 800924e:	d001      	beq.n	8009254 <_strtod_l+0x174>
 8009250:	2a45      	cmp	r2, #69	@ 0x45
 8009252:	d114      	bne.n	800927e <_strtod_l+0x19e>
 8009254:	b91d      	cbnz	r5, 800925e <_strtod_l+0x17e>
 8009256:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009258:	4302      	orrs	r2, r0
 800925a:	d095      	beq.n	8009188 <_strtod_l+0xa8>
 800925c:	2500      	movs	r5, #0
 800925e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009260:	1c62      	adds	r2, r4, #1
 8009262:	9219      	str	r2, [sp, #100]	@ 0x64
 8009264:	7862      	ldrb	r2, [r4, #1]
 8009266:	2a2b      	cmp	r2, #43	@ 0x2b
 8009268:	d077      	beq.n	800935a <_strtod_l+0x27a>
 800926a:	2a2d      	cmp	r2, #45	@ 0x2d
 800926c:	d07b      	beq.n	8009366 <_strtod_l+0x286>
 800926e:	f04f 0c00 	mov.w	ip, #0
 8009272:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009276:	2909      	cmp	r1, #9
 8009278:	f240 8082 	bls.w	8009380 <_strtod_l+0x2a0>
 800927c:	9419      	str	r4, [sp, #100]	@ 0x64
 800927e:	f04f 0800 	mov.w	r8, #0
 8009282:	e0a2      	b.n	80093ca <_strtod_l+0x2ea>
 8009284:	2300      	movs	r3, #0
 8009286:	e7c7      	b.n	8009218 <_strtod_l+0x138>
 8009288:	2f08      	cmp	r7, #8
 800928a:	bfd5      	itete	le
 800928c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800928e:	9908      	ldrgt	r1, [sp, #32]
 8009290:	fb02 3301 	mlale	r3, r2, r1, r3
 8009294:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009298:	f100 0001 	add.w	r0, r0, #1
 800929c:	bfd4      	ite	le
 800929e:	930a      	strle	r3, [sp, #40]	@ 0x28
 80092a0:	9308      	strgt	r3, [sp, #32]
 80092a2:	3701      	adds	r7, #1
 80092a4:	9019      	str	r0, [sp, #100]	@ 0x64
 80092a6:	e7bf      	b.n	8009228 <_strtod_l+0x148>
 80092a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80092aa:	1c5a      	adds	r2, r3, #1
 80092ac:	9219      	str	r2, [sp, #100]	@ 0x64
 80092ae:	785a      	ldrb	r2, [r3, #1]
 80092b0:	b37f      	cbz	r7, 8009312 <_strtod_l+0x232>
 80092b2:	4681      	mov	r9, r0
 80092b4:	463d      	mov	r5, r7
 80092b6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80092ba:	2b09      	cmp	r3, #9
 80092bc:	d912      	bls.n	80092e4 <_strtod_l+0x204>
 80092be:	2301      	movs	r3, #1
 80092c0:	e7c4      	b.n	800924c <_strtod_l+0x16c>
 80092c2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80092c4:	1c5a      	adds	r2, r3, #1
 80092c6:	9219      	str	r2, [sp, #100]	@ 0x64
 80092c8:	785a      	ldrb	r2, [r3, #1]
 80092ca:	3001      	adds	r0, #1
 80092cc:	2a30      	cmp	r2, #48	@ 0x30
 80092ce:	d0f8      	beq.n	80092c2 <_strtod_l+0x1e2>
 80092d0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80092d4:	2b08      	cmp	r3, #8
 80092d6:	f200 84d3 	bhi.w	8009c80 <_strtod_l+0xba0>
 80092da:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80092dc:	930c      	str	r3, [sp, #48]	@ 0x30
 80092de:	4681      	mov	r9, r0
 80092e0:	2000      	movs	r0, #0
 80092e2:	4605      	mov	r5, r0
 80092e4:	3a30      	subs	r2, #48	@ 0x30
 80092e6:	f100 0301 	add.w	r3, r0, #1
 80092ea:	d02a      	beq.n	8009342 <_strtod_l+0x262>
 80092ec:	4499      	add	r9, r3
 80092ee:	eb00 0c05 	add.w	ip, r0, r5
 80092f2:	462b      	mov	r3, r5
 80092f4:	210a      	movs	r1, #10
 80092f6:	4563      	cmp	r3, ip
 80092f8:	d10d      	bne.n	8009316 <_strtod_l+0x236>
 80092fa:	1c69      	adds	r1, r5, #1
 80092fc:	4401      	add	r1, r0
 80092fe:	4428      	add	r0, r5
 8009300:	2808      	cmp	r0, #8
 8009302:	dc16      	bgt.n	8009332 <_strtod_l+0x252>
 8009304:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009306:	230a      	movs	r3, #10
 8009308:	fb03 2300 	mla	r3, r3, r0, r2
 800930c:	930a      	str	r3, [sp, #40]	@ 0x28
 800930e:	2300      	movs	r3, #0
 8009310:	e018      	b.n	8009344 <_strtod_l+0x264>
 8009312:	4638      	mov	r0, r7
 8009314:	e7da      	b.n	80092cc <_strtod_l+0x1ec>
 8009316:	2b08      	cmp	r3, #8
 8009318:	f103 0301 	add.w	r3, r3, #1
 800931c:	dc03      	bgt.n	8009326 <_strtod_l+0x246>
 800931e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009320:	434e      	muls	r6, r1
 8009322:	960a      	str	r6, [sp, #40]	@ 0x28
 8009324:	e7e7      	b.n	80092f6 <_strtod_l+0x216>
 8009326:	2b10      	cmp	r3, #16
 8009328:	bfde      	ittt	le
 800932a:	9e08      	ldrle	r6, [sp, #32]
 800932c:	434e      	mulle	r6, r1
 800932e:	9608      	strle	r6, [sp, #32]
 8009330:	e7e1      	b.n	80092f6 <_strtod_l+0x216>
 8009332:	280f      	cmp	r0, #15
 8009334:	dceb      	bgt.n	800930e <_strtod_l+0x22e>
 8009336:	9808      	ldr	r0, [sp, #32]
 8009338:	230a      	movs	r3, #10
 800933a:	fb03 2300 	mla	r3, r3, r0, r2
 800933e:	9308      	str	r3, [sp, #32]
 8009340:	e7e5      	b.n	800930e <_strtod_l+0x22e>
 8009342:	4629      	mov	r1, r5
 8009344:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009346:	1c50      	adds	r0, r2, #1
 8009348:	9019      	str	r0, [sp, #100]	@ 0x64
 800934a:	7852      	ldrb	r2, [r2, #1]
 800934c:	4618      	mov	r0, r3
 800934e:	460d      	mov	r5, r1
 8009350:	e7b1      	b.n	80092b6 <_strtod_l+0x1d6>
 8009352:	f04f 0900 	mov.w	r9, #0
 8009356:	2301      	movs	r3, #1
 8009358:	e77d      	b.n	8009256 <_strtod_l+0x176>
 800935a:	f04f 0c00 	mov.w	ip, #0
 800935e:	1ca2      	adds	r2, r4, #2
 8009360:	9219      	str	r2, [sp, #100]	@ 0x64
 8009362:	78a2      	ldrb	r2, [r4, #2]
 8009364:	e785      	b.n	8009272 <_strtod_l+0x192>
 8009366:	f04f 0c01 	mov.w	ip, #1
 800936a:	e7f8      	b.n	800935e <_strtod_l+0x27e>
 800936c:	0800b218 	.word	0x0800b218
 8009370:	0800b200 	.word	0x0800b200
 8009374:	7ff00000 	.word	0x7ff00000
 8009378:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800937a:	1c51      	adds	r1, r2, #1
 800937c:	9119      	str	r1, [sp, #100]	@ 0x64
 800937e:	7852      	ldrb	r2, [r2, #1]
 8009380:	2a30      	cmp	r2, #48	@ 0x30
 8009382:	d0f9      	beq.n	8009378 <_strtod_l+0x298>
 8009384:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009388:	2908      	cmp	r1, #8
 800938a:	f63f af78 	bhi.w	800927e <_strtod_l+0x19e>
 800938e:	3a30      	subs	r2, #48	@ 0x30
 8009390:	920e      	str	r2, [sp, #56]	@ 0x38
 8009392:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009394:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009396:	f04f 080a 	mov.w	r8, #10
 800939a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800939c:	1c56      	adds	r6, r2, #1
 800939e:	9619      	str	r6, [sp, #100]	@ 0x64
 80093a0:	7852      	ldrb	r2, [r2, #1]
 80093a2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80093a6:	f1be 0f09 	cmp.w	lr, #9
 80093aa:	d939      	bls.n	8009420 <_strtod_l+0x340>
 80093ac:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80093ae:	1a76      	subs	r6, r6, r1
 80093b0:	2e08      	cmp	r6, #8
 80093b2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80093b6:	dc03      	bgt.n	80093c0 <_strtod_l+0x2e0>
 80093b8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80093ba:	4588      	cmp	r8, r1
 80093bc:	bfa8      	it	ge
 80093be:	4688      	movge	r8, r1
 80093c0:	f1bc 0f00 	cmp.w	ip, #0
 80093c4:	d001      	beq.n	80093ca <_strtod_l+0x2ea>
 80093c6:	f1c8 0800 	rsb	r8, r8, #0
 80093ca:	2d00      	cmp	r5, #0
 80093cc:	d14e      	bne.n	800946c <_strtod_l+0x38c>
 80093ce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80093d0:	4308      	orrs	r0, r1
 80093d2:	f47f aebe 	bne.w	8009152 <_strtod_l+0x72>
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	f47f aed6 	bne.w	8009188 <_strtod_l+0xa8>
 80093dc:	2a69      	cmp	r2, #105	@ 0x69
 80093de:	d028      	beq.n	8009432 <_strtod_l+0x352>
 80093e0:	dc25      	bgt.n	800942e <_strtod_l+0x34e>
 80093e2:	2a49      	cmp	r2, #73	@ 0x49
 80093e4:	d025      	beq.n	8009432 <_strtod_l+0x352>
 80093e6:	2a4e      	cmp	r2, #78	@ 0x4e
 80093e8:	f47f aece 	bne.w	8009188 <_strtod_l+0xa8>
 80093ec:	499b      	ldr	r1, [pc, #620]	@ (800965c <_strtod_l+0x57c>)
 80093ee:	a819      	add	r0, sp, #100	@ 0x64
 80093f0:	f001 f9e2 	bl	800a7b8 <__match>
 80093f4:	2800      	cmp	r0, #0
 80093f6:	f43f aec7 	beq.w	8009188 <_strtod_l+0xa8>
 80093fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80093fc:	781b      	ldrb	r3, [r3, #0]
 80093fe:	2b28      	cmp	r3, #40	@ 0x28
 8009400:	d12e      	bne.n	8009460 <_strtod_l+0x380>
 8009402:	4997      	ldr	r1, [pc, #604]	@ (8009660 <_strtod_l+0x580>)
 8009404:	aa1c      	add	r2, sp, #112	@ 0x70
 8009406:	a819      	add	r0, sp, #100	@ 0x64
 8009408:	f001 f9ea 	bl	800a7e0 <__hexnan>
 800940c:	2805      	cmp	r0, #5
 800940e:	d127      	bne.n	8009460 <_strtod_l+0x380>
 8009410:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009412:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009416:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800941a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800941e:	e698      	b.n	8009152 <_strtod_l+0x72>
 8009420:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009422:	fb08 2101 	mla	r1, r8, r1, r2
 8009426:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800942a:	920e      	str	r2, [sp, #56]	@ 0x38
 800942c:	e7b5      	b.n	800939a <_strtod_l+0x2ba>
 800942e:	2a6e      	cmp	r2, #110	@ 0x6e
 8009430:	e7da      	b.n	80093e8 <_strtod_l+0x308>
 8009432:	498c      	ldr	r1, [pc, #560]	@ (8009664 <_strtod_l+0x584>)
 8009434:	a819      	add	r0, sp, #100	@ 0x64
 8009436:	f001 f9bf 	bl	800a7b8 <__match>
 800943a:	2800      	cmp	r0, #0
 800943c:	f43f aea4 	beq.w	8009188 <_strtod_l+0xa8>
 8009440:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009442:	4989      	ldr	r1, [pc, #548]	@ (8009668 <_strtod_l+0x588>)
 8009444:	3b01      	subs	r3, #1
 8009446:	a819      	add	r0, sp, #100	@ 0x64
 8009448:	9319      	str	r3, [sp, #100]	@ 0x64
 800944a:	f001 f9b5 	bl	800a7b8 <__match>
 800944e:	b910      	cbnz	r0, 8009456 <_strtod_l+0x376>
 8009450:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009452:	3301      	adds	r3, #1
 8009454:	9319      	str	r3, [sp, #100]	@ 0x64
 8009456:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8009678 <_strtod_l+0x598>
 800945a:	f04f 0a00 	mov.w	sl, #0
 800945e:	e678      	b.n	8009152 <_strtod_l+0x72>
 8009460:	4882      	ldr	r0, [pc, #520]	@ (800966c <_strtod_l+0x58c>)
 8009462:	f000 fee5 	bl	800a230 <nan>
 8009466:	ec5b ab10 	vmov	sl, fp, d0
 800946a:	e672      	b.n	8009152 <_strtod_l+0x72>
 800946c:	eba8 0309 	sub.w	r3, r8, r9
 8009470:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009472:	9309      	str	r3, [sp, #36]	@ 0x24
 8009474:	2f00      	cmp	r7, #0
 8009476:	bf08      	it	eq
 8009478:	462f      	moveq	r7, r5
 800947a:	2d10      	cmp	r5, #16
 800947c:	462c      	mov	r4, r5
 800947e:	bfa8      	it	ge
 8009480:	2410      	movge	r4, #16
 8009482:	f7f7 f85f 	bl	8000544 <__aeabi_ui2d>
 8009486:	2d09      	cmp	r5, #9
 8009488:	4682      	mov	sl, r0
 800948a:	468b      	mov	fp, r1
 800948c:	dc13      	bgt.n	80094b6 <_strtod_l+0x3d6>
 800948e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009490:	2b00      	cmp	r3, #0
 8009492:	f43f ae5e 	beq.w	8009152 <_strtod_l+0x72>
 8009496:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009498:	dd78      	ble.n	800958c <_strtod_l+0x4ac>
 800949a:	2b16      	cmp	r3, #22
 800949c:	dc5f      	bgt.n	800955e <_strtod_l+0x47e>
 800949e:	4974      	ldr	r1, [pc, #464]	@ (8009670 <_strtod_l+0x590>)
 80094a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80094a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80094a8:	4652      	mov	r2, sl
 80094aa:	465b      	mov	r3, fp
 80094ac:	f7f7 f8c4 	bl	8000638 <__aeabi_dmul>
 80094b0:	4682      	mov	sl, r0
 80094b2:	468b      	mov	fp, r1
 80094b4:	e64d      	b.n	8009152 <_strtod_l+0x72>
 80094b6:	4b6e      	ldr	r3, [pc, #440]	@ (8009670 <_strtod_l+0x590>)
 80094b8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80094bc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80094c0:	f7f7 f8ba 	bl	8000638 <__aeabi_dmul>
 80094c4:	4682      	mov	sl, r0
 80094c6:	9808      	ldr	r0, [sp, #32]
 80094c8:	468b      	mov	fp, r1
 80094ca:	f7f7 f83b 	bl	8000544 <__aeabi_ui2d>
 80094ce:	4602      	mov	r2, r0
 80094d0:	460b      	mov	r3, r1
 80094d2:	4650      	mov	r0, sl
 80094d4:	4659      	mov	r1, fp
 80094d6:	f7f6 fef9 	bl	80002cc <__adddf3>
 80094da:	2d0f      	cmp	r5, #15
 80094dc:	4682      	mov	sl, r0
 80094de:	468b      	mov	fp, r1
 80094e0:	ddd5      	ble.n	800948e <_strtod_l+0x3ae>
 80094e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094e4:	1b2c      	subs	r4, r5, r4
 80094e6:	441c      	add	r4, r3
 80094e8:	2c00      	cmp	r4, #0
 80094ea:	f340 8096 	ble.w	800961a <_strtod_l+0x53a>
 80094ee:	f014 030f 	ands.w	r3, r4, #15
 80094f2:	d00a      	beq.n	800950a <_strtod_l+0x42a>
 80094f4:	495e      	ldr	r1, [pc, #376]	@ (8009670 <_strtod_l+0x590>)
 80094f6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80094fa:	4652      	mov	r2, sl
 80094fc:	465b      	mov	r3, fp
 80094fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009502:	f7f7 f899 	bl	8000638 <__aeabi_dmul>
 8009506:	4682      	mov	sl, r0
 8009508:	468b      	mov	fp, r1
 800950a:	f034 040f 	bics.w	r4, r4, #15
 800950e:	d073      	beq.n	80095f8 <_strtod_l+0x518>
 8009510:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009514:	dd48      	ble.n	80095a8 <_strtod_l+0x4c8>
 8009516:	2400      	movs	r4, #0
 8009518:	46a0      	mov	r8, r4
 800951a:	940a      	str	r4, [sp, #40]	@ 0x28
 800951c:	46a1      	mov	r9, r4
 800951e:	9a05      	ldr	r2, [sp, #20]
 8009520:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8009678 <_strtod_l+0x598>
 8009524:	2322      	movs	r3, #34	@ 0x22
 8009526:	6013      	str	r3, [r2, #0]
 8009528:	f04f 0a00 	mov.w	sl, #0
 800952c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800952e:	2b00      	cmp	r3, #0
 8009530:	f43f ae0f 	beq.w	8009152 <_strtod_l+0x72>
 8009534:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009536:	9805      	ldr	r0, [sp, #20]
 8009538:	f7ff f942 	bl	80087c0 <_Bfree>
 800953c:	9805      	ldr	r0, [sp, #20]
 800953e:	4649      	mov	r1, r9
 8009540:	f7ff f93e 	bl	80087c0 <_Bfree>
 8009544:	9805      	ldr	r0, [sp, #20]
 8009546:	4641      	mov	r1, r8
 8009548:	f7ff f93a 	bl	80087c0 <_Bfree>
 800954c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800954e:	9805      	ldr	r0, [sp, #20]
 8009550:	f7ff f936 	bl	80087c0 <_Bfree>
 8009554:	9805      	ldr	r0, [sp, #20]
 8009556:	4621      	mov	r1, r4
 8009558:	f7ff f932 	bl	80087c0 <_Bfree>
 800955c:	e5f9      	b.n	8009152 <_strtod_l+0x72>
 800955e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009560:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009564:	4293      	cmp	r3, r2
 8009566:	dbbc      	blt.n	80094e2 <_strtod_l+0x402>
 8009568:	4c41      	ldr	r4, [pc, #260]	@ (8009670 <_strtod_l+0x590>)
 800956a:	f1c5 050f 	rsb	r5, r5, #15
 800956e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009572:	4652      	mov	r2, sl
 8009574:	465b      	mov	r3, fp
 8009576:	e9d1 0100 	ldrd	r0, r1, [r1]
 800957a:	f7f7 f85d 	bl	8000638 <__aeabi_dmul>
 800957e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009580:	1b5d      	subs	r5, r3, r5
 8009582:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009586:	e9d4 2300 	ldrd	r2, r3, [r4]
 800958a:	e78f      	b.n	80094ac <_strtod_l+0x3cc>
 800958c:	3316      	adds	r3, #22
 800958e:	dba8      	blt.n	80094e2 <_strtod_l+0x402>
 8009590:	4b37      	ldr	r3, [pc, #220]	@ (8009670 <_strtod_l+0x590>)
 8009592:	eba9 0808 	sub.w	r8, r9, r8
 8009596:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800959a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800959e:	4650      	mov	r0, sl
 80095a0:	4659      	mov	r1, fp
 80095a2:	f7f7 f973 	bl	800088c <__aeabi_ddiv>
 80095a6:	e783      	b.n	80094b0 <_strtod_l+0x3d0>
 80095a8:	4b32      	ldr	r3, [pc, #200]	@ (8009674 <_strtod_l+0x594>)
 80095aa:	9308      	str	r3, [sp, #32]
 80095ac:	2300      	movs	r3, #0
 80095ae:	1124      	asrs	r4, r4, #4
 80095b0:	4650      	mov	r0, sl
 80095b2:	4659      	mov	r1, fp
 80095b4:	461e      	mov	r6, r3
 80095b6:	2c01      	cmp	r4, #1
 80095b8:	dc21      	bgt.n	80095fe <_strtod_l+0x51e>
 80095ba:	b10b      	cbz	r3, 80095c0 <_strtod_l+0x4e0>
 80095bc:	4682      	mov	sl, r0
 80095be:	468b      	mov	fp, r1
 80095c0:	492c      	ldr	r1, [pc, #176]	@ (8009674 <_strtod_l+0x594>)
 80095c2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80095c6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80095ca:	4652      	mov	r2, sl
 80095cc:	465b      	mov	r3, fp
 80095ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095d2:	f7f7 f831 	bl	8000638 <__aeabi_dmul>
 80095d6:	4b28      	ldr	r3, [pc, #160]	@ (8009678 <_strtod_l+0x598>)
 80095d8:	460a      	mov	r2, r1
 80095da:	400b      	ands	r3, r1
 80095dc:	4927      	ldr	r1, [pc, #156]	@ (800967c <_strtod_l+0x59c>)
 80095de:	428b      	cmp	r3, r1
 80095e0:	4682      	mov	sl, r0
 80095e2:	d898      	bhi.n	8009516 <_strtod_l+0x436>
 80095e4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80095e8:	428b      	cmp	r3, r1
 80095ea:	bf86      	itte	hi
 80095ec:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8009680 <_strtod_l+0x5a0>
 80095f0:	f04f 3aff 	movhi.w	sl, #4294967295
 80095f4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80095f8:	2300      	movs	r3, #0
 80095fa:	9308      	str	r3, [sp, #32]
 80095fc:	e07a      	b.n	80096f4 <_strtod_l+0x614>
 80095fe:	07e2      	lsls	r2, r4, #31
 8009600:	d505      	bpl.n	800960e <_strtod_l+0x52e>
 8009602:	9b08      	ldr	r3, [sp, #32]
 8009604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009608:	f7f7 f816 	bl	8000638 <__aeabi_dmul>
 800960c:	2301      	movs	r3, #1
 800960e:	9a08      	ldr	r2, [sp, #32]
 8009610:	3208      	adds	r2, #8
 8009612:	3601      	adds	r6, #1
 8009614:	1064      	asrs	r4, r4, #1
 8009616:	9208      	str	r2, [sp, #32]
 8009618:	e7cd      	b.n	80095b6 <_strtod_l+0x4d6>
 800961a:	d0ed      	beq.n	80095f8 <_strtod_l+0x518>
 800961c:	4264      	negs	r4, r4
 800961e:	f014 020f 	ands.w	r2, r4, #15
 8009622:	d00a      	beq.n	800963a <_strtod_l+0x55a>
 8009624:	4b12      	ldr	r3, [pc, #72]	@ (8009670 <_strtod_l+0x590>)
 8009626:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800962a:	4650      	mov	r0, sl
 800962c:	4659      	mov	r1, fp
 800962e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009632:	f7f7 f92b 	bl	800088c <__aeabi_ddiv>
 8009636:	4682      	mov	sl, r0
 8009638:	468b      	mov	fp, r1
 800963a:	1124      	asrs	r4, r4, #4
 800963c:	d0dc      	beq.n	80095f8 <_strtod_l+0x518>
 800963e:	2c1f      	cmp	r4, #31
 8009640:	dd20      	ble.n	8009684 <_strtod_l+0x5a4>
 8009642:	2400      	movs	r4, #0
 8009644:	46a0      	mov	r8, r4
 8009646:	940a      	str	r4, [sp, #40]	@ 0x28
 8009648:	46a1      	mov	r9, r4
 800964a:	9a05      	ldr	r2, [sp, #20]
 800964c:	2322      	movs	r3, #34	@ 0x22
 800964e:	f04f 0a00 	mov.w	sl, #0
 8009652:	f04f 0b00 	mov.w	fp, #0
 8009656:	6013      	str	r3, [r2, #0]
 8009658:	e768      	b.n	800952c <_strtod_l+0x44c>
 800965a:	bf00      	nop
 800965c:	0800aff1 	.word	0x0800aff1
 8009660:	0800b204 	.word	0x0800b204
 8009664:	0800afe9 	.word	0x0800afe9
 8009668:	0800b020 	.word	0x0800b020
 800966c:	0800b3ad 	.word	0x0800b3ad
 8009670:	0800b138 	.word	0x0800b138
 8009674:	0800b110 	.word	0x0800b110
 8009678:	7ff00000 	.word	0x7ff00000
 800967c:	7ca00000 	.word	0x7ca00000
 8009680:	7fefffff 	.word	0x7fefffff
 8009684:	f014 0310 	ands.w	r3, r4, #16
 8009688:	bf18      	it	ne
 800968a:	236a      	movne	r3, #106	@ 0x6a
 800968c:	4ea9      	ldr	r6, [pc, #676]	@ (8009934 <_strtod_l+0x854>)
 800968e:	9308      	str	r3, [sp, #32]
 8009690:	4650      	mov	r0, sl
 8009692:	4659      	mov	r1, fp
 8009694:	2300      	movs	r3, #0
 8009696:	07e2      	lsls	r2, r4, #31
 8009698:	d504      	bpl.n	80096a4 <_strtod_l+0x5c4>
 800969a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800969e:	f7f6 ffcb 	bl	8000638 <__aeabi_dmul>
 80096a2:	2301      	movs	r3, #1
 80096a4:	1064      	asrs	r4, r4, #1
 80096a6:	f106 0608 	add.w	r6, r6, #8
 80096aa:	d1f4      	bne.n	8009696 <_strtod_l+0x5b6>
 80096ac:	b10b      	cbz	r3, 80096b2 <_strtod_l+0x5d2>
 80096ae:	4682      	mov	sl, r0
 80096b0:	468b      	mov	fp, r1
 80096b2:	9b08      	ldr	r3, [sp, #32]
 80096b4:	b1b3      	cbz	r3, 80096e4 <_strtod_l+0x604>
 80096b6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80096ba:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80096be:	2b00      	cmp	r3, #0
 80096c0:	4659      	mov	r1, fp
 80096c2:	dd0f      	ble.n	80096e4 <_strtod_l+0x604>
 80096c4:	2b1f      	cmp	r3, #31
 80096c6:	dd55      	ble.n	8009774 <_strtod_l+0x694>
 80096c8:	2b34      	cmp	r3, #52	@ 0x34
 80096ca:	bfde      	ittt	le
 80096cc:	f04f 33ff 	movle.w	r3, #4294967295
 80096d0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80096d4:	4093      	lslle	r3, r2
 80096d6:	f04f 0a00 	mov.w	sl, #0
 80096da:	bfcc      	ite	gt
 80096dc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80096e0:	ea03 0b01 	andle.w	fp, r3, r1
 80096e4:	2200      	movs	r2, #0
 80096e6:	2300      	movs	r3, #0
 80096e8:	4650      	mov	r0, sl
 80096ea:	4659      	mov	r1, fp
 80096ec:	f7f7 fa0c 	bl	8000b08 <__aeabi_dcmpeq>
 80096f0:	2800      	cmp	r0, #0
 80096f2:	d1a6      	bne.n	8009642 <_strtod_l+0x562>
 80096f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80096f6:	9300      	str	r3, [sp, #0]
 80096f8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80096fa:	9805      	ldr	r0, [sp, #20]
 80096fc:	462b      	mov	r3, r5
 80096fe:	463a      	mov	r2, r7
 8009700:	f7ff f8c6 	bl	8008890 <__s2b>
 8009704:	900a      	str	r0, [sp, #40]	@ 0x28
 8009706:	2800      	cmp	r0, #0
 8009708:	f43f af05 	beq.w	8009516 <_strtod_l+0x436>
 800970c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800970e:	2a00      	cmp	r2, #0
 8009710:	eba9 0308 	sub.w	r3, r9, r8
 8009714:	bfa8      	it	ge
 8009716:	2300      	movge	r3, #0
 8009718:	9312      	str	r3, [sp, #72]	@ 0x48
 800971a:	2400      	movs	r4, #0
 800971c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009720:	9316      	str	r3, [sp, #88]	@ 0x58
 8009722:	46a0      	mov	r8, r4
 8009724:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009726:	9805      	ldr	r0, [sp, #20]
 8009728:	6859      	ldr	r1, [r3, #4]
 800972a:	f7ff f809 	bl	8008740 <_Balloc>
 800972e:	4681      	mov	r9, r0
 8009730:	2800      	cmp	r0, #0
 8009732:	f43f aef4 	beq.w	800951e <_strtod_l+0x43e>
 8009736:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009738:	691a      	ldr	r2, [r3, #16]
 800973a:	3202      	adds	r2, #2
 800973c:	f103 010c 	add.w	r1, r3, #12
 8009740:	0092      	lsls	r2, r2, #2
 8009742:	300c      	adds	r0, #12
 8009744:	f7fe f899 	bl	800787a <memcpy>
 8009748:	ec4b ab10 	vmov	d0, sl, fp
 800974c:	9805      	ldr	r0, [sp, #20]
 800974e:	aa1c      	add	r2, sp, #112	@ 0x70
 8009750:	a91b      	add	r1, sp, #108	@ 0x6c
 8009752:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009756:	f7ff fbd7 	bl	8008f08 <__d2b>
 800975a:	901a      	str	r0, [sp, #104]	@ 0x68
 800975c:	2800      	cmp	r0, #0
 800975e:	f43f aede 	beq.w	800951e <_strtod_l+0x43e>
 8009762:	9805      	ldr	r0, [sp, #20]
 8009764:	2101      	movs	r1, #1
 8009766:	f7ff f929 	bl	80089bc <__i2b>
 800976a:	4680      	mov	r8, r0
 800976c:	b948      	cbnz	r0, 8009782 <_strtod_l+0x6a2>
 800976e:	f04f 0800 	mov.w	r8, #0
 8009772:	e6d4      	b.n	800951e <_strtod_l+0x43e>
 8009774:	f04f 32ff 	mov.w	r2, #4294967295
 8009778:	fa02 f303 	lsl.w	r3, r2, r3
 800977c:	ea03 0a0a 	and.w	sl, r3, sl
 8009780:	e7b0      	b.n	80096e4 <_strtod_l+0x604>
 8009782:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009784:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009786:	2d00      	cmp	r5, #0
 8009788:	bfab      	itete	ge
 800978a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800978c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800978e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009790:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009792:	bfac      	ite	ge
 8009794:	18ef      	addge	r7, r5, r3
 8009796:	1b5e      	sublt	r6, r3, r5
 8009798:	9b08      	ldr	r3, [sp, #32]
 800979a:	1aed      	subs	r5, r5, r3
 800979c:	4415      	add	r5, r2
 800979e:	4b66      	ldr	r3, [pc, #408]	@ (8009938 <_strtod_l+0x858>)
 80097a0:	3d01      	subs	r5, #1
 80097a2:	429d      	cmp	r5, r3
 80097a4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80097a8:	da50      	bge.n	800984c <_strtod_l+0x76c>
 80097aa:	1b5b      	subs	r3, r3, r5
 80097ac:	2b1f      	cmp	r3, #31
 80097ae:	eba2 0203 	sub.w	r2, r2, r3
 80097b2:	f04f 0101 	mov.w	r1, #1
 80097b6:	dc3d      	bgt.n	8009834 <_strtod_l+0x754>
 80097b8:	fa01 f303 	lsl.w	r3, r1, r3
 80097bc:	9313      	str	r3, [sp, #76]	@ 0x4c
 80097be:	2300      	movs	r3, #0
 80097c0:	9310      	str	r3, [sp, #64]	@ 0x40
 80097c2:	18bd      	adds	r5, r7, r2
 80097c4:	9b08      	ldr	r3, [sp, #32]
 80097c6:	42af      	cmp	r7, r5
 80097c8:	4416      	add	r6, r2
 80097ca:	441e      	add	r6, r3
 80097cc:	463b      	mov	r3, r7
 80097ce:	bfa8      	it	ge
 80097d0:	462b      	movge	r3, r5
 80097d2:	42b3      	cmp	r3, r6
 80097d4:	bfa8      	it	ge
 80097d6:	4633      	movge	r3, r6
 80097d8:	2b00      	cmp	r3, #0
 80097da:	bfc2      	ittt	gt
 80097dc:	1aed      	subgt	r5, r5, r3
 80097de:	1af6      	subgt	r6, r6, r3
 80097e0:	1aff      	subgt	r7, r7, r3
 80097e2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	dd16      	ble.n	8009816 <_strtod_l+0x736>
 80097e8:	4641      	mov	r1, r8
 80097ea:	9805      	ldr	r0, [sp, #20]
 80097ec:	461a      	mov	r2, r3
 80097ee:	f7ff f9a5 	bl	8008b3c <__pow5mult>
 80097f2:	4680      	mov	r8, r0
 80097f4:	2800      	cmp	r0, #0
 80097f6:	d0ba      	beq.n	800976e <_strtod_l+0x68e>
 80097f8:	4601      	mov	r1, r0
 80097fa:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80097fc:	9805      	ldr	r0, [sp, #20]
 80097fe:	f7ff f8f3 	bl	80089e8 <__multiply>
 8009802:	900e      	str	r0, [sp, #56]	@ 0x38
 8009804:	2800      	cmp	r0, #0
 8009806:	f43f ae8a 	beq.w	800951e <_strtod_l+0x43e>
 800980a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800980c:	9805      	ldr	r0, [sp, #20]
 800980e:	f7fe ffd7 	bl	80087c0 <_Bfree>
 8009812:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009814:	931a      	str	r3, [sp, #104]	@ 0x68
 8009816:	2d00      	cmp	r5, #0
 8009818:	dc1d      	bgt.n	8009856 <_strtod_l+0x776>
 800981a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800981c:	2b00      	cmp	r3, #0
 800981e:	dd23      	ble.n	8009868 <_strtod_l+0x788>
 8009820:	4649      	mov	r1, r9
 8009822:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009824:	9805      	ldr	r0, [sp, #20]
 8009826:	f7ff f989 	bl	8008b3c <__pow5mult>
 800982a:	4681      	mov	r9, r0
 800982c:	b9e0      	cbnz	r0, 8009868 <_strtod_l+0x788>
 800982e:	f04f 0900 	mov.w	r9, #0
 8009832:	e674      	b.n	800951e <_strtod_l+0x43e>
 8009834:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009838:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800983c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009840:	35e2      	adds	r5, #226	@ 0xe2
 8009842:	fa01 f305 	lsl.w	r3, r1, r5
 8009846:	9310      	str	r3, [sp, #64]	@ 0x40
 8009848:	9113      	str	r1, [sp, #76]	@ 0x4c
 800984a:	e7ba      	b.n	80097c2 <_strtod_l+0x6e2>
 800984c:	2300      	movs	r3, #0
 800984e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009850:	2301      	movs	r3, #1
 8009852:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009854:	e7b5      	b.n	80097c2 <_strtod_l+0x6e2>
 8009856:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009858:	9805      	ldr	r0, [sp, #20]
 800985a:	462a      	mov	r2, r5
 800985c:	f7ff f9c8 	bl	8008bf0 <__lshift>
 8009860:	901a      	str	r0, [sp, #104]	@ 0x68
 8009862:	2800      	cmp	r0, #0
 8009864:	d1d9      	bne.n	800981a <_strtod_l+0x73a>
 8009866:	e65a      	b.n	800951e <_strtod_l+0x43e>
 8009868:	2e00      	cmp	r6, #0
 800986a:	dd07      	ble.n	800987c <_strtod_l+0x79c>
 800986c:	4649      	mov	r1, r9
 800986e:	9805      	ldr	r0, [sp, #20]
 8009870:	4632      	mov	r2, r6
 8009872:	f7ff f9bd 	bl	8008bf0 <__lshift>
 8009876:	4681      	mov	r9, r0
 8009878:	2800      	cmp	r0, #0
 800987a:	d0d8      	beq.n	800982e <_strtod_l+0x74e>
 800987c:	2f00      	cmp	r7, #0
 800987e:	dd08      	ble.n	8009892 <_strtod_l+0x7b2>
 8009880:	4641      	mov	r1, r8
 8009882:	9805      	ldr	r0, [sp, #20]
 8009884:	463a      	mov	r2, r7
 8009886:	f7ff f9b3 	bl	8008bf0 <__lshift>
 800988a:	4680      	mov	r8, r0
 800988c:	2800      	cmp	r0, #0
 800988e:	f43f ae46 	beq.w	800951e <_strtod_l+0x43e>
 8009892:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009894:	9805      	ldr	r0, [sp, #20]
 8009896:	464a      	mov	r2, r9
 8009898:	f7ff fa32 	bl	8008d00 <__mdiff>
 800989c:	4604      	mov	r4, r0
 800989e:	2800      	cmp	r0, #0
 80098a0:	f43f ae3d 	beq.w	800951e <_strtod_l+0x43e>
 80098a4:	68c3      	ldr	r3, [r0, #12]
 80098a6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80098a8:	2300      	movs	r3, #0
 80098aa:	60c3      	str	r3, [r0, #12]
 80098ac:	4641      	mov	r1, r8
 80098ae:	f7ff fa0b 	bl	8008cc8 <__mcmp>
 80098b2:	2800      	cmp	r0, #0
 80098b4:	da46      	bge.n	8009944 <_strtod_l+0x864>
 80098b6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80098b8:	ea53 030a 	orrs.w	r3, r3, sl
 80098bc:	d16c      	bne.n	8009998 <_strtod_l+0x8b8>
 80098be:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d168      	bne.n	8009998 <_strtod_l+0x8b8>
 80098c6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80098ca:	0d1b      	lsrs	r3, r3, #20
 80098cc:	051b      	lsls	r3, r3, #20
 80098ce:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80098d2:	d961      	bls.n	8009998 <_strtod_l+0x8b8>
 80098d4:	6963      	ldr	r3, [r4, #20]
 80098d6:	b913      	cbnz	r3, 80098de <_strtod_l+0x7fe>
 80098d8:	6923      	ldr	r3, [r4, #16]
 80098da:	2b01      	cmp	r3, #1
 80098dc:	dd5c      	ble.n	8009998 <_strtod_l+0x8b8>
 80098de:	4621      	mov	r1, r4
 80098e0:	2201      	movs	r2, #1
 80098e2:	9805      	ldr	r0, [sp, #20]
 80098e4:	f7ff f984 	bl	8008bf0 <__lshift>
 80098e8:	4641      	mov	r1, r8
 80098ea:	4604      	mov	r4, r0
 80098ec:	f7ff f9ec 	bl	8008cc8 <__mcmp>
 80098f0:	2800      	cmp	r0, #0
 80098f2:	dd51      	ble.n	8009998 <_strtod_l+0x8b8>
 80098f4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80098f8:	9a08      	ldr	r2, [sp, #32]
 80098fa:	0d1b      	lsrs	r3, r3, #20
 80098fc:	051b      	lsls	r3, r3, #20
 80098fe:	2a00      	cmp	r2, #0
 8009900:	d06b      	beq.n	80099da <_strtod_l+0x8fa>
 8009902:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009906:	d868      	bhi.n	80099da <_strtod_l+0x8fa>
 8009908:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800990c:	f67f ae9d 	bls.w	800964a <_strtod_l+0x56a>
 8009910:	4b0a      	ldr	r3, [pc, #40]	@ (800993c <_strtod_l+0x85c>)
 8009912:	4650      	mov	r0, sl
 8009914:	4659      	mov	r1, fp
 8009916:	2200      	movs	r2, #0
 8009918:	f7f6 fe8e 	bl	8000638 <__aeabi_dmul>
 800991c:	4b08      	ldr	r3, [pc, #32]	@ (8009940 <_strtod_l+0x860>)
 800991e:	400b      	ands	r3, r1
 8009920:	4682      	mov	sl, r0
 8009922:	468b      	mov	fp, r1
 8009924:	2b00      	cmp	r3, #0
 8009926:	f47f ae05 	bne.w	8009534 <_strtod_l+0x454>
 800992a:	9a05      	ldr	r2, [sp, #20]
 800992c:	2322      	movs	r3, #34	@ 0x22
 800992e:	6013      	str	r3, [r2, #0]
 8009930:	e600      	b.n	8009534 <_strtod_l+0x454>
 8009932:	bf00      	nop
 8009934:	0800b230 	.word	0x0800b230
 8009938:	fffffc02 	.word	0xfffffc02
 800993c:	39500000 	.word	0x39500000
 8009940:	7ff00000 	.word	0x7ff00000
 8009944:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009948:	d165      	bne.n	8009a16 <_strtod_l+0x936>
 800994a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800994c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009950:	b35a      	cbz	r2, 80099aa <_strtod_l+0x8ca>
 8009952:	4a9f      	ldr	r2, [pc, #636]	@ (8009bd0 <_strtod_l+0xaf0>)
 8009954:	4293      	cmp	r3, r2
 8009956:	d12b      	bne.n	80099b0 <_strtod_l+0x8d0>
 8009958:	9b08      	ldr	r3, [sp, #32]
 800995a:	4651      	mov	r1, sl
 800995c:	b303      	cbz	r3, 80099a0 <_strtod_l+0x8c0>
 800995e:	4b9d      	ldr	r3, [pc, #628]	@ (8009bd4 <_strtod_l+0xaf4>)
 8009960:	465a      	mov	r2, fp
 8009962:	4013      	ands	r3, r2
 8009964:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009968:	f04f 32ff 	mov.w	r2, #4294967295
 800996c:	d81b      	bhi.n	80099a6 <_strtod_l+0x8c6>
 800996e:	0d1b      	lsrs	r3, r3, #20
 8009970:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009974:	fa02 f303 	lsl.w	r3, r2, r3
 8009978:	4299      	cmp	r1, r3
 800997a:	d119      	bne.n	80099b0 <_strtod_l+0x8d0>
 800997c:	4b96      	ldr	r3, [pc, #600]	@ (8009bd8 <_strtod_l+0xaf8>)
 800997e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009980:	429a      	cmp	r2, r3
 8009982:	d102      	bne.n	800998a <_strtod_l+0x8aa>
 8009984:	3101      	adds	r1, #1
 8009986:	f43f adca 	beq.w	800951e <_strtod_l+0x43e>
 800998a:	4b92      	ldr	r3, [pc, #584]	@ (8009bd4 <_strtod_l+0xaf4>)
 800998c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800998e:	401a      	ands	r2, r3
 8009990:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009994:	f04f 0a00 	mov.w	sl, #0
 8009998:	9b08      	ldr	r3, [sp, #32]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d1b8      	bne.n	8009910 <_strtod_l+0x830>
 800999e:	e5c9      	b.n	8009534 <_strtod_l+0x454>
 80099a0:	f04f 33ff 	mov.w	r3, #4294967295
 80099a4:	e7e8      	b.n	8009978 <_strtod_l+0x898>
 80099a6:	4613      	mov	r3, r2
 80099a8:	e7e6      	b.n	8009978 <_strtod_l+0x898>
 80099aa:	ea53 030a 	orrs.w	r3, r3, sl
 80099ae:	d0a1      	beq.n	80098f4 <_strtod_l+0x814>
 80099b0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80099b2:	b1db      	cbz	r3, 80099ec <_strtod_l+0x90c>
 80099b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80099b6:	4213      	tst	r3, r2
 80099b8:	d0ee      	beq.n	8009998 <_strtod_l+0x8b8>
 80099ba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80099bc:	9a08      	ldr	r2, [sp, #32]
 80099be:	4650      	mov	r0, sl
 80099c0:	4659      	mov	r1, fp
 80099c2:	b1bb      	cbz	r3, 80099f4 <_strtod_l+0x914>
 80099c4:	f7ff fb6e 	bl	80090a4 <sulp>
 80099c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80099cc:	ec53 2b10 	vmov	r2, r3, d0
 80099d0:	f7f6 fc7c 	bl	80002cc <__adddf3>
 80099d4:	4682      	mov	sl, r0
 80099d6:	468b      	mov	fp, r1
 80099d8:	e7de      	b.n	8009998 <_strtod_l+0x8b8>
 80099da:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80099de:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80099e2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80099e6:	f04f 3aff 	mov.w	sl, #4294967295
 80099ea:	e7d5      	b.n	8009998 <_strtod_l+0x8b8>
 80099ec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80099ee:	ea13 0f0a 	tst.w	r3, sl
 80099f2:	e7e1      	b.n	80099b8 <_strtod_l+0x8d8>
 80099f4:	f7ff fb56 	bl	80090a4 <sulp>
 80099f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80099fc:	ec53 2b10 	vmov	r2, r3, d0
 8009a00:	f7f6 fc62 	bl	80002c8 <__aeabi_dsub>
 8009a04:	2200      	movs	r2, #0
 8009a06:	2300      	movs	r3, #0
 8009a08:	4682      	mov	sl, r0
 8009a0a:	468b      	mov	fp, r1
 8009a0c:	f7f7 f87c 	bl	8000b08 <__aeabi_dcmpeq>
 8009a10:	2800      	cmp	r0, #0
 8009a12:	d0c1      	beq.n	8009998 <_strtod_l+0x8b8>
 8009a14:	e619      	b.n	800964a <_strtod_l+0x56a>
 8009a16:	4641      	mov	r1, r8
 8009a18:	4620      	mov	r0, r4
 8009a1a:	f7ff facd 	bl	8008fb8 <__ratio>
 8009a1e:	ec57 6b10 	vmov	r6, r7, d0
 8009a22:	2200      	movs	r2, #0
 8009a24:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009a28:	4630      	mov	r0, r6
 8009a2a:	4639      	mov	r1, r7
 8009a2c:	f7f7 f880 	bl	8000b30 <__aeabi_dcmple>
 8009a30:	2800      	cmp	r0, #0
 8009a32:	d06f      	beq.n	8009b14 <_strtod_l+0xa34>
 8009a34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d17a      	bne.n	8009b30 <_strtod_l+0xa50>
 8009a3a:	f1ba 0f00 	cmp.w	sl, #0
 8009a3e:	d158      	bne.n	8009af2 <_strtod_l+0xa12>
 8009a40:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009a42:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d15a      	bne.n	8009b00 <_strtod_l+0xa20>
 8009a4a:	4b64      	ldr	r3, [pc, #400]	@ (8009bdc <_strtod_l+0xafc>)
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	4630      	mov	r0, r6
 8009a50:	4639      	mov	r1, r7
 8009a52:	f7f7 f863 	bl	8000b1c <__aeabi_dcmplt>
 8009a56:	2800      	cmp	r0, #0
 8009a58:	d159      	bne.n	8009b0e <_strtod_l+0xa2e>
 8009a5a:	4630      	mov	r0, r6
 8009a5c:	4639      	mov	r1, r7
 8009a5e:	4b60      	ldr	r3, [pc, #384]	@ (8009be0 <_strtod_l+0xb00>)
 8009a60:	2200      	movs	r2, #0
 8009a62:	f7f6 fde9 	bl	8000638 <__aeabi_dmul>
 8009a66:	4606      	mov	r6, r0
 8009a68:	460f      	mov	r7, r1
 8009a6a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009a6e:	9606      	str	r6, [sp, #24]
 8009a70:	9307      	str	r3, [sp, #28]
 8009a72:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009a76:	4d57      	ldr	r5, [pc, #348]	@ (8009bd4 <_strtod_l+0xaf4>)
 8009a78:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009a7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009a7e:	401d      	ands	r5, r3
 8009a80:	4b58      	ldr	r3, [pc, #352]	@ (8009be4 <_strtod_l+0xb04>)
 8009a82:	429d      	cmp	r5, r3
 8009a84:	f040 80b2 	bne.w	8009bec <_strtod_l+0xb0c>
 8009a88:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009a8a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009a8e:	ec4b ab10 	vmov	d0, sl, fp
 8009a92:	f7ff f9c9 	bl	8008e28 <__ulp>
 8009a96:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009a9a:	ec51 0b10 	vmov	r0, r1, d0
 8009a9e:	f7f6 fdcb 	bl	8000638 <__aeabi_dmul>
 8009aa2:	4652      	mov	r2, sl
 8009aa4:	465b      	mov	r3, fp
 8009aa6:	f7f6 fc11 	bl	80002cc <__adddf3>
 8009aaa:	460b      	mov	r3, r1
 8009aac:	4949      	ldr	r1, [pc, #292]	@ (8009bd4 <_strtod_l+0xaf4>)
 8009aae:	4a4e      	ldr	r2, [pc, #312]	@ (8009be8 <_strtod_l+0xb08>)
 8009ab0:	4019      	ands	r1, r3
 8009ab2:	4291      	cmp	r1, r2
 8009ab4:	4682      	mov	sl, r0
 8009ab6:	d942      	bls.n	8009b3e <_strtod_l+0xa5e>
 8009ab8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009aba:	4b47      	ldr	r3, [pc, #284]	@ (8009bd8 <_strtod_l+0xaf8>)
 8009abc:	429a      	cmp	r2, r3
 8009abe:	d103      	bne.n	8009ac8 <_strtod_l+0x9e8>
 8009ac0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009ac2:	3301      	adds	r3, #1
 8009ac4:	f43f ad2b 	beq.w	800951e <_strtod_l+0x43e>
 8009ac8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009bd8 <_strtod_l+0xaf8>
 8009acc:	f04f 3aff 	mov.w	sl, #4294967295
 8009ad0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009ad2:	9805      	ldr	r0, [sp, #20]
 8009ad4:	f7fe fe74 	bl	80087c0 <_Bfree>
 8009ad8:	9805      	ldr	r0, [sp, #20]
 8009ada:	4649      	mov	r1, r9
 8009adc:	f7fe fe70 	bl	80087c0 <_Bfree>
 8009ae0:	9805      	ldr	r0, [sp, #20]
 8009ae2:	4641      	mov	r1, r8
 8009ae4:	f7fe fe6c 	bl	80087c0 <_Bfree>
 8009ae8:	9805      	ldr	r0, [sp, #20]
 8009aea:	4621      	mov	r1, r4
 8009aec:	f7fe fe68 	bl	80087c0 <_Bfree>
 8009af0:	e618      	b.n	8009724 <_strtod_l+0x644>
 8009af2:	f1ba 0f01 	cmp.w	sl, #1
 8009af6:	d103      	bne.n	8009b00 <_strtod_l+0xa20>
 8009af8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	f43f ada5 	beq.w	800964a <_strtod_l+0x56a>
 8009b00:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009bb0 <_strtod_l+0xad0>
 8009b04:	4f35      	ldr	r7, [pc, #212]	@ (8009bdc <_strtod_l+0xafc>)
 8009b06:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009b0a:	2600      	movs	r6, #0
 8009b0c:	e7b1      	b.n	8009a72 <_strtod_l+0x992>
 8009b0e:	4f34      	ldr	r7, [pc, #208]	@ (8009be0 <_strtod_l+0xb00>)
 8009b10:	2600      	movs	r6, #0
 8009b12:	e7aa      	b.n	8009a6a <_strtod_l+0x98a>
 8009b14:	4b32      	ldr	r3, [pc, #200]	@ (8009be0 <_strtod_l+0xb00>)
 8009b16:	4630      	mov	r0, r6
 8009b18:	4639      	mov	r1, r7
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	f7f6 fd8c 	bl	8000638 <__aeabi_dmul>
 8009b20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b22:	4606      	mov	r6, r0
 8009b24:	460f      	mov	r7, r1
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d09f      	beq.n	8009a6a <_strtod_l+0x98a>
 8009b2a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009b2e:	e7a0      	b.n	8009a72 <_strtod_l+0x992>
 8009b30:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009bb8 <_strtod_l+0xad8>
 8009b34:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009b38:	ec57 6b17 	vmov	r6, r7, d7
 8009b3c:	e799      	b.n	8009a72 <_strtod_l+0x992>
 8009b3e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009b42:	9b08      	ldr	r3, [sp, #32]
 8009b44:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d1c1      	bne.n	8009ad0 <_strtod_l+0x9f0>
 8009b4c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009b50:	0d1b      	lsrs	r3, r3, #20
 8009b52:	051b      	lsls	r3, r3, #20
 8009b54:	429d      	cmp	r5, r3
 8009b56:	d1bb      	bne.n	8009ad0 <_strtod_l+0x9f0>
 8009b58:	4630      	mov	r0, r6
 8009b5a:	4639      	mov	r1, r7
 8009b5c:	f7f7 f8cc 	bl	8000cf8 <__aeabi_d2lz>
 8009b60:	f7f6 fd3c 	bl	80005dc <__aeabi_l2d>
 8009b64:	4602      	mov	r2, r0
 8009b66:	460b      	mov	r3, r1
 8009b68:	4630      	mov	r0, r6
 8009b6a:	4639      	mov	r1, r7
 8009b6c:	f7f6 fbac 	bl	80002c8 <__aeabi_dsub>
 8009b70:	460b      	mov	r3, r1
 8009b72:	4602      	mov	r2, r0
 8009b74:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009b78:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009b7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b7e:	ea46 060a 	orr.w	r6, r6, sl
 8009b82:	431e      	orrs	r6, r3
 8009b84:	d06f      	beq.n	8009c66 <_strtod_l+0xb86>
 8009b86:	a30e      	add	r3, pc, #56	@ (adr r3, 8009bc0 <_strtod_l+0xae0>)
 8009b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b8c:	f7f6 ffc6 	bl	8000b1c <__aeabi_dcmplt>
 8009b90:	2800      	cmp	r0, #0
 8009b92:	f47f accf 	bne.w	8009534 <_strtod_l+0x454>
 8009b96:	a30c      	add	r3, pc, #48	@ (adr r3, 8009bc8 <_strtod_l+0xae8>)
 8009b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b9c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009ba0:	f7f6 ffda 	bl	8000b58 <__aeabi_dcmpgt>
 8009ba4:	2800      	cmp	r0, #0
 8009ba6:	d093      	beq.n	8009ad0 <_strtod_l+0x9f0>
 8009ba8:	e4c4      	b.n	8009534 <_strtod_l+0x454>
 8009baa:	bf00      	nop
 8009bac:	f3af 8000 	nop.w
 8009bb0:	00000000 	.word	0x00000000
 8009bb4:	bff00000 	.word	0xbff00000
 8009bb8:	00000000 	.word	0x00000000
 8009bbc:	3ff00000 	.word	0x3ff00000
 8009bc0:	94a03595 	.word	0x94a03595
 8009bc4:	3fdfffff 	.word	0x3fdfffff
 8009bc8:	35afe535 	.word	0x35afe535
 8009bcc:	3fe00000 	.word	0x3fe00000
 8009bd0:	000fffff 	.word	0x000fffff
 8009bd4:	7ff00000 	.word	0x7ff00000
 8009bd8:	7fefffff 	.word	0x7fefffff
 8009bdc:	3ff00000 	.word	0x3ff00000
 8009be0:	3fe00000 	.word	0x3fe00000
 8009be4:	7fe00000 	.word	0x7fe00000
 8009be8:	7c9fffff 	.word	0x7c9fffff
 8009bec:	9b08      	ldr	r3, [sp, #32]
 8009bee:	b323      	cbz	r3, 8009c3a <_strtod_l+0xb5a>
 8009bf0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009bf4:	d821      	bhi.n	8009c3a <_strtod_l+0xb5a>
 8009bf6:	a328      	add	r3, pc, #160	@ (adr r3, 8009c98 <_strtod_l+0xbb8>)
 8009bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bfc:	4630      	mov	r0, r6
 8009bfe:	4639      	mov	r1, r7
 8009c00:	f7f6 ff96 	bl	8000b30 <__aeabi_dcmple>
 8009c04:	b1a0      	cbz	r0, 8009c30 <_strtod_l+0xb50>
 8009c06:	4639      	mov	r1, r7
 8009c08:	4630      	mov	r0, r6
 8009c0a:	f7f6 ffed 	bl	8000be8 <__aeabi_d2uiz>
 8009c0e:	2801      	cmp	r0, #1
 8009c10:	bf38      	it	cc
 8009c12:	2001      	movcc	r0, #1
 8009c14:	f7f6 fc96 	bl	8000544 <__aeabi_ui2d>
 8009c18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c1a:	4606      	mov	r6, r0
 8009c1c:	460f      	mov	r7, r1
 8009c1e:	b9fb      	cbnz	r3, 8009c60 <_strtod_l+0xb80>
 8009c20:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009c24:	9014      	str	r0, [sp, #80]	@ 0x50
 8009c26:	9315      	str	r3, [sp, #84]	@ 0x54
 8009c28:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009c2c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009c30:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009c32:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009c36:	1b5b      	subs	r3, r3, r5
 8009c38:	9311      	str	r3, [sp, #68]	@ 0x44
 8009c3a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009c3e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009c42:	f7ff f8f1 	bl	8008e28 <__ulp>
 8009c46:	4650      	mov	r0, sl
 8009c48:	ec53 2b10 	vmov	r2, r3, d0
 8009c4c:	4659      	mov	r1, fp
 8009c4e:	f7f6 fcf3 	bl	8000638 <__aeabi_dmul>
 8009c52:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009c56:	f7f6 fb39 	bl	80002cc <__adddf3>
 8009c5a:	4682      	mov	sl, r0
 8009c5c:	468b      	mov	fp, r1
 8009c5e:	e770      	b.n	8009b42 <_strtod_l+0xa62>
 8009c60:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009c64:	e7e0      	b.n	8009c28 <_strtod_l+0xb48>
 8009c66:	a30e      	add	r3, pc, #56	@ (adr r3, 8009ca0 <_strtod_l+0xbc0>)
 8009c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c6c:	f7f6 ff56 	bl	8000b1c <__aeabi_dcmplt>
 8009c70:	e798      	b.n	8009ba4 <_strtod_l+0xac4>
 8009c72:	2300      	movs	r3, #0
 8009c74:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009c76:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009c78:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009c7a:	6013      	str	r3, [r2, #0]
 8009c7c:	f7ff ba6d 	b.w	800915a <_strtod_l+0x7a>
 8009c80:	2a65      	cmp	r2, #101	@ 0x65
 8009c82:	f43f ab66 	beq.w	8009352 <_strtod_l+0x272>
 8009c86:	2a45      	cmp	r2, #69	@ 0x45
 8009c88:	f43f ab63 	beq.w	8009352 <_strtod_l+0x272>
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	f7ff bb9e 	b.w	80093ce <_strtod_l+0x2ee>
 8009c92:	bf00      	nop
 8009c94:	f3af 8000 	nop.w
 8009c98:	ffc00000 	.word	0xffc00000
 8009c9c:	41dfffff 	.word	0x41dfffff
 8009ca0:	94a03595 	.word	0x94a03595
 8009ca4:	3fcfffff 	.word	0x3fcfffff

08009ca8 <_strtod_r>:
 8009ca8:	4b01      	ldr	r3, [pc, #4]	@ (8009cb0 <_strtod_r+0x8>)
 8009caa:	f7ff ba19 	b.w	80090e0 <_strtod_l>
 8009cae:	bf00      	nop
 8009cb0:	2000006c 	.word	0x2000006c

08009cb4 <_strtol_l.constprop.0>:
 8009cb4:	2b24      	cmp	r3, #36	@ 0x24
 8009cb6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cba:	4686      	mov	lr, r0
 8009cbc:	4690      	mov	r8, r2
 8009cbe:	d801      	bhi.n	8009cc4 <_strtol_l.constprop.0+0x10>
 8009cc0:	2b01      	cmp	r3, #1
 8009cc2:	d106      	bne.n	8009cd2 <_strtol_l.constprop.0+0x1e>
 8009cc4:	f7fd fdac 	bl	8007820 <__errno>
 8009cc8:	2316      	movs	r3, #22
 8009cca:	6003      	str	r3, [r0, #0]
 8009ccc:	2000      	movs	r0, #0
 8009cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cd2:	4834      	ldr	r0, [pc, #208]	@ (8009da4 <_strtol_l.constprop.0+0xf0>)
 8009cd4:	460d      	mov	r5, r1
 8009cd6:	462a      	mov	r2, r5
 8009cd8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009cdc:	5d06      	ldrb	r6, [r0, r4]
 8009cde:	f016 0608 	ands.w	r6, r6, #8
 8009ce2:	d1f8      	bne.n	8009cd6 <_strtol_l.constprop.0+0x22>
 8009ce4:	2c2d      	cmp	r4, #45	@ 0x2d
 8009ce6:	d12d      	bne.n	8009d44 <_strtol_l.constprop.0+0x90>
 8009ce8:	782c      	ldrb	r4, [r5, #0]
 8009cea:	2601      	movs	r6, #1
 8009cec:	1c95      	adds	r5, r2, #2
 8009cee:	f033 0210 	bics.w	r2, r3, #16
 8009cf2:	d109      	bne.n	8009d08 <_strtol_l.constprop.0+0x54>
 8009cf4:	2c30      	cmp	r4, #48	@ 0x30
 8009cf6:	d12a      	bne.n	8009d4e <_strtol_l.constprop.0+0x9a>
 8009cf8:	782a      	ldrb	r2, [r5, #0]
 8009cfa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009cfe:	2a58      	cmp	r2, #88	@ 0x58
 8009d00:	d125      	bne.n	8009d4e <_strtol_l.constprop.0+0x9a>
 8009d02:	786c      	ldrb	r4, [r5, #1]
 8009d04:	2310      	movs	r3, #16
 8009d06:	3502      	adds	r5, #2
 8009d08:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009d0c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009d10:	2200      	movs	r2, #0
 8009d12:	fbbc f9f3 	udiv	r9, ip, r3
 8009d16:	4610      	mov	r0, r2
 8009d18:	fb03 ca19 	mls	sl, r3, r9, ip
 8009d1c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009d20:	2f09      	cmp	r7, #9
 8009d22:	d81b      	bhi.n	8009d5c <_strtol_l.constprop.0+0xa8>
 8009d24:	463c      	mov	r4, r7
 8009d26:	42a3      	cmp	r3, r4
 8009d28:	dd27      	ble.n	8009d7a <_strtol_l.constprop.0+0xc6>
 8009d2a:	1c57      	adds	r7, r2, #1
 8009d2c:	d007      	beq.n	8009d3e <_strtol_l.constprop.0+0x8a>
 8009d2e:	4581      	cmp	r9, r0
 8009d30:	d320      	bcc.n	8009d74 <_strtol_l.constprop.0+0xc0>
 8009d32:	d101      	bne.n	8009d38 <_strtol_l.constprop.0+0x84>
 8009d34:	45a2      	cmp	sl, r4
 8009d36:	db1d      	blt.n	8009d74 <_strtol_l.constprop.0+0xc0>
 8009d38:	fb00 4003 	mla	r0, r0, r3, r4
 8009d3c:	2201      	movs	r2, #1
 8009d3e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009d42:	e7eb      	b.n	8009d1c <_strtol_l.constprop.0+0x68>
 8009d44:	2c2b      	cmp	r4, #43	@ 0x2b
 8009d46:	bf04      	itt	eq
 8009d48:	782c      	ldrbeq	r4, [r5, #0]
 8009d4a:	1c95      	addeq	r5, r2, #2
 8009d4c:	e7cf      	b.n	8009cee <_strtol_l.constprop.0+0x3a>
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d1da      	bne.n	8009d08 <_strtol_l.constprop.0+0x54>
 8009d52:	2c30      	cmp	r4, #48	@ 0x30
 8009d54:	bf0c      	ite	eq
 8009d56:	2308      	moveq	r3, #8
 8009d58:	230a      	movne	r3, #10
 8009d5a:	e7d5      	b.n	8009d08 <_strtol_l.constprop.0+0x54>
 8009d5c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009d60:	2f19      	cmp	r7, #25
 8009d62:	d801      	bhi.n	8009d68 <_strtol_l.constprop.0+0xb4>
 8009d64:	3c37      	subs	r4, #55	@ 0x37
 8009d66:	e7de      	b.n	8009d26 <_strtol_l.constprop.0+0x72>
 8009d68:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009d6c:	2f19      	cmp	r7, #25
 8009d6e:	d804      	bhi.n	8009d7a <_strtol_l.constprop.0+0xc6>
 8009d70:	3c57      	subs	r4, #87	@ 0x57
 8009d72:	e7d8      	b.n	8009d26 <_strtol_l.constprop.0+0x72>
 8009d74:	f04f 32ff 	mov.w	r2, #4294967295
 8009d78:	e7e1      	b.n	8009d3e <_strtol_l.constprop.0+0x8a>
 8009d7a:	1c53      	adds	r3, r2, #1
 8009d7c:	d108      	bne.n	8009d90 <_strtol_l.constprop.0+0xdc>
 8009d7e:	2322      	movs	r3, #34	@ 0x22
 8009d80:	f8ce 3000 	str.w	r3, [lr]
 8009d84:	4660      	mov	r0, ip
 8009d86:	f1b8 0f00 	cmp.w	r8, #0
 8009d8a:	d0a0      	beq.n	8009cce <_strtol_l.constprop.0+0x1a>
 8009d8c:	1e69      	subs	r1, r5, #1
 8009d8e:	e006      	b.n	8009d9e <_strtol_l.constprop.0+0xea>
 8009d90:	b106      	cbz	r6, 8009d94 <_strtol_l.constprop.0+0xe0>
 8009d92:	4240      	negs	r0, r0
 8009d94:	f1b8 0f00 	cmp.w	r8, #0
 8009d98:	d099      	beq.n	8009cce <_strtol_l.constprop.0+0x1a>
 8009d9a:	2a00      	cmp	r2, #0
 8009d9c:	d1f6      	bne.n	8009d8c <_strtol_l.constprop.0+0xd8>
 8009d9e:	f8c8 1000 	str.w	r1, [r8]
 8009da2:	e794      	b.n	8009cce <_strtol_l.constprop.0+0x1a>
 8009da4:	0800b259 	.word	0x0800b259

08009da8 <_strtol_r>:
 8009da8:	f7ff bf84 	b.w	8009cb4 <_strtol_l.constprop.0>

08009dac <__ssputs_r>:
 8009dac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009db0:	688e      	ldr	r6, [r1, #8]
 8009db2:	461f      	mov	r7, r3
 8009db4:	42be      	cmp	r6, r7
 8009db6:	680b      	ldr	r3, [r1, #0]
 8009db8:	4682      	mov	sl, r0
 8009dba:	460c      	mov	r4, r1
 8009dbc:	4690      	mov	r8, r2
 8009dbe:	d82d      	bhi.n	8009e1c <__ssputs_r+0x70>
 8009dc0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009dc4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009dc8:	d026      	beq.n	8009e18 <__ssputs_r+0x6c>
 8009dca:	6965      	ldr	r5, [r4, #20]
 8009dcc:	6909      	ldr	r1, [r1, #16]
 8009dce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009dd2:	eba3 0901 	sub.w	r9, r3, r1
 8009dd6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009dda:	1c7b      	adds	r3, r7, #1
 8009ddc:	444b      	add	r3, r9
 8009dde:	106d      	asrs	r5, r5, #1
 8009de0:	429d      	cmp	r5, r3
 8009de2:	bf38      	it	cc
 8009de4:	461d      	movcc	r5, r3
 8009de6:	0553      	lsls	r3, r2, #21
 8009de8:	d527      	bpl.n	8009e3a <__ssputs_r+0x8e>
 8009dea:	4629      	mov	r1, r5
 8009dec:	f7fe fc1c 	bl	8008628 <_malloc_r>
 8009df0:	4606      	mov	r6, r0
 8009df2:	b360      	cbz	r0, 8009e4e <__ssputs_r+0xa2>
 8009df4:	6921      	ldr	r1, [r4, #16]
 8009df6:	464a      	mov	r2, r9
 8009df8:	f7fd fd3f 	bl	800787a <memcpy>
 8009dfc:	89a3      	ldrh	r3, [r4, #12]
 8009dfe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009e02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e06:	81a3      	strh	r3, [r4, #12]
 8009e08:	6126      	str	r6, [r4, #16]
 8009e0a:	6165      	str	r5, [r4, #20]
 8009e0c:	444e      	add	r6, r9
 8009e0e:	eba5 0509 	sub.w	r5, r5, r9
 8009e12:	6026      	str	r6, [r4, #0]
 8009e14:	60a5      	str	r5, [r4, #8]
 8009e16:	463e      	mov	r6, r7
 8009e18:	42be      	cmp	r6, r7
 8009e1a:	d900      	bls.n	8009e1e <__ssputs_r+0x72>
 8009e1c:	463e      	mov	r6, r7
 8009e1e:	6820      	ldr	r0, [r4, #0]
 8009e20:	4632      	mov	r2, r6
 8009e22:	4641      	mov	r1, r8
 8009e24:	f000 f9c6 	bl	800a1b4 <memmove>
 8009e28:	68a3      	ldr	r3, [r4, #8]
 8009e2a:	1b9b      	subs	r3, r3, r6
 8009e2c:	60a3      	str	r3, [r4, #8]
 8009e2e:	6823      	ldr	r3, [r4, #0]
 8009e30:	4433      	add	r3, r6
 8009e32:	6023      	str	r3, [r4, #0]
 8009e34:	2000      	movs	r0, #0
 8009e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e3a:	462a      	mov	r2, r5
 8009e3c:	f000 fd7d 	bl	800a93a <_realloc_r>
 8009e40:	4606      	mov	r6, r0
 8009e42:	2800      	cmp	r0, #0
 8009e44:	d1e0      	bne.n	8009e08 <__ssputs_r+0x5c>
 8009e46:	6921      	ldr	r1, [r4, #16]
 8009e48:	4650      	mov	r0, sl
 8009e4a:	f7fe fb79 	bl	8008540 <_free_r>
 8009e4e:	230c      	movs	r3, #12
 8009e50:	f8ca 3000 	str.w	r3, [sl]
 8009e54:	89a3      	ldrh	r3, [r4, #12]
 8009e56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009e5a:	81a3      	strh	r3, [r4, #12]
 8009e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8009e60:	e7e9      	b.n	8009e36 <__ssputs_r+0x8a>
	...

08009e64 <_svfiprintf_r>:
 8009e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e68:	4698      	mov	r8, r3
 8009e6a:	898b      	ldrh	r3, [r1, #12]
 8009e6c:	061b      	lsls	r3, r3, #24
 8009e6e:	b09d      	sub	sp, #116	@ 0x74
 8009e70:	4607      	mov	r7, r0
 8009e72:	460d      	mov	r5, r1
 8009e74:	4614      	mov	r4, r2
 8009e76:	d510      	bpl.n	8009e9a <_svfiprintf_r+0x36>
 8009e78:	690b      	ldr	r3, [r1, #16]
 8009e7a:	b973      	cbnz	r3, 8009e9a <_svfiprintf_r+0x36>
 8009e7c:	2140      	movs	r1, #64	@ 0x40
 8009e7e:	f7fe fbd3 	bl	8008628 <_malloc_r>
 8009e82:	6028      	str	r0, [r5, #0]
 8009e84:	6128      	str	r0, [r5, #16]
 8009e86:	b930      	cbnz	r0, 8009e96 <_svfiprintf_r+0x32>
 8009e88:	230c      	movs	r3, #12
 8009e8a:	603b      	str	r3, [r7, #0]
 8009e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8009e90:	b01d      	add	sp, #116	@ 0x74
 8009e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e96:	2340      	movs	r3, #64	@ 0x40
 8009e98:	616b      	str	r3, [r5, #20]
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e9e:	2320      	movs	r3, #32
 8009ea0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009ea4:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ea8:	2330      	movs	r3, #48	@ 0x30
 8009eaa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a048 <_svfiprintf_r+0x1e4>
 8009eae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009eb2:	f04f 0901 	mov.w	r9, #1
 8009eb6:	4623      	mov	r3, r4
 8009eb8:	469a      	mov	sl, r3
 8009eba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ebe:	b10a      	cbz	r2, 8009ec4 <_svfiprintf_r+0x60>
 8009ec0:	2a25      	cmp	r2, #37	@ 0x25
 8009ec2:	d1f9      	bne.n	8009eb8 <_svfiprintf_r+0x54>
 8009ec4:	ebba 0b04 	subs.w	fp, sl, r4
 8009ec8:	d00b      	beq.n	8009ee2 <_svfiprintf_r+0x7e>
 8009eca:	465b      	mov	r3, fp
 8009ecc:	4622      	mov	r2, r4
 8009ece:	4629      	mov	r1, r5
 8009ed0:	4638      	mov	r0, r7
 8009ed2:	f7ff ff6b 	bl	8009dac <__ssputs_r>
 8009ed6:	3001      	adds	r0, #1
 8009ed8:	f000 80a7 	beq.w	800a02a <_svfiprintf_r+0x1c6>
 8009edc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009ede:	445a      	add	r2, fp
 8009ee0:	9209      	str	r2, [sp, #36]	@ 0x24
 8009ee2:	f89a 3000 	ldrb.w	r3, [sl]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	f000 809f 	beq.w	800a02a <_svfiprintf_r+0x1c6>
 8009eec:	2300      	movs	r3, #0
 8009eee:	f04f 32ff 	mov.w	r2, #4294967295
 8009ef2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ef6:	f10a 0a01 	add.w	sl, sl, #1
 8009efa:	9304      	str	r3, [sp, #16]
 8009efc:	9307      	str	r3, [sp, #28]
 8009efe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009f02:	931a      	str	r3, [sp, #104]	@ 0x68
 8009f04:	4654      	mov	r4, sl
 8009f06:	2205      	movs	r2, #5
 8009f08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f0c:	484e      	ldr	r0, [pc, #312]	@ (800a048 <_svfiprintf_r+0x1e4>)
 8009f0e:	f7f6 f97f 	bl	8000210 <memchr>
 8009f12:	9a04      	ldr	r2, [sp, #16]
 8009f14:	b9d8      	cbnz	r0, 8009f4e <_svfiprintf_r+0xea>
 8009f16:	06d0      	lsls	r0, r2, #27
 8009f18:	bf44      	itt	mi
 8009f1a:	2320      	movmi	r3, #32
 8009f1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009f20:	0711      	lsls	r1, r2, #28
 8009f22:	bf44      	itt	mi
 8009f24:	232b      	movmi	r3, #43	@ 0x2b
 8009f26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009f2a:	f89a 3000 	ldrb.w	r3, [sl]
 8009f2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009f30:	d015      	beq.n	8009f5e <_svfiprintf_r+0xfa>
 8009f32:	9a07      	ldr	r2, [sp, #28]
 8009f34:	4654      	mov	r4, sl
 8009f36:	2000      	movs	r0, #0
 8009f38:	f04f 0c0a 	mov.w	ip, #10
 8009f3c:	4621      	mov	r1, r4
 8009f3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f42:	3b30      	subs	r3, #48	@ 0x30
 8009f44:	2b09      	cmp	r3, #9
 8009f46:	d94b      	bls.n	8009fe0 <_svfiprintf_r+0x17c>
 8009f48:	b1b0      	cbz	r0, 8009f78 <_svfiprintf_r+0x114>
 8009f4a:	9207      	str	r2, [sp, #28]
 8009f4c:	e014      	b.n	8009f78 <_svfiprintf_r+0x114>
 8009f4e:	eba0 0308 	sub.w	r3, r0, r8
 8009f52:	fa09 f303 	lsl.w	r3, r9, r3
 8009f56:	4313      	orrs	r3, r2
 8009f58:	9304      	str	r3, [sp, #16]
 8009f5a:	46a2      	mov	sl, r4
 8009f5c:	e7d2      	b.n	8009f04 <_svfiprintf_r+0xa0>
 8009f5e:	9b03      	ldr	r3, [sp, #12]
 8009f60:	1d19      	adds	r1, r3, #4
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	9103      	str	r1, [sp, #12]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	bfbb      	ittet	lt
 8009f6a:	425b      	neglt	r3, r3
 8009f6c:	f042 0202 	orrlt.w	r2, r2, #2
 8009f70:	9307      	strge	r3, [sp, #28]
 8009f72:	9307      	strlt	r3, [sp, #28]
 8009f74:	bfb8      	it	lt
 8009f76:	9204      	strlt	r2, [sp, #16]
 8009f78:	7823      	ldrb	r3, [r4, #0]
 8009f7a:	2b2e      	cmp	r3, #46	@ 0x2e
 8009f7c:	d10a      	bne.n	8009f94 <_svfiprintf_r+0x130>
 8009f7e:	7863      	ldrb	r3, [r4, #1]
 8009f80:	2b2a      	cmp	r3, #42	@ 0x2a
 8009f82:	d132      	bne.n	8009fea <_svfiprintf_r+0x186>
 8009f84:	9b03      	ldr	r3, [sp, #12]
 8009f86:	1d1a      	adds	r2, r3, #4
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	9203      	str	r2, [sp, #12]
 8009f8c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009f90:	3402      	adds	r4, #2
 8009f92:	9305      	str	r3, [sp, #20]
 8009f94:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a058 <_svfiprintf_r+0x1f4>
 8009f98:	7821      	ldrb	r1, [r4, #0]
 8009f9a:	2203      	movs	r2, #3
 8009f9c:	4650      	mov	r0, sl
 8009f9e:	f7f6 f937 	bl	8000210 <memchr>
 8009fa2:	b138      	cbz	r0, 8009fb4 <_svfiprintf_r+0x150>
 8009fa4:	9b04      	ldr	r3, [sp, #16]
 8009fa6:	eba0 000a 	sub.w	r0, r0, sl
 8009faa:	2240      	movs	r2, #64	@ 0x40
 8009fac:	4082      	lsls	r2, r0
 8009fae:	4313      	orrs	r3, r2
 8009fb0:	3401      	adds	r4, #1
 8009fb2:	9304      	str	r3, [sp, #16]
 8009fb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fb8:	4824      	ldr	r0, [pc, #144]	@ (800a04c <_svfiprintf_r+0x1e8>)
 8009fba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009fbe:	2206      	movs	r2, #6
 8009fc0:	f7f6 f926 	bl	8000210 <memchr>
 8009fc4:	2800      	cmp	r0, #0
 8009fc6:	d036      	beq.n	800a036 <_svfiprintf_r+0x1d2>
 8009fc8:	4b21      	ldr	r3, [pc, #132]	@ (800a050 <_svfiprintf_r+0x1ec>)
 8009fca:	bb1b      	cbnz	r3, 800a014 <_svfiprintf_r+0x1b0>
 8009fcc:	9b03      	ldr	r3, [sp, #12]
 8009fce:	3307      	adds	r3, #7
 8009fd0:	f023 0307 	bic.w	r3, r3, #7
 8009fd4:	3308      	adds	r3, #8
 8009fd6:	9303      	str	r3, [sp, #12]
 8009fd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fda:	4433      	add	r3, r6
 8009fdc:	9309      	str	r3, [sp, #36]	@ 0x24
 8009fde:	e76a      	b.n	8009eb6 <_svfiprintf_r+0x52>
 8009fe0:	fb0c 3202 	mla	r2, ip, r2, r3
 8009fe4:	460c      	mov	r4, r1
 8009fe6:	2001      	movs	r0, #1
 8009fe8:	e7a8      	b.n	8009f3c <_svfiprintf_r+0xd8>
 8009fea:	2300      	movs	r3, #0
 8009fec:	3401      	adds	r4, #1
 8009fee:	9305      	str	r3, [sp, #20]
 8009ff0:	4619      	mov	r1, r3
 8009ff2:	f04f 0c0a 	mov.w	ip, #10
 8009ff6:	4620      	mov	r0, r4
 8009ff8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ffc:	3a30      	subs	r2, #48	@ 0x30
 8009ffe:	2a09      	cmp	r2, #9
 800a000:	d903      	bls.n	800a00a <_svfiprintf_r+0x1a6>
 800a002:	2b00      	cmp	r3, #0
 800a004:	d0c6      	beq.n	8009f94 <_svfiprintf_r+0x130>
 800a006:	9105      	str	r1, [sp, #20]
 800a008:	e7c4      	b.n	8009f94 <_svfiprintf_r+0x130>
 800a00a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a00e:	4604      	mov	r4, r0
 800a010:	2301      	movs	r3, #1
 800a012:	e7f0      	b.n	8009ff6 <_svfiprintf_r+0x192>
 800a014:	ab03      	add	r3, sp, #12
 800a016:	9300      	str	r3, [sp, #0]
 800a018:	462a      	mov	r2, r5
 800a01a:	4b0e      	ldr	r3, [pc, #56]	@ (800a054 <_svfiprintf_r+0x1f0>)
 800a01c:	a904      	add	r1, sp, #16
 800a01e:	4638      	mov	r0, r7
 800a020:	f7fc fc86 	bl	8006930 <_printf_float>
 800a024:	1c42      	adds	r2, r0, #1
 800a026:	4606      	mov	r6, r0
 800a028:	d1d6      	bne.n	8009fd8 <_svfiprintf_r+0x174>
 800a02a:	89ab      	ldrh	r3, [r5, #12]
 800a02c:	065b      	lsls	r3, r3, #25
 800a02e:	f53f af2d 	bmi.w	8009e8c <_svfiprintf_r+0x28>
 800a032:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a034:	e72c      	b.n	8009e90 <_svfiprintf_r+0x2c>
 800a036:	ab03      	add	r3, sp, #12
 800a038:	9300      	str	r3, [sp, #0]
 800a03a:	462a      	mov	r2, r5
 800a03c:	4b05      	ldr	r3, [pc, #20]	@ (800a054 <_svfiprintf_r+0x1f0>)
 800a03e:	a904      	add	r1, sp, #16
 800a040:	4638      	mov	r0, r7
 800a042:	f7fc ff0d 	bl	8006e60 <_printf_i>
 800a046:	e7ed      	b.n	800a024 <_svfiprintf_r+0x1c0>
 800a048:	0800b359 	.word	0x0800b359
 800a04c:	0800b363 	.word	0x0800b363
 800a050:	08006931 	.word	0x08006931
 800a054:	08009dad 	.word	0x08009dad
 800a058:	0800b35f 	.word	0x0800b35f

0800a05c <__sflush_r>:
 800a05c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a064:	0716      	lsls	r6, r2, #28
 800a066:	4605      	mov	r5, r0
 800a068:	460c      	mov	r4, r1
 800a06a:	d454      	bmi.n	800a116 <__sflush_r+0xba>
 800a06c:	684b      	ldr	r3, [r1, #4]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	dc02      	bgt.n	800a078 <__sflush_r+0x1c>
 800a072:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a074:	2b00      	cmp	r3, #0
 800a076:	dd48      	ble.n	800a10a <__sflush_r+0xae>
 800a078:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a07a:	2e00      	cmp	r6, #0
 800a07c:	d045      	beq.n	800a10a <__sflush_r+0xae>
 800a07e:	2300      	movs	r3, #0
 800a080:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a084:	682f      	ldr	r7, [r5, #0]
 800a086:	6a21      	ldr	r1, [r4, #32]
 800a088:	602b      	str	r3, [r5, #0]
 800a08a:	d030      	beq.n	800a0ee <__sflush_r+0x92>
 800a08c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a08e:	89a3      	ldrh	r3, [r4, #12]
 800a090:	0759      	lsls	r1, r3, #29
 800a092:	d505      	bpl.n	800a0a0 <__sflush_r+0x44>
 800a094:	6863      	ldr	r3, [r4, #4]
 800a096:	1ad2      	subs	r2, r2, r3
 800a098:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a09a:	b10b      	cbz	r3, 800a0a0 <__sflush_r+0x44>
 800a09c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a09e:	1ad2      	subs	r2, r2, r3
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a0a4:	6a21      	ldr	r1, [r4, #32]
 800a0a6:	4628      	mov	r0, r5
 800a0a8:	47b0      	blx	r6
 800a0aa:	1c43      	adds	r3, r0, #1
 800a0ac:	89a3      	ldrh	r3, [r4, #12]
 800a0ae:	d106      	bne.n	800a0be <__sflush_r+0x62>
 800a0b0:	6829      	ldr	r1, [r5, #0]
 800a0b2:	291d      	cmp	r1, #29
 800a0b4:	d82b      	bhi.n	800a10e <__sflush_r+0xb2>
 800a0b6:	4a2a      	ldr	r2, [pc, #168]	@ (800a160 <__sflush_r+0x104>)
 800a0b8:	410a      	asrs	r2, r1
 800a0ba:	07d6      	lsls	r6, r2, #31
 800a0bc:	d427      	bmi.n	800a10e <__sflush_r+0xb2>
 800a0be:	2200      	movs	r2, #0
 800a0c0:	6062      	str	r2, [r4, #4]
 800a0c2:	04d9      	lsls	r1, r3, #19
 800a0c4:	6922      	ldr	r2, [r4, #16]
 800a0c6:	6022      	str	r2, [r4, #0]
 800a0c8:	d504      	bpl.n	800a0d4 <__sflush_r+0x78>
 800a0ca:	1c42      	adds	r2, r0, #1
 800a0cc:	d101      	bne.n	800a0d2 <__sflush_r+0x76>
 800a0ce:	682b      	ldr	r3, [r5, #0]
 800a0d0:	b903      	cbnz	r3, 800a0d4 <__sflush_r+0x78>
 800a0d2:	6560      	str	r0, [r4, #84]	@ 0x54
 800a0d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a0d6:	602f      	str	r7, [r5, #0]
 800a0d8:	b1b9      	cbz	r1, 800a10a <__sflush_r+0xae>
 800a0da:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a0de:	4299      	cmp	r1, r3
 800a0e0:	d002      	beq.n	800a0e8 <__sflush_r+0x8c>
 800a0e2:	4628      	mov	r0, r5
 800a0e4:	f7fe fa2c 	bl	8008540 <_free_r>
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	6363      	str	r3, [r4, #52]	@ 0x34
 800a0ec:	e00d      	b.n	800a10a <__sflush_r+0xae>
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	4628      	mov	r0, r5
 800a0f2:	47b0      	blx	r6
 800a0f4:	4602      	mov	r2, r0
 800a0f6:	1c50      	adds	r0, r2, #1
 800a0f8:	d1c9      	bne.n	800a08e <__sflush_r+0x32>
 800a0fa:	682b      	ldr	r3, [r5, #0]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d0c6      	beq.n	800a08e <__sflush_r+0x32>
 800a100:	2b1d      	cmp	r3, #29
 800a102:	d001      	beq.n	800a108 <__sflush_r+0xac>
 800a104:	2b16      	cmp	r3, #22
 800a106:	d11e      	bne.n	800a146 <__sflush_r+0xea>
 800a108:	602f      	str	r7, [r5, #0]
 800a10a:	2000      	movs	r0, #0
 800a10c:	e022      	b.n	800a154 <__sflush_r+0xf8>
 800a10e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a112:	b21b      	sxth	r3, r3
 800a114:	e01b      	b.n	800a14e <__sflush_r+0xf2>
 800a116:	690f      	ldr	r7, [r1, #16]
 800a118:	2f00      	cmp	r7, #0
 800a11a:	d0f6      	beq.n	800a10a <__sflush_r+0xae>
 800a11c:	0793      	lsls	r3, r2, #30
 800a11e:	680e      	ldr	r6, [r1, #0]
 800a120:	bf08      	it	eq
 800a122:	694b      	ldreq	r3, [r1, #20]
 800a124:	600f      	str	r7, [r1, #0]
 800a126:	bf18      	it	ne
 800a128:	2300      	movne	r3, #0
 800a12a:	eba6 0807 	sub.w	r8, r6, r7
 800a12e:	608b      	str	r3, [r1, #8]
 800a130:	f1b8 0f00 	cmp.w	r8, #0
 800a134:	dde9      	ble.n	800a10a <__sflush_r+0xae>
 800a136:	6a21      	ldr	r1, [r4, #32]
 800a138:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a13a:	4643      	mov	r3, r8
 800a13c:	463a      	mov	r2, r7
 800a13e:	4628      	mov	r0, r5
 800a140:	47b0      	blx	r6
 800a142:	2800      	cmp	r0, #0
 800a144:	dc08      	bgt.n	800a158 <__sflush_r+0xfc>
 800a146:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a14a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a14e:	81a3      	strh	r3, [r4, #12]
 800a150:	f04f 30ff 	mov.w	r0, #4294967295
 800a154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a158:	4407      	add	r7, r0
 800a15a:	eba8 0800 	sub.w	r8, r8, r0
 800a15e:	e7e7      	b.n	800a130 <__sflush_r+0xd4>
 800a160:	dfbffffe 	.word	0xdfbffffe

0800a164 <_fflush_r>:
 800a164:	b538      	push	{r3, r4, r5, lr}
 800a166:	690b      	ldr	r3, [r1, #16]
 800a168:	4605      	mov	r5, r0
 800a16a:	460c      	mov	r4, r1
 800a16c:	b913      	cbnz	r3, 800a174 <_fflush_r+0x10>
 800a16e:	2500      	movs	r5, #0
 800a170:	4628      	mov	r0, r5
 800a172:	bd38      	pop	{r3, r4, r5, pc}
 800a174:	b118      	cbz	r0, 800a17e <_fflush_r+0x1a>
 800a176:	6a03      	ldr	r3, [r0, #32]
 800a178:	b90b      	cbnz	r3, 800a17e <_fflush_r+0x1a>
 800a17a:	f7fd fa31 	bl	80075e0 <__sinit>
 800a17e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d0f3      	beq.n	800a16e <_fflush_r+0xa>
 800a186:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a188:	07d0      	lsls	r0, r2, #31
 800a18a:	d404      	bmi.n	800a196 <_fflush_r+0x32>
 800a18c:	0599      	lsls	r1, r3, #22
 800a18e:	d402      	bmi.n	800a196 <_fflush_r+0x32>
 800a190:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a192:	f7fd fb70 	bl	8007876 <__retarget_lock_acquire_recursive>
 800a196:	4628      	mov	r0, r5
 800a198:	4621      	mov	r1, r4
 800a19a:	f7ff ff5f 	bl	800a05c <__sflush_r>
 800a19e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a1a0:	07da      	lsls	r2, r3, #31
 800a1a2:	4605      	mov	r5, r0
 800a1a4:	d4e4      	bmi.n	800a170 <_fflush_r+0xc>
 800a1a6:	89a3      	ldrh	r3, [r4, #12]
 800a1a8:	059b      	lsls	r3, r3, #22
 800a1aa:	d4e1      	bmi.n	800a170 <_fflush_r+0xc>
 800a1ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a1ae:	f7fd fb63 	bl	8007878 <__retarget_lock_release_recursive>
 800a1b2:	e7dd      	b.n	800a170 <_fflush_r+0xc>

0800a1b4 <memmove>:
 800a1b4:	4288      	cmp	r0, r1
 800a1b6:	b510      	push	{r4, lr}
 800a1b8:	eb01 0402 	add.w	r4, r1, r2
 800a1bc:	d902      	bls.n	800a1c4 <memmove+0x10>
 800a1be:	4284      	cmp	r4, r0
 800a1c0:	4623      	mov	r3, r4
 800a1c2:	d807      	bhi.n	800a1d4 <memmove+0x20>
 800a1c4:	1e43      	subs	r3, r0, #1
 800a1c6:	42a1      	cmp	r1, r4
 800a1c8:	d008      	beq.n	800a1dc <memmove+0x28>
 800a1ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a1ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a1d2:	e7f8      	b.n	800a1c6 <memmove+0x12>
 800a1d4:	4402      	add	r2, r0
 800a1d6:	4601      	mov	r1, r0
 800a1d8:	428a      	cmp	r2, r1
 800a1da:	d100      	bne.n	800a1de <memmove+0x2a>
 800a1dc:	bd10      	pop	{r4, pc}
 800a1de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a1e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a1e6:	e7f7      	b.n	800a1d8 <memmove+0x24>

0800a1e8 <strncmp>:
 800a1e8:	b510      	push	{r4, lr}
 800a1ea:	b16a      	cbz	r2, 800a208 <strncmp+0x20>
 800a1ec:	3901      	subs	r1, #1
 800a1ee:	1884      	adds	r4, r0, r2
 800a1f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1f4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a1f8:	429a      	cmp	r2, r3
 800a1fa:	d103      	bne.n	800a204 <strncmp+0x1c>
 800a1fc:	42a0      	cmp	r0, r4
 800a1fe:	d001      	beq.n	800a204 <strncmp+0x1c>
 800a200:	2a00      	cmp	r2, #0
 800a202:	d1f5      	bne.n	800a1f0 <strncmp+0x8>
 800a204:	1ad0      	subs	r0, r2, r3
 800a206:	bd10      	pop	{r4, pc}
 800a208:	4610      	mov	r0, r2
 800a20a:	e7fc      	b.n	800a206 <strncmp+0x1e>

0800a20c <_sbrk_r>:
 800a20c:	b538      	push	{r3, r4, r5, lr}
 800a20e:	4d06      	ldr	r5, [pc, #24]	@ (800a228 <_sbrk_r+0x1c>)
 800a210:	2300      	movs	r3, #0
 800a212:	4604      	mov	r4, r0
 800a214:	4608      	mov	r0, r1
 800a216:	602b      	str	r3, [r5, #0]
 800a218:	f7f7 faa6 	bl	8001768 <_sbrk>
 800a21c:	1c43      	adds	r3, r0, #1
 800a21e:	d102      	bne.n	800a226 <_sbrk_r+0x1a>
 800a220:	682b      	ldr	r3, [r5, #0]
 800a222:	b103      	cbz	r3, 800a226 <_sbrk_r+0x1a>
 800a224:	6023      	str	r3, [r4, #0]
 800a226:	bd38      	pop	{r3, r4, r5, pc}
 800a228:	200043b8 	.word	0x200043b8
 800a22c:	00000000 	.word	0x00000000

0800a230 <nan>:
 800a230:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a238 <nan+0x8>
 800a234:	4770      	bx	lr
 800a236:	bf00      	nop
 800a238:	00000000 	.word	0x00000000
 800a23c:	7ff80000 	.word	0x7ff80000

0800a240 <__assert_func>:
 800a240:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a242:	4614      	mov	r4, r2
 800a244:	461a      	mov	r2, r3
 800a246:	4b09      	ldr	r3, [pc, #36]	@ (800a26c <__assert_func+0x2c>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	4605      	mov	r5, r0
 800a24c:	68d8      	ldr	r0, [r3, #12]
 800a24e:	b954      	cbnz	r4, 800a266 <__assert_func+0x26>
 800a250:	4b07      	ldr	r3, [pc, #28]	@ (800a270 <__assert_func+0x30>)
 800a252:	461c      	mov	r4, r3
 800a254:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a258:	9100      	str	r1, [sp, #0]
 800a25a:	462b      	mov	r3, r5
 800a25c:	4905      	ldr	r1, [pc, #20]	@ (800a274 <__assert_func+0x34>)
 800a25e:	f000 fba7 	bl	800a9b0 <fiprintf>
 800a262:	f000 fbb7 	bl	800a9d4 <abort>
 800a266:	4b04      	ldr	r3, [pc, #16]	@ (800a278 <__assert_func+0x38>)
 800a268:	e7f4      	b.n	800a254 <__assert_func+0x14>
 800a26a:	bf00      	nop
 800a26c:	2000001c 	.word	0x2000001c
 800a270:	0800b3ad 	.word	0x0800b3ad
 800a274:	0800b37f 	.word	0x0800b37f
 800a278:	0800b372 	.word	0x0800b372

0800a27c <_calloc_r>:
 800a27c:	b570      	push	{r4, r5, r6, lr}
 800a27e:	fba1 5402 	umull	r5, r4, r1, r2
 800a282:	b93c      	cbnz	r4, 800a294 <_calloc_r+0x18>
 800a284:	4629      	mov	r1, r5
 800a286:	f7fe f9cf 	bl	8008628 <_malloc_r>
 800a28a:	4606      	mov	r6, r0
 800a28c:	b928      	cbnz	r0, 800a29a <_calloc_r+0x1e>
 800a28e:	2600      	movs	r6, #0
 800a290:	4630      	mov	r0, r6
 800a292:	bd70      	pop	{r4, r5, r6, pc}
 800a294:	220c      	movs	r2, #12
 800a296:	6002      	str	r2, [r0, #0]
 800a298:	e7f9      	b.n	800a28e <_calloc_r+0x12>
 800a29a:	462a      	mov	r2, r5
 800a29c:	4621      	mov	r1, r4
 800a29e:	f7fd fa6c 	bl	800777a <memset>
 800a2a2:	e7f5      	b.n	800a290 <_calloc_r+0x14>

0800a2a4 <rshift>:
 800a2a4:	6903      	ldr	r3, [r0, #16]
 800a2a6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a2aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a2ae:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a2b2:	f100 0414 	add.w	r4, r0, #20
 800a2b6:	dd45      	ble.n	800a344 <rshift+0xa0>
 800a2b8:	f011 011f 	ands.w	r1, r1, #31
 800a2bc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a2c0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a2c4:	d10c      	bne.n	800a2e0 <rshift+0x3c>
 800a2c6:	f100 0710 	add.w	r7, r0, #16
 800a2ca:	4629      	mov	r1, r5
 800a2cc:	42b1      	cmp	r1, r6
 800a2ce:	d334      	bcc.n	800a33a <rshift+0x96>
 800a2d0:	1a9b      	subs	r3, r3, r2
 800a2d2:	009b      	lsls	r3, r3, #2
 800a2d4:	1eea      	subs	r2, r5, #3
 800a2d6:	4296      	cmp	r6, r2
 800a2d8:	bf38      	it	cc
 800a2da:	2300      	movcc	r3, #0
 800a2dc:	4423      	add	r3, r4
 800a2de:	e015      	b.n	800a30c <rshift+0x68>
 800a2e0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a2e4:	f1c1 0820 	rsb	r8, r1, #32
 800a2e8:	40cf      	lsrs	r7, r1
 800a2ea:	f105 0e04 	add.w	lr, r5, #4
 800a2ee:	46a1      	mov	r9, r4
 800a2f0:	4576      	cmp	r6, lr
 800a2f2:	46f4      	mov	ip, lr
 800a2f4:	d815      	bhi.n	800a322 <rshift+0x7e>
 800a2f6:	1a9a      	subs	r2, r3, r2
 800a2f8:	0092      	lsls	r2, r2, #2
 800a2fa:	3a04      	subs	r2, #4
 800a2fc:	3501      	adds	r5, #1
 800a2fe:	42ae      	cmp	r6, r5
 800a300:	bf38      	it	cc
 800a302:	2200      	movcc	r2, #0
 800a304:	18a3      	adds	r3, r4, r2
 800a306:	50a7      	str	r7, [r4, r2]
 800a308:	b107      	cbz	r7, 800a30c <rshift+0x68>
 800a30a:	3304      	adds	r3, #4
 800a30c:	1b1a      	subs	r2, r3, r4
 800a30e:	42a3      	cmp	r3, r4
 800a310:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a314:	bf08      	it	eq
 800a316:	2300      	moveq	r3, #0
 800a318:	6102      	str	r2, [r0, #16]
 800a31a:	bf08      	it	eq
 800a31c:	6143      	streq	r3, [r0, #20]
 800a31e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a322:	f8dc c000 	ldr.w	ip, [ip]
 800a326:	fa0c fc08 	lsl.w	ip, ip, r8
 800a32a:	ea4c 0707 	orr.w	r7, ip, r7
 800a32e:	f849 7b04 	str.w	r7, [r9], #4
 800a332:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a336:	40cf      	lsrs	r7, r1
 800a338:	e7da      	b.n	800a2f0 <rshift+0x4c>
 800a33a:	f851 cb04 	ldr.w	ip, [r1], #4
 800a33e:	f847 cf04 	str.w	ip, [r7, #4]!
 800a342:	e7c3      	b.n	800a2cc <rshift+0x28>
 800a344:	4623      	mov	r3, r4
 800a346:	e7e1      	b.n	800a30c <rshift+0x68>

0800a348 <__hexdig_fun>:
 800a348:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a34c:	2b09      	cmp	r3, #9
 800a34e:	d802      	bhi.n	800a356 <__hexdig_fun+0xe>
 800a350:	3820      	subs	r0, #32
 800a352:	b2c0      	uxtb	r0, r0
 800a354:	4770      	bx	lr
 800a356:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a35a:	2b05      	cmp	r3, #5
 800a35c:	d801      	bhi.n	800a362 <__hexdig_fun+0x1a>
 800a35e:	3847      	subs	r0, #71	@ 0x47
 800a360:	e7f7      	b.n	800a352 <__hexdig_fun+0xa>
 800a362:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a366:	2b05      	cmp	r3, #5
 800a368:	d801      	bhi.n	800a36e <__hexdig_fun+0x26>
 800a36a:	3827      	subs	r0, #39	@ 0x27
 800a36c:	e7f1      	b.n	800a352 <__hexdig_fun+0xa>
 800a36e:	2000      	movs	r0, #0
 800a370:	4770      	bx	lr
	...

0800a374 <__gethex>:
 800a374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a378:	b085      	sub	sp, #20
 800a37a:	468a      	mov	sl, r1
 800a37c:	9302      	str	r3, [sp, #8]
 800a37e:	680b      	ldr	r3, [r1, #0]
 800a380:	9001      	str	r0, [sp, #4]
 800a382:	4690      	mov	r8, r2
 800a384:	1c9c      	adds	r4, r3, #2
 800a386:	46a1      	mov	r9, r4
 800a388:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a38c:	2830      	cmp	r0, #48	@ 0x30
 800a38e:	d0fa      	beq.n	800a386 <__gethex+0x12>
 800a390:	eba9 0303 	sub.w	r3, r9, r3
 800a394:	f1a3 0b02 	sub.w	fp, r3, #2
 800a398:	f7ff ffd6 	bl	800a348 <__hexdig_fun>
 800a39c:	4605      	mov	r5, r0
 800a39e:	2800      	cmp	r0, #0
 800a3a0:	d168      	bne.n	800a474 <__gethex+0x100>
 800a3a2:	49a0      	ldr	r1, [pc, #640]	@ (800a624 <__gethex+0x2b0>)
 800a3a4:	2201      	movs	r2, #1
 800a3a6:	4648      	mov	r0, r9
 800a3a8:	f7ff ff1e 	bl	800a1e8 <strncmp>
 800a3ac:	4607      	mov	r7, r0
 800a3ae:	2800      	cmp	r0, #0
 800a3b0:	d167      	bne.n	800a482 <__gethex+0x10e>
 800a3b2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a3b6:	4626      	mov	r6, r4
 800a3b8:	f7ff ffc6 	bl	800a348 <__hexdig_fun>
 800a3bc:	2800      	cmp	r0, #0
 800a3be:	d062      	beq.n	800a486 <__gethex+0x112>
 800a3c0:	4623      	mov	r3, r4
 800a3c2:	7818      	ldrb	r0, [r3, #0]
 800a3c4:	2830      	cmp	r0, #48	@ 0x30
 800a3c6:	4699      	mov	r9, r3
 800a3c8:	f103 0301 	add.w	r3, r3, #1
 800a3cc:	d0f9      	beq.n	800a3c2 <__gethex+0x4e>
 800a3ce:	f7ff ffbb 	bl	800a348 <__hexdig_fun>
 800a3d2:	fab0 f580 	clz	r5, r0
 800a3d6:	096d      	lsrs	r5, r5, #5
 800a3d8:	f04f 0b01 	mov.w	fp, #1
 800a3dc:	464a      	mov	r2, r9
 800a3de:	4616      	mov	r6, r2
 800a3e0:	3201      	adds	r2, #1
 800a3e2:	7830      	ldrb	r0, [r6, #0]
 800a3e4:	f7ff ffb0 	bl	800a348 <__hexdig_fun>
 800a3e8:	2800      	cmp	r0, #0
 800a3ea:	d1f8      	bne.n	800a3de <__gethex+0x6a>
 800a3ec:	498d      	ldr	r1, [pc, #564]	@ (800a624 <__gethex+0x2b0>)
 800a3ee:	2201      	movs	r2, #1
 800a3f0:	4630      	mov	r0, r6
 800a3f2:	f7ff fef9 	bl	800a1e8 <strncmp>
 800a3f6:	2800      	cmp	r0, #0
 800a3f8:	d13f      	bne.n	800a47a <__gethex+0x106>
 800a3fa:	b944      	cbnz	r4, 800a40e <__gethex+0x9a>
 800a3fc:	1c74      	adds	r4, r6, #1
 800a3fe:	4622      	mov	r2, r4
 800a400:	4616      	mov	r6, r2
 800a402:	3201      	adds	r2, #1
 800a404:	7830      	ldrb	r0, [r6, #0]
 800a406:	f7ff ff9f 	bl	800a348 <__hexdig_fun>
 800a40a:	2800      	cmp	r0, #0
 800a40c:	d1f8      	bne.n	800a400 <__gethex+0x8c>
 800a40e:	1ba4      	subs	r4, r4, r6
 800a410:	00a7      	lsls	r7, r4, #2
 800a412:	7833      	ldrb	r3, [r6, #0]
 800a414:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a418:	2b50      	cmp	r3, #80	@ 0x50
 800a41a:	d13e      	bne.n	800a49a <__gethex+0x126>
 800a41c:	7873      	ldrb	r3, [r6, #1]
 800a41e:	2b2b      	cmp	r3, #43	@ 0x2b
 800a420:	d033      	beq.n	800a48a <__gethex+0x116>
 800a422:	2b2d      	cmp	r3, #45	@ 0x2d
 800a424:	d034      	beq.n	800a490 <__gethex+0x11c>
 800a426:	1c71      	adds	r1, r6, #1
 800a428:	2400      	movs	r4, #0
 800a42a:	7808      	ldrb	r0, [r1, #0]
 800a42c:	f7ff ff8c 	bl	800a348 <__hexdig_fun>
 800a430:	1e43      	subs	r3, r0, #1
 800a432:	b2db      	uxtb	r3, r3
 800a434:	2b18      	cmp	r3, #24
 800a436:	d830      	bhi.n	800a49a <__gethex+0x126>
 800a438:	f1a0 0210 	sub.w	r2, r0, #16
 800a43c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a440:	f7ff ff82 	bl	800a348 <__hexdig_fun>
 800a444:	f100 3cff 	add.w	ip, r0, #4294967295
 800a448:	fa5f fc8c 	uxtb.w	ip, ip
 800a44c:	f1bc 0f18 	cmp.w	ip, #24
 800a450:	f04f 030a 	mov.w	r3, #10
 800a454:	d91e      	bls.n	800a494 <__gethex+0x120>
 800a456:	b104      	cbz	r4, 800a45a <__gethex+0xe6>
 800a458:	4252      	negs	r2, r2
 800a45a:	4417      	add	r7, r2
 800a45c:	f8ca 1000 	str.w	r1, [sl]
 800a460:	b1ed      	cbz	r5, 800a49e <__gethex+0x12a>
 800a462:	f1bb 0f00 	cmp.w	fp, #0
 800a466:	bf0c      	ite	eq
 800a468:	2506      	moveq	r5, #6
 800a46a:	2500      	movne	r5, #0
 800a46c:	4628      	mov	r0, r5
 800a46e:	b005      	add	sp, #20
 800a470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a474:	2500      	movs	r5, #0
 800a476:	462c      	mov	r4, r5
 800a478:	e7b0      	b.n	800a3dc <__gethex+0x68>
 800a47a:	2c00      	cmp	r4, #0
 800a47c:	d1c7      	bne.n	800a40e <__gethex+0x9a>
 800a47e:	4627      	mov	r7, r4
 800a480:	e7c7      	b.n	800a412 <__gethex+0x9e>
 800a482:	464e      	mov	r6, r9
 800a484:	462f      	mov	r7, r5
 800a486:	2501      	movs	r5, #1
 800a488:	e7c3      	b.n	800a412 <__gethex+0x9e>
 800a48a:	2400      	movs	r4, #0
 800a48c:	1cb1      	adds	r1, r6, #2
 800a48e:	e7cc      	b.n	800a42a <__gethex+0xb6>
 800a490:	2401      	movs	r4, #1
 800a492:	e7fb      	b.n	800a48c <__gethex+0x118>
 800a494:	fb03 0002 	mla	r0, r3, r2, r0
 800a498:	e7ce      	b.n	800a438 <__gethex+0xc4>
 800a49a:	4631      	mov	r1, r6
 800a49c:	e7de      	b.n	800a45c <__gethex+0xe8>
 800a49e:	eba6 0309 	sub.w	r3, r6, r9
 800a4a2:	3b01      	subs	r3, #1
 800a4a4:	4629      	mov	r1, r5
 800a4a6:	2b07      	cmp	r3, #7
 800a4a8:	dc0a      	bgt.n	800a4c0 <__gethex+0x14c>
 800a4aa:	9801      	ldr	r0, [sp, #4]
 800a4ac:	f7fe f948 	bl	8008740 <_Balloc>
 800a4b0:	4604      	mov	r4, r0
 800a4b2:	b940      	cbnz	r0, 800a4c6 <__gethex+0x152>
 800a4b4:	4b5c      	ldr	r3, [pc, #368]	@ (800a628 <__gethex+0x2b4>)
 800a4b6:	4602      	mov	r2, r0
 800a4b8:	21e4      	movs	r1, #228	@ 0xe4
 800a4ba:	485c      	ldr	r0, [pc, #368]	@ (800a62c <__gethex+0x2b8>)
 800a4bc:	f7ff fec0 	bl	800a240 <__assert_func>
 800a4c0:	3101      	adds	r1, #1
 800a4c2:	105b      	asrs	r3, r3, #1
 800a4c4:	e7ef      	b.n	800a4a6 <__gethex+0x132>
 800a4c6:	f100 0a14 	add.w	sl, r0, #20
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	4655      	mov	r5, sl
 800a4ce:	469b      	mov	fp, r3
 800a4d0:	45b1      	cmp	r9, r6
 800a4d2:	d337      	bcc.n	800a544 <__gethex+0x1d0>
 800a4d4:	f845 bb04 	str.w	fp, [r5], #4
 800a4d8:	eba5 050a 	sub.w	r5, r5, sl
 800a4dc:	10ad      	asrs	r5, r5, #2
 800a4de:	6125      	str	r5, [r4, #16]
 800a4e0:	4658      	mov	r0, fp
 800a4e2:	f7fe fa1f 	bl	8008924 <__hi0bits>
 800a4e6:	016d      	lsls	r5, r5, #5
 800a4e8:	f8d8 6000 	ldr.w	r6, [r8]
 800a4ec:	1a2d      	subs	r5, r5, r0
 800a4ee:	42b5      	cmp	r5, r6
 800a4f0:	dd54      	ble.n	800a59c <__gethex+0x228>
 800a4f2:	1bad      	subs	r5, r5, r6
 800a4f4:	4629      	mov	r1, r5
 800a4f6:	4620      	mov	r0, r4
 800a4f8:	f7fe fdb3 	bl	8009062 <__any_on>
 800a4fc:	4681      	mov	r9, r0
 800a4fe:	b178      	cbz	r0, 800a520 <__gethex+0x1ac>
 800a500:	1e6b      	subs	r3, r5, #1
 800a502:	1159      	asrs	r1, r3, #5
 800a504:	f003 021f 	and.w	r2, r3, #31
 800a508:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a50c:	f04f 0901 	mov.w	r9, #1
 800a510:	fa09 f202 	lsl.w	r2, r9, r2
 800a514:	420a      	tst	r2, r1
 800a516:	d003      	beq.n	800a520 <__gethex+0x1ac>
 800a518:	454b      	cmp	r3, r9
 800a51a:	dc36      	bgt.n	800a58a <__gethex+0x216>
 800a51c:	f04f 0902 	mov.w	r9, #2
 800a520:	4629      	mov	r1, r5
 800a522:	4620      	mov	r0, r4
 800a524:	f7ff febe 	bl	800a2a4 <rshift>
 800a528:	442f      	add	r7, r5
 800a52a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a52e:	42bb      	cmp	r3, r7
 800a530:	da42      	bge.n	800a5b8 <__gethex+0x244>
 800a532:	9801      	ldr	r0, [sp, #4]
 800a534:	4621      	mov	r1, r4
 800a536:	f7fe f943 	bl	80087c0 <_Bfree>
 800a53a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a53c:	2300      	movs	r3, #0
 800a53e:	6013      	str	r3, [r2, #0]
 800a540:	25a3      	movs	r5, #163	@ 0xa3
 800a542:	e793      	b.n	800a46c <__gethex+0xf8>
 800a544:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a548:	2a2e      	cmp	r2, #46	@ 0x2e
 800a54a:	d012      	beq.n	800a572 <__gethex+0x1fe>
 800a54c:	2b20      	cmp	r3, #32
 800a54e:	d104      	bne.n	800a55a <__gethex+0x1e6>
 800a550:	f845 bb04 	str.w	fp, [r5], #4
 800a554:	f04f 0b00 	mov.w	fp, #0
 800a558:	465b      	mov	r3, fp
 800a55a:	7830      	ldrb	r0, [r6, #0]
 800a55c:	9303      	str	r3, [sp, #12]
 800a55e:	f7ff fef3 	bl	800a348 <__hexdig_fun>
 800a562:	9b03      	ldr	r3, [sp, #12]
 800a564:	f000 000f 	and.w	r0, r0, #15
 800a568:	4098      	lsls	r0, r3
 800a56a:	ea4b 0b00 	orr.w	fp, fp, r0
 800a56e:	3304      	adds	r3, #4
 800a570:	e7ae      	b.n	800a4d0 <__gethex+0x15c>
 800a572:	45b1      	cmp	r9, r6
 800a574:	d8ea      	bhi.n	800a54c <__gethex+0x1d8>
 800a576:	492b      	ldr	r1, [pc, #172]	@ (800a624 <__gethex+0x2b0>)
 800a578:	9303      	str	r3, [sp, #12]
 800a57a:	2201      	movs	r2, #1
 800a57c:	4630      	mov	r0, r6
 800a57e:	f7ff fe33 	bl	800a1e8 <strncmp>
 800a582:	9b03      	ldr	r3, [sp, #12]
 800a584:	2800      	cmp	r0, #0
 800a586:	d1e1      	bne.n	800a54c <__gethex+0x1d8>
 800a588:	e7a2      	b.n	800a4d0 <__gethex+0x15c>
 800a58a:	1ea9      	subs	r1, r5, #2
 800a58c:	4620      	mov	r0, r4
 800a58e:	f7fe fd68 	bl	8009062 <__any_on>
 800a592:	2800      	cmp	r0, #0
 800a594:	d0c2      	beq.n	800a51c <__gethex+0x1a8>
 800a596:	f04f 0903 	mov.w	r9, #3
 800a59a:	e7c1      	b.n	800a520 <__gethex+0x1ac>
 800a59c:	da09      	bge.n	800a5b2 <__gethex+0x23e>
 800a59e:	1b75      	subs	r5, r6, r5
 800a5a0:	4621      	mov	r1, r4
 800a5a2:	9801      	ldr	r0, [sp, #4]
 800a5a4:	462a      	mov	r2, r5
 800a5a6:	f7fe fb23 	bl	8008bf0 <__lshift>
 800a5aa:	1b7f      	subs	r7, r7, r5
 800a5ac:	4604      	mov	r4, r0
 800a5ae:	f100 0a14 	add.w	sl, r0, #20
 800a5b2:	f04f 0900 	mov.w	r9, #0
 800a5b6:	e7b8      	b.n	800a52a <__gethex+0x1b6>
 800a5b8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a5bc:	42bd      	cmp	r5, r7
 800a5be:	dd6f      	ble.n	800a6a0 <__gethex+0x32c>
 800a5c0:	1bed      	subs	r5, r5, r7
 800a5c2:	42ae      	cmp	r6, r5
 800a5c4:	dc34      	bgt.n	800a630 <__gethex+0x2bc>
 800a5c6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a5ca:	2b02      	cmp	r3, #2
 800a5cc:	d022      	beq.n	800a614 <__gethex+0x2a0>
 800a5ce:	2b03      	cmp	r3, #3
 800a5d0:	d024      	beq.n	800a61c <__gethex+0x2a8>
 800a5d2:	2b01      	cmp	r3, #1
 800a5d4:	d115      	bne.n	800a602 <__gethex+0x28e>
 800a5d6:	42ae      	cmp	r6, r5
 800a5d8:	d113      	bne.n	800a602 <__gethex+0x28e>
 800a5da:	2e01      	cmp	r6, #1
 800a5dc:	d10b      	bne.n	800a5f6 <__gethex+0x282>
 800a5de:	9a02      	ldr	r2, [sp, #8]
 800a5e0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a5e4:	6013      	str	r3, [r2, #0]
 800a5e6:	2301      	movs	r3, #1
 800a5e8:	6123      	str	r3, [r4, #16]
 800a5ea:	f8ca 3000 	str.w	r3, [sl]
 800a5ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a5f0:	2562      	movs	r5, #98	@ 0x62
 800a5f2:	601c      	str	r4, [r3, #0]
 800a5f4:	e73a      	b.n	800a46c <__gethex+0xf8>
 800a5f6:	1e71      	subs	r1, r6, #1
 800a5f8:	4620      	mov	r0, r4
 800a5fa:	f7fe fd32 	bl	8009062 <__any_on>
 800a5fe:	2800      	cmp	r0, #0
 800a600:	d1ed      	bne.n	800a5de <__gethex+0x26a>
 800a602:	9801      	ldr	r0, [sp, #4]
 800a604:	4621      	mov	r1, r4
 800a606:	f7fe f8db 	bl	80087c0 <_Bfree>
 800a60a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a60c:	2300      	movs	r3, #0
 800a60e:	6013      	str	r3, [r2, #0]
 800a610:	2550      	movs	r5, #80	@ 0x50
 800a612:	e72b      	b.n	800a46c <__gethex+0xf8>
 800a614:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a616:	2b00      	cmp	r3, #0
 800a618:	d1f3      	bne.n	800a602 <__gethex+0x28e>
 800a61a:	e7e0      	b.n	800a5de <__gethex+0x26a>
 800a61c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d1dd      	bne.n	800a5de <__gethex+0x26a>
 800a622:	e7ee      	b.n	800a602 <__gethex+0x28e>
 800a624:	0800b200 	.word	0x0800b200
 800a628:	0800b099 	.word	0x0800b099
 800a62c:	0800b3ae 	.word	0x0800b3ae
 800a630:	1e6f      	subs	r7, r5, #1
 800a632:	f1b9 0f00 	cmp.w	r9, #0
 800a636:	d130      	bne.n	800a69a <__gethex+0x326>
 800a638:	b127      	cbz	r7, 800a644 <__gethex+0x2d0>
 800a63a:	4639      	mov	r1, r7
 800a63c:	4620      	mov	r0, r4
 800a63e:	f7fe fd10 	bl	8009062 <__any_on>
 800a642:	4681      	mov	r9, r0
 800a644:	117a      	asrs	r2, r7, #5
 800a646:	2301      	movs	r3, #1
 800a648:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a64c:	f007 071f 	and.w	r7, r7, #31
 800a650:	40bb      	lsls	r3, r7
 800a652:	4213      	tst	r3, r2
 800a654:	4629      	mov	r1, r5
 800a656:	4620      	mov	r0, r4
 800a658:	bf18      	it	ne
 800a65a:	f049 0902 	orrne.w	r9, r9, #2
 800a65e:	f7ff fe21 	bl	800a2a4 <rshift>
 800a662:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a666:	1b76      	subs	r6, r6, r5
 800a668:	2502      	movs	r5, #2
 800a66a:	f1b9 0f00 	cmp.w	r9, #0
 800a66e:	d047      	beq.n	800a700 <__gethex+0x38c>
 800a670:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a674:	2b02      	cmp	r3, #2
 800a676:	d015      	beq.n	800a6a4 <__gethex+0x330>
 800a678:	2b03      	cmp	r3, #3
 800a67a:	d017      	beq.n	800a6ac <__gethex+0x338>
 800a67c:	2b01      	cmp	r3, #1
 800a67e:	d109      	bne.n	800a694 <__gethex+0x320>
 800a680:	f019 0f02 	tst.w	r9, #2
 800a684:	d006      	beq.n	800a694 <__gethex+0x320>
 800a686:	f8da 3000 	ldr.w	r3, [sl]
 800a68a:	ea49 0903 	orr.w	r9, r9, r3
 800a68e:	f019 0f01 	tst.w	r9, #1
 800a692:	d10e      	bne.n	800a6b2 <__gethex+0x33e>
 800a694:	f045 0510 	orr.w	r5, r5, #16
 800a698:	e032      	b.n	800a700 <__gethex+0x38c>
 800a69a:	f04f 0901 	mov.w	r9, #1
 800a69e:	e7d1      	b.n	800a644 <__gethex+0x2d0>
 800a6a0:	2501      	movs	r5, #1
 800a6a2:	e7e2      	b.n	800a66a <__gethex+0x2f6>
 800a6a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a6a6:	f1c3 0301 	rsb	r3, r3, #1
 800a6aa:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a6ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d0f0      	beq.n	800a694 <__gethex+0x320>
 800a6b2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a6b6:	f104 0314 	add.w	r3, r4, #20
 800a6ba:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a6be:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a6c2:	f04f 0c00 	mov.w	ip, #0
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6cc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a6d0:	d01b      	beq.n	800a70a <__gethex+0x396>
 800a6d2:	3201      	adds	r2, #1
 800a6d4:	6002      	str	r2, [r0, #0]
 800a6d6:	2d02      	cmp	r5, #2
 800a6d8:	f104 0314 	add.w	r3, r4, #20
 800a6dc:	d13c      	bne.n	800a758 <__gethex+0x3e4>
 800a6de:	f8d8 2000 	ldr.w	r2, [r8]
 800a6e2:	3a01      	subs	r2, #1
 800a6e4:	42b2      	cmp	r2, r6
 800a6e6:	d109      	bne.n	800a6fc <__gethex+0x388>
 800a6e8:	1171      	asrs	r1, r6, #5
 800a6ea:	2201      	movs	r2, #1
 800a6ec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a6f0:	f006 061f 	and.w	r6, r6, #31
 800a6f4:	fa02 f606 	lsl.w	r6, r2, r6
 800a6f8:	421e      	tst	r6, r3
 800a6fa:	d13a      	bne.n	800a772 <__gethex+0x3fe>
 800a6fc:	f045 0520 	orr.w	r5, r5, #32
 800a700:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a702:	601c      	str	r4, [r3, #0]
 800a704:	9b02      	ldr	r3, [sp, #8]
 800a706:	601f      	str	r7, [r3, #0]
 800a708:	e6b0      	b.n	800a46c <__gethex+0xf8>
 800a70a:	4299      	cmp	r1, r3
 800a70c:	f843 cc04 	str.w	ip, [r3, #-4]
 800a710:	d8d9      	bhi.n	800a6c6 <__gethex+0x352>
 800a712:	68a3      	ldr	r3, [r4, #8]
 800a714:	459b      	cmp	fp, r3
 800a716:	db17      	blt.n	800a748 <__gethex+0x3d4>
 800a718:	6861      	ldr	r1, [r4, #4]
 800a71a:	9801      	ldr	r0, [sp, #4]
 800a71c:	3101      	adds	r1, #1
 800a71e:	f7fe f80f 	bl	8008740 <_Balloc>
 800a722:	4681      	mov	r9, r0
 800a724:	b918      	cbnz	r0, 800a72e <__gethex+0x3ba>
 800a726:	4b1a      	ldr	r3, [pc, #104]	@ (800a790 <__gethex+0x41c>)
 800a728:	4602      	mov	r2, r0
 800a72a:	2184      	movs	r1, #132	@ 0x84
 800a72c:	e6c5      	b.n	800a4ba <__gethex+0x146>
 800a72e:	6922      	ldr	r2, [r4, #16]
 800a730:	3202      	adds	r2, #2
 800a732:	f104 010c 	add.w	r1, r4, #12
 800a736:	0092      	lsls	r2, r2, #2
 800a738:	300c      	adds	r0, #12
 800a73a:	f7fd f89e 	bl	800787a <memcpy>
 800a73e:	4621      	mov	r1, r4
 800a740:	9801      	ldr	r0, [sp, #4]
 800a742:	f7fe f83d 	bl	80087c0 <_Bfree>
 800a746:	464c      	mov	r4, r9
 800a748:	6923      	ldr	r3, [r4, #16]
 800a74a:	1c5a      	adds	r2, r3, #1
 800a74c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a750:	6122      	str	r2, [r4, #16]
 800a752:	2201      	movs	r2, #1
 800a754:	615a      	str	r2, [r3, #20]
 800a756:	e7be      	b.n	800a6d6 <__gethex+0x362>
 800a758:	6922      	ldr	r2, [r4, #16]
 800a75a:	455a      	cmp	r2, fp
 800a75c:	dd0b      	ble.n	800a776 <__gethex+0x402>
 800a75e:	2101      	movs	r1, #1
 800a760:	4620      	mov	r0, r4
 800a762:	f7ff fd9f 	bl	800a2a4 <rshift>
 800a766:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a76a:	3701      	adds	r7, #1
 800a76c:	42bb      	cmp	r3, r7
 800a76e:	f6ff aee0 	blt.w	800a532 <__gethex+0x1be>
 800a772:	2501      	movs	r5, #1
 800a774:	e7c2      	b.n	800a6fc <__gethex+0x388>
 800a776:	f016 061f 	ands.w	r6, r6, #31
 800a77a:	d0fa      	beq.n	800a772 <__gethex+0x3fe>
 800a77c:	4453      	add	r3, sl
 800a77e:	f1c6 0620 	rsb	r6, r6, #32
 800a782:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a786:	f7fe f8cd 	bl	8008924 <__hi0bits>
 800a78a:	42b0      	cmp	r0, r6
 800a78c:	dbe7      	blt.n	800a75e <__gethex+0x3ea>
 800a78e:	e7f0      	b.n	800a772 <__gethex+0x3fe>
 800a790:	0800b099 	.word	0x0800b099

0800a794 <L_shift>:
 800a794:	f1c2 0208 	rsb	r2, r2, #8
 800a798:	0092      	lsls	r2, r2, #2
 800a79a:	b570      	push	{r4, r5, r6, lr}
 800a79c:	f1c2 0620 	rsb	r6, r2, #32
 800a7a0:	6843      	ldr	r3, [r0, #4]
 800a7a2:	6804      	ldr	r4, [r0, #0]
 800a7a4:	fa03 f506 	lsl.w	r5, r3, r6
 800a7a8:	432c      	orrs	r4, r5
 800a7aa:	40d3      	lsrs	r3, r2
 800a7ac:	6004      	str	r4, [r0, #0]
 800a7ae:	f840 3f04 	str.w	r3, [r0, #4]!
 800a7b2:	4288      	cmp	r0, r1
 800a7b4:	d3f4      	bcc.n	800a7a0 <L_shift+0xc>
 800a7b6:	bd70      	pop	{r4, r5, r6, pc}

0800a7b8 <__match>:
 800a7b8:	b530      	push	{r4, r5, lr}
 800a7ba:	6803      	ldr	r3, [r0, #0]
 800a7bc:	3301      	adds	r3, #1
 800a7be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a7c2:	b914      	cbnz	r4, 800a7ca <__match+0x12>
 800a7c4:	6003      	str	r3, [r0, #0]
 800a7c6:	2001      	movs	r0, #1
 800a7c8:	bd30      	pop	{r4, r5, pc}
 800a7ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a7ce:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a7d2:	2d19      	cmp	r5, #25
 800a7d4:	bf98      	it	ls
 800a7d6:	3220      	addls	r2, #32
 800a7d8:	42a2      	cmp	r2, r4
 800a7da:	d0f0      	beq.n	800a7be <__match+0x6>
 800a7dc:	2000      	movs	r0, #0
 800a7de:	e7f3      	b.n	800a7c8 <__match+0x10>

0800a7e0 <__hexnan>:
 800a7e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7e4:	680b      	ldr	r3, [r1, #0]
 800a7e6:	6801      	ldr	r1, [r0, #0]
 800a7e8:	115e      	asrs	r6, r3, #5
 800a7ea:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a7ee:	f013 031f 	ands.w	r3, r3, #31
 800a7f2:	b087      	sub	sp, #28
 800a7f4:	bf18      	it	ne
 800a7f6:	3604      	addne	r6, #4
 800a7f8:	2500      	movs	r5, #0
 800a7fa:	1f37      	subs	r7, r6, #4
 800a7fc:	4682      	mov	sl, r0
 800a7fe:	4690      	mov	r8, r2
 800a800:	9301      	str	r3, [sp, #4]
 800a802:	f846 5c04 	str.w	r5, [r6, #-4]
 800a806:	46b9      	mov	r9, r7
 800a808:	463c      	mov	r4, r7
 800a80a:	9502      	str	r5, [sp, #8]
 800a80c:	46ab      	mov	fp, r5
 800a80e:	784a      	ldrb	r2, [r1, #1]
 800a810:	1c4b      	adds	r3, r1, #1
 800a812:	9303      	str	r3, [sp, #12]
 800a814:	b342      	cbz	r2, 800a868 <__hexnan+0x88>
 800a816:	4610      	mov	r0, r2
 800a818:	9105      	str	r1, [sp, #20]
 800a81a:	9204      	str	r2, [sp, #16]
 800a81c:	f7ff fd94 	bl	800a348 <__hexdig_fun>
 800a820:	2800      	cmp	r0, #0
 800a822:	d151      	bne.n	800a8c8 <__hexnan+0xe8>
 800a824:	9a04      	ldr	r2, [sp, #16]
 800a826:	9905      	ldr	r1, [sp, #20]
 800a828:	2a20      	cmp	r2, #32
 800a82a:	d818      	bhi.n	800a85e <__hexnan+0x7e>
 800a82c:	9b02      	ldr	r3, [sp, #8]
 800a82e:	459b      	cmp	fp, r3
 800a830:	dd13      	ble.n	800a85a <__hexnan+0x7a>
 800a832:	454c      	cmp	r4, r9
 800a834:	d206      	bcs.n	800a844 <__hexnan+0x64>
 800a836:	2d07      	cmp	r5, #7
 800a838:	dc04      	bgt.n	800a844 <__hexnan+0x64>
 800a83a:	462a      	mov	r2, r5
 800a83c:	4649      	mov	r1, r9
 800a83e:	4620      	mov	r0, r4
 800a840:	f7ff ffa8 	bl	800a794 <L_shift>
 800a844:	4544      	cmp	r4, r8
 800a846:	d952      	bls.n	800a8ee <__hexnan+0x10e>
 800a848:	2300      	movs	r3, #0
 800a84a:	f1a4 0904 	sub.w	r9, r4, #4
 800a84e:	f844 3c04 	str.w	r3, [r4, #-4]
 800a852:	f8cd b008 	str.w	fp, [sp, #8]
 800a856:	464c      	mov	r4, r9
 800a858:	461d      	mov	r5, r3
 800a85a:	9903      	ldr	r1, [sp, #12]
 800a85c:	e7d7      	b.n	800a80e <__hexnan+0x2e>
 800a85e:	2a29      	cmp	r2, #41	@ 0x29
 800a860:	d157      	bne.n	800a912 <__hexnan+0x132>
 800a862:	3102      	adds	r1, #2
 800a864:	f8ca 1000 	str.w	r1, [sl]
 800a868:	f1bb 0f00 	cmp.w	fp, #0
 800a86c:	d051      	beq.n	800a912 <__hexnan+0x132>
 800a86e:	454c      	cmp	r4, r9
 800a870:	d206      	bcs.n	800a880 <__hexnan+0xa0>
 800a872:	2d07      	cmp	r5, #7
 800a874:	dc04      	bgt.n	800a880 <__hexnan+0xa0>
 800a876:	462a      	mov	r2, r5
 800a878:	4649      	mov	r1, r9
 800a87a:	4620      	mov	r0, r4
 800a87c:	f7ff ff8a 	bl	800a794 <L_shift>
 800a880:	4544      	cmp	r4, r8
 800a882:	d936      	bls.n	800a8f2 <__hexnan+0x112>
 800a884:	f1a8 0204 	sub.w	r2, r8, #4
 800a888:	4623      	mov	r3, r4
 800a88a:	f853 1b04 	ldr.w	r1, [r3], #4
 800a88e:	f842 1f04 	str.w	r1, [r2, #4]!
 800a892:	429f      	cmp	r7, r3
 800a894:	d2f9      	bcs.n	800a88a <__hexnan+0xaa>
 800a896:	1b3b      	subs	r3, r7, r4
 800a898:	f023 0303 	bic.w	r3, r3, #3
 800a89c:	3304      	adds	r3, #4
 800a89e:	3401      	adds	r4, #1
 800a8a0:	3e03      	subs	r6, #3
 800a8a2:	42b4      	cmp	r4, r6
 800a8a4:	bf88      	it	hi
 800a8a6:	2304      	movhi	r3, #4
 800a8a8:	4443      	add	r3, r8
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	f843 2b04 	str.w	r2, [r3], #4
 800a8b0:	429f      	cmp	r7, r3
 800a8b2:	d2fb      	bcs.n	800a8ac <__hexnan+0xcc>
 800a8b4:	683b      	ldr	r3, [r7, #0]
 800a8b6:	b91b      	cbnz	r3, 800a8c0 <__hexnan+0xe0>
 800a8b8:	4547      	cmp	r7, r8
 800a8ba:	d128      	bne.n	800a90e <__hexnan+0x12e>
 800a8bc:	2301      	movs	r3, #1
 800a8be:	603b      	str	r3, [r7, #0]
 800a8c0:	2005      	movs	r0, #5
 800a8c2:	b007      	add	sp, #28
 800a8c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8c8:	3501      	adds	r5, #1
 800a8ca:	2d08      	cmp	r5, #8
 800a8cc:	f10b 0b01 	add.w	fp, fp, #1
 800a8d0:	dd06      	ble.n	800a8e0 <__hexnan+0x100>
 800a8d2:	4544      	cmp	r4, r8
 800a8d4:	d9c1      	bls.n	800a85a <__hexnan+0x7a>
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	f844 3c04 	str.w	r3, [r4, #-4]
 800a8dc:	2501      	movs	r5, #1
 800a8de:	3c04      	subs	r4, #4
 800a8e0:	6822      	ldr	r2, [r4, #0]
 800a8e2:	f000 000f 	and.w	r0, r0, #15
 800a8e6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a8ea:	6020      	str	r0, [r4, #0]
 800a8ec:	e7b5      	b.n	800a85a <__hexnan+0x7a>
 800a8ee:	2508      	movs	r5, #8
 800a8f0:	e7b3      	b.n	800a85a <__hexnan+0x7a>
 800a8f2:	9b01      	ldr	r3, [sp, #4]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d0dd      	beq.n	800a8b4 <__hexnan+0xd4>
 800a8f8:	f1c3 0320 	rsb	r3, r3, #32
 800a8fc:	f04f 32ff 	mov.w	r2, #4294967295
 800a900:	40da      	lsrs	r2, r3
 800a902:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a906:	4013      	ands	r3, r2
 800a908:	f846 3c04 	str.w	r3, [r6, #-4]
 800a90c:	e7d2      	b.n	800a8b4 <__hexnan+0xd4>
 800a90e:	3f04      	subs	r7, #4
 800a910:	e7d0      	b.n	800a8b4 <__hexnan+0xd4>
 800a912:	2004      	movs	r0, #4
 800a914:	e7d5      	b.n	800a8c2 <__hexnan+0xe2>

0800a916 <__ascii_mbtowc>:
 800a916:	b082      	sub	sp, #8
 800a918:	b901      	cbnz	r1, 800a91c <__ascii_mbtowc+0x6>
 800a91a:	a901      	add	r1, sp, #4
 800a91c:	b142      	cbz	r2, 800a930 <__ascii_mbtowc+0x1a>
 800a91e:	b14b      	cbz	r3, 800a934 <__ascii_mbtowc+0x1e>
 800a920:	7813      	ldrb	r3, [r2, #0]
 800a922:	600b      	str	r3, [r1, #0]
 800a924:	7812      	ldrb	r2, [r2, #0]
 800a926:	1e10      	subs	r0, r2, #0
 800a928:	bf18      	it	ne
 800a92a:	2001      	movne	r0, #1
 800a92c:	b002      	add	sp, #8
 800a92e:	4770      	bx	lr
 800a930:	4610      	mov	r0, r2
 800a932:	e7fb      	b.n	800a92c <__ascii_mbtowc+0x16>
 800a934:	f06f 0001 	mvn.w	r0, #1
 800a938:	e7f8      	b.n	800a92c <__ascii_mbtowc+0x16>

0800a93a <_realloc_r>:
 800a93a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a93e:	4680      	mov	r8, r0
 800a940:	4615      	mov	r5, r2
 800a942:	460c      	mov	r4, r1
 800a944:	b921      	cbnz	r1, 800a950 <_realloc_r+0x16>
 800a946:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a94a:	4611      	mov	r1, r2
 800a94c:	f7fd be6c 	b.w	8008628 <_malloc_r>
 800a950:	b92a      	cbnz	r2, 800a95e <_realloc_r+0x24>
 800a952:	f7fd fdf5 	bl	8008540 <_free_r>
 800a956:	2400      	movs	r4, #0
 800a958:	4620      	mov	r0, r4
 800a95a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a95e:	f000 f840 	bl	800a9e2 <_malloc_usable_size_r>
 800a962:	4285      	cmp	r5, r0
 800a964:	4606      	mov	r6, r0
 800a966:	d802      	bhi.n	800a96e <_realloc_r+0x34>
 800a968:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a96c:	d8f4      	bhi.n	800a958 <_realloc_r+0x1e>
 800a96e:	4629      	mov	r1, r5
 800a970:	4640      	mov	r0, r8
 800a972:	f7fd fe59 	bl	8008628 <_malloc_r>
 800a976:	4607      	mov	r7, r0
 800a978:	2800      	cmp	r0, #0
 800a97a:	d0ec      	beq.n	800a956 <_realloc_r+0x1c>
 800a97c:	42b5      	cmp	r5, r6
 800a97e:	462a      	mov	r2, r5
 800a980:	4621      	mov	r1, r4
 800a982:	bf28      	it	cs
 800a984:	4632      	movcs	r2, r6
 800a986:	f7fc ff78 	bl	800787a <memcpy>
 800a98a:	4621      	mov	r1, r4
 800a98c:	4640      	mov	r0, r8
 800a98e:	f7fd fdd7 	bl	8008540 <_free_r>
 800a992:	463c      	mov	r4, r7
 800a994:	e7e0      	b.n	800a958 <_realloc_r+0x1e>

0800a996 <__ascii_wctomb>:
 800a996:	4603      	mov	r3, r0
 800a998:	4608      	mov	r0, r1
 800a99a:	b141      	cbz	r1, 800a9ae <__ascii_wctomb+0x18>
 800a99c:	2aff      	cmp	r2, #255	@ 0xff
 800a99e:	d904      	bls.n	800a9aa <__ascii_wctomb+0x14>
 800a9a0:	228a      	movs	r2, #138	@ 0x8a
 800a9a2:	601a      	str	r2, [r3, #0]
 800a9a4:	f04f 30ff 	mov.w	r0, #4294967295
 800a9a8:	4770      	bx	lr
 800a9aa:	700a      	strb	r2, [r1, #0]
 800a9ac:	2001      	movs	r0, #1
 800a9ae:	4770      	bx	lr

0800a9b0 <fiprintf>:
 800a9b0:	b40e      	push	{r1, r2, r3}
 800a9b2:	b503      	push	{r0, r1, lr}
 800a9b4:	4601      	mov	r1, r0
 800a9b6:	ab03      	add	r3, sp, #12
 800a9b8:	4805      	ldr	r0, [pc, #20]	@ (800a9d0 <fiprintf+0x20>)
 800a9ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9be:	6800      	ldr	r0, [r0, #0]
 800a9c0:	9301      	str	r3, [sp, #4]
 800a9c2:	f000 f83f 	bl	800aa44 <_vfiprintf_r>
 800a9c6:	b002      	add	sp, #8
 800a9c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a9cc:	b003      	add	sp, #12
 800a9ce:	4770      	bx	lr
 800a9d0:	2000001c 	.word	0x2000001c

0800a9d4 <abort>:
 800a9d4:	b508      	push	{r3, lr}
 800a9d6:	2006      	movs	r0, #6
 800a9d8:	f000 fa08 	bl	800adec <raise>
 800a9dc:	2001      	movs	r0, #1
 800a9de:	f7f6 fe4b 	bl	8001678 <_exit>

0800a9e2 <_malloc_usable_size_r>:
 800a9e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a9e6:	1f18      	subs	r0, r3, #4
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	bfbc      	itt	lt
 800a9ec:	580b      	ldrlt	r3, [r1, r0]
 800a9ee:	18c0      	addlt	r0, r0, r3
 800a9f0:	4770      	bx	lr

0800a9f2 <__sfputc_r>:
 800a9f2:	6893      	ldr	r3, [r2, #8]
 800a9f4:	3b01      	subs	r3, #1
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	b410      	push	{r4}
 800a9fa:	6093      	str	r3, [r2, #8]
 800a9fc:	da08      	bge.n	800aa10 <__sfputc_r+0x1e>
 800a9fe:	6994      	ldr	r4, [r2, #24]
 800aa00:	42a3      	cmp	r3, r4
 800aa02:	db01      	blt.n	800aa08 <__sfputc_r+0x16>
 800aa04:	290a      	cmp	r1, #10
 800aa06:	d103      	bne.n	800aa10 <__sfputc_r+0x1e>
 800aa08:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa0c:	f000 b932 	b.w	800ac74 <__swbuf_r>
 800aa10:	6813      	ldr	r3, [r2, #0]
 800aa12:	1c58      	adds	r0, r3, #1
 800aa14:	6010      	str	r0, [r2, #0]
 800aa16:	7019      	strb	r1, [r3, #0]
 800aa18:	4608      	mov	r0, r1
 800aa1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa1e:	4770      	bx	lr

0800aa20 <__sfputs_r>:
 800aa20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa22:	4606      	mov	r6, r0
 800aa24:	460f      	mov	r7, r1
 800aa26:	4614      	mov	r4, r2
 800aa28:	18d5      	adds	r5, r2, r3
 800aa2a:	42ac      	cmp	r4, r5
 800aa2c:	d101      	bne.n	800aa32 <__sfputs_r+0x12>
 800aa2e:	2000      	movs	r0, #0
 800aa30:	e007      	b.n	800aa42 <__sfputs_r+0x22>
 800aa32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa36:	463a      	mov	r2, r7
 800aa38:	4630      	mov	r0, r6
 800aa3a:	f7ff ffda 	bl	800a9f2 <__sfputc_r>
 800aa3e:	1c43      	adds	r3, r0, #1
 800aa40:	d1f3      	bne.n	800aa2a <__sfputs_r+0xa>
 800aa42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800aa44 <_vfiprintf_r>:
 800aa44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa48:	460d      	mov	r5, r1
 800aa4a:	b09d      	sub	sp, #116	@ 0x74
 800aa4c:	4614      	mov	r4, r2
 800aa4e:	4698      	mov	r8, r3
 800aa50:	4606      	mov	r6, r0
 800aa52:	b118      	cbz	r0, 800aa5c <_vfiprintf_r+0x18>
 800aa54:	6a03      	ldr	r3, [r0, #32]
 800aa56:	b90b      	cbnz	r3, 800aa5c <_vfiprintf_r+0x18>
 800aa58:	f7fc fdc2 	bl	80075e0 <__sinit>
 800aa5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aa5e:	07d9      	lsls	r1, r3, #31
 800aa60:	d405      	bmi.n	800aa6e <_vfiprintf_r+0x2a>
 800aa62:	89ab      	ldrh	r3, [r5, #12]
 800aa64:	059a      	lsls	r2, r3, #22
 800aa66:	d402      	bmi.n	800aa6e <_vfiprintf_r+0x2a>
 800aa68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aa6a:	f7fc ff04 	bl	8007876 <__retarget_lock_acquire_recursive>
 800aa6e:	89ab      	ldrh	r3, [r5, #12]
 800aa70:	071b      	lsls	r3, r3, #28
 800aa72:	d501      	bpl.n	800aa78 <_vfiprintf_r+0x34>
 800aa74:	692b      	ldr	r3, [r5, #16]
 800aa76:	b99b      	cbnz	r3, 800aaa0 <_vfiprintf_r+0x5c>
 800aa78:	4629      	mov	r1, r5
 800aa7a:	4630      	mov	r0, r6
 800aa7c:	f000 f938 	bl	800acf0 <__swsetup_r>
 800aa80:	b170      	cbz	r0, 800aaa0 <_vfiprintf_r+0x5c>
 800aa82:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aa84:	07dc      	lsls	r4, r3, #31
 800aa86:	d504      	bpl.n	800aa92 <_vfiprintf_r+0x4e>
 800aa88:	f04f 30ff 	mov.w	r0, #4294967295
 800aa8c:	b01d      	add	sp, #116	@ 0x74
 800aa8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa92:	89ab      	ldrh	r3, [r5, #12]
 800aa94:	0598      	lsls	r0, r3, #22
 800aa96:	d4f7      	bmi.n	800aa88 <_vfiprintf_r+0x44>
 800aa98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aa9a:	f7fc feed 	bl	8007878 <__retarget_lock_release_recursive>
 800aa9e:	e7f3      	b.n	800aa88 <_vfiprintf_r+0x44>
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	9309      	str	r3, [sp, #36]	@ 0x24
 800aaa4:	2320      	movs	r3, #32
 800aaa6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aaaa:	f8cd 800c 	str.w	r8, [sp, #12]
 800aaae:	2330      	movs	r3, #48	@ 0x30
 800aab0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ac60 <_vfiprintf_r+0x21c>
 800aab4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800aab8:	f04f 0901 	mov.w	r9, #1
 800aabc:	4623      	mov	r3, r4
 800aabe:	469a      	mov	sl, r3
 800aac0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aac4:	b10a      	cbz	r2, 800aaca <_vfiprintf_r+0x86>
 800aac6:	2a25      	cmp	r2, #37	@ 0x25
 800aac8:	d1f9      	bne.n	800aabe <_vfiprintf_r+0x7a>
 800aaca:	ebba 0b04 	subs.w	fp, sl, r4
 800aace:	d00b      	beq.n	800aae8 <_vfiprintf_r+0xa4>
 800aad0:	465b      	mov	r3, fp
 800aad2:	4622      	mov	r2, r4
 800aad4:	4629      	mov	r1, r5
 800aad6:	4630      	mov	r0, r6
 800aad8:	f7ff ffa2 	bl	800aa20 <__sfputs_r>
 800aadc:	3001      	adds	r0, #1
 800aade:	f000 80a7 	beq.w	800ac30 <_vfiprintf_r+0x1ec>
 800aae2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aae4:	445a      	add	r2, fp
 800aae6:	9209      	str	r2, [sp, #36]	@ 0x24
 800aae8:	f89a 3000 	ldrb.w	r3, [sl]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	f000 809f 	beq.w	800ac30 <_vfiprintf_r+0x1ec>
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	f04f 32ff 	mov.w	r2, #4294967295
 800aaf8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aafc:	f10a 0a01 	add.w	sl, sl, #1
 800ab00:	9304      	str	r3, [sp, #16]
 800ab02:	9307      	str	r3, [sp, #28]
 800ab04:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ab08:	931a      	str	r3, [sp, #104]	@ 0x68
 800ab0a:	4654      	mov	r4, sl
 800ab0c:	2205      	movs	r2, #5
 800ab0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab12:	4853      	ldr	r0, [pc, #332]	@ (800ac60 <_vfiprintf_r+0x21c>)
 800ab14:	f7f5 fb7c 	bl	8000210 <memchr>
 800ab18:	9a04      	ldr	r2, [sp, #16]
 800ab1a:	b9d8      	cbnz	r0, 800ab54 <_vfiprintf_r+0x110>
 800ab1c:	06d1      	lsls	r1, r2, #27
 800ab1e:	bf44      	itt	mi
 800ab20:	2320      	movmi	r3, #32
 800ab22:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ab26:	0713      	lsls	r3, r2, #28
 800ab28:	bf44      	itt	mi
 800ab2a:	232b      	movmi	r3, #43	@ 0x2b
 800ab2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ab30:	f89a 3000 	ldrb.w	r3, [sl]
 800ab34:	2b2a      	cmp	r3, #42	@ 0x2a
 800ab36:	d015      	beq.n	800ab64 <_vfiprintf_r+0x120>
 800ab38:	9a07      	ldr	r2, [sp, #28]
 800ab3a:	4654      	mov	r4, sl
 800ab3c:	2000      	movs	r0, #0
 800ab3e:	f04f 0c0a 	mov.w	ip, #10
 800ab42:	4621      	mov	r1, r4
 800ab44:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab48:	3b30      	subs	r3, #48	@ 0x30
 800ab4a:	2b09      	cmp	r3, #9
 800ab4c:	d94b      	bls.n	800abe6 <_vfiprintf_r+0x1a2>
 800ab4e:	b1b0      	cbz	r0, 800ab7e <_vfiprintf_r+0x13a>
 800ab50:	9207      	str	r2, [sp, #28]
 800ab52:	e014      	b.n	800ab7e <_vfiprintf_r+0x13a>
 800ab54:	eba0 0308 	sub.w	r3, r0, r8
 800ab58:	fa09 f303 	lsl.w	r3, r9, r3
 800ab5c:	4313      	orrs	r3, r2
 800ab5e:	9304      	str	r3, [sp, #16]
 800ab60:	46a2      	mov	sl, r4
 800ab62:	e7d2      	b.n	800ab0a <_vfiprintf_r+0xc6>
 800ab64:	9b03      	ldr	r3, [sp, #12]
 800ab66:	1d19      	adds	r1, r3, #4
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	9103      	str	r1, [sp, #12]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	bfbb      	ittet	lt
 800ab70:	425b      	neglt	r3, r3
 800ab72:	f042 0202 	orrlt.w	r2, r2, #2
 800ab76:	9307      	strge	r3, [sp, #28]
 800ab78:	9307      	strlt	r3, [sp, #28]
 800ab7a:	bfb8      	it	lt
 800ab7c:	9204      	strlt	r2, [sp, #16]
 800ab7e:	7823      	ldrb	r3, [r4, #0]
 800ab80:	2b2e      	cmp	r3, #46	@ 0x2e
 800ab82:	d10a      	bne.n	800ab9a <_vfiprintf_r+0x156>
 800ab84:	7863      	ldrb	r3, [r4, #1]
 800ab86:	2b2a      	cmp	r3, #42	@ 0x2a
 800ab88:	d132      	bne.n	800abf0 <_vfiprintf_r+0x1ac>
 800ab8a:	9b03      	ldr	r3, [sp, #12]
 800ab8c:	1d1a      	adds	r2, r3, #4
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	9203      	str	r2, [sp, #12]
 800ab92:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ab96:	3402      	adds	r4, #2
 800ab98:	9305      	str	r3, [sp, #20]
 800ab9a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ac70 <_vfiprintf_r+0x22c>
 800ab9e:	7821      	ldrb	r1, [r4, #0]
 800aba0:	2203      	movs	r2, #3
 800aba2:	4650      	mov	r0, sl
 800aba4:	f7f5 fb34 	bl	8000210 <memchr>
 800aba8:	b138      	cbz	r0, 800abba <_vfiprintf_r+0x176>
 800abaa:	9b04      	ldr	r3, [sp, #16]
 800abac:	eba0 000a 	sub.w	r0, r0, sl
 800abb0:	2240      	movs	r2, #64	@ 0x40
 800abb2:	4082      	lsls	r2, r0
 800abb4:	4313      	orrs	r3, r2
 800abb6:	3401      	adds	r4, #1
 800abb8:	9304      	str	r3, [sp, #16]
 800abba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abbe:	4829      	ldr	r0, [pc, #164]	@ (800ac64 <_vfiprintf_r+0x220>)
 800abc0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800abc4:	2206      	movs	r2, #6
 800abc6:	f7f5 fb23 	bl	8000210 <memchr>
 800abca:	2800      	cmp	r0, #0
 800abcc:	d03f      	beq.n	800ac4e <_vfiprintf_r+0x20a>
 800abce:	4b26      	ldr	r3, [pc, #152]	@ (800ac68 <_vfiprintf_r+0x224>)
 800abd0:	bb1b      	cbnz	r3, 800ac1a <_vfiprintf_r+0x1d6>
 800abd2:	9b03      	ldr	r3, [sp, #12]
 800abd4:	3307      	adds	r3, #7
 800abd6:	f023 0307 	bic.w	r3, r3, #7
 800abda:	3308      	adds	r3, #8
 800abdc:	9303      	str	r3, [sp, #12]
 800abde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abe0:	443b      	add	r3, r7
 800abe2:	9309      	str	r3, [sp, #36]	@ 0x24
 800abe4:	e76a      	b.n	800aabc <_vfiprintf_r+0x78>
 800abe6:	fb0c 3202 	mla	r2, ip, r2, r3
 800abea:	460c      	mov	r4, r1
 800abec:	2001      	movs	r0, #1
 800abee:	e7a8      	b.n	800ab42 <_vfiprintf_r+0xfe>
 800abf0:	2300      	movs	r3, #0
 800abf2:	3401      	adds	r4, #1
 800abf4:	9305      	str	r3, [sp, #20]
 800abf6:	4619      	mov	r1, r3
 800abf8:	f04f 0c0a 	mov.w	ip, #10
 800abfc:	4620      	mov	r0, r4
 800abfe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac02:	3a30      	subs	r2, #48	@ 0x30
 800ac04:	2a09      	cmp	r2, #9
 800ac06:	d903      	bls.n	800ac10 <_vfiprintf_r+0x1cc>
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d0c6      	beq.n	800ab9a <_vfiprintf_r+0x156>
 800ac0c:	9105      	str	r1, [sp, #20]
 800ac0e:	e7c4      	b.n	800ab9a <_vfiprintf_r+0x156>
 800ac10:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac14:	4604      	mov	r4, r0
 800ac16:	2301      	movs	r3, #1
 800ac18:	e7f0      	b.n	800abfc <_vfiprintf_r+0x1b8>
 800ac1a:	ab03      	add	r3, sp, #12
 800ac1c:	9300      	str	r3, [sp, #0]
 800ac1e:	462a      	mov	r2, r5
 800ac20:	4b12      	ldr	r3, [pc, #72]	@ (800ac6c <_vfiprintf_r+0x228>)
 800ac22:	a904      	add	r1, sp, #16
 800ac24:	4630      	mov	r0, r6
 800ac26:	f7fb fe83 	bl	8006930 <_printf_float>
 800ac2a:	4607      	mov	r7, r0
 800ac2c:	1c78      	adds	r0, r7, #1
 800ac2e:	d1d6      	bne.n	800abde <_vfiprintf_r+0x19a>
 800ac30:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ac32:	07d9      	lsls	r1, r3, #31
 800ac34:	d405      	bmi.n	800ac42 <_vfiprintf_r+0x1fe>
 800ac36:	89ab      	ldrh	r3, [r5, #12]
 800ac38:	059a      	lsls	r2, r3, #22
 800ac3a:	d402      	bmi.n	800ac42 <_vfiprintf_r+0x1fe>
 800ac3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ac3e:	f7fc fe1b 	bl	8007878 <__retarget_lock_release_recursive>
 800ac42:	89ab      	ldrh	r3, [r5, #12]
 800ac44:	065b      	lsls	r3, r3, #25
 800ac46:	f53f af1f 	bmi.w	800aa88 <_vfiprintf_r+0x44>
 800ac4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ac4c:	e71e      	b.n	800aa8c <_vfiprintf_r+0x48>
 800ac4e:	ab03      	add	r3, sp, #12
 800ac50:	9300      	str	r3, [sp, #0]
 800ac52:	462a      	mov	r2, r5
 800ac54:	4b05      	ldr	r3, [pc, #20]	@ (800ac6c <_vfiprintf_r+0x228>)
 800ac56:	a904      	add	r1, sp, #16
 800ac58:	4630      	mov	r0, r6
 800ac5a:	f7fc f901 	bl	8006e60 <_printf_i>
 800ac5e:	e7e4      	b.n	800ac2a <_vfiprintf_r+0x1e6>
 800ac60:	0800b359 	.word	0x0800b359
 800ac64:	0800b363 	.word	0x0800b363
 800ac68:	08006931 	.word	0x08006931
 800ac6c:	0800aa21 	.word	0x0800aa21
 800ac70:	0800b35f 	.word	0x0800b35f

0800ac74 <__swbuf_r>:
 800ac74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac76:	460e      	mov	r6, r1
 800ac78:	4614      	mov	r4, r2
 800ac7a:	4605      	mov	r5, r0
 800ac7c:	b118      	cbz	r0, 800ac86 <__swbuf_r+0x12>
 800ac7e:	6a03      	ldr	r3, [r0, #32]
 800ac80:	b90b      	cbnz	r3, 800ac86 <__swbuf_r+0x12>
 800ac82:	f7fc fcad 	bl	80075e0 <__sinit>
 800ac86:	69a3      	ldr	r3, [r4, #24]
 800ac88:	60a3      	str	r3, [r4, #8]
 800ac8a:	89a3      	ldrh	r3, [r4, #12]
 800ac8c:	071a      	lsls	r2, r3, #28
 800ac8e:	d501      	bpl.n	800ac94 <__swbuf_r+0x20>
 800ac90:	6923      	ldr	r3, [r4, #16]
 800ac92:	b943      	cbnz	r3, 800aca6 <__swbuf_r+0x32>
 800ac94:	4621      	mov	r1, r4
 800ac96:	4628      	mov	r0, r5
 800ac98:	f000 f82a 	bl	800acf0 <__swsetup_r>
 800ac9c:	b118      	cbz	r0, 800aca6 <__swbuf_r+0x32>
 800ac9e:	f04f 37ff 	mov.w	r7, #4294967295
 800aca2:	4638      	mov	r0, r7
 800aca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aca6:	6823      	ldr	r3, [r4, #0]
 800aca8:	6922      	ldr	r2, [r4, #16]
 800acaa:	1a98      	subs	r0, r3, r2
 800acac:	6963      	ldr	r3, [r4, #20]
 800acae:	b2f6      	uxtb	r6, r6
 800acb0:	4283      	cmp	r3, r0
 800acb2:	4637      	mov	r7, r6
 800acb4:	dc05      	bgt.n	800acc2 <__swbuf_r+0x4e>
 800acb6:	4621      	mov	r1, r4
 800acb8:	4628      	mov	r0, r5
 800acba:	f7ff fa53 	bl	800a164 <_fflush_r>
 800acbe:	2800      	cmp	r0, #0
 800acc0:	d1ed      	bne.n	800ac9e <__swbuf_r+0x2a>
 800acc2:	68a3      	ldr	r3, [r4, #8]
 800acc4:	3b01      	subs	r3, #1
 800acc6:	60a3      	str	r3, [r4, #8]
 800acc8:	6823      	ldr	r3, [r4, #0]
 800acca:	1c5a      	adds	r2, r3, #1
 800accc:	6022      	str	r2, [r4, #0]
 800acce:	701e      	strb	r6, [r3, #0]
 800acd0:	6962      	ldr	r2, [r4, #20]
 800acd2:	1c43      	adds	r3, r0, #1
 800acd4:	429a      	cmp	r2, r3
 800acd6:	d004      	beq.n	800ace2 <__swbuf_r+0x6e>
 800acd8:	89a3      	ldrh	r3, [r4, #12]
 800acda:	07db      	lsls	r3, r3, #31
 800acdc:	d5e1      	bpl.n	800aca2 <__swbuf_r+0x2e>
 800acde:	2e0a      	cmp	r6, #10
 800ace0:	d1df      	bne.n	800aca2 <__swbuf_r+0x2e>
 800ace2:	4621      	mov	r1, r4
 800ace4:	4628      	mov	r0, r5
 800ace6:	f7ff fa3d 	bl	800a164 <_fflush_r>
 800acea:	2800      	cmp	r0, #0
 800acec:	d0d9      	beq.n	800aca2 <__swbuf_r+0x2e>
 800acee:	e7d6      	b.n	800ac9e <__swbuf_r+0x2a>

0800acf0 <__swsetup_r>:
 800acf0:	b538      	push	{r3, r4, r5, lr}
 800acf2:	4b29      	ldr	r3, [pc, #164]	@ (800ad98 <__swsetup_r+0xa8>)
 800acf4:	4605      	mov	r5, r0
 800acf6:	6818      	ldr	r0, [r3, #0]
 800acf8:	460c      	mov	r4, r1
 800acfa:	b118      	cbz	r0, 800ad04 <__swsetup_r+0x14>
 800acfc:	6a03      	ldr	r3, [r0, #32]
 800acfe:	b90b      	cbnz	r3, 800ad04 <__swsetup_r+0x14>
 800ad00:	f7fc fc6e 	bl	80075e0 <__sinit>
 800ad04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad08:	0719      	lsls	r1, r3, #28
 800ad0a:	d422      	bmi.n	800ad52 <__swsetup_r+0x62>
 800ad0c:	06da      	lsls	r2, r3, #27
 800ad0e:	d407      	bmi.n	800ad20 <__swsetup_r+0x30>
 800ad10:	2209      	movs	r2, #9
 800ad12:	602a      	str	r2, [r5, #0]
 800ad14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ad18:	81a3      	strh	r3, [r4, #12]
 800ad1a:	f04f 30ff 	mov.w	r0, #4294967295
 800ad1e:	e033      	b.n	800ad88 <__swsetup_r+0x98>
 800ad20:	0758      	lsls	r0, r3, #29
 800ad22:	d512      	bpl.n	800ad4a <__swsetup_r+0x5a>
 800ad24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ad26:	b141      	cbz	r1, 800ad3a <__swsetup_r+0x4a>
 800ad28:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ad2c:	4299      	cmp	r1, r3
 800ad2e:	d002      	beq.n	800ad36 <__swsetup_r+0x46>
 800ad30:	4628      	mov	r0, r5
 800ad32:	f7fd fc05 	bl	8008540 <_free_r>
 800ad36:	2300      	movs	r3, #0
 800ad38:	6363      	str	r3, [r4, #52]	@ 0x34
 800ad3a:	89a3      	ldrh	r3, [r4, #12]
 800ad3c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ad40:	81a3      	strh	r3, [r4, #12]
 800ad42:	2300      	movs	r3, #0
 800ad44:	6063      	str	r3, [r4, #4]
 800ad46:	6923      	ldr	r3, [r4, #16]
 800ad48:	6023      	str	r3, [r4, #0]
 800ad4a:	89a3      	ldrh	r3, [r4, #12]
 800ad4c:	f043 0308 	orr.w	r3, r3, #8
 800ad50:	81a3      	strh	r3, [r4, #12]
 800ad52:	6923      	ldr	r3, [r4, #16]
 800ad54:	b94b      	cbnz	r3, 800ad6a <__swsetup_r+0x7a>
 800ad56:	89a3      	ldrh	r3, [r4, #12]
 800ad58:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ad5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ad60:	d003      	beq.n	800ad6a <__swsetup_r+0x7a>
 800ad62:	4621      	mov	r1, r4
 800ad64:	4628      	mov	r0, r5
 800ad66:	f000 f883 	bl	800ae70 <__smakebuf_r>
 800ad6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad6e:	f013 0201 	ands.w	r2, r3, #1
 800ad72:	d00a      	beq.n	800ad8a <__swsetup_r+0x9a>
 800ad74:	2200      	movs	r2, #0
 800ad76:	60a2      	str	r2, [r4, #8]
 800ad78:	6962      	ldr	r2, [r4, #20]
 800ad7a:	4252      	negs	r2, r2
 800ad7c:	61a2      	str	r2, [r4, #24]
 800ad7e:	6922      	ldr	r2, [r4, #16]
 800ad80:	b942      	cbnz	r2, 800ad94 <__swsetup_r+0xa4>
 800ad82:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ad86:	d1c5      	bne.n	800ad14 <__swsetup_r+0x24>
 800ad88:	bd38      	pop	{r3, r4, r5, pc}
 800ad8a:	0799      	lsls	r1, r3, #30
 800ad8c:	bf58      	it	pl
 800ad8e:	6962      	ldrpl	r2, [r4, #20]
 800ad90:	60a2      	str	r2, [r4, #8]
 800ad92:	e7f4      	b.n	800ad7e <__swsetup_r+0x8e>
 800ad94:	2000      	movs	r0, #0
 800ad96:	e7f7      	b.n	800ad88 <__swsetup_r+0x98>
 800ad98:	2000001c 	.word	0x2000001c

0800ad9c <_raise_r>:
 800ad9c:	291f      	cmp	r1, #31
 800ad9e:	b538      	push	{r3, r4, r5, lr}
 800ada0:	4605      	mov	r5, r0
 800ada2:	460c      	mov	r4, r1
 800ada4:	d904      	bls.n	800adb0 <_raise_r+0x14>
 800ada6:	2316      	movs	r3, #22
 800ada8:	6003      	str	r3, [r0, #0]
 800adaa:	f04f 30ff 	mov.w	r0, #4294967295
 800adae:	bd38      	pop	{r3, r4, r5, pc}
 800adb0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800adb2:	b112      	cbz	r2, 800adba <_raise_r+0x1e>
 800adb4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800adb8:	b94b      	cbnz	r3, 800adce <_raise_r+0x32>
 800adba:	4628      	mov	r0, r5
 800adbc:	f000 f830 	bl	800ae20 <_getpid_r>
 800adc0:	4622      	mov	r2, r4
 800adc2:	4601      	mov	r1, r0
 800adc4:	4628      	mov	r0, r5
 800adc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800adca:	f000 b817 	b.w	800adfc <_kill_r>
 800adce:	2b01      	cmp	r3, #1
 800add0:	d00a      	beq.n	800ade8 <_raise_r+0x4c>
 800add2:	1c59      	adds	r1, r3, #1
 800add4:	d103      	bne.n	800adde <_raise_r+0x42>
 800add6:	2316      	movs	r3, #22
 800add8:	6003      	str	r3, [r0, #0]
 800adda:	2001      	movs	r0, #1
 800addc:	e7e7      	b.n	800adae <_raise_r+0x12>
 800adde:	2100      	movs	r1, #0
 800ade0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ade4:	4620      	mov	r0, r4
 800ade6:	4798      	blx	r3
 800ade8:	2000      	movs	r0, #0
 800adea:	e7e0      	b.n	800adae <_raise_r+0x12>

0800adec <raise>:
 800adec:	4b02      	ldr	r3, [pc, #8]	@ (800adf8 <raise+0xc>)
 800adee:	4601      	mov	r1, r0
 800adf0:	6818      	ldr	r0, [r3, #0]
 800adf2:	f7ff bfd3 	b.w	800ad9c <_raise_r>
 800adf6:	bf00      	nop
 800adf8:	2000001c 	.word	0x2000001c

0800adfc <_kill_r>:
 800adfc:	b538      	push	{r3, r4, r5, lr}
 800adfe:	4d07      	ldr	r5, [pc, #28]	@ (800ae1c <_kill_r+0x20>)
 800ae00:	2300      	movs	r3, #0
 800ae02:	4604      	mov	r4, r0
 800ae04:	4608      	mov	r0, r1
 800ae06:	4611      	mov	r1, r2
 800ae08:	602b      	str	r3, [r5, #0]
 800ae0a:	f7f6 fc25 	bl	8001658 <_kill>
 800ae0e:	1c43      	adds	r3, r0, #1
 800ae10:	d102      	bne.n	800ae18 <_kill_r+0x1c>
 800ae12:	682b      	ldr	r3, [r5, #0]
 800ae14:	b103      	cbz	r3, 800ae18 <_kill_r+0x1c>
 800ae16:	6023      	str	r3, [r4, #0]
 800ae18:	bd38      	pop	{r3, r4, r5, pc}
 800ae1a:	bf00      	nop
 800ae1c:	200043b8 	.word	0x200043b8

0800ae20 <_getpid_r>:
 800ae20:	f7f6 bc12 	b.w	8001648 <_getpid>

0800ae24 <__swhatbuf_r>:
 800ae24:	b570      	push	{r4, r5, r6, lr}
 800ae26:	460c      	mov	r4, r1
 800ae28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae2c:	2900      	cmp	r1, #0
 800ae2e:	b096      	sub	sp, #88	@ 0x58
 800ae30:	4615      	mov	r5, r2
 800ae32:	461e      	mov	r6, r3
 800ae34:	da0d      	bge.n	800ae52 <__swhatbuf_r+0x2e>
 800ae36:	89a3      	ldrh	r3, [r4, #12]
 800ae38:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ae3c:	f04f 0100 	mov.w	r1, #0
 800ae40:	bf14      	ite	ne
 800ae42:	2340      	movne	r3, #64	@ 0x40
 800ae44:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ae48:	2000      	movs	r0, #0
 800ae4a:	6031      	str	r1, [r6, #0]
 800ae4c:	602b      	str	r3, [r5, #0]
 800ae4e:	b016      	add	sp, #88	@ 0x58
 800ae50:	bd70      	pop	{r4, r5, r6, pc}
 800ae52:	466a      	mov	r2, sp
 800ae54:	f000 f848 	bl	800aee8 <_fstat_r>
 800ae58:	2800      	cmp	r0, #0
 800ae5a:	dbec      	blt.n	800ae36 <__swhatbuf_r+0x12>
 800ae5c:	9901      	ldr	r1, [sp, #4]
 800ae5e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ae62:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ae66:	4259      	negs	r1, r3
 800ae68:	4159      	adcs	r1, r3
 800ae6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ae6e:	e7eb      	b.n	800ae48 <__swhatbuf_r+0x24>

0800ae70 <__smakebuf_r>:
 800ae70:	898b      	ldrh	r3, [r1, #12]
 800ae72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ae74:	079d      	lsls	r5, r3, #30
 800ae76:	4606      	mov	r6, r0
 800ae78:	460c      	mov	r4, r1
 800ae7a:	d507      	bpl.n	800ae8c <__smakebuf_r+0x1c>
 800ae7c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ae80:	6023      	str	r3, [r4, #0]
 800ae82:	6123      	str	r3, [r4, #16]
 800ae84:	2301      	movs	r3, #1
 800ae86:	6163      	str	r3, [r4, #20]
 800ae88:	b003      	add	sp, #12
 800ae8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae8c:	ab01      	add	r3, sp, #4
 800ae8e:	466a      	mov	r2, sp
 800ae90:	f7ff ffc8 	bl	800ae24 <__swhatbuf_r>
 800ae94:	9f00      	ldr	r7, [sp, #0]
 800ae96:	4605      	mov	r5, r0
 800ae98:	4639      	mov	r1, r7
 800ae9a:	4630      	mov	r0, r6
 800ae9c:	f7fd fbc4 	bl	8008628 <_malloc_r>
 800aea0:	b948      	cbnz	r0, 800aeb6 <__smakebuf_r+0x46>
 800aea2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aea6:	059a      	lsls	r2, r3, #22
 800aea8:	d4ee      	bmi.n	800ae88 <__smakebuf_r+0x18>
 800aeaa:	f023 0303 	bic.w	r3, r3, #3
 800aeae:	f043 0302 	orr.w	r3, r3, #2
 800aeb2:	81a3      	strh	r3, [r4, #12]
 800aeb4:	e7e2      	b.n	800ae7c <__smakebuf_r+0xc>
 800aeb6:	89a3      	ldrh	r3, [r4, #12]
 800aeb8:	6020      	str	r0, [r4, #0]
 800aeba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aebe:	81a3      	strh	r3, [r4, #12]
 800aec0:	9b01      	ldr	r3, [sp, #4]
 800aec2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800aec6:	b15b      	cbz	r3, 800aee0 <__smakebuf_r+0x70>
 800aec8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aecc:	4630      	mov	r0, r6
 800aece:	f000 f81d 	bl	800af0c <_isatty_r>
 800aed2:	b128      	cbz	r0, 800aee0 <__smakebuf_r+0x70>
 800aed4:	89a3      	ldrh	r3, [r4, #12]
 800aed6:	f023 0303 	bic.w	r3, r3, #3
 800aeda:	f043 0301 	orr.w	r3, r3, #1
 800aede:	81a3      	strh	r3, [r4, #12]
 800aee0:	89a3      	ldrh	r3, [r4, #12]
 800aee2:	431d      	orrs	r5, r3
 800aee4:	81a5      	strh	r5, [r4, #12]
 800aee6:	e7cf      	b.n	800ae88 <__smakebuf_r+0x18>

0800aee8 <_fstat_r>:
 800aee8:	b538      	push	{r3, r4, r5, lr}
 800aeea:	4d07      	ldr	r5, [pc, #28]	@ (800af08 <_fstat_r+0x20>)
 800aeec:	2300      	movs	r3, #0
 800aeee:	4604      	mov	r4, r0
 800aef0:	4608      	mov	r0, r1
 800aef2:	4611      	mov	r1, r2
 800aef4:	602b      	str	r3, [r5, #0]
 800aef6:	f7f6 fc0f 	bl	8001718 <_fstat>
 800aefa:	1c43      	adds	r3, r0, #1
 800aefc:	d102      	bne.n	800af04 <_fstat_r+0x1c>
 800aefe:	682b      	ldr	r3, [r5, #0]
 800af00:	b103      	cbz	r3, 800af04 <_fstat_r+0x1c>
 800af02:	6023      	str	r3, [r4, #0]
 800af04:	bd38      	pop	{r3, r4, r5, pc}
 800af06:	bf00      	nop
 800af08:	200043b8 	.word	0x200043b8

0800af0c <_isatty_r>:
 800af0c:	b538      	push	{r3, r4, r5, lr}
 800af0e:	4d06      	ldr	r5, [pc, #24]	@ (800af28 <_isatty_r+0x1c>)
 800af10:	2300      	movs	r3, #0
 800af12:	4604      	mov	r4, r0
 800af14:	4608      	mov	r0, r1
 800af16:	602b      	str	r3, [r5, #0]
 800af18:	f7f6 fc0e 	bl	8001738 <_isatty>
 800af1c:	1c43      	adds	r3, r0, #1
 800af1e:	d102      	bne.n	800af26 <_isatty_r+0x1a>
 800af20:	682b      	ldr	r3, [r5, #0]
 800af22:	b103      	cbz	r3, 800af26 <_isatty_r+0x1a>
 800af24:	6023      	str	r3, [r4, #0]
 800af26:	bd38      	pop	{r3, r4, r5, pc}
 800af28:	200043b8 	.word	0x200043b8

0800af2c <_init>:
 800af2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af2e:	bf00      	nop
 800af30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af32:	bc08      	pop	{r3}
 800af34:	469e      	mov	lr, r3
 800af36:	4770      	bx	lr

0800af38 <_fini>:
 800af38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af3a:	bf00      	nop
 800af3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af3e:	bc08      	pop	{r3}
 800af40:	469e      	mov	lr, r3
 800af42:	4770      	bx	lr
